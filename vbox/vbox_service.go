// Code generated by gowsdl DO NOT EDIT.

package vbox

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

// AnyType represents an XML element with arbitrary content.
type AnyType struct {
	InnerXML string `xml:",innerxml"`
}

// AnyURI represents a URI, as defined in RFC 3986.
type AnyURI string

// NCName represents an XML non-colonized name.
type NCName string

// SettingsVersion is an enumeration of available settings versions.
type SettingsVersion string

// Available settings versions.
const (
	SettingsVersionNull     SettingsVersion = "Null"
	SettingsVersionV1_0     SettingsVersion = "v1_0"
	SettingsVersionV1_1     SettingsVersion = "v1_1"
	SettingsVersionV1_2     SettingsVersion = "v1_2"
	SettingsVersionV1_3pre  SettingsVersion = "v1_3pre"
	SettingsVersionV1_3     SettingsVersion = "v1_3"
	SettingsVersionV1_4     SettingsVersion = "v1_4"
	SettingsVersionV1_5     SettingsVersion = "v1_5"
	SettingsVersionV1_6     SettingsVersion = "v1_6"
	SettingsVersionV1_7     SettingsVersion = "v1_7"
	SettingsVersionV1_8     SettingsVersion = "v1_8"
	SettingsVersionV1_9     SettingsVersion = "v1_9"
	SettingsVersionV1_10    SettingsVersion = "v1_10"
	SettingsVersionV1_11    SettingsVersion = "v1_11"
	SettingsVersionV1_12    SettingsVersion = "v1_12"
	SettingsVersionV1_13    SettingsVersion = "v1_13"
	SettingsVersionV1_14    SettingsVersion = "v1_14"
	SettingsVersionV1_15    SettingsVersion = "v1_15"
	SettingsVersionV1_16    SettingsVersion = "v1_16"
	SettingsVersionV1_17    SettingsVersion = "v1_17"
	SettingsVersionV1_18    SettingsVersion = "v1_18"
	SettingsVersionV1_19    SettingsVersion = "v1_19"
	SettingsVersionFuture   SettingsVersion = "Future"
)

// AccessMode is an enumeration of available access modes for virtual machine attachments.
type AccessMode string

// Available access modes.
const (
	AccessModeReadOnly  AccessMode = "ReadOnly"
	AccessModeReadWrite AccessMode = "ReadWrite"
)

// MachineState is an enumeration of available states for virtual machines.
type MachineState string

// Available machine states.
const (
	MachineStateNull                     MachineState = "Null"
	MachineStatePoweredOff               MachineState = "PoweredOff"
	MachineStateSaved                    MachineState = "Saved"
	MachineStateTeleported               MachineState = "Teleported"
	MachineStateAborted                  MachineState = "Aborted"
	MachineStateAbortedSaved             MachineState = "AbortedSaved"
	MachineStateRunning                  MachineState = "Running"
	MachineStatePaused                   MachineState = "Paused"
	MachineStateStuck                    MachineState = "Stuck"
	MachineStateTeleporting              MachineState = "Teleporting"
	MachineStateLiveSnapshotting         MachineState = "LiveSnapshotting"
	MachineStateStarting                 MachineState = "Starting"
	MachineStateStopping                 MachineState = "Stopping"
	MachineStateSaving                   MachineState = "Saving"
	MachineStateRestoring                MachineState = "Restoring"
	MachineStateTeleportingPausedVM      MachineState = "TeleportingPausedVM"
	MachineStateTeleportingIn            MachineState = "TeleportingIn"
	MachineStateDeletingSnapshotOnline   MachineState = "DeletingSnapshotOnline"
	MachineStateDeletingSnapshotPaused   MachineState = "DeletingSnapshotPaused"
	MachineStateOnlineSnapshotting       MachineState = "OnlineSnapshotting"
	MachineStateRestoringSnapshot        MachineState = "RestoringSnapshot"
	MachineStateDeletingSnapshot         MachineState = "DeletingSnapshot"
	MachineStateSettingUp                MachineState = "SettingUp"
	MachineStateSnapshotting             MachineState = "Snapshotting"
	MachineStateFirstOnline              MachineState = "FirstOnline"
	MachineStateLastOnline               MachineState = "LastOnline"
	MachineStateFirstTransient           MachineState = "FirstTransient"
	MachineStateLastTransient            MachineState = "LastTransient"
)

// SessionState is an enumeration of available states for virtual machine sessions.
type SessionState string

// Available session states.
const (
	SessionStateNull SessionState = "Null"
	SessionStateUnlocked SessionState = "Unlocked"
	SessionStateLocked SessionState = "Locked"
	SessionStateSpawning SessionState = "Spawning"
	SessionStateUnlocking SessionState = "Unlocking"
)

// CPUArchitecture is an enumeration of available CPU architectures.
type CPUArchitecture string

// Available CPU architectures.
const (
	CPUArchitectureAny CPUArchitecture = "Any"
	CPUArchitectureX86 CPUArchitecture = "x86"
	CPUArchitectureAMD64 CPUArchitecture = "AMD64"
)

// CPUPropertyType is an enumeration of available CPU property types.
type CPUPropertyType string

// Available CPU property types.
const (
	CPUPropertyTypeNull CPUPropertyType = "Null"
	CPUPropertyTypePAE CPUPropertyType = "PAE"
	CPUPropertyTypeLongMode CPUPropertyType = "LongMode"
	CPUPropertyTypeTripleFaultReset CPUPropertyType = "TripleFaultReset"
	CPUPropertyTypeAPIC CPUPropertyType = "APIC"
	CPUPropertyTypeX2APIC CPUPropertyType = "X2APIC"
	CPUPropertyTypeIBPBOnVMExit CPUPropertyType = "IBPBOnVMExit"
	CPUPropertyTypeIBPBOnVMEntry CPUPropertyType = "IBPBOnVMEntry"
	CPUPropertyTypeHWVirt CPUPropertyType = "HWVirt"
	CPUPropertyTypeSpecCtrl CPUPropertyType = "SpecCtrl"
	CPUPropertyTypeSpecCtrlByHost CPUPropertyType = "SpecCtrlByHost"
	CPUPropertyTypeL1DFlushOnEMTScheduling CPUPropertyType = "L1DFlushOnEMTScheduling"
	CPUPropertyTypeL1DFlushOnVMEntry CPUPropertyType = "L1DFlushOnVMEntry"
	CPUPropertyTypeMDSClearOnEMTScheduling CPUPropertyType = "MDSClearOnEMTScheduling"
	CPUPropertyTypeMDSClearOnVMEntry CPUPropertyType = "MDSClearOnVMEntry"
)

// HWVirtExPropertyType is an enumeration of available hardware virtualization property types.
type HWVirtExPropertyType string

// Available hardware virtualization property types.
const (
	HWVirtExPropertyTypeNull HWVirtExPropertyType = "Null"
	HWVirtExPropertyTypeEnabled HWVirtExPropertyType = "Enabled"
	HWVirtExPropertyTypeVPID HWVirtExPropertyType = "VPID"
	HWVirtExPropertyTypeNestedPaging HWVirtExPropertyType = "NestedPaging"
	HWVirtExPropertyTypeUnrestrictedExecution HWVirtExPropertyType = "UnrestrictedExecution"
	HWVirtExPropertyTypeLargePages HWVirtExPropertyType = "LargePages"
	HWVirtExPropertyTypeForce HWVirtExPropertyType = "Force"
	HWVirtExPropertyTypeUseNativeApi HWVirtExPropertyType = "UseNativeApi"
	HWVirtExPropertyTypeVirtVmsaveVmload HWVirtExPropertyType = "VirtVmsaveVmload"
)

// ParavirtProvider is an enumeration of available paravirtualization providers.
type ParavirtProvider string

// Available paravirtualization providers.
const (
	ParavirtProviderNone ParavirtProvider = "None"
	ParavirtProviderDefault ParavirtProvider = "Default"
	ParavirtProviderLegacy ParavirtProvider = "Legacy"
	ParavirtProviderMinimal ParavirtProvider = "Minimal"
	ParavirtProviderHyperV ParavirtProvider = "HyperV"
	ParavirtProviderKVM ParavirtProvider = "KVM"
)

// LockType is an enumeration of available lock types for virtual machine attachments.
type LockType string

// Available lock types.
const (
	LockTypeNull LockType = "Null"
	LockTypeShared LockType = "Shared"
	LockTypeWrite LockType = "Write"
	LockTypeVM LockType = "VM"
)

// SessionType is an enumeration of available session types for virtual machine sessions.
type SessionType string

// Available session types.
const (
	SessionTypeNull SessionType = "Null"
	SessionTypeWriteLock SessionType = "WriteLock"
	SessionTypeRemote SessionType = "Remote"
	SessionTypeShared SessionType = "Shared"
)

// DeviceType is an enumeration of available device types for virtual machine attachments.
type DeviceType string

// Available device types.
const (
	DeviceTypeNull DeviceType = "Null"
	DeviceTypeFloppy DeviceType = "Floppy"
	DeviceTypeDVD DeviceType = "DVD"
	DeviceTypeHardDisk DeviceType = "HardDisk"
	DeviceTypeNetwork DeviceType = "Network"
	DeviceTypeUSB DeviceType = "USB"
	DeviceTypeSharedFolder DeviceType = "SharedFolder"
	DeviceTypeGraphics3D DeviceType = "Graphics3D"
	DeviceTypeEnd DeviceType = "End"
)

// DeviceActivity is an enumeration of available states for device activity.
type DeviceActivity string

// Available states for device activity.
const (
	DeviceActivityNull    DeviceActivity = "Null"
	DeviceActivityIdle    DeviceActivity = "Idle"
	DeviceActivityReading DeviceActivity = "Reading"
	DeviceActivityWriting DeviceActivity = "Writing"
)

// ClipboardMode is an enumeration of available clipboard modes.
type ClipboardMode string

// Available clipboard modes.
const (
	ClipboardModeDisabled        ClipboardMode = "Disabled"
	ClipboardModeHostToGuest     ClipboardMode = "HostToGuest"
	ClipboardModeGuestToHost     ClipboardMode = "GuestToHost"
	ClipboardModeBidirectional   ClipboardMode = "Bidirectional"
)

// DnDMode is an enumeration of available drag-and-drop modes.
type DnDMode string

// Available drag-and-drop modes.
const (
	DnDModeDisabled       DnDMode = "Disabled"
	DnDModeHostToGuest    DnDMode = "HostToGuest"
	DnDModeGuestToHost    DnDMode = "GuestToHost"
	DnDModeBidirectional  DnDMode = "Bidirectional"
)

// Scope is an enumeration of available scopes for various settings.
type Scope string

// Available scopes.
const (
	ScopeGlobal  Scope = "Global"
	ScopeMachine Scope = "Machine"
	ScopeSession Scope = "Session"
)

// BIOSBootMenuMode is an enumeration of available modes for the BIOS boot menu.
type BIOSBootMenuMode string

// Available modes for the BIOS boot menu.
const (
	BIOSBootMenuModeDisabled         BIOSBootMenuMode = "Disabled"
	BIOSBootMenuModeMenuOnly         BIOSBootMenuMode = "MenuOnly"
	BIOSBootMenuModeMessageAndMenu   BIOSBootMenuMode = "MessageAndMenu"
)

// APICMode is an enumeration of available modes for the advanced programmable interrupt controller (APIC).
type APICMode string

// Available modes for the APIC.
const (
	APICModeDisabled APICMode = "Disabled"
	APICModeAPIC     APICMode = "APIC"
	APICModeX2APIC   APICMode = "X2APIC"
)

// ProcessorFeature is an enumeration of available processor features.
type ProcessorFeature string

// Available processor features.
const (
	ProcessorFeatureHWVirtEx            ProcessorFeature = "HWVirtEx"
	ProcessorFeaturePAE                 ProcessorFeature = "PAE"
	ProcessorFeatureLongMode            ProcessorFeature = "LongMode"
	ProcessorFeatureNestedPaging        ProcessorFeature = "NestedPaging"
	ProcessorFeatureUnrestrictedGuest   ProcessorFeature = "UnrestrictedGuest"
	ProcessorFeatureNestedHWVirt        ProcessorFeature = "NestedHWVirt"
	ProcessorFeatureVirtVmsaveVmload    ProcessorFeature = "VirtVmsaveVmload"
)

// FirmwareType is an enumeration of available firmware types.
type FirmwareType string

// Available firmware types.
const (
	FirmwareTypeBIOS     FirmwareType = "BIOS"
	FirmwareTypeEFI      FirmwareType = "EFI"
	FirmwareTypeEFI32    FirmwareType = "EFI32"
	FirmwareTypeEFI64    FirmwareType = "EFI64"
	FirmwareTypeEFIDUAL  FirmwareType = "EFIDUAL"
)

// PointingHIDType defines the various types of pointing devices supported by VirtualBox.
type PointingHIDType string

const (
	PointingHIDTypeNone                        PointingHIDType = "None"
	PointingHIDTypePS2Mouse                    PointingHIDType = "PS2Mouse"
	PointingHIDTypeUSBMouse                    PointingHIDType = "USBMouse"
	PointingHIDTypeUSBTablet                   PointingHIDType = "USBTablet"
	PointingHIDTypeComboMouse                  PointingHIDType = "ComboMouse"
	PointingHIDTypeUSBMultiTouch               PointingHIDType = "USBMultiTouch"
	PointingHIDTypeUSBMultiTouchScreenPlusPad  PointingHIDType = "USBMultiTouchScreenPlusPad"
)

// KeyboardHIDType defines the various types of keyboards supported by VirtualBox.
type KeyboardHIDType string

const (
	KeyboardHIDTypeNone         KeyboardHIDType = "None"
	KeyboardHIDTypePS2Keyboard  KeyboardHIDType = "PS2Keyboard"
	KeyboardHIDTypeUSBKeyboard  KeyboardHIDType = "USBKeyboard"
	KeyboardHIDTypeComboKeyboard KeyboardHIDType = "ComboKeyboard"
)

// BitmapFormat defines the various image formats supported by VirtualBox.
type BitmapFormat string

const (
	BitmapFormatOpaque BitmapFormat = "Opaque"
	BitmapFormatBGR    BitmapFormat = "BGR"
	BitmapFormatBGR0   BitmapFormat = "BGR0"
	BitmapFormatBGRA   BitmapFormat = "BGRA"
	BitmapFormatRGBA   BitmapFormat = "RGBA"
	BitmapFormatPNG    BitmapFormat = "PNG"
	BitmapFormatJPEG   BitmapFormat = "JPEG"
)

// PartitioningType defines the partitioning types supported by VirtualBox.
type PartitioningType string

const (
	PartitioningTypeMBR PartitioningType = "MBR"
	PartitioningTypeGPT PartitioningType = "GPT"
)

// PartitionType represents the type of a partition.
type PartitionType string

// Possible values for PartitionType.
const (
	PartitionTypeEmpty PartitionType = "Empty"

	PartitionTypeFAT12 PartitionType = "FAT12"

	PartitionTypeFAT16 PartitionType = "FAT16"

	PartitionTypeFAT PartitionType = "FAT"

	PartitionTypeIFS PartitionType = "IFS"

	PartitionTypeFAT32CHS PartitionType = "FAT32CHS"

	PartitionTypeFAT32LBA PartitionType = "FAT32LBA"

	PartitionTypeFAT16B PartitionType = "FAT16B"

	PartitionTypeExtended PartitionType = "Extended"

	PartitionTypeWindowsRE PartitionType = "WindowsRE"

	PartitionTypeLinuxSwapOld PartitionType = "LinuxSwapOld"

	PartitionTypeLinuxOld PartitionType = "LinuxOld"

	PartitionTypeDragonFlyBSDSlice PartitionType = "DragonFlyBSDSlice"

	PartitionTypeLinuxSwap PartitionType = "LinuxSwap"

	PartitionTypeLinux PartitionType = "Linux"

	PartitionTypeLinuxExtended PartitionType = "LinuxExtended"

	PartitionTypeLinuxLVM PartitionType = "LinuxLVM"

	PartitionTypeBSDSlice PartitionType = "BSDSlice"

	PartitionTypeAppleUFS PartitionType = "AppleUFS"

	PartitionTypeAppleHFS PartitionType = "AppleHFS"

	PartitionTypeSolaris PartitionType = "Solaris"

	PartitionTypeGPT PartitionType = "GPT"

	PartitionTypeEFI PartitionType = "EFI"

	PartitionTypeUnknown PartitionType = "Unknown"

	PartitionTypeMBR PartitionType = "MBR"

	PartitionTypeIFFS PartitionType = "iFFS"

	PartitionTypeSonyBoot PartitionType = "SonyBoot"

	PartitionTypeLenovoBoot PartitionType = "LenovoBoot"

	PartitionTypeWindowsMSR PartitionType = "WindowsMSR"

	PartitionTypeWindowsBasicData PartitionType = "WindowsBasicData"

	PartitionTypeWindowsLDMMeta PartitionType = "WindowsLDMMeta"

	PartitionTypeWindowsLDMData PartitionType = "WindowsLDMData"

	PartitionTypeWindowsRecovery PartitionType = "WindowsRecovery"

	PartitionTypeWindowsStorageSpaces PartitionType = "WindowsStorageSpaces"

	PartitionTypeWindowsStorageReplica PartitionType = "WindowsStorageReplica"

	PartitionTypeIBMGPFS PartitionType = "IBMGPFS"

	PartitionTypeLinuxData PartitionType = "LinuxData"

	PartitionTypeLinuxRAID PartitionType = "LinuxRAID"

	PartitionTypeLinuxRootX86 PartitionType = "LinuxRootX86"

	PartitionTypeLinuxRootAMD64 PartitionType = "LinuxRootAMD64"

	PartitionTypeLinuxRootARM32 PartitionType = "LinuxRootARM32"

	PartitionTypeLinuxRootARM64 PartitionType = "LinuxRootARM64"

	PartitionTypeLinuxHome PartitionType = "LinuxHome"

	PartitionTypeLinuxSrv PartitionType = "LinuxSrv"

	PartitionTypeLinuxPlainDmCrypt PartitionType = "LinuxPlainDmCrypt"

	PartitionTypeLinuxLUKS PartitionType = "LinuxLUKS"

	PartitionTypeLinuxReserved PartitionType = "LinuxReserved"

	PartitionTypeFreeBSDBoot PartitionType = "FreeBSDBoot"

	PartitionTypeFreeBSDData PartitionType = "FreeBSDData"

	PartitionTypeFreeBSDSwap PartitionType = "FreeBSDSwap"

	PartitionTypeFreeBSDUFS PartitionType = "FreeBSDUFS"

	PartitionTypeFreeBSDVinum PartitionType = "FreeBSDVinum"

	PartitionTypeFreeBSDZFS PartitionType = "FreeBSDZFS"

	PartitionTypeFreeBSDUnknown PartitionType = "FreeBSDUnknown"

	PartitionTypeAppleHFSPlus PartitionType = "AppleHFSPlus"

	PartitionTypeAppleAPFS PartitionType = "AppleAPFS"

	PartitionTypeAppleRAID PartitionType = "AppleRAID"

	PartitionTypeAppleRAIDOffline PartitionType = "AppleRAIDOffline"

	PartitionTypeAppleBoot PartitionType = "AppleBoot"

	PartitionTypeAppleLabel PartitionType = "AppleLabel"

	PartitionTypeAppleTvRecovery PartitionType = "AppleTvRecovery"

	PartitionTypeAppleCoreStorage PartitionType = "AppleCoreStorage"

	PartitionTypeSoftRAIDStatus PartitionType = "SoftRAIDStatus"

	PartitionTypeSoftRAIDScratch PartitionType = "SoftRAIDScratch"

	PartitionTypeSoftRAIDVolume PartitionType = "SoftRAIDVolume"

	PartitionTypeSoftRAIDCache PartitionType = "SoftRAIDCache"

	PartitionTypeAppleUnknown PartitionType = "AppleUnknown"

	PartitionTypeSolarisBoot PartitionType = "SolarisBoot"

	PartitionTypeSolarisRoot PartitionType = "SolarisRoot"

	PartitionTypeSolarisSwap PartitionType = "SolarisSwap"

	PartitionTypeSolarisBackup PartitionType = "SolarisBackup"

	PartitionTypeSolarisUsr PartitionType = "SolarisUsr"

	PartitionTypeSolarisVar PartitionType = "SolarisVar"

	PartitionTypeSolarisHome PartitionType = "SolarisHome"

	PartitionTypeSolarisAltSector PartitionType = "SolarisAltSector"

	PartitionTypeSolarisReserved PartitionType = "SolarisReserved"

	PartitionTypeSolarisUnknown PartitionType = "SolarisUnknown"

	PartitionTypeNetBSDSwap PartitionType = "NetBSDSwap"

	PartitionTypeNetBSDFFS PartitionType = "NetBSDFFS"

	PartitionTypeNetBSDLFS PartitionType = "NetBSDLFS"

	PartitionTypeNetBSDRAID PartitionType = "NetBSDRAID"

	PartitionTypeNetBSDConcatenated PartitionType = "NetBSDConcatenated"

	PartitionTypeNetBSDEncrypted PartitionType = "NetBSDEncrypted"

	PartitionTypeNetBSDUnknown PartitionType = "NetBSDUnknown"

	PartitionTypeChromeOSKernel PartitionType = "ChromeOSKernel"

	PartitionTypeChromeOSRootFS PartitionType = "ChromeOSRootFS"

	PartitionTypeChromeOSFuture PartitionType = "ChromeOSFuture"

	PartitionTypeContLnxUsr PartitionType = "ContLnxUsr"

	PartitionTypeContLnxRoot PartitionType = "ContLnxRoot"

	PartitionTypeContLnxReserved PartitionType = "ContLnxReserved"

	PartitionTypeContLnxRootRAID PartitionType = "ContLnxRootRAID"

	PartitionTypeHaikuBFS PartitionType = "HaikuBFS"

	PartitionTypeMidntBSDBoot PartitionType = "MidntBSDBoot"

	PartitionTypeMidntBSDData PartitionType = "MidntBSDData"

	PartitionTypeMidntBSDSwap PartitionType = "MidntBSDSwap"

	PartitionTypeMidntBSDUFS PartitionType = "MidntBSDUFS"

	PartitionTypeMidntBSDVium PartitionType = "MidntBSDVium"

	PartitionTypeMidntBSDZFS PartitionType = "MidntBSDZFS"

	PartitionTypeMidntBSDUnknown PartitionType = "MidntBSDUnknown"

	PartitionTypeOpenBSDData PartitionType = "OpenBSDData"

	PartitionTypeQNXPowerSafeFS PartitionType = "QNXPowerSafeFS"

	PartitionTypePlan9 PartitionType = "Plan9"

	PartitionTypeVMWareVMKCore PartitionType = "VMWareVMKCore"

	PartitionTypeVMWareVMFS PartitionType = "VMWareVMFS"

	PartitionTypeVMWareReserved PartitionType = "VMWareReserved"

	PartitionTypeVMWareUnknown PartitionType = "VMWareUnknown"

	PartitionTypeAndroidX86Bootloader PartitionType = "AndroidX86Bootloader"

	PartitionTypeAndroidX86Bootloader2 PartitionType = "AndroidX86Bootloader2"

	PartitionTypeAndroidX86Boot PartitionType = "AndroidX86Boot"

	PartitionTypeAndroidX86Recovery PartitionType = "AndroidX86Recovery"

	PartitionTypeAndroidX86Misc PartitionType = "AndroidX86Misc"

	PartitionTypeAndroidX86Metadata PartitionType = "AndroidX86Metadata"

	PartitionTypeAndroidX86System PartitionType = "AndroidX86System"

	PartitionTypeAndroidX86Cache PartitionType = "AndroidX86Cache"

	PartitionTypeAndroidX86Data PartitionType = "AndroidX86Data"

	PartitionTypeAndroidX86Persistent PartitionType = "AndroidX86Persistent"

	PartitionTypeAndroidX86Vendor PartitionType = "AndroidX86Vendor"

	PartitionTypeAndroidX86Config PartitionType = "AndroidX86Config"

	PartitionTypeAndroidX86Factory PartitionType = "AndroidX86Factory"

	PartitionTypeAndroidX86FactoryAlt PartitionType = "AndroidX86FactoryAlt"

	PartitionTypeAndroidX86Fastboot PartitionType = "AndroidX86Fastboot"

	PartitionTypeAndroidX86OEM PartitionType = "AndroidX86OEM"

	PartitionTypeAndroidARMMeta PartitionType = "AndroidARMMeta"

	PartitionTypeAndroidARMExt PartitionType = "AndroidARMExt"

	PartitionTypeONIEBoot PartitionType = "ONIEBoot"

	PartitionTypeONIEConfig PartitionType = "ONIEConfig"

	PartitionTypePowerPCPrep PartitionType = "PowerPCPrep"

	PartitionTypeXDGShrBootConfig PartitionType = "XDGShrBootConfig"

	PartitionTypeCephBlock PartitionType = "CephBlock"

	PartitionTypeCephBlockDB PartitionType = "CephBlockDB"

	PartitionTypeCephBlockDBDmc PartitionType = "CephBlockDBDmc"

	PartitionTypeCephBlockDBDmcLUKS PartitionType = "CephBlockDBDmcLUKS"

	PartitionTypeCephBlockDmc PartitionType = "CephBlockDmc"

	PartitionTypeCephBlockDmcLUKS PartitionType = "CephBlockDmcLUKS"

	PartitionTypeCephBlockWALog PartitionType = "CephBlockWALog"

	PartitionTypeCephBlockWALogDmc PartitionType = "CephBlockWALogDmc"

	PartitionTypeCephBlockWALogDmcLUKS PartitionType = "CephBlockWALogDmcLUKS"

	PartitionTypeCephDisk PartitionType = "CephDisk"

	PartitionTypeCephDiskDmc PartitionType = "CephDiskDmc"

	PartitionTypeCephJournal PartitionType = "CephJournal"

	PartitionTypeCephJournalDmc PartitionType = "CephJournalDmc"

	PartitionTypeCephJournalDmcLUKS PartitionType = "CephJournalDmcLUKS"

	PartitionTypeCephLockbox PartitionType = "CephLockbox"

	PartitionTypeCephMultipathBlock1 PartitionType = "CephMultipathBlock1"

	PartitionTypeCephMultipathBlock2 PartitionType = "CephMultipathBlock2"

	PartitionTypeCephMultipathBlockDB PartitionType = "CephMultipathBlockDB"

	PartitionTypeCephMultipathBLockWALog PartitionType = "CephMultipathBLockWALog"

	PartitionTypeCephMultipathJournal PartitionType = "CephMultipathJournal"

	PartitionTypeCephMultipathOSD PartitionType = "CephMultipathOSD"

	PartitionTypeCephOSD PartitionType = "CephOSD"

	PartitionTypeCephOSDDmc PartitionType = "CephOSDDmc"

	PartitionTypeCephOSDDmcLUKS PartitionType = "CephOSDDmcLUKS"
)

type DHCPOption string

const (
	DHCPOptionSubnetMask DHCPOption = "SubnetMask"

	DHCPOptionTimeOffset DHCPOption = "TimeOffset"

	DHCPOptionRouters DHCPOption = "Routers"

	DHCPOptionTimeServers DHCPOption = "TimeServers"

	DHCPOptionNameServers DHCPOption = "NameServers"

	DHCPOptionDomainNameServers DHCPOption = "DomainNameServers"

	DHCPOptionLogServers DHCPOption = "LogServers"

	DHCPOptionCookieServers DHCPOption = "CookieServers"

	DHCPOptionLPRServers DHCPOption = "LPRServers"

	DHCPOptionImpressServers DHCPOption = "ImpressServers"

	DHCPOptionResourseLocationServers DHCPOption = "ResourseLocationServers"

	DHCPOptionHostName DHCPOption = "HostName"

	DHCPOptionBootFileSize DHCPOption = "BootFileSize"

	DHCPOptionMeritDumpFile DHCPOption = "MeritDumpFile"

	DHCPOptionDomainName DHCPOption = "DomainName"

	DHCPOptionSwapServer DHCPOption = "SwapServer"

	DHCPOptionRootPath DHCPOption = "RootPath"

	DHCPOptionExtensionPath DHCPOption = "ExtensionPath"

	DHCPOptionIPForwarding DHCPOption = "IPForwarding"

	DHCPOptionOptNonLocalSourceRouting DHCPOption = "OptNonLocalSourceRouting"

	DHCPOptionPolicyFilter DHCPOption = "PolicyFilter"

	DHCPOptionMaxDgramReassemblySize DHCPOption = "MaxDgramReassemblySize"

	DHCPOptionDefaultIPTTL DHCPOption = "DefaultIPTTL"

	DHCPOptionPathMTUAgingTimeout DHCPOption = "PathMTUAgingTimeout"

	DHCPOptionPathMTUPlateauTable DHCPOption = "PathMTUPlateauTable"

	DHCPOptionInterfaceMTU DHCPOption = "InterfaceMTU"

	DHCPOptionAllSubnetsAreLocal DHCPOption = "AllSubnetsAreLocal"

	DHCPOptionBroadcastAddress DHCPOption = "BroadcastAddress"

	DHCPOptionPerformMaskDiscovery DHCPOption = "PerformMaskDiscovery"

	DHCPOptionMaskSupplier DHCPOption = "MaskSupplier"

	DHCPOptionPerformRouterDiscovery DHCPOption = "PerformRouterDiscovery"

	DHCPOptionRouterSolicitationAddress DHCPOption = "RouterSolicitationAddress"

	DHCPOptionStaticRoute DHCPOption = "StaticRoute"

	DHCPOptionTrailerEncapsulation DHCPOption = "TrailerEncapsulation"

	DHCPOptionARPCacheTimeout DHCPOption = "ARPCacheTimeout"

	DHCPOptionEthernetEncapsulation DHCPOption = "EthernetEncapsulation"

	DHCPOptionTCPDefaultTTL DHCPOption = "TCPDefaultTTL"

	DHCPOptionTCPKeepaliveInterval DHCPOption = "TCPKeepaliveInterval"

	DHCPOptionTCPKeepaliveGarbage DHCPOption = "TCPKeepaliveGarbage"

	DHCPOptionNISDomain DHCPOption = "NISDomain"

	DHCPOptionNISServers DHCPOption = "NISServers"

	DHCPOptionNTPServers DHCPOption = "NTPServers"

	DHCPOptionVendorSpecificInfo DHCPOption = "VendorSpecificInfo"

	DHCPOptionNetBIOSNameServers DHCPOption = "NetBIOSNameServers"

	DHCPOptionNetBIOSDatagramServers DHCPOption = "NetBIOSDatagramServers"

	DHCPOptionNetBIOSNodeType DHCPOption = "NetBIOSNodeType"

	DHCPOptionNetBIOSScope DHCPOption = "NetBIOSScope"

	DHCPOptionXWindowsFontServers DHCPOption = "XWindowsFontServers"

	DHCPOptionXWindowsDisplayManager DHCPOption = "XWindowsDisplayManager"

	DHCPOptionNetWareIPDomainName DHCPOption = "NetWareIPDomainName"

	DHCPOptionNetWareIPInformation DHCPOption = "NetWareIPInformation"

	DHCPOptionNISPlusDomain DHCPOption = "NISPlusDomain"

	DHCPOptionNISPlusServers DHCPOption = "NISPlusServers"

	DHCPOptionTFTPServerName DHCPOption = "TFTPServerName"

	DHCPOptionBootfileName DHCPOption = "BootfileName"

	DHCPOptionMobileIPHomeAgents DHCPOption = "MobileIPHomeAgents"

	DHCPOptionSMTPServers DHCPOption = "SMTPServers"

	DHCPOptionPOP3Servers DHCPOption = "POP3Servers"

	DHCPOptionNNTPServers DHCPOption = "NNTPServers"

	DHCPOptionWWWServers DHCPOption = "WWWServers"

	DHCPOptionFingerServers DHCPOption = "FingerServers"

	DHCPOptionIRCServers DHCPOption = "IRCServers"

	DHCPOptionStreetTalkServers DHCPOption = "StreetTalkServers"

	DHCPOptionSTDAServers DHCPOption = "STDAServers"

	DHCPOptionSLPDirectoryAgent DHCPOption = "SLPDirectoryAgent"

	DHCPOptionSLPServiceScope DHCPOption = "SLPServiceScope"

	DHCPOptionDomainSearch DHCPOption = "DomainSearch"
)

type DHCPOptionEncoding string

const (
	DHCPOptionEncodingNormal DHCPOptionEncoding = "Normal"

	DHCPOptionEncodingHex DHCPOptionEncoding = "Hex"
)

type DHCPConfigScope string

const (
	DHCPConfigScopeGlobal DHCPConfigScope = "Global"

	DHCPConfigScopeGroup DHCPConfigScope = "Group"

	DHCPConfigScopeMachineNIC DHCPConfigScope = "MachineNIC"

	DHCPConfigScopeMAC DHCPConfigScope = "MAC"
)

type DHCPGroupConditionType string

const (
	DHCPGroupConditionTypeMAC DHCPGroupConditionType = "MAC"

	DHCPGroupConditionTypeMACWildcard DHCPGroupConditionType = "MACWildcard"

	DHCPGroupConditionTypeVendorClassID DHCPGroupConditionType = "vendorClassID"

	DHCPGroupConditionTypeVendorClassIDWildcard DHCPGroupConditionType = "vendorClassIDWildcard"

	DHCPGroupConditionTypeUserClassID DHCPGroupConditionType = "userClassID"

	DHCPGroupConditionTypeUserClassIDWildcard DHCPGroupConditionType = "userClassIDWildcard"
)

type VFSType string

const (
	VFSTypeFile VFSType = "File"

	VFSTypeCloud VFSType = "Cloud"

	VFSTypeS3 VFSType = "S3"

	VFSTypeWebDav VFSType = "WebDav"
)

type ImportOptions string

const (
	ImportOptionsKeepAllMACs ImportOptions = "KeepAllMACs"

	ImportOptionsKeepNATMACs ImportOptions = "KeepNATMACs"

	ImportOptionsImportToVDI ImportOptions = "ImportToVDI"
)

type ExportOptions string

const (
	ExportOptionsCreateManifest ExportOptions = "CreateManifest"

	ExportOptionsExportDVDImages ExportOptions = "ExportDVDImages"

	ExportOptionsStripAllMACs ExportOptions = "StripAllMACs"

	ExportOptionsStripAllNonNATMACs ExportOptions = "StripAllNonNATMACs"
)

type CertificateVersion string

const (
	CertificateVersionV1 CertificateVersion = "V1"

	CertificateVersionV2 CertificateVersion = "V2"

	CertificateVersionV3 CertificateVersion = "V3"

	CertificateVersionUnknown CertificateVersion = "Unknown"
)

type VirtualSystemDescriptionType string

const (
	VirtualSystemDescriptionTypeIgnore VirtualSystemDescriptionType = "Ignore"

	VirtualSystemDescriptionTypeOS VirtualSystemDescriptionType = "OS"

	VirtualSystemDescriptionTypeName VirtualSystemDescriptionType = "Name"

	VirtualSystemDescriptionTypeProduct VirtualSystemDescriptionType = "Product"

	VirtualSystemDescriptionTypeVendor VirtualSystemDescriptionType = "Vendor"

	VirtualSystemDescriptionTypeVersion VirtualSystemDescriptionType = "Version"

	VirtualSystemDescriptionTypeProductUrl VirtualSystemDescriptionType = "ProductUrl"

	VirtualSystemDescriptionTypeVendorUrl VirtualSystemDescriptionType = "VendorUrl"

	VirtualSystemDescriptionTypeDescription VirtualSystemDescriptionType = "Description"

	VirtualSystemDescriptionTypeLicense VirtualSystemDescriptionType = "License"

	VirtualSystemDescriptionTypeMiscellaneous VirtualSystemDescriptionType = "Miscellaneous"

	VirtualSystemDescriptionTypeCPU VirtualSystemDescriptionType = "CPU"

	VirtualSystemDescriptionTypeMemory VirtualSystemDescriptionType = "Memory"

	VirtualSystemDescriptionTypeHardDiskControllerIDE VirtualSystemDescriptionType = "HardDiskControllerIDE"

	VirtualSystemDescriptionTypeHardDiskControllerSATA VirtualSystemDescriptionType = "HardDiskControllerSATA"

	VirtualSystemDescriptionTypeHardDiskControllerSCSI VirtualSystemDescriptionType = "HardDiskControllerSCSI"

	VirtualSystemDescriptionTypeHardDiskControllerSAS VirtualSystemDescriptionType = "HardDiskControllerSAS"

	VirtualSystemDescriptionTypeHardDiskImage VirtualSystemDescriptionType = "HardDiskImage"

	VirtualSystemDescriptionTypeFloppy VirtualSystemDescriptionType = "Floppy"

	VirtualSystemDescriptionTypeCDROM VirtualSystemDescriptionType = "CDROM"

	VirtualSystemDescriptionTypeNetworkAdapter VirtualSystemDescriptionType = "NetworkAdapter"

	VirtualSystemDescriptionTypeUSBController VirtualSystemDescriptionType = "USBController"

	VirtualSystemDescriptionTypeSoundCard VirtualSystemDescriptionType = "SoundCard"

	VirtualSystemDescriptionTypeSettingsFile VirtualSystemDescriptionType = "SettingsFile"

	VirtualSystemDescriptionTypeBaseFolder VirtualSystemDescriptionType = "BaseFolder"

	VirtualSystemDescriptionTypePrimaryGroup VirtualSystemDescriptionType = "PrimaryGroup"

	VirtualSystemDescriptionTypeCloudInstanceShape VirtualSystemDescriptionType = "CloudInstanceShape"

	VirtualSystemDescriptionTypeCloudDomain VirtualSystemDescriptionType = "CloudDomain"

	VirtualSystemDescriptionTypeCloudBootDiskSize VirtualSystemDescriptionType = "CloudBootDiskSize"

	VirtualSystemDescriptionTypeCloudBucket VirtualSystemDescriptionType = "CloudBucket"

	VirtualSystemDescriptionTypeCloudOCIVCN VirtualSystemDescriptionType = "CloudOCIVCN"

	VirtualSystemDescriptionTypeCloudPublicIP VirtualSystemDescriptionType = "CloudPublicIP"

	VirtualSystemDescriptionTypeCloudProfileName VirtualSystemDescriptionType = "CloudProfileName"

	VirtualSystemDescriptionTypeCloudOCISubnet VirtualSystemDescriptionType = "CloudOCISubnet"

	VirtualSystemDescriptionTypeCloudKeepObject VirtualSystemDescriptionType = "CloudKeepObject"

	VirtualSystemDescriptionTypeCloudLaunchInstance VirtualSystemDescriptionType = "CloudLaunchInstance"

	VirtualSystemDescriptionTypeCloudInstanceId VirtualSystemDescriptionType = "CloudInstanceId"

	VirtualSystemDescriptionTypeCloudImageId VirtualSystemDescriptionType = "CloudImageId"

	VirtualSystemDescriptionTypeCloudInstanceState VirtualSystemDescriptionType = "CloudInstanceState"

	VirtualSystemDescriptionTypeCloudImageState VirtualSystemDescriptionType = "CloudImageState"

	VirtualSystemDescriptionTypeCloudInstanceDisplayName VirtualSystemDescriptionType = "CloudInstanceDisplayName"

	VirtualSystemDescriptionTypeCloudImageDisplayName VirtualSystemDescriptionType = "CloudImageDisplayName"

	VirtualSystemDescriptionTypeCloudOCILaunchMode VirtualSystemDescriptionType = "CloudOCILaunchMode"

	VirtualSystemDescriptionTypeCloudPrivateIP VirtualSystemDescriptionType = "CloudPrivateIP"

	VirtualSystemDescriptionTypeCloudBootVolumeId VirtualSystemDescriptionType = "CloudBootVolumeId"

	VirtualSystemDescriptionTypeCloudOCIVCNCompartment VirtualSystemDescriptionType = "CloudOCIVCNCompartment"

	VirtualSystemDescriptionTypeCloudOCISubnetCompartment VirtualSystemDescriptionType = "CloudOCISubnetCompartment"

	VirtualSystemDescriptionTypeCloudPublicSSHKey VirtualSystemDescriptionType = "CloudPublicSSHKey"

	VirtualSystemDescriptionTypeBootingFirmware VirtualSystemDescriptionType = "BootingFirmware"

	VirtualSystemDescriptionTypeCloudInitScriptPath VirtualSystemDescriptionType = "CloudInitScriptPath"

	VirtualSystemDescriptionTypeCloudCompartmentId VirtualSystemDescriptionType = "CloudCompartmentId"

	VirtualSystemDescriptionTypeCloudShapeCpus VirtualSystemDescriptionType = "CloudShapeCpus"

	VirtualSystemDescriptionTypeCloudShapeMemory VirtualSystemDescriptionType = "CloudShapeMemory"

	VirtualSystemDescriptionTypeHardDiskControllerVirtioSCSI VirtualSystemDescriptionType = "HardDiskControllerVirtioSCSI"
)

type VirtualSystemDescriptionValueType string

const (
	VirtualSystemDescriptionValueTypeReference VirtualSystemDescriptionValueType = "Reference"

	VirtualSystemDescriptionValueTypeOriginal VirtualSystemDescriptionValueType = "Original"

	VirtualSystemDescriptionValueTypeAuto VirtualSystemDescriptionValueType = "Auto"

	VirtualSystemDescriptionValueTypeExtraConfig VirtualSystemDescriptionValueType = "ExtraConfig"
)

type TpmType string

const (
	TpmTypeNone TpmType = "None"

	TpmTypeV1_2 TpmType = "v1_2"

	TpmTypeV2_0 TpmType = "v2_0"

	TpmTypeHost TpmType = "Host"

	TpmTypeSwtpm TpmType = "Swtpm"
)

type RecordingDestination string

const (
	RecordingDestinationNone RecordingDestination = "None"

	RecordingDestinationFile RecordingDestination = "File"
)

type RecordingFeature string

const (
	RecordingFeatureNone RecordingFeature = "None"

	RecordingFeatureVideo RecordingFeature = "Video"

	RecordingFeatureAudio RecordingFeature = "Audio"
)

type RecordingAudioCodec string

const (
	RecordingAudioCodecNone RecordingAudioCodec = "None"

	RecordingAudioCodecWavPCM RecordingAudioCodec = "WavPCM"

	RecordingAudioCodecMP3 RecordingAudioCodec = "MP3"

	RecordingAudioCodecOggVorbis RecordingAudioCodec = "OggVorbis"

	RecordingAudioCodecOpus RecordingAudioCodec = "Opus"

	RecordingAudioCodecOther RecordingAudioCodec = "Other"
)

type RecordingCodecDeadline string

const (
	RecordingCodecDeadlineDefault RecordingCodecDeadline = "Default"

	RecordingCodecDeadlineRealtime RecordingCodecDeadline = "Realtime"

	RecordingCodecDeadlineGood RecordingCodecDeadline = "Good"

	RecordingCodecDeadlineBest RecordingCodecDeadline = "Best"
)

type RecordingVideoCodec string

const (
	RecordingVideoCodecNone RecordingVideoCodec = "None"

	RecordingVideoCodecMJPEG RecordingVideoCodec = "MJPEG"

	RecordingVideoCodecH262 RecordingVideoCodec = "H262"

	RecordingVideoCodecH264 RecordingVideoCodec = "H264"

	RecordingVideoCodecH265 RecordingVideoCodec = "H265"

	RecordingVideoCodecH266 RecordingVideoCodec = "H266"

	RecordingVideoCodecVP8 RecordingVideoCodec = "VP8"

	RecordingVideoCodecVP9 RecordingVideoCodec = "VP9"

	RecordingVideoCodecAV1 RecordingVideoCodec = "AV1"

	RecordingVideoCodecOther RecordingVideoCodec = "Other"
)

type RecordingVideoScalingMode string

const (
	RecordingVideoScalingModeNone RecordingVideoScalingMode = "None"

	RecordingVideoScalingModeNearestNeighbor RecordingVideoScalingMode = "NearestNeighbor"

	RecordingVideoScalingModeBilinear RecordingVideoScalingMode = "Bilinear"

	RecordingVideoScalingModeBicubic RecordingVideoScalingMode = "Bicubic"
)

type RecordingRateControlMode string

const (
	RecordingRateControlModeABR RecordingRateControlMode = "ABR"

	RecordingRateControlModeCBR RecordingRateControlMode = "CBR"

	RecordingRateControlModeVBR RecordingRateControlMode = "VBR"
)

type SignatureType string

const (
	SignatureTypeX509 SignatureType = "X509"

	SignatureTypeSha256 SignatureType = "Sha256"
)

type UefiVariableAttributes string

const (
	UefiVariableAttributesNone UefiVariableAttributes = "None"

	UefiVariableAttributesNonVolatile UefiVariableAttributes = "NonVolatile"

	UefiVariableAttributesBootServiceAccess UefiVariableAttributes = "BootServiceAccess"

	UefiVariableAttributesRuntimeAccess UefiVariableAttributes = "RuntimeAccess"

	UefiVariableAttributesHwErrorRecord UefiVariableAttributes = "HwErrorRecord"

	UefiVariableAttributesAuthWriteAccess UefiVariableAttributes = "AuthWriteAccess"

	UefiVariableAttributesAuthTimeBasedWriteAccess UefiVariableAttributes = "AuthTimeBasedWriteAccess"

	UefiVariableAttributesAuthAppendWrite UefiVariableAttributes = "AuthAppendWrite"
)

type GraphicsControllerType string

const (
	GraphicsControllerTypeNull GraphicsControllerType = "Null"

	GraphicsControllerTypeVBoxVGA GraphicsControllerType = "VBoxVGA"

	GraphicsControllerTypeVMSVGA GraphicsControllerType = "VMSVGA"

	GraphicsControllerTypeVBoxSVGA GraphicsControllerType = "VBoxSVGA"
)

type CleanupMode string

const (
	CleanupModeUnregisterOnly CleanupMode = "UnregisterOnly"

	CleanupModeDetachAllReturnNone CleanupMode = "DetachAllReturnNone"

	CleanupModeDetachAllReturnHardDisksOnly CleanupMode = "DetachAllReturnHardDisksOnly"

	CleanupModeFull CleanupMode = "Full"

	CleanupModeDetachAllReturnHardDisksAndVMRemovable CleanupMode = "DetachAllReturnHardDisksAndVMRemovable"
)

type CloneMode string

const (
	CloneModeMachineState CloneMode = "MachineState"

	CloneModeMachineAndChildStates CloneMode = "MachineAndChildStates"

	CloneModeAllStates CloneMode = "AllStates"
)

type CloneOptions string

const (
	CloneOptionsLink CloneOptions = "Link"

	CloneOptionsKeepAllMACs CloneOptions = "KeepAllMACs"

	CloneOptionsKeepNATMACs CloneOptions = "KeepNATMACs"

	CloneOptionsKeepDiskNames CloneOptions = "KeepDiskNames"

	CloneOptionsKeepHwUUIDs CloneOptions = "KeepHwUUIDs"
)

type AutostopType string

const (
	AutostopTypeDisabled AutostopType = "Disabled"

	AutostopTypeSaveState AutostopType = "SaveState"

	AutostopTypePowerOff AutostopType = "PowerOff"

	AutostopTypeAcpiShutdown AutostopType = "AcpiShutdown"
)

type VMProcPriority string

const (
	VMProcPriorityInvalid VMProcPriority = "Invalid"

	VMProcPriorityDefault VMProcPriority = "Default"

	VMProcPriorityFlat VMProcPriority = "Flat"

	VMProcPriorityLow VMProcPriority = "Low"

	VMProcPriorityNormal VMProcPriority = "Normal"

	VMProcPriorityHigh VMProcPriority = "High"
)

type IommuType string

const (
	IommuTypeNone IommuType = "None"

	IommuTypeAutomatic IommuType = "Automatic"

	IommuTypeAMD IommuType = "AMD"

	IommuTypeIntel IommuType = "Intel"
)

type HostNetworkInterfaceMediumType string

const (
	HostNetworkInterfaceMediumTypeUnknown HostNetworkInterfaceMediumType = "Unknown"

	HostNetworkInterfaceMediumTypeEthernet HostNetworkInterfaceMediumType = "Ethernet"

	HostNetworkInterfaceMediumTypePPP HostNetworkInterfaceMediumType = "PPP"

	HostNetworkInterfaceMediumTypeSLIP HostNetworkInterfaceMediumType = "SLIP"
)

type HostNetworkInterfaceStatus string

const (
	HostNetworkInterfaceStatusUnknown HostNetworkInterfaceStatus = "Unknown"

	HostNetworkInterfaceStatusUp HostNetworkInterfaceStatus = "Up"

	HostNetworkInterfaceStatusDown HostNetworkInterfaceStatus = "Down"
)

type HostNetworkInterfaceType string

const (
	HostNetworkInterfaceTypeBridged HostNetworkInterfaceType = "Bridged"

	HostNetworkInterfaceTypeHostOnly HostNetworkInterfaceType = "HostOnly"
)

type UpdateChannel string

const (
	UpdateChannelInvalid UpdateChannel = "Invalid"

	UpdateChannelStable UpdateChannel = "Stable"

	UpdateChannelAll UpdateChannel = "All"

	UpdateChannelWithBetas UpdateChannel = "WithBetas"

	UpdateChannelWithTesting UpdateChannel = "WithTesting"
)

type UpdateSeverity string

const (
	UpdateSeverityInvalid UpdateSeverity = "Invalid"

	UpdateSeverityCritical UpdateSeverity = "Critical"

	UpdateSeverityMajor UpdateSeverity = "Major"

	UpdateSeverityMinor UpdateSeverity = "Minor"

	UpdateSeverityTesting UpdateSeverity = "Testing"
)

type UpdateState string

const (
	UpdateStateInvalid UpdateState = "Invalid"

	UpdateStateAvailable UpdateState = "Available"

	UpdateStateNotAvailable UpdateState = "NotAvailable"

	UpdateStateDownloading UpdateState = "Downloading"

	UpdateStateDownloaded UpdateState = "Downloaded"

	UpdateStateInstalling UpdateState = "Installing"

	UpdateStateInstalled UpdateState = "Installed"

	UpdateStateUserInteraction UpdateState = "UserInteraction"

	UpdateStateCanceled UpdateState = "Canceled"

	UpdateStateMaintenance UpdateState = "Maintenance"

	UpdateStateError UpdateState = "Error"
)

type ProxyMode string

const (
	ProxyModeSystem ProxyMode = "System"

	ProxyModeNoProxy ProxyMode = "NoProxy"

	ProxyModeManual ProxyMode = "Manual"
)

type AdditionsFacilityType string

const (
	AdditionsFacilityTypeNone AdditionsFacilityType = "None"

	AdditionsFacilityTypeVBoxGuestDriver AdditionsFacilityType = "VBoxGuestDriver"

	AdditionsFacilityTypeAutoLogon AdditionsFacilityType = "AutoLogon"

	AdditionsFacilityTypeVBoxService AdditionsFacilityType = "VBoxService"

	AdditionsFacilityTypeVBoxTrayClient AdditionsFacilityType = "VBoxTrayClient"

	AdditionsFacilityTypeSeamless AdditionsFacilityType = "Seamless"

	AdditionsFacilityTypeGraphics AdditionsFacilityType = "Graphics"

	AdditionsFacilityTypeMonitorAttach AdditionsFacilityType = "MonitorAttach"

	AdditionsFacilityTypeAll AdditionsFacilityType = "All"
)

type AdditionsFacilityClass string

const (
	AdditionsFacilityClassNone AdditionsFacilityClass = "None"

	AdditionsFacilityClassDriver AdditionsFacilityClass = "Driver"

	AdditionsFacilityClassService AdditionsFacilityClass = "Service"

	AdditionsFacilityClassProgram AdditionsFacilityClass = "Program"

	AdditionsFacilityClassFeature AdditionsFacilityClass = "Feature"

	AdditionsFacilityClassThirdParty AdditionsFacilityClass = "ThirdParty"

	AdditionsFacilityClassAll AdditionsFacilityClass = "All"
)

type AdditionsFacilityStatus string

const (
	AdditionsFacilityStatusInactive AdditionsFacilityStatus = "Inactive"

	AdditionsFacilityStatusPaused AdditionsFacilityStatus = "Paused"

	AdditionsFacilityStatusPreInit AdditionsFacilityStatus = "PreInit"

	AdditionsFacilityStatusInit AdditionsFacilityStatus = "Init"

	AdditionsFacilityStatusActive AdditionsFacilityStatus = "Active"

	AdditionsFacilityStatusTerminating AdditionsFacilityStatus = "Terminating"

	AdditionsFacilityStatusTerminated AdditionsFacilityStatus = "Terminated"

	AdditionsFacilityStatusFailed AdditionsFacilityStatus = "Failed"

	AdditionsFacilityStatusUnknown AdditionsFacilityStatus = "Unknown"
)

type AdditionsRunLevelType string

const (
	AdditionsRunLevelTypeNone AdditionsRunLevelType = "None"

	AdditionsRunLevelTypeSystem AdditionsRunLevelType = "System"

	AdditionsRunLevelTypeUserland AdditionsRunLevelType = "Userland"

	AdditionsRunLevelTypeDesktop AdditionsRunLevelType = "Desktop"
)

type AdditionsUpdateFlag string

const (
	AdditionsUpdateFlagNone AdditionsUpdateFlag = "None"

	AdditionsUpdateFlagWaitForUpdateStartOnly AdditionsUpdateFlag = "WaitForUpdateStartOnly"
)

type GuestShutdownFlag string

const (
	GuestShutdownFlagNone GuestShutdownFlag = "None"

	GuestShutdownFlagPowerOff GuestShutdownFlag = "PowerOff"

	GuestShutdownFlagReboot GuestShutdownFlag = "Reboot"

	GuestShutdownFlagForce GuestShutdownFlag = "Force"
)

type GuestSessionStatus string

const (
	GuestSessionStatusUndefined GuestSessionStatus = "Undefined"

	GuestSessionStatusStarting GuestSessionStatus = "Starting"

	GuestSessionStatusStarted GuestSessionStatus = "Started"

	GuestSessionStatusTerminating GuestSessionStatus = "Terminating"

	GuestSessionStatusTerminated GuestSessionStatus = "Terminated"

	GuestSessionStatusTimedOutKilled GuestSessionStatus = "TimedOutKilled"

	GuestSessionStatusTimedOutAbnormally GuestSessionStatus = "TimedOutAbnormally"

	GuestSessionStatusDown GuestSessionStatus = "Down"

	GuestSessionStatusError GuestSessionStatus = "Error"
)

type GuestSessionWaitForFlag string

const (
	GuestSessionWaitForFlagNone GuestSessionWaitForFlag = "None"

	GuestSessionWaitForFlagStart GuestSessionWaitForFlag = "Start"

	GuestSessionWaitForFlagTerminate GuestSessionWaitForFlag = "Terminate"

	GuestSessionWaitForFlagStatus GuestSessionWaitForFlag = "Status"
)

type GuestSessionWaitResult string

const (
	GuestSessionWaitResultNone GuestSessionWaitResult = "None"

	GuestSessionWaitResultStart GuestSessionWaitResult = "Start"

	GuestSessionWaitResultTerminate GuestSessionWaitResult = "Terminate"

	GuestSessionWaitResultStatus GuestSessionWaitResult = "Status"

	GuestSessionWaitResultError GuestSessionWaitResult = "Error"

	GuestSessionWaitResultTimeout GuestSessionWaitResult = "Timeout"

	GuestSessionWaitResultWaitFlagNotSupported GuestSessionWaitResult = "WaitFlagNotSupported"
)

type GuestUserState string

const (
	GuestUserStateUnknown GuestUserState = "Unknown"

	GuestUserStateLoggedIn GuestUserState = "LoggedIn"

	GuestUserStateLoggedOut GuestUserState = "LoggedOut"

	GuestUserStateLocked GuestUserState = "Locked"

	GuestUserStateUnlocked GuestUserState = "Unlocked"

	GuestUserStateDisabled GuestUserState = "Disabled"

	GuestUserStateIdle GuestUserState = "Idle"

	GuestUserStateInUse GuestUserState = "InUse"

	GuestUserStateCreated GuestUserState = "Created"

	GuestUserStateDeleted GuestUserState = "Deleted"

	GuestUserStateSessionChanged GuestUserState = "SessionChanged"

	GuestUserStateCredentialsChanged GuestUserState = "CredentialsChanged"

	GuestUserStateRoleChanged GuestUserState = "RoleChanged"

	GuestUserStateGroupAdded GuestUserState = "GroupAdded"

	GuestUserStateGroupRemoved GuestUserState = "GroupRemoved"

	GuestUserStateElevated GuestUserState = "Elevated"
)

type FileSeekOrigin string

const (
	FileSeekOriginBegin FileSeekOrigin = "Begin"

	FileSeekOriginCurrent FileSeekOrigin = "Current"

	FileSeekOriginEnd FileSeekOrigin = "End"
)

type ProcessInputFlag string

const (
	ProcessInputFlagNone ProcessInputFlag = "None"

	ProcessInputFlagEndOfFile ProcessInputFlag = "EndOfFile"
)

type ProcessOutputFlag string

const (
	ProcessOutputFlagNone ProcessOutputFlag = "None"

	ProcessOutputFlagStdErr ProcessOutputFlag = "StdErr"
)

type ProcessWaitForFlag string

const (
	ProcessWaitForFlagNone ProcessWaitForFlag = "None"

	ProcessWaitForFlagStart ProcessWaitForFlag = "Start"

	ProcessWaitForFlagTerminate ProcessWaitForFlag = "Terminate"

	ProcessWaitForFlagStdIn ProcessWaitForFlag = "StdIn"

	ProcessWaitForFlagStdOut ProcessWaitForFlag = "StdOut"

	ProcessWaitForFlagStdErr ProcessWaitForFlag = "StdErr"
)

type ProcessWaitResult string

const (
	ProcessWaitResultNone ProcessWaitResult = "None"

	ProcessWaitResultStart ProcessWaitResult = "Start"

	ProcessWaitResultTerminate ProcessWaitResult = "Terminate"

	ProcessWaitResultStatus ProcessWaitResult = "Status"

	ProcessWaitResultError ProcessWaitResult = "Error"

	ProcessWaitResultTimeout ProcessWaitResult = "Timeout"

	ProcessWaitResultStdIn ProcessWaitResult = "StdIn"

	ProcessWaitResultStdOut ProcessWaitResult = "StdOut"

	ProcessWaitResultStdErr ProcessWaitResult = "StdErr"

	ProcessWaitResultWaitFlagNotSupported ProcessWaitResult = "WaitFlagNotSupported"
)

type FileCopyFlag string

const (
	FileCopyFlagNone FileCopyFlag = "None"

	FileCopyFlagNoReplace FileCopyFlag = "NoReplace"

	FileCopyFlagFollowLinks FileCopyFlag = "FollowLinks"

	FileCopyFlagUpdate FileCopyFlag = "Update"
)

type FsObjMoveFlag string

const (
	FsObjMoveFlagNone FsObjMoveFlag = "None"

	FsObjMoveFlagReplace FsObjMoveFlag = "Replace"

	FsObjMoveFlagFollowLinks FsObjMoveFlag = "FollowLinks"

	FsObjMoveFlagAllowDirectoryMoves FsObjMoveFlag = "AllowDirectoryMoves"
)

type DirectoryCreateFlag string

const (
	DirectoryCreateFlagNone DirectoryCreateFlag = "None"

	DirectoryCreateFlagParents DirectoryCreateFlag = "Parents"
)

type DirectoryCopyFlag string

const (
	DirectoryCopyFlagNone DirectoryCopyFlag = "None"

	DirectoryCopyFlagCopyIntoExisting DirectoryCopyFlag = "CopyIntoExisting"

	DirectoryCopyFlagRecursive DirectoryCopyFlag = "Recursive"

	DirectoryCopyFlagFollowLinks DirectoryCopyFlag = "FollowLinks"
)

type DirectoryRemoveRecFlag string

const (
	DirectoryRemoveRecFlagNone DirectoryRemoveRecFlag = "None"

	DirectoryRemoveRecFlagContentAndDir DirectoryRemoveRecFlag = "ContentAndDir"

	DirectoryRemoveRecFlagContentOnly DirectoryRemoveRecFlag = "ContentOnly"
)

type FsObjRenameFlag string

const (
	FsObjRenameFlagNoReplace FsObjRenameFlag = "NoReplace"

	FsObjRenameFlagReplace FsObjRenameFlag = "Replace"
)

type ProcessCreateFlag string

const (
	ProcessCreateFlagNone ProcessCreateFlag = "None"

	ProcessCreateFlagWaitForProcessStartOnly ProcessCreateFlag = "WaitForProcessStartOnly"

	ProcessCreateFlagIgnoreOrphanedProcesses ProcessCreateFlag = "IgnoreOrphanedProcesses"

	ProcessCreateFlagHidden ProcessCreateFlag = "Hidden"

	ProcessCreateFlagProfile ProcessCreateFlag = "Profile"

	ProcessCreateFlagWaitForStdOut ProcessCreateFlag = "WaitForStdOut"

	ProcessCreateFlagWaitForStdErr ProcessCreateFlag = "WaitForStdErr"

	ProcessCreateFlagExpandArguments ProcessCreateFlag = "ExpandArguments"

	ProcessCreateFlagUnquotedArguments ProcessCreateFlag = "UnquotedArguments"
)

type ProcessPriority string

const (
	ProcessPriorityInvalid ProcessPriority = "Invalid"

	ProcessPriorityDefault ProcessPriority = "Default"
)

type SymlinkType string

const (
	SymlinkTypeUnknown SymlinkType = "Unknown"

	SymlinkTypeDirectory SymlinkType = "Directory"

	SymlinkTypeFile SymlinkType = "File"
)

type SymlinkReadFlag string

const (
	SymlinkReadFlagNone SymlinkReadFlag = "None"

	SymlinkReadFlagNoSymlinks SymlinkReadFlag = "NoSymlinks"
)

type ProcessStatus string

const (
	ProcessStatusUndefined ProcessStatus = "Undefined"

	ProcessStatusStarting ProcessStatus = "Starting"

	ProcessStatusStarted ProcessStatus = "Started"

	ProcessStatusPaused ProcessStatus = "Paused"

	ProcessStatusTerminating ProcessStatus = "Terminating"

	ProcessStatusTerminatedNormally ProcessStatus = "TerminatedNormally"

	ProcessStatusTerminatedSignal ProcessStatus = "TerminatedSignal"

	ProcessStatusTerminatedAbnormally ProcessStatus = "TerminatedAbnormally"

	ProcessStatusTimedOutKilled ProcessStatus = "TimedOutKilled"

	ProcessStatusTimedOutAbnormally ProcessStatus = "TimedOutAbnormally"

	ProcessStatusDown ProcessStatus = "Down"

	ProcessStatusError ProcessStatus = "Error"
)

type ProcessInputStatus string

const (
	ProcessInputStatusUndefined ProcessInputStatus = "Undefined"

	ProcessInputStatusBroken ProcessInputStatus = "Broken"

	ProcessInputStatusAvailable ProcessInputStatus = "Available"

	ProcessInputStatusWritten ProcessInputStatus = "Written"

	ProcessInputStatusOverflow ProcessInputStatus = "Overflow"
)

type PathStyle string

const (
	PathStyleDOS PathStyle = "DOS"

	PathStyleUNIX PathStyle = "UNIX"

	PathStyleUnknown PathStyle = "Unknown"
)

type FileAccessMode string

const (
	FileAccessModeReadOnly FileAccessMode = "ReadOnly"

	FileAccessModeWriteOnly FileAccessMode = "WriteOnly"

	FileAccessModeReadWrite FileAccessMode = "ReadWrite"

	FileAccessModeAppendOnly FileAccessMode = "AppendOnly"

	FileAccessModeAppendRead FileAccessMode = "AppendRead"
)

type FileOpenAction string

const (
	FileOpenActionOpenExisting FileOpenAction = "OpenExisting"

	FileOpenActionOpenOrCreate FileOpenAction = "OpenOrCreate"

	FileOpenActionCreateNew FileOpenAction = "CreateNew"

	FileOpenActionCreateOrReplace FileOpenAction = "CreateOrReplace"

	FileOpenActionOpenExistingTruncated FileOpenAction = "OpenExistingTruncated"

	FileOpenActionAppendOrCreate FileOpenAction = "AppendOrCreate"
)

type FileSharingMode string

const (
	FileSharingModeRead FileSharingMode = "Read"

	FileSharingModeWrite FileSharingMode = "Write"

	FileSharingModeReadWrite FileSharingMode = "ReadWrite"

	FileSharingModeDelete FileSharingMode = "Delete"

	FileSharingModeReadDelete FileSharingMode = "ReadDelete"

	FileSharingModeWriteDelete FileSharingMode = "WriteDelete"

	FileSharingModeAll FileSharingMode = "All"
)

type FileOpenExFlag string

const (
	FileOpenExFlagNone FileOpenExFlag = "None"
)

type FileStatus string

const (
	FileStatusUndefined FileStatus = "Undefined"

	FileStatusOpening FileStatus = "Opening"

	FileStatusOpen FileStatus = "Open"

	FileStatusClosing FileStatus = "Closing"

	FileStatusClosed FileStatus = "Closed"

	FileStatusDown FileStatus = "Down"

	FileStatusError FileStatus = "Error"
)

type FsObjType string

const (
	FsObjTypeUnknown FsObjType = "Unknown"

	FsObjTypeFifo FsObjType = "Fifo"

	FsObjTypeDevChar FsObjType = "DevChar"

	FsObjTypeDirectory FsObjType = "Directory"

	FsObjTypeDevBlock FsObjType = "DevBlock"

	FsObjTypeFile FsObjType = "File"

	FsObjTypeSymlink FsObjType = "Symlink"

	FsObjTypeSocket FsObjType = "Socket"

	FsObjTypeWhiteOut FsObjType = "WhiteOut"
)

type DnDAction string

const (
	DnDActionIgnore DnDAction = "Ignore"

	DnDActionCopy DnDAction = "Copy"

	DnDActionMove DnDAction = "Move"

	DnDActionLink DnDAction = "Link"
)

type DirectoryOpenFlag string

const (
	DirectoryOpenFlagNone DirectoryOpenFlag = "None"

	DirectoryOpenFlagNoSymlinks DirectoryOpenFlag = "NoSymlinks"
)

type MediumState string

const (
	MediumStateNotCreated MediumState = "NotCreated"

	MediumStateCreated MediumState = "Created"

	MediumStateLockedRead MediumState = "LockedRead"

	MediumStateLockedWrite MediumState = "LockedWrite"

	MediumStateInaccessible MediumState = "Inaccessible"

	MediumStateCreating MediumState = "Creating"

	MediumStateDeleting MediumState = "Deleting"
)

type MediumType string

const (
	MediumTypeNormal MediumType = "Normal"

	MediumTypeImmutable MediumType = "Immutable"

	MediumTypeWritethrough MediumType = "Writethrough"

	MediumTypeShareable MediumType = "Shareable"

	MediumTypeReadonly MediumType = "Readonly"

	MediumTypeMultiAttach MediumType = "MultiAttach"
)

type MediumVariant string

const (
	MediumVariantStandard MediumVariant = "Standard"

	MediumVariantVmdkSplit2G MediumVariant = "VmdkSplit2G"

	MediumVariantVmdkRawDisk MediumVariant = "VmdkRawDisk"

	MediumVariantVmdkStreamOptimized MediumVariant = "VmdkStreamOptimized"

	MediumVariantVmdkESX MediumVariant = "VmdkESX"

	MediumVariantVdiZeroExpand MediumVariant = "VdiZeroExpand"

	MediumVariantFixed MediumVariant = "Fixed"

	MediumVariantDiff MediumVariant = "Diff"

	MediumVariantFormatted MediumVariant = "Formatted"

	MediumVariantNoCreateDir MediumVariant = "NoCreateDir"
)

type DataType string

const (
	DataTypeInt32 DataType = "Int32"

	DataTypeInt8 DataType = "Int8"

	DataTypeString DataType = "String"
)

type DataFlags string

const (
	DataFlagsNone DataFlags = "None"

	DataFlagsMandatory DataFlags = "Mandatory"

	DataFlagsExpert DataFlags = "Expert"

	DataFlagsArray DataFlags = "Array"

	DataFlagsFlagMask DataFlags = "FlagMask"
)

type MediumFormatCapabilities string

const (
	MediumFormatCapabilitiesUuid MediumFormatCapabilities = "Uuid"

	MediumFormatCapabilitiesCreateFixed MediumFormatCapabilities = "CreateFixed"

	MediumFormatCapabilitiesCreateDynamic MediumFormatCapabilities = "CreateDynamic"

	MediumFormatCapabilitiesCreateSplit2G MediumFormatCapabilities = "CreateSplit2G"

	MediumFormatCapabilitiesDifferencing MediumFormatCapabilities = "Differencing"

	MediumFormatCapabilitiesAsynchronous MediumFormatCapabilities = "Asynchronous"

	MediumFormatCapabilitiesFile MediumFormatCapabilities = "File"

	MediumFormatCapabilitiesProperties MediumFormatCapabilities = "Properties"

	MediumFormatCapabilitiesTcpNetworking MediumFormatCapabilities = "TcpNetworking"

	MediumFormatCapabilitiesVFS MediumFormatCapabilities = "VFS"

	MediumFormatCapabilitiesDiscard MediumFormatCapabilities = "Discard"

	MediumFormatCapabilitiesPreferred MediumFormatCapabilities = "Preferred"

	MediumFormatCapabilitiesCapabilityMask MediumFormatCapabilities = "CapabilityMask"
)

type PartitionTableType string

const (
	PartitionTableTypeMBR PartitionTableType = "MBR"

	PartitionTableTypeGPT PartitionTableType = "GPT"
)

type KeyboardLED string

const (
	KeyboardLEDNumLock KeyboardLED = "NumLock"

	KeyboardLEDCapsLock KeyboardLED = "CapsLock"

	KeyboardLEDScrollLock KeyboardLED = "ScrollLock"
)

type MouseButtonState string

const (
	MouseButtonStateLeftButton MouseButtonState = "LeftButton"

	MouseButtonStateRightButton MouseButtonState = "RightButton"

	MouseButtonStateMiddleButton MouseButtonState = "MiddleButton"

	MouseButtonStateWheelUp MouseButtonState = "WheelUp"

	MouseButtonStateWheelDown MouseButtonState = "WheelDown"

	MouseButtonStateXButton1 MouseButtonState = "XButton1"

	MouseButtonStateXButton2 MouseButtonState = "XButton2"

	MouseButtonStateMouseStateMask MouseButtonState = "MouseStateMask"
)

type TouchContactState string

const (
	TouchContactStateNone TouchContactState = "None"

	TouchContactStateInContact TouchContactState = "InContact"

	TouchContactStateInRange TouchContactState = "InRange"

	TouchContactStateContactStateMask TouchContactState = "ContactStateMask"
)

type FramebufferCapabilities string

const (
	FramebufferCapabilitiesUpdateImage FramebufferCapabilities = "UpdateImage"

	FramebufferCapabilitiesVHWA FramebufferCapabilities = "VHWA"

	FramebufferCapabilitiesVisibleRegion FramebufferCapabilities = "VisibleRegion"

	FramebufferCapabilitiesRenderCursor FramebufferCapabilities = "RenderCursor"

	FramebufferCapabilitiesMoveCursor FramebufferCapabilities = "MoveCursor"
)

type GuestMonitorStatus string

const (
	GuestMonitorStatusDisabled GuestMonitorStatus = "Disabled"

	GuestMonitorStatusEnabled GuestMonitorStatus = "Enabled"

	GuestMonitorStatusBlank GuestMonitorStatus = "Blank"
)

type ScreenLayoutMode string

const (
	ScreenLayoutModeApply ScreenLayoutMode = "Apply"

	ScreenLayoutModeReset ScreenLayoutMode = "Reset"

	ScreenLayoutModeAttach ScreenLayoutMode = "Attach"

	ScreenLayoutModeSilent ScreenLayoutMode = "Silent"
)

type NetworkAttachmentType string

const (
	NetworkAttachmentTypeNull NetworkAttachmentType = "Null"

	NetworkAttachmentTypeNAT NetworkAttachmentType = "NAT"

	NetworkAttachmentTypeBridged NetworkAttachmentType = "Bridged"

	NetworkAttachmentTypeInternal NetworkAttachmentType = "Internal"

	NetworkAttachmentTypeHostOnly NetworkAttachmentType = "HostOnly"

	NetworkAttachmentTypeGeneric NetworkAttachmentType = "Generic"

	NetworkAttachmentTypeNATNetwork NetworkAttachmentType = "NATNetwork"

	NetworkAttachmentTypeCloud NetworkAttachmentType = "Cloud"

	NetworkAttachmentTypeHostOnlyNetwork NetworkAttachmentType = "HostOnlyNetwork"
)

type NetworkAdapterType string

const (
	NetworkAdapterTypeNull NetworkAdapterType = "Null"

	NetworkAdapterTypeAm79C970A NetworkAdapterType = "Am79C970A"

	NetworkAdapterTypeAm79C973 NetworkAdapterType = "Am79C973"

	NetworkAdapterTypeI82540EM NetworkAdapterType = "I82540EM"

	NetworkAdapterTypeI82543GC NetworkAdapterType = "I82543GC"

	NetworkAdapterTypeI82545EM NetworkAdapterType = "I82545EM"

	NetworkAdapterTypeVirtio NetworkAdapterType = "Virtio"

	NetworkAdapterTypeAm79C960 NetworkAdapterType = "Am79C960"

	NetworkAdapterTypeNE2000 NetworkAdapterType = "NE2000"

	NetworkAdapterTypeNE1000 NetworkAdapterType = "NE1000"

	NetworkAdapterTypeWD8013 NetworkAdapterType = "WD8013"

	NetworkAdapterTypeWD8003 NetworkAdapterType = "WD8003"

	NetworkAdapterTypeELNK2 NetworkAdapterType = "ELNK2"

	NetworkAdapterTypeELNK1 NetworkAdapterType = "ELNK1"
)

type NetworkAdapterPromiscModePolicy string

const (
	NetworkAdapterPromiscModePolicyDeny NetworkAdapterPromiscModePolicy = "Deny"

	NetworkAdapterPromiscModePolicyAllowNetwork NetworkAdapterPromiscModePolicy = "AllowNetwork"

	NetworkAdapterPromiscModePolicyAllowAll NetworkAdapterPromiscModePolicy = "AllowAll"
)

type PortMode string

const (
	PortModeDisconnected PortMode = "Disconnected"

	PortModeHostPipe PortMode = "HostPipe"

	PortModeHostDevice PortMode = "HostDevice"

	PortModeRawFile PortMode = "RawFile"

	PortModeTCP PortMode = "TCP"
)

type UartType string

const (
	UartTypeU16450 UartType = "U16450"

	UartTypeU16550A UartType = "U16550A"

	UartTypeU16750 UartType = "U16750"
)

type VMExecutionEngine string

const (
	VMExecutionEngineNotSet VMExecutionEngine = "NotSet"

	VMExecutionEngineEmulated VMExecutionEngine = "Emulated"

	VMExecutionEngineHwVirt VMExecutionEngine = "HwVirt"

	VMExecutionEngineNativeApi VMExecutionEngine = "NativeApi"
)

type USBControllerType string

const (
	USBControllerTypeNull USBControllerType = "Null"

	USBControllerTypeOHCI USBControllerType = "OHCI"

	USBControllerTypeEHCI USBControllerType = "EHCI"

	USBControllerTypeXHCI USBControllerType = "XHCI"

	USBControllerTypeLast USBControllerType = "Last"
)

type USBConnectionSpeed string

const (
	USBConnectionSpeedNull USBConnectionSpeed = "Null"

	USBConnectionSpeedLow USBConnectionSpeed = "Low"

	USBConnectionSpeedFull USBConnectionSpeed = "Full"

	USBConnectionSpeedHigh USBConnectionSpeed = "High"

	USBConnectionSpeedSuper USBConnectionSpeed = "Super"

	USBConnectionSpeedSuperPlus USBConnectionSpeed = "SuperPlus"
)

type USBDeviceState string

const (
	USBDeviceStateNotSupported USBDeviceState = "NotSupported"

	USBDeviceStateUnavailable USBDeviceState = "Unavailable"

	USBDeviceStateBusy USBDeviceState = "Busy"

	USBDeviceStateAvailable USBDeviceState = "Available"

	USBDeviceStateHeld USBDeviceState = "Held"

	USBDeviceStateCaptured USBDeviceState = "Captured"
)

type USBDeviceFilterAction string

const (
	USBDeviceFilterActionNull USBDeviceFilterAction = "Null"

	USBDeviceFilterActionIgnore USBDeviceFilterAction = "Ignore"

	USBDeviceFilterActionHold USBDeviceFilterAction = "Hold"
)

type AudioDriverType string

const (
	AudioDriverTypeDefault AudioDriverType = "Default"

	AudioDriverTypeNull AudioDriverType = "Null"

	AudioDriverTypeOSS AudioDriverType = "OSS"

	AudioDriverTypeALSA AudioDriverType = "ALSA"

	AudioDriverTypePulse AudioDriverType = "Pulse"

	AudioDriverTypeWinMM AudioDriverType = "WinMM"

	AudioDriverTypeDirectSound AudioDriverType = "DirectSound"

	AudioDriverTypeWAS AudioDriverType = "WAS"

	AudioDriverTypeCoreAudio AudioDriverType = "CoreAudio"

	AudioDriverTypeMMPM AudioDriverType = "MMPM"

	AudioDriverTypeSolAudio AudioDriverType = "SolAudio"
)

type AudioControllerType string

const (
	AudioControllerTypeAC97 AudioControllerType = "AC97"

	AudioControllerTypeSB16 AudioControllerType = "SB16"

	AudioControllerTypeHDA AudioControllerType = "HDA"
)

type AudioCodecType string

const (
	AudioCodecTypeNull AudioCodecType = "Null"

	AudioCodecTypeSB16 AudioCodecType = "SB16"

	AudioCodecTypeSTAC9700 AudioCodecType = "STAC9700"

	AudioCodecTypeAD1980 AudioCodecType = "AD1980"

	AudioCodecTypeSTAC9221 AudioCodecType = "STAC9221"
)

type AudioDirection string

const (
	AudioDirectionUnknown AudioDirection = "Unknown"

	AudioDirectionIn AudioDirection = "In"

	AudioDirectionOut AudioDirection = "Out"

	AudioDirectionDuplex AudioDirection = "Duplex"
)

type AudioDeviceType string

const (
	AudioDeviceTypeUnknown AudioDeviceType = "Unknown"

	AudioDeviceTypeBuiltLin AudioDeviceType = "BuiltLin"

	AudioDeviceTypeExternalUSB AudioDeviceType = "ExternalUSB"

	AudioDeviceTypeExternalOther AudioDeviceType = "ExternalOther"
)

type AudioDeviceState string

const (
	AudioDeviceStateUnknown AudioDeviceState = "Unknown"

	AudioDeviceStateActive AudioDeviceState = "Active"

	AudioDeviceStateDisabled AudioDeviceState = "Disabled"

	AudioDeviceStateNotPresent AudioDeviceState = "NotPresent"

	AudioDeviceStateUnplugged AudioDeviceState = "Unplugged"
)

type AuthType string

const (
	AuthTypeNull AuthType = "Null"

	AuthTypeExternal AuthType = "External"

	AuthTypeGuest AuthType = "Guest"
)

type Reason string

const (
	ReasonUnspecified Reason = "Unspecified"

	ReasonHostSuspend Reason = "HostSuspend"

	ReasonHostResume Reason = "HostResume"

	ReasonHostBatteryLow Reason = "HostBatteryLow"

	ReasonSnapshot Reason = "Snapshot"
)

type StorageBus string

const (
	StorageBusNull StorageBus = "Null"

	StorageBusIDE StorageBus = "IDE"

	StorageBusSATA StorageBus = "SATA"

	StorageBusSCSI StorageBus = "SCSI"

	StorageBusFloppy StorageBus = "Floppy"

	StorageBusSAS StorageBus = "SAS"

	StorageBusUSB StorageBus = "USB"

	StorageBusPCIe StorageBus = "PCIe"

	StorageBusVirtioSCSI StorageBus = "VirtioSCSI"
)

type StorageControllerType string

const (
	StorageControllerTypeNull StorageControllerType = "Null"

	StorageControllerTypeLsiLogic StorageControllerType = "LsiLogic"

	StorageControllerTypeBusLogic StorageControllerType = "BusLogic"

	StorageControllerTypeIntelAhci StorageControllerType = "IntelAhci"

	StorageControllerTypePIIX3 StorageControllerType = "PIIX3"

	StorageControllerTypePIIX4 StorageControllerType = "PIIX4"

	StorageControllerTypeICH6 StorageControllerType = "ICH6"

	StorageControllerTypeI82078 StorageControllerType = "I82078"

	StorageControllerTypeLsiLogicSas StorageControllerType = "LsiLogicSas"

	StorageControllerTypeUSB StorageControllerType = "USB"

	StorageControllerTypeNVMe StorageControllerType = "NVMe"

	StorageControllerTypeVirtioSCSI StorageControllerType = "VirtioSCSI"
)

type ChipsetType string

const (
	ChipsetTypeNull ChipsetType = "Null"

	ChipsetTypePIIX3 ChipsetType = "PIIX3"

	ChipsetTypeICH9 ChipsetType = "ICH9"
)

type NATAliasMode string

const (
	NATAliasModeAliasLog NATAliasMode = "AliasLog"

	NATAliasModeAliasProxyOnly NATAliasMode = "AliasProxyOnly"

	NATAliasModeAliasUseSamePorts NATAliasMode = "AliasUseSamePorts"
)

type NATProtocol string

const (
	NATProtocolUDP NATProtocol = "UDP"

	NATProtocolTCP NATProtocol = "TCP"
)

type BandwidthGroupType string

const (
	BandwidthGroupTypeNull BandwidthGroupType = "Null"

	BandwidthGroupTypeDisk BandwidthGroupType = "Disk"

	BandwidthGroupTypeNetwork BandwidthGroupType = "Network"
)

type GuestDebugProvider string

const (
	GuestDebugProviderNone GuestDebugProvider = "None"

	GuestDebugProviderNative GuestDebugProvider = "Native"

	GuestDebugProviderGDB GuestDebugProvider = "GDB"

	GuestDebugProviderKD GuestDebugProvider = "KD"
)

type GuestDebugIoProvider string

const (
	GuestDebugIoProviderNone GuestDebugIoProvider = "None"

	GuestDebugIoProviderTCP GuestDebugIoProvider = "TCP"

	GuestDebugIoProviderUDP GuestDebugIoProvider = "UDP"

	GuestDebugIoProviderIPC GuestDebugIoProvider = "IPC"
)

type VBoxEventType string

const (
	VBoxEventTypeInvalid VBoxEventType = "Invalid"

	VBoxEventTypeAny VBoxEventType = "Any"

	VBoxEventTypeVetoable VBoxEventType = "Vetoable"

	VBoxEventTypeMachineEvent VBoxEventType = "MachineEvent"

	VBoxEventTypeSnapshotEvent VBoxEventType = "SnapshotEvent"

	VBoxEventTypeInputEvent VBoxEventType = "InputEvent"

	VBoxEventTypeLastWildcard VBoxEventType = "LastWildcard"

	VBoxEventTypeOnMachineStateChanged VBoxEventType = "OnMachineStateChanged"

	VBoxEventTypeOnMachineDataChanged VBoxEventType = "OnMachineDataChanged"

	VBoxEventTypeOnExtraDataChanged VBoxEventType = "OnExtraDataChanged"

	VBoxEventTypeOnExtraDataCanChange VBoxEventType = "OnExtraDataCanChange"

	VBoxEventTypeOnMediumRegistered VBoxEventType = "OnMediumRegistered"

	VBoxEventTypeOnMachineRegistered VBoxEventType = "OnMachineRegistered"

	VBoxEventTypeOnSessionStateChanged VBoxEventType = "OnSessionStateChanged"

	VBoxEventTypeOnSnapshotTaken VBoxEventType = "OnSnapshotTaken"

	VBoxEventTypeOnSnapshotDeleted VBoxEventType = "OnSnapshotDeleted"

	VBoxEventTypeOnSnapshotChanged VBoxEventType = "OnSnapshotChanged"

	VBoxEventTypeOnGuestPropertyChanged VBoxEventType = "OnGuestPropertyChanged"

	VBoxEventTypeOnMousePointerShapeChanged VBoxEventType = "OnMousePointerShapeChanged"

	VBoxEventTypeOnMouseCapabilityChanged VBoxEventType = "OnMouseCapabilityChanged"

	VBoxEventTypeOnKeyboardLedsChanged VBoxEventType = "OnKeyboardLedsChanged"

	VBoxEventTypeOnStateChanged VBoxEventType = "OnStateChanged"

	VBoxEventTypeOnAdditionsStateChanged VBoxEventType = "OnAdditionsStateChanged"

	VBoxEventTypeOnNetworkAdapterChanged VBoxEventType = "OnNetworkAdapterChanged"

	VBoxEventTypeOnSerialPortChanged VBoxEventType = "OnSerialPortChanged"

	VBoxEventTypeOnParallelPortChanged VBoxEventType = "OnParallelPortChanged"

	VBoxEventTypeOnStorageControllerChanged VBoxEventType = "OnStorageControllerChanged"

	VBoxEventTypeOnMediumChanged VBoxEventType = "OnMediumChanged"

	VBoxEventTypeOnVRDEServerChanged VBoxEventType = "OnVRDEServerChanged"

	VBoxEventTypeOnUSBControllerChanged VBoxEventType = "OnUSBControllerChanged"

	VBoxEventTypeOnUSBDeviceStateChanged VBoxEventType = "OnUSBDeviceStateChanged"

	VBoxEventTypeOnSharedFolderChanged VBoxEventType = "OnSharedFolderChanged"

	VBoxEventTypeOnRuntimeError VBoxEventType = "OnRuntimeError"

	VBoxEventTypeOnCanShowWindow VBoxEventType = "OnCanShowWindow"

	VBoxEventTypeOnShowWindow VBoxEventType = "OnShowWindow"

	VBoxEventTypeOnCPUChanged VBoxEventType = "OnCPUChanged"

	VBoxEventTypeOnVRDEServerInfoChanged VBoxEventType = "OnVRDEServerInfoChanged"

	VBoxEventTypeOnEventSourceChanged VBoxEventType = "OnEventSourceChanged"

	VBoxEventTypeOnCPUExecutionCapChanged VBoxEventType = "OnCPUExecutionCapChanged"

	VBoxEventTypeOnGuestKeyboard VBoxEventType = "OnGuestKeyboard"

	VBoxEventTypeOnGuestMouse VBoxEventType = "OnGuestMouse"

	VBoxEventTypeOnNATRedirect VBoxEventType = "OnNATRedirect"

	VBoxEventTypeOnHostPCIDevicePlug VBoxEventType = "OnHostPCIDevicePlug"

	VBoxEventTypeOnVBoxSVCAvailabilityChanged VBoxEventType = "OnVBoxSVCAvailabilityChanged"

	VBoxEventTypeOnBandwidthGroupChanged VBoxEventType = "OnBandwidthGroupChanged"

	VBoxEventTypeOnGuestMonitorChanged VBoxEventType = "OnGuestMonitorChanged"

	VBoxEventTypeOnStorageDeviceChanged VBoxEventType = "OnStorageDeviceChanged"

	VBoxEventTypeOnClipboardModeChanged VBoxEventType = "OnClipboardModeChanged"

	VBoxEventTypeOnDnDModeChanged VBoxEventType = "OnDnDModeChanged"

	VBoxEventTypeOnNATNetworkChanged VBoxEventType = "OnNATNetworkChanged"

	VBoxEventTypeOnNATNetworkStartStop VBoxEventType = "OnNATNetworkStartStop"

	VBoxEventTypeOnNATNetworkAlter VBoxEventType = "OnNATNetworkAlter"

	VBoxEventTypeOnNATNetworkCreationDeletion VBoxEventType = "OnNATNetworkCreationDeletion"

	VBoxEventTypeOnNATNetworkSetting VBoxEventType = "OnNATNetworkSetting"

	VBoxEventTypeOnNATNetworkPortForward VBoxEventType = "OnNATNetworkPortForward"

	VBoxEventTypeOnGuestSessionStateChanged VBoxEventType = "OnGuestSessionStateChanged"

	VBoxEventTypeOnGuestSessionRegistered VBoxEventType = "OnGuestSessionRegistered"

	VBoxEventTypeOnGuestProcessRegistered VBoxEventType = "OnGuestProcessRegistered"

	VBoxEventTypeOnGuestProcessStateChanged VBoxEventType = "OnGuestProcessStateChanged"

	VBoxEventTypeOnGuestProcessInputNotify VBoxEventType = "OnGuestProcessInputNotify"

	VBoxEventTypeOnGuestProcessOutput VBoxEventType = "OnGuestProcessOutput"

	VBoxEventTypeOnGuestFileRegistered VBoxEventType = "OnGuestFileRegistered"

	VBoxEventTypeOnGuestFileStateChanged VBoxEventType = "OnGuestFileStateChanged"

	VBoxEventTypeOnGuestFileOffsetChanged VBoxEventType = "OnGuestFileOffsetChanged"

	VBoxEventTypeOnGuestFileRead VBoxEventType = "OnGuestFileRead"

	VBoxEventTypeOnGuestFileWrite VBoxEventType = "OnGuestFileWrite"

	VBoxEventTypeOnRecordingChanged VBoxEventType = "OnRecordingChanged"

	VBoxEventTypeOnGuestUserStateChanged VBoxEventType = "OnGuestUserStateChanged"

	VBoxEventTypeOnGuestMultiTouch VBoxEventType = "OnGuestMultiTouch"

	VBoxEventTypeOnHostNameResolutionConfigurationChange VBoxEventType = "OnHostNameResolutionConfigurationChange"

	VBoxEventTypeOnSnapshotRestored VBoxEventType = "OnSnapshotRestored"

	VBoxEventTypeOnMediumConfigChanged VBoxEventType = "OnMediumConfigChanged"

	VBoxEventTypeOnAudioAdapterChanged VBoxEventType = "OnAudioAdapterChanged"

	VBoxEventTypeOnProgressPercentageChanged VBoxEventType = "OnProgressPercentageChanged"

	VBoxEventTypeOnProgressTaskCompleted VBoxEventType = "OnProgressTaskCompleted"

	VBoxEventTypeOnCursorPositionChanged VBoxEventType = "OnCursorPositionChanged"

	VBoxEventTypeOnGuestAdditionsStatusChanged VBoxEventType = "OnGuestAdditionsStatusChanged"

	VBoxEventTypeOnGuestMonitorInfoChanged VBoxEventType = "OnGuestMonitorInfoChanged"

	VBoxEventTypeOnGuestFileSizeChanged VBoxEventType = "OnGuestFileSizeChanged"

	VBoxEventTypeOnClipboardFileTransferModeChanged VBoxEventType = "OnClipboardFileTransferModeChanged"

	VBoxEventTypeOnCloudProviderListChanged VBoxEventType = "OnCloudProviderListChanged"

	VBoxEventTypeOnCloudProviderRegistered VBoxEventType = "OnCloudProviderRegistered"

	VBoxEventTypeOnCloudProviderUninstall VBoxEventType = "OnCloudProviderUninstall"

	VBoxEventTypeOnCloudProfileRegistered VBoxEventType = "OnCloudProfileRegistered"

	VBoxEventTypeOnCloudProfileChanged VBoxEventType = "OnCloudProfileChanged"

	VBoxEventTypeOnProgressCreated VBoxEventType = "OnProgressCreated"

	VBoxEventTypeOnLanguageChanged VBoxEventType = "OnLanguageChanged"

	VBoxEventTypeOnUpdateAgentAvailable VBoxEventType = "OnUpdateAgentAvailable"

	VBoxEventTypeOnUpdateAgentError VBoxEventType = "OnUpdateAgentError"

	VBoxEventTypeOnUpdateAgentSettingsChanged VBoxEventType = "OnUpdateAgentSettingsChanged"

	VBoxEventTypeOnUpdateAgentStateChanged VBoxEventType = "OnUpdateAgentStateChanged"

	VBoxEventTypeOnHostAudioDeviceChanged VBoxEventType = "OnHostAudioDeviceChanged"

	VBoxEventTypeOnGuestDebugControlChanged VBoxEventType = "OnGuestDebugControlChanged"

	VBoxEventTypeOnMachineGroupsChanged VBoxEventType = "OnMachineGroupsChanged"

	VBoxEventTypeEnd VBoxEventType = "End"
)

type GuestMouseEventMode string

const (
	GuestMouseEventModeRelative GuestMouseEventMode = "Relative"

	GuestMouseEventModeAbsolute GuestMouseEventMode = "Absolute"
)

type GuestMonitorChangedEventType string

const (
	GuestMonitorChangedEventTypeEnabled GuestMonitorChangedEventType = "Enabled"

	GuestMonitorChangedEventTypeDisabled GuestMonitorChangedEventType = "Disabled"

	GuestMonitorChangedEventTypeNewOrigin GuestMonitorChangedEventType = "NewOrigin"
)

type FormValueType string

const (
	FormValueTypeBoolean FormValueType = "Boolean"

	FormValueTypeString FormValueType = "String"

	FormValueTypeChoice FormValueType = "Choice"

	FormValueTypeRangedInteger FormValueType = "RangedInteger"
)

type CloudMachineState string

const (
	CloudMachineStateInvalid CloudMachineState = "Invalid"

	CloudMachineStateProvisioning CloudMachineState = "Provisioning"

	CloudMachineStateRunning CloudMachineState = "Running"

	CloudMachineStateStarting CloudMachineState = "Starting"

	CloudMachineStateStopping CloudMachineState = "Stopping"

	CloudMachineStateStopped CloudMachineState = "Stopped"

	CloudMachineStateCreatingImage CloudMachineState = "CreatingImage"

	CloudMachineStateTerminating CloudMachineState = "Terminating"

	CloudMachineStateTerminated CloudMachineState = "Terminated"
)

type CloudImageState string

const (
	CloudImageStateInvalid CloudImageState = "Invalid"

	CloudImageStateProvisioning CloudImageState = "Provisioning"

	CloudImageStateImporting CloudImageState = "Importing"

	CloudImageStateAvailable CloudImageState = "Available"

	CloudImageStateExporting CloudImageState = "Exporting"

	CloudImageStateDisabled CloudImageState = "Disabled"

	CloudImageStateDeleted CloudImageState = "Deleted"
)

type IVirtualBoxErrorInfo_getResultCode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBoxErrorInfo_getResultCode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBoxErrorInfo_getResultCodeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBoxErrorInfo_getResultCodeResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBoxErrorInfo_getResultDetail struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBoxErrorInfo_getResultDetail"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBoxErrorInfo_getResultDetailResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBoxErrorInfo_getResultDetailResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBoxErrorInfo_getInterfaceID struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBoxErrorInfo_getInterfaceID"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBoxErrorInfo_getInterfaceIDResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBoxErrorInfo_getInterfaceIDResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBoxErrorInfo_getComponent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBoxErrorInfo_getComponent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBoxErrorInfo_getComponentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBoxErrorInfo_getComponentResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBoxErrorInfo_getText struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBoxErrorInfo_getText"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBoxErrorInfo_getTextResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBoxErrorInfo_getTextResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBoxErrorInfo_getNext struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBoxErrorInfo_getNext"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBoxErrorInfo_getNextResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBoxErrorInfo_getNextResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_getNetworkName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getNetworkName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getNetworkNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getNetworkNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_setNetworkName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setNetworkName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NetworkName string `xml:"networkName,omitempty" json:"networkName,omitempty"`
}

type INATNetwork_setNetworkNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setNetworkNameResponse"`
}

type INATNetwork_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_setEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type INATNetwork_setEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setEnabledResponse"`
}

type INATNetwork_getNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getNetworkResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_setNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Network string `xml:"network,omitempty" json:"network,omitempty"`
}

type INATNetwork_setNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setNetworkResponse"`
}

type INATNetwork_getGateway struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getGateway"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getGatewayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getGatewayResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_getIPv6Enabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getIPv6Enabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getIPv6EnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getIPv6EnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_setIPv6Enabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setIPv6Enabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IPv6Enabled bool `xml:"IPv6Enabled,omitempty" json:"IPv6Enabled,omitempty"`
}

type INATNetwork_setIPv6EnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setIPv6EnabledResponse"`
}

type INATNetwork_getIPv6Prefix struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getIPv6Prefix"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getIPv6PrefixResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getIPv6PrefixResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_setIPv6Prefix struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setIPv6Prefix"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IPv6Prefix string `xml:"IPv6Prefix,omitempty" json:"IPv6Prefix,omitempty"`
}

type INATNetwork_setIPv6PrefixResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setIPv6PrefixResponse"`
}

type INATNetwork_getAdvertiseDefaultIPv6RouteEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getAdvertiseDefaultIPv6RouteEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_setAdvertiseDefaultIPv6RouteEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setAdvertiseDefaultIPv6RouteEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AdvertiseDefaultIPv6RouteEnabled bool `xml:"advertiseDefaultIPv6RouteEnabled,omitempty" json:"advertiseDefaultIPv6RouteEnabled,omitempty"`
}

type INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse"`
}

type INATNetwork_getNeedDhcpServer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getNeedDhcpServer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getNeedDhcpServerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getNeedDhcpServerResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_setNeedDhcpServer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setNeedDhcpServer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NeedDhcpServer bool `xml:"needDhcpServer,omitempty" json:"needDhcpServer,omitempty"`
}

type INATNetwork_setNeedDhcpServerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setNeedDhcpServerResponse"`
}

type INATNetwork_getEventSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getEventSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getEventSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getEventSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_getPortForwardRules4 struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getPortForwardRules4"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getPortForwardRules4Response struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getPortForwardRules4Response"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_getLocalMappings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getLocalMappings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getLocalMappingsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getLocalMappingsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_getLoopbackIp6 struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getLoopbackIp6"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getLoopbackIp6Response struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getLoopbackIp6Response"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_setLoopbackIp6 struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setLoopbackIp6"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LoopbackIp6 int32 `xml:"loopbackIp6,omitempty" json:"loopbackIp6,omitempty"`
}

type INATNetwork_setLoopbackIp6Response struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_setLoopbackIp6Response"`
}

type INATNetwork_getPortForwardRules6 struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getPortForwardRules6"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_getPortForwardRules6Response struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_getPortForwardRules6Response"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetwork_addLocalMapping struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_addLocalMapping"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Hostid string `xml:"hostid,omitempty" json:"hostid,omitempty"`

	Offset int32 `xml:"offset,omitempty" json:"offset,omitempty"`
}

type INATNetwork_addLocalMappingResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_addLocalMappingResponse"`
}

type INATNetwork_addPortForwardRule struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_addPortForwardRule"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IsIpv6 bool `xml:"isIpv6,omitempty" json:"isIpv6,omitempty"`

	RuleName string `xml:"ruleName,omitempty" json:"ruleName,omitempty"`

	Proto *NATProtocol `xml:"proto,omitempty" json:"proto,omitempty"`

	HostIP string `xml:"hostIP,omitempty" json:"hostIP,omitempty"`

	HostPort uint16 `xml:"hostPort,omitempty" json:"hostPort,omitempty"`

	GuestIP string `xml:"guestIP,omitempty" json:"guestIP,omitempty"`

	GuestPort uint16 `xml:"guestPort,omitempty" json:"guestPort,omitempty"`
}

type INATNetwork_addPortForwardRuleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_addPortForwardRuleResponse"`
}

type INATNetwork_removePortForwardRule struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_removePortForwardRule"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IsIpv6 bool `xml:"isIpv6,omitempty" json:"isIpv6,omitempty"`

	RuleName string `xml:"ruleName,omitempty" json:"ruleName,omitempty"`
}

type INATNetwork_removePortForwardRuleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_removePortForwardRuleResponse"`
}

type INATNetwork_start struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_start"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_startResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_startResponse"`
}

type INATNetwork_stop struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_stop"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetwork_stopResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetwork_stopResponse"`
}

type ICloudNetwork_getNetworkName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_getNetworkName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudNetwork_getNetworkNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_getNetworkNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudNetwork_setNetworkName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_setNetworkName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NetworkName string `xml:"networkName,omitempty" json:"networkName,omitempty"`
}

type ICloudNetwork_setNetworkNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_setNetworkNameResponse"`
}

type ICloudNetwork_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudNetwork_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudNetwork_setEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_setEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type ICloudNetwork_setEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_setEnabledResponse"`
}

type ICloudNetwork_getProvider struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_getProvider"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudNetwork_getProviderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_getProviderResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudNetwork_setProvider struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_setProvider"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Provider string `xml:"provider,omitempty" json:"provider,omitempty"`
}

type ICloudNetwork_setProviderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_setProviderResponse"`
}

type ICloudNetwork_getProfile struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_getProfile"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudNetwork_getProfileResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_getProfileResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudNetwork_setProfile struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_setProfile"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Profile string `xml:"profile,omitempty" json:"profile,omitempty"`
}

type ICloudNetwork_setProfileResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_setProfileResponse"`
}

type ICloudNetwork_getNetworkId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_getNetworkId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudNetwork_getNetworkIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_getNetworkIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudNetwork_setNetworkId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_setNetworkId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NetworkId string `xml:"networkId,omitempty" json:"networkId,omitempty"`
}

type ICloudNetwork_setNetworkIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetwork_setNetworkIdResponse"`
}

type IHostOnlyNetwork_getNetworkName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getNetworkName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostOnlyNetwork_getNetworkNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getNetworkNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostOnlyNetwork_setNetworkName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_setNetworkName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NetworkName string `xml:"networkName,omitempty" json:"networkName,omitempty"`
}

type IHostOnlyNetwork_setNetworkNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_setNetworkNameResponse"`
}

type IHostOnlyNetwork_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostOnlyNetwork_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostOnlyNetwork_setEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_setEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type IHostOnlyNetwork_setEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_setEnabledResponse"`
}

type IHostOnlyNetwork_getNetworkMask struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getNetworkMask"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostOnlyNetwork_getNetworkMaskResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getNetworkMaskResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostOnlyNetwork_setNetworkMask struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_setNetworkMask"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NetworkMask string `xml:"networkMask,omitempty" json:"networkMask,omitempty"`
}

type IHostOnlyNetwork_setNetworkMaskResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_setNetworkMaskResponse"`
}

type IHostOnlyNetwork_getHostIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getHostIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostOnlyNetwork_getHostIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getHostIPResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostOnlyNetwork_getLowerIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getLowerIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostOnlyNetwork_getLowerIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getLowerIPResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostOnlyNetwork_setLowerIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_setLowerIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LowerIP string `xml:"lowerIP,omitempty" json:"lowerIP,omitempty"`
}

type IHostOnlyNetwork_setLowerIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_setLowerIPResponse"`
}

type IHostOnlyNetwork_getUpperIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getUpperIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostOnlyNetwork_getUpperIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getUpperIPResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostOnlyNetwork_setUpperIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_setUpperIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	UpperIP string `xml:"upperIP,omitempty" json:"upperIP,omitempty"`
}

type IHostOnlyNetwork_setUpperIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_setUpperIPResponse"`
}

type IHostOnlyNetwork_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostOnlyNetwork_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostOnlyNetwork_setId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_setId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IHostOnlyNetwork_setIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostOnlyNetwork_setIdResponse"`
}

type IDHCPServer_getEventSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getEventSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPServer_getEventSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getEventSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPServer_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPServer_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPServer_setEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_setEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type IDHCPServer_setEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_setEnabledResponse"`
}

type IDHCPServer_getIPAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getIPAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPServer_getIPAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getIPAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPServer_getNetworkMask struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getNetworkMask"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPServer_getNetworkMaskResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getNetworkMaskResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPServer_getNetworkName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getNetworkName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPServer_getNetworkNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getNetworkNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPServer_getLowerIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getLowerIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPServer_getLowerIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getLowerIPResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPServer_getUpperIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getUpperIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPServer_getUpperIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getUpperIPResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPServer_getGlobalConfig struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getGlobalConfig"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPServer_getGlobalConfigResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getGlobalConfigResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPServer_getGroupConfigs struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getGroupConfigs"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPServer_getGroupConfigsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getGroupConfigsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPServer_getIndividualConfigs struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getIndividualConfigs"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPServer_getIndividualConfigsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getIndividualConfigsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPServer_setConfiguration struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_setConfiguration"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IPAddress string `xml:"IPAddress,omitempty" json:"IPAddress,omitempty"`

	NetworkMask string `xml:"networkMask,omitempty" json:"networkMask,omitempty"`

	FromIPAddress string `xml:"FromIPAddress,omitempty" json:"FromIPAddress,omitempty"`

	ToIPAddress string `xml:"ToIPAddress,omitempty" json:"ToIPAddress,omitempty"`
}

type IDHCPServer_setConfigurationResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_setConfigurationResponse"`
}

type IDHCPServer_start struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_start"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TrunkName string `xml:"trunkName,omitempty" json:"trunkName,omitempty"`

	TrunkType string `xml:"trunkType,omitempty" json:"trunkType,omitempty"`
}

type IDHCPServer_startResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_startResponse"`
}

type IDHCPServer_stop struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_stop"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPServer_stopResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_stopResponse"`
}

type IDHCPServer_restart struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_restart"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPServer_restartResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_restartResponse"`
}

type IDHCPServer_findLeaseByMAC struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_findLeaseByMAC"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Mac string `xml:"mac,omitempty" json:"mac,omitempty"`

	Type_ int32 `xml:"type,omitempty" json:"type,omitempty"`
}

type IDHCPServer_findLeaseByMACResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_findLeaseByMACResponse"`

	Address string `xml:"address,omitempty" json:"address,omitempty"`

	State string `xml:"state,omitempty" json:"state,omitempty"`

	Issued int64 `xml:"issued,omitempty" json:"issued,omitempty"`

	Expire int64 `xml:"expire,omitempty" json:"expire,omitempty"`
}

type IDHCPServer_getConfig struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getConfig"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Scope *DHCPConfigScope `xml:"scope,omitempty" json:"scope,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Slot uint32 `xml:"slot,omitempty" json:"slot,omitempty"`

	MayAdd bool `xml:"mayAdd,omitempty" json:"mayAdd,omitempty"`
}

type IDHCPServer_getConfigResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPServer_getConfigResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPConfig_getScope struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getScope"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPConfig_getScopeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getScopeResponse"`

	Returnval *DHCPConfigScope `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPConfig_getMinLeaseTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getMinLeaseTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPConfig_getMinLeaseTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getMinLeaseTimeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPConfig_setMinLeaseTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_setMinLeaseTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MinLeaseTime uint32 `xml:"minLeaseTime,omitempty" json:"minLeaseTime,omitempty"`
}

type IDHCPConfig_setMinLeaseTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_setMinLeaseTimeResponse"`
}

type IDHCPConfig_getDefaultLeaseTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getDefaultLeaseTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPConfig_getDefaultLeaseTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getDefaultLeaseTimeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPConfig_setDefaultLeaseTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_setDefaultLeaseTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DefaultLeaseTime uint32 `xml:"defaultLeaseTime,omitempty" json:"defaultLeaseTime,omitempty"`
}

type IDHCPConfig_setDefaultLeaseTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_setDefaultLeaseTimeResponse"`
}

type IDHCPConfig_getMaxLeaseTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getMaxLeaseTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPConfig_getMaxLeaseTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getMaxLeaseTimeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPConfig_setMaxLeaseTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_setMaxLeaseTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MaxLeaseTime uint32 `xml:"maxLeaseTime,omitempty" json:"maxLeaseTime,omitempty"`
}

type IDHCPConfig_setMaxLeaseTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_setMaxLeaseTimeResponse"`
}

type IDHCPConfig_getForcedOptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getForcedOptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPConfig_getForcedOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getForcedOptionsResponse"`

	Returnval []*DHCPOption `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPConfig_setForcedOptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_setForcedOptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ForcedOptions []*DHCPOption `xml:"forcedOptions,omitempty" json:"forcedOptions,omitempty"`
}

type IDHCPConfig_setForcedOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_setForcedOptionsResponse"`
}

type IDHCPConfig_getSuppressedOptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getSuppressedOptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPConfig_getSuppressedOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getSuppressedOptionsResponse"`

	Returnval []*DHCPOption `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPConfig_setSuppressedOptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_setSuppressedOptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SuppressedOptions []*DHCPOption `xml:"suppressedOptions,omitempty" json:"suppressedOptions,omitempty"`
}

type IDHCPConfig_setSuppressedOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_setSuppressedOptionsResponse"`
}

type IDHCPConfig_setOption struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_setOption"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Option *DHCPOption `xml:"option,omitempty" json:"option,omitempty"`

	Encoding *DHCPOptionEncoding `xml:"encoding,omitempty" json:"encoding,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type IDHCPConfig_setOptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_setOptionResponse"`
}

type IDHCPConfig_removeOption struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_removeOption"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Option *DHCPOption `xml:"option,omitempty" json:"option,omitempty"`
}

type IDHCPConfig_removeOptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_removeOptionResponse"`
}

type IDHCPConfig_removeAllOptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_removeAllOptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPConfig_removeAllOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_removeAllOptionsResponse"`
}

type IDHCPConfig_getOption struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getOption"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Option *DHCPOption `xml:"option,omitempty" json:"option,omitempty"`
}

type IDHCPConfig_getOptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getOptionResponse"`

	Encoding *DHCPOptionEncoding `xml:"encoding,omitempty" json:"encoding,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPConfig_getAllOptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getAllOptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPConfig_getAllOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_getAllOptionsResponse"`

	Options []*DHCPOption `xml:"options,omitempty" json:"options,omitempty"`

	Encodings []*DHCPOptionEncoding `xml:"encodings,omitempty" json:"encodings,omitempty"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPConfig_remove struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_remove"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPConfig_removeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPConfig_removeResponse"`
}

type IDHCPGroupCondition_getInclusive struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_getInclusive"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPGroupCondition_getInclusiveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_getInclusiveResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPGroupCondition_setInclusive struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_setInclusive"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Inclusive bool `xml:"inclusive,omitempty" json:"inclusive,omitempty"`
}

type IDHCPGroupCondition_setInclusiveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_setInclusiveResponse"`
}

type IDHCPGroupCondition_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPGroupCondition_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_getTypeResponse"`

	Returnval *DHCPGroupConditionType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPGroupCondition_setType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_setType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ *DHCPGroupConditionType `xml:"type,omitempty" json:"type,omitempty"`
}

type IDHCPGroupCondition_setTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_setTypeResponse"`
}

type IDHCPGroupCondition_getValue struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_getValue"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPGroupCondition_getValueResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_getValueResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPGroupCondition_setValue struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_setValue"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type IDHCPGroupCondition_setValueResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_setValueResponse"`
}

type IDHCPGroupCondition_remove struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_remove"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPGroupCondition_removeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupCondition_removeResponse"`
}

type IDHCPGroupConfig_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupConfig_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPGroupConfig_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupConfig_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPGroupConfig_setName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupConfig_setName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IDHCPGroupConfig_setNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupConfig_setNameResponse"`
}

type IDHCPGroupConfig_getConditions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupConfig_getConditions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPGroupConfig_getConditionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupConfig_getConditionsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPGroupConfig_addCondition struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupConfig_addCondition"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Inclusive bool `xml:"inclusive,omitempty" json:"inclusive,omitempty"`

	Type_ *DHCPGroupConditionType `xml:"type,omitempty" json:"type,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type IDHCPGroupConfig_addConditionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupConfig_addConditionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPGroupConfig_removeAllConditions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupConfig_removeAllConditions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPGroupConfig_removeAllConditionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPGroupConfig_removeAllConditionsResponse"`
}

type IDHCPIndividualConfig_getMACAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPIndividualConfig_getMACAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPIndividualConfig_getMACAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPIndividualConfig_getMACAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPIndividualConfig_getMachineId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPIndividualConfig_getMachineId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPIndividualConfig_getMachineIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPIndividualConfig_getMachineIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPIndividualConfig_getSlot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPIndividualConfig_getSlot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPIndividualConfig_getSlotResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPIndividualConfig_getSlotResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPIndividualConfig_getFixedAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPIndividualConfig_getFixedAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDHCPIndividualConfig_getFixedAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPIndividualConfig_getFixedAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDHCPIndividualConfig_setFixedAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPIndividualConfig_setFixedAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	FixedAddress string `xml:"fixedAddress,omitempty" json:"fixedAddress,omitempty"`
}

type IDHCPIndividualConfig_setFixedAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDHCPIndividualConfig_setFixedAddressResponse"`
}

type IVirtualBox_getVersion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getVersion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getVersionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getVersionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getVersionNormalized struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getVersionNormalized"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getVersionNormalizedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getVersionNormalizedResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getRevision struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getRevision"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getRevisionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getRevisionResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getPackageType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getPackageType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getPackageTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getPackageTypeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getAPIVersion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getAPIVersion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getAPIVersionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getAPIVersionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getAPIRevision struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getAPIRevision"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getAPIRevisionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getAPIRevisionResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getHomeFolder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getHomeFolder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getHomeFolderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getHomeFolderResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getSettingsFilePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getSettingsFilePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getSettingsFilePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getSettingsFilePathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getHost struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getHost"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getHostResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getHostResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getSystemProperties struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getSystemProperties"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getSystemPropertiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getSystemPropertiesResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getMachines struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getMachines"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getMachinesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getMachinesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getMachineGroups struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getMachineGroups"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getMachineGroupsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getMachineGroupsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getHardDisks struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getHardDisks"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getHardDisksResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getHardDisksResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getDVDImages struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getDVDImages"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getDVDImagesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getDVDImagesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getFloppyImages struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getFloppyImages"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getFloppyImagesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getFloppyImagesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getProgressOperations struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getProgressOperations"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getProgressOperationsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getProgressOperationsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getGuestOSTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getGuestOSTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getGuestOSTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getGuestOSTypesResponse"`

	Returnval []*IGuestOSType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getSharedFolders struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getSharedFolders"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getSharedFoldersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getSharedFoldersResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getPerformanceCollector struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getPerformanceCollector"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getPerformanceCollectorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getPerformanceCollectorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getDHCPServers struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getDHCPServers"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getDHCPServersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getDHCPServersResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getNATNetworks struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getNATNetworks"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getNATNetworksResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getNATNetworksResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getEventSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getEventSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getEventSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getEventSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getInternalNetworks struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getInternalNetworks"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getInternalNetworksResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getInternalNetworksResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getHostOnlyNetworks struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getHostOnlyNetworks"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getHostOnlyNetworksResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getHostOnlyNetworksResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getGenericNetworkDrivers struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getGenericNetworkDrivers"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getGenericNetworkDriversResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getGenericNetworkDriversResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getCloudNetworks struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getCloudNetworks"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getCloudNetworksResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getCloudNetworksResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getCloudProviderManager struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getCloudProviderManager"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getCloudProviderManagerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getCloudProviderManagerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_composeMachineFilename struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_composeMachineFilename"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Group string `xml:"group,omitempty" json:"group,omitempty"`

	CreateFlags string `xml:"createFlags,omitempty" json:"createFlags,omitempty"`

	BaseFolder string `xml:"baseFolder,omitempty" json:"baseFolder,omitempty"`
}

type IVirtualBox_composeMachineFilenameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_composeMachineFilenameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_createMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SettingsFile string `xml:"settingsFile,omitempty" json:"settingsFile,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Groups []string `xml:"groups,omitempty" json:"groups,omitempty"`

	OsTypeId string `xml:"osTypeId,omitempty" json:"osTypeId,omitempty"`

	Flags string `xml:"flags,omitempty" json:"flags,omitempty"`

	Cipher string `xml:"cipher,omitempty" json:"cipher,omitempty"`

	PasswordId string `xml:"passwordId,omitempty" json:"passwordId,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type IVirtualBox_createMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createMachineResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_openMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_openMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SettingsFile string `xml:"settingsFile,omitempty" json:"settingsFile,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type IVirtualBox_openMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_openMachineResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_registerMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_registerMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Machine string `xml:"machine,omitempty" json:"machine,omitempty"`
}

type IVirtualBox_registerMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_registerMachineResponse"`
}

type IVirtualBox_findMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NameOrId string `xml:"nameOrId,omitempty" json:"nameOrId,omitempty"`
}

type IVirtualBox_findMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findMachineResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getMachinesByGroups struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getMachinesByGroups"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Groups []string `xml:"groups,omitempty" json:"groups,omitempty"`
}

type IVirtualBox_getMachinesByGroupsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getMachinesByGroupsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getMachineStates struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getMachineStates"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Machines []string `xml:"machines,omitempty" json:"machines,omitempty"`
}

type IVirtualBox_getMachineStatesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getMachineStatesResponse"`

	Returnval []*MachineState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_createAppliance struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createAppliance"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_createApplianceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createApplianceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_createUnattendedInstaller struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createUnattendedInstaller"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_createUnattendedInstallerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createUnattendedInstallerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_createMedium struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createMedium"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Format string `xml:"format,omitempty" json:"format,omitempty"`

	Location string `xml:"location,omitempty" json:"location,omitempty"`

	AccessMode *AccessMode `xml:"accessMode,omitempty" json:"accessMode,omitempty"`

	ADeviceTypeType *DeviceType `xml:"aDeviceTypeType,omitempty" json:"aDeviceTypeType,omitempty"`
}

type IVirtualBox_createMediumResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createMediumResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_openMedium struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_openMedium"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Location string `xml:"location,omitempty" json:"location,omitempty"`

	DeviceType *DeviceType `xml:"deviceType,omitempty" json:"deviceType,omitempty"`

	AccessMode *AccessMode `xml:"accessMode,omitempty" json:"accessMode,omitempty"`

	ForceNewUuid bool `xml:"forceNewUuid,omitempty" json:"forceNewUuid,omitempty"`
}

type IVirtualBox_openMediumResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_openMediumResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getGuestOSType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getGuestOSType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IVirtualBox_getGuestOSTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getGuestOSTypeResponse"`

	Returnval *IGuestOSType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_createSharedFolder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createSharedFolder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	HostPath string `xml:"hostPath,omitempty" json:"hostPath,omitempty"`

	Writable bool `xml:"writable,omitempty" json:"writable,omitempty"`

	Automount bool `xml:"automount,omitempty" json:"automount,omitempty"`

	AutoMountPoint string `xml:"autoMountPoint,omitempty" json:"autoMountPoint,omitempty"`
}

type IVirtualBox_createSharedFolderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createSharedFolderResponse"`
}

type IVirtualBox_removeSharedFolder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_removeSharedFolder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IVirtualBox_removeSharedFolderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_removeSharedFolderResponse"`
}

type IVirtualBox_getExtraDataKeys struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getExtraDataKeys"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualBox_getExtraDataKeysResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getExtraDataKeysResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_getExtraData struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getExtraData"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`
}

type IVirtualBox_getExtraDataResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_getExtraDataResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_setExtraData struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_setExtraData"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type IVirtualBox_setExtraDataResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_setExtraDataResponse"`
}

type IVirtualBox_setSettingsSecret struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_setSettingsSecret"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type IVirtualBox_setSettingsSecretResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_setSettingsSecretResponse"`
}

type IVirtualBox_createDHCPServer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createDHCPServer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IVirtualBox_createDHCPServerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createDHCPServerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_findDHCPServerByNetworkName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findDHCPServerByNetworkName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IVirtualBox_findDHCPServerByNetworkNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findDHCPServerByNetworkNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_removeDHCPServer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_removeDHCPServer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Server string `xml:"server,omitempty" json:"server,omitempty"`
}

type IVirtualBox_removeDHCPServerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_removeDHCPServerResponse"`
}

type IVirtualBox_createNATNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createNATNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NetworkName string `xml:"networkName,omitempty" json:"networkName,omitempty"`
}

type IVirtualBox_createNATNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createNATNetworkResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_findNATNetworkByName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findNATNetworkByName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NetworkName string `xml:"networkName,omitempty" json:"networkName,omitempty"`
}

type IVirtualBox_findNATNetworkByNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findNATNetworkByNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_removeNATNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_removeNATNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Network string `xml:"network,omitempty" json:"network,omitempty"`
}

type IVirtualBox_removeNATNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_removeNATNetworkResponse"`
}

type IVirtualBox_createHostOnlyNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createHostOnlyNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NetworkName string `xml:"networkName,omitempty" json:"networkName,omitempty"`
}

type IVirtualBox_createHostOnlyNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createHostOnlyNetworkResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_findHostOnlyNetworkByName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findHostOnlyNetworkByName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NetworkName string `xml:"networkName,omitempty" json:"networkName,omitempty"`
}

type IVirtualBox_findHostOnlyNetworkByNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findHostOnlyNetworkByNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_findHostOnlyNetworkById struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findHostOnlyNetworkById"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IVirtualBox_findHostOnlyNetworkByIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findHostOnlyNetworkByIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_removeHostOnlyNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_removeHostOnlyNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Network string `xml:"network,omitempty" json:"network,omitempty"`
}

type IVirtualBox_removeHostOnlyNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_removeHostOnlyNetworkResponse"`
}

type IVirtualBox_createCloudNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createCloudNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NetworkName string `xml:"networkName,omitempty" json:"networkName,omitempty"`
}

type IVirtualBox_createCloudNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_createCloudNetworkResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_findCloudNetworkByName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findCloudNetworkByName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NetworkName string `xml:"networkName,omitempty" json:"networkName,omitempty"`
}

type IVirtualBox_findCloudNetworkByNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findCloudNetworkByNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_removeCloudNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_removeCloudNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Network string `xml:"network,omitempty" json:"network,omitempty"`
}

type IVirtualBox_removeCloudNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_removeCloudNetworkResponse"`
}

type IVirtualBox_checkFirmwarePresent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_checkFirmwarePresent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	FirmwareType *FirmwareType `xml:"firmwareType,omitempty" json:"firmwareType,omitempty"`

	Version string `xml:"version,omitempty" json:"version,omitempty"`
}

type IVirtualBox_checkFirmwarePresentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_checkFirmwarePresentResponse"`

	Url string `xml:"url,omitempty" json:"url,omitempty"`

	File string `xml:"file,omitempty" json:"file,omitempty"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualBox_findProgressById struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findProgressById"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IVirtualBox_findProgressByIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualBox_findProgressByIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVFSExplorer_getPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_getPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVFSExplorer_getPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_getPathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVFSExplorer_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVFSExplorer_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_getTypeResponse"`

	Returnval *VFSType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVFSExplorer_update struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_update"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVFSExplorer_updateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_updateResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVFSExplorer_cd struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_cd"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Dir string `xml:"dir,omitempty" json:"dir,omitempty"`
}

type IVFSExplorer_cdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_cdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVFSExplorer_cdUp struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_cdUp"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVFSExplorer_cdUpResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_cdUpResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVFSExplorer_entryList struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_entryList"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVFSExplorer_entryListResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_entryListResponse"`

	Names []string `xml:"names,omitempty" json:"names,omitempty"`

	Types []uint32 `xml:"types,omitempty" json:"types,omitempty"`

	Sizes []int64 `xml:"sizes,omitempty" json:"sizes,omitempty"`

	Modes []uint32 `xml:"modes,omitempty" json:"modes,omitempty"`
}

type IVFSExplorer_exists struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_exists"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Names []string `xml:"names,omitempty" json:"names,omitempty"`
}

type IVFSExplorer_existsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_existsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVFSExplorer_remove struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_remove"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Names []string `xml:"names,omitempty" json:"names,omitempty"`
}

type IVFSExplorer_removeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVFSExplorer_removeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getVersionNumber struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getVersionNumber"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getVersionNumberResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getVersionNumberResponse"`

	Returnval *CertificateVersion `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getSerialNumber struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSerialNumber"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getSerialNumberResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSerialNumberResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getSignatureAlgorithmOID struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSignatureAlgorithmOID"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getSignatureAlgorithmOIDResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSignatureAlgorithmOIDResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getSignatureAlgorithmName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSignatureAlgorithmName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getSignatureAlgorithmNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSignatureAlgorithmNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getIssuerName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getIssuerName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getIssuerNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getIssuerNameResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getSubjectName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSubjectName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getSubjectNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSubjectNameResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getFriendlyName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getFriendlyName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getFriendlyNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getFriendlyNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getValidityPeriodNotBefore struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getValidityPeriodNotBefore"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getValidityPeriodNotBeforeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getValidityPeriodNotBeforeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getValidityPeriodNotAfter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getValidityPeriodNotAfter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getValidityPeriodNotAfterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getValidityPeriodNotAfterResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getPublicKeyAlgorithmOID struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getPublicKeyAlgorithmOID"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getPublicKeyAlgorithmOIDResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getPublicKeyAlgorithmOIDResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getPublicKeyAlgorithm struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getPublicKeyAlgorithm"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getPublicKeyAlgorithmResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getPublicKeyAlgorithmResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getSubjectPublicKey struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSubjectPublicKey"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getSubjectPublicKeyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSubjectPublicKeyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getIssuerUniqueIdentifier struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getIssuerUniqueIdentifier"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getIssuerUniqueIdentifierResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getIssuerUniqueIdentifierResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getSubjectUniqueIdentifier struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSubjectUniqueIdentifier"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getSubjectUniqueIdentifierResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSubjectUniqueIdentifierResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getCertificateAuthority struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getCertificateAuthority"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getCertificateAuthorityResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getCertificateAuthorityResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getKeyUsage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getKeyUsage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getKeyUsageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getKeyUsageResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getExtendedKeyUsage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getExtendedKeyUsage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getExtendedKeyUsageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getExtendedKeyUsageResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getRawCertData struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getRawCertData"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getRawCertDataResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getRawCertDataResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getSelfSigned struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSelfSigned"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getSelfSignedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getSelfSignedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getTrusted struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getTrusted"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getTrustedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getTrustedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_getExpired struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getExpired"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_getExpiredResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_getExpiredResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_isCurrentlyExpired struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_isCurrentlyExpired"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICertificate_isCurrentlyExpiredResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_isCurrentlyExpiredResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICertificate_queryInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_queryInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	What int32 `xml:"what,omitempty" json:"what,omitempty"`
}

type ICertificate_queryInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICertificate_queryInfoResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_getPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAppliance_getPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getPathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_getDisks struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getDisks"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAppliance_getDisksResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getDisksResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_getVirtualSystemDescriptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getVirtualSystemDescriptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAppliance_getVirtualSystemDescriptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getVirtualSystemDescriptionsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_getMachines struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getMachines"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAppliance_getMachinesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getMachinesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_getCertificate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getCertificate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAppliance_getCertificateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getCertificateResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_read struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_read"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	File string `xml:"file,omitempty" json:"file,omitempty"`
}

type IAppliance_readResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_readResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_interpret struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_interpret"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAppliance_interpretResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_interpretResponse"`
}

type IAppliance_importMachines struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_importMachines"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Options []*ImportOptions `xml:"options,omitempty" json:"options,omitempty"`
}

type IAppliance_importMachinesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_importMachinesResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_createVFSExplorer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_createVFSExplorer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	URI string `xml:"URI,omitempty" json:"URI,omitempty"`
}

type IAppliance_createVFSExplorerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_createVFSExplorerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_write struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_write"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Format string `xml:"format,omitempty" json:"format,omitempty"`

	Options []*ExportOptions `xml:"options,omitempty" json:"options,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`
}

type IAppliance_writeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_writeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_getWarnings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getWarnings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAppliance_getWarningsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getWarningsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_getPasswordIds struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getPasswordIds"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAppliance_getPasswordIdsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getPasswordIdsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_getMediumIdsForPasswordId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getMediumIdsForPasswordId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	PasswordId string `xml:"passwordId,omitempty" json:"passwordId,omitempty"`
}

type IAppliance_getMediumIdsForPasswordIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_getMediumIdsForPasswordIdResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAppliance_addPasswords struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_addPasswords"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Identifiers []string `xml:"identifiers,omitempty" json:"identifiers,omitempty"`

	Passwords []string `xml:"passwords,omitempty" json:"passwords,omitempty"`
}

type IAppliance_addPasswordsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_addPasswordsResponse"`
}

type IAppliance_createVirtualSystemDescriptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_createVirtualSystemDescriptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Requested uint32 `xml:"requested,omitempty" json:"requested,omitempty"`
}

type IAppliance_createVirtualSystemDescriptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAppliance_createVirtualSystemDescriptionsResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualSystemDescription_getCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_getCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualSystemDescription_getCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_getCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualSystemDescription_getDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_getDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualSystemDescription_getDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_getDescriptionResponse"`

	Types []*VirtualSystemDescriptionType `xml:"types,omitempty" json:"types,omitempty"`

	Refs []string `xml:"refs,omitempty" json:"refs,omitempty"`

	OVFValues []string `xml:"OVFValues,omitempty" json:"OVFValues,omitempty"`

	VBoxValues []string `xml:"VBoxValues,omitempty" json:"VBoxValues,omitempty"`

	ExtraConfigValues []string `xml:"extraConfigValues,omitempty" json:"extraConfigValues,omitempty"`
}

type IVirtualSystemDescription_getDescriptionByType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_getDescriptionByType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ *VirtualSystemDescriptionType `xml:"type,omitempty" json:"type,omitempty"`
}

type IVirtualSystemDescription_getDescriptionByTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_getDescriptionByTypeResponse"`

	Types []*VirtualSystemDescriptionType `xml:"types,omitempty" json:"types,omitempty"`

	Refs []string `xml:"refs,omitempty" json:"refs,omitempty"`

	OVFValues []string `xml:"OVFValues,omitempty" json:"OVFValues,omitempty"`

	VBoxValues []string `xml:"VBoxValues,omitempty" json:"VBoxValues,omitempty"`

	ExtraConfigValues []string `xml:"extraConfigValues,omitempty" json:"extraConfigValues,omitempty"`
}

type IVirtualSystemDescription_removeDescriptionByType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_removeDescriptionByType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ *VirtualSystemDescriptionType `xml:"type,omitempty" json:"type,omitempty"`
}

type IVirtualSystemDescription_removeDescriptionByTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_removeDescriptionByTypeResponse"`
}

type IVirtualSystemDescription_getValuesByType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_getValuesByType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ *VirtualSystemDescriptionType `xml:"type,omitempty" json:"type,omitempty"`

	Which *VirtualSystemDescriptionValueType `xml:"which,omitempty" json:"which,omitempty"`
}

type IVirtualSystemDescription_getValuesByTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_getValuesByTypeResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualSystemDescription_setFinalValues struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_setFinalValues"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled []bool `xml:"enabled,omitempty" json:"enabled,omitempty"`

	VBoxValues []string `xml:"VBoxValues,omitempty" json:"VBoxValues,omitempty"`

	ExtraConfigValues []string `xml:"extraConfigValues,omitempty" json:"extraConfigValues,omitempty"`
}

type IVirtualSystemDescription_setFinalValuesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_setFinalValuesResponse"`
}

type IVirtualSystemDescription_addDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_addDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ *VirtualSystemDescriptionType `xml:"type,omitempty" json:"type,omitempty"`

	VBoxValue string `xml:"VBoxValue,omitempty" json:"VBoxValue,omitempty"`

	ExtraConfigValue string `xml:"extraConfigValue,omitempty" json:"extraConfigValue,omitempty"`
}

type IVirtualSystemDescription_addDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescription_addDescriptionResponse"`
}

type IUnattended_getIsoPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getIsoPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getIsoPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getIsoPathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setIsoPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setIsoPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IsoPath string `xml:"isoPath,omitempty" json:"isoPath,omitempty"`
}

type IUnattended_setIsoPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setIsoPathResponse"`
}

type IUnattended_getMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getMachineResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Machine string `xml:"machine,omitempty" json:"machine,omitempty"`
}

type IUnattended_setMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setMachineResponse"`
}

type IUnattended_getUser struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getUser"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getUserResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getUserResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setUser struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setUser"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	User string `xml:"user,omitempty" json:"user,omitempty"`
}

type IUnattended_setUserResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setUserResponse"`
}

type IUnattended_getPassword struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getPassword"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getPasswordResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getPasswordResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setPassword struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setPassword"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type IUnattended_setPasswordResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setPasswordResponse"`
}

type IUnattended_getFullUserName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getFullUserName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getFullUserNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getFullUserNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setFullUserName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setFullUserName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	FullUserName string `xml:"fullUserName,omitempty" json:"fullUserName,omitempty"`
}

type IUnattended_setFullUserNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setFullUserNameResponse"`
}

type IUnattended_getProductKey struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getProductKey"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getProductKeyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getProductKeyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setProductKey struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setProductKey"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ProductKey string `xml:"productKey,omitempty" json:"productKey,omitempty"`
}

type IUnattended_setProductKeyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setProductKeyResponse"`
}

type IUnattended_getAdditionsIsoPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getAdditionsIsoPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getAdditionsIsoPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getAdditionsIsoPathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setAdditionsIsoPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setAdditionsIsoPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AdditionsIsoPath string `xml:"additionsIsoPath,omitempty" json:"additionsIsoPath,omitempty"`
}

type IUnattended_setAdditionsIsoPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setAdditionsIsoPathResponse"`
}

type IUnattended_getInstallGuestAdditions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getInstallGuestAdditions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getInstallGuestAdditionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getInstallGuestAdditionsResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setInstallGuestAdditions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setInstallGuestAdditions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	InstallGuestAdditions bool `xml:"installGuestAdditions,omitempty" json:"installGuestAdditions,omitempty"`
}

type IUnattended_setInstallGuestAdditionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setInstallGuestAdditionsResponse"`
}

type IUnattended_getValidationKitIsoPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getValidationKitIsoPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getValidationKitIsoPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getValidationKitIsoPathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setValidationKitIsoPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setValidationKitIsoPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ValidationKitIsoPath string `xml:"validationKitIsoPath,omitempty" json:"validationKitIsoPath,omitempty"`
}

type IUnattended_setValidationKitIsoPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setValidationKitIsoPathResponse"`
}

type IUnattended_getInstallTestExecService struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getInstallTestExecService"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getInstallTestExecServiceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getInstallTestExecServiceResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setInstallTestExecService struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setInstallTestExecService"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	InstallTestExecService bool `xml:"installTestExecService,omitempty" json:"installTestExecService,omitempty"`
}

type IUnattended_setInstallTestExecServiceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setInstallTestExecServiceResponse"`
}

type IUnattended_getTimeZone struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getTimeZone"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getTimeZoneResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getTimeZoneResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setTimeZone struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setTimeZone"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TimeZone string `xml:"timeZone,omitempty" json:"timeZone,omitempty"`
}

type IUnattended_setTimeZoneResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setTimeZoneResponse"`
}

type IUnattended_getLocale struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getLocale"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getLocaleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getLocaleResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setLocale struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setLocale"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Locale string `xml:"locale,omitempty" json:"locale,omitempty"`
}

type IUnattended_setLocaleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setLocaleResponse"`
}

type IUnattended_getLanguage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getLanguage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getLanguageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getLanguageResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setLanguage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setLanguage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Language string `xml:"language,omitempty" json:"language,omitempty"`
}

type IUnattended_setLanguageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setLanguageResponse"`
}

type IUnattended_getCountry struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getCountry"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getCountryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getCountryResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setCountry struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setCountry"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Country string `xml:"country,omitempty" json:"country,omitempty"`
}

type IUnattended_setCountryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setCountryResponse"`
}

type IUnattended_getProxy struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getProxy"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getProxyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getProxyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setProxy struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setProxy"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Proxy string `xml:"proxy,omitempty" json:"proxy,omitempty"`
}

type IUnattended_setProxyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setProxyResponse"`
}

type IUnattended_getPackageSelectionAdjustments struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getPackageSelectionAdjustments"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getPackageSelectionAdjustmentsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getPackageSelectionAdjustmentsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setPackageSelectionAdjustments struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setPackageSelectionAdjustments"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	PackageSelectionAdjustments string `xml:"packageSelectionAdjustments,omitempty" json:"packageSelectionAdjustments,omitempty"`
}

type IUnattended_setPackageSelectionAdjustmentsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setPackageSelectionAdjustmentsResponse"`
}

type IUnattended_getHostname struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getHostname"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getHostnameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getHostnameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setHostname struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setHostname"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Hostname string `xml:"hostname,omitempty" json:"hostname,omitempty"`
}

type IUnattended_setHostnameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setHostnameResponse"`
}

type IUnattended_getAuxiliaryBasePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getAuxiliaryBasePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getAuxiliaryBasePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getAuxiliaryBasePathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setAuxiliaryBasePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setAuxiliaryBasePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AuxiliaryBasePath string `xml:"auxiliaryBasePath,omitempty" json:"auxiliaryBasePath,omitempty"`
}

type IUnattended_setAuxiliaryBasePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setAuxiliaryBasePathResponse"`
}

type IUnattended_getImageIndex struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getImageIndex"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getImageIndexResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getImageIndexResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setImageIndex struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setImageIndex"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ImageIndex uint32 `xml:"imageIndex,omitempty" json:"imageIndex,omitempty"`
}

type IUnattended_setImageIndexResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setImageIndexResponse"`
}

type IUnattended_getScriptTemplatePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getScriptTemplatePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getScriptTemplatePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getScriptTemplatePathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setScriptTemplatePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setScriptTemplatePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScriptTemplatePath string `xml:"scriptTemplatePath,omitempty" json:"scriptTemplatePath,omitempty"`
}

type IUnattended_setScriptTemplatePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setScriptTemplatePathResponse"`
}

type IUnattended_getPostInstallScriptTemplatePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getPostInstallScriptTemplatePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getPostInstallScriptTemplatePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getPostInstallScriptTemplatePathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setPostInstallScriptTemplatePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setPostInstallScriptTemplatePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	PostInstallScriptTemplatePath string `xml:"postInstallScriptTemplatePath,omitempty" json:"postInstallScriptTemplatePath,omitempty"`
}

type IUnattended_setPostInstallScriptTemplatePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setPostInstallScriptTemplatePathResponse"`
}

type IUnattended_getPostInstallCommand struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getPostInstallCommand"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getPostInstallCommandResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getPostInstallCommandResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setPostInstallCommand struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setPostInstallCommand"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	PostInstallCommand string `xml:"postInstallCommand,omitempty" json:"postInstallCommand,omitempty"`
}

type IUnattended_setPostInstallCommandResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setPostInstallCommandResponse"`
}

type IUnattended_getExtraInstallKernelParameters struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getExtraInstallKernelParameters"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getExtraInstallKernelParametersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getExtraInstallKernelParametersResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setExtraInstallKernelParameters struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setExtraInstallKernelParameters"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ExtraInstallKernelParameters string `xml:"extraInstallKernelParameters,omitempty" json:"extraInstallKernelParameters,omitempty"`
}

type IUnattended_setExtraInstallKernelParametersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setExtraInstallKernelParametersResponse"`
}

type IUnattended_getDetectedOSTypeId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedOSTypeId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getDetectedOSTypeIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedOSTypeIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_getDetectedOSVersion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedOSVersion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getDetectedOSVersionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedOSVersionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_getDetectedOSFlavor struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedOSFlavor"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getDetectedOSFlavorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedOSFlavorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_getDetectedOSLanguages struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedOSLanguages"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getDetectedOSLanguagesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedOSLanguagesResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_getDetectedOSHints struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedOSHints"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getDetectedOSHintsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedOSHintsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_getDetectedImageNames struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedImageNames"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getDetectedImageNamesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedImageNamesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_getDetectedImageIndices struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedImageIndices"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getDetectedImageIndicesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getDetectedImageIndicesResponse"`

	Returnval []uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_getIsUnattendedInstallSupported struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getIsUnattendedInstallSupported"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getIsUnattendedInstallSupportedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getIsUnattendedInstallSupportedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_getAvoidUpdatesOverNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getAvoidUpdatesOverNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_getAvoidUpdatesOverNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_getAvoidUpdatesOverNetworkResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUnattended_setAvoidUpdatesOverNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setAvoidUpdatesOverNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AvoidUpdatesOverNetwork bool `xml:"avoidUpdatesOverNetwork,omitempty" json:"avoidUpdatesOverNetwork,omitempty"`
}

type IUnattended_setAvoidUpdatesOverNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_setAvoidUpdatesOverNetworkResponse"`
}

type IUnattended_detectIsoOS struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_detectIsoOS"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_detectIsoOSResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_detectIsoOSResponse"`
}

type IUnattended_prepare struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_prepare"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_prepareResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_prepareResponse"`
}

type IUnattended_constructMedia struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_constructMedia"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_constructMediaResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_constructMediaResponse"`
}

type IUnattended_reconfigureVM struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_reconfigureVM"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_reconfigureVMResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_reconfigureVMResponse"`
}

type IUnattended_done struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_done"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUnattended_doneResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUnattended_doneResponse"`
}

type IGraphicsAdapter_getGraphicsControllerType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_getGraphicsControllerType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGraphicsAdapter_getGraphicsControllerTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_getGraphicsControllerTypeResponse"`

	Returnval *GraphicsControllerType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGraphicsAdapter_setGraphicsControllerType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_setGraphicsControllerType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	GraphicsControllerType *GraphicsControllerType `xml:"graphicsControllerType,omitempty" json:"graphicsControllerType,omitempty"`
}

type IGraphicsAdapter_setGraphicsControllerTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_setGraphicsControllerTypeResponse"`
}

type IGraphicsAdapter_getVRAMSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_getVRAMSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGraphicsAdapter_getVRAMSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_getVRAMSizeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGraphicsAdapter_setVRAMSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_setVRAMSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VRAMSize uint32 `xml:"VRAMSize,omitempty" json:"VRAMSize,omitempty"`
}

type IGraphicsAdapter_setVRAMSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_setVRAMSizeResponse"`
}

type IGraphicsAdapter_getAccelerate3DEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_getAccelerate3DEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGraphicsAdapter_getAccelerate3DEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_getAccelerate3DEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGraphicsAdapter_setAccelerate3DEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_setAccelerate3DEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Accelerate3DEnabled bool `xml:"accelerate3DEnabled,omitempty" json:"accelerate3DEnabled,omitempty"`
}

type IGraphicsAdapter_setAccelerate3DEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_setAccelerate3DEnabledResponse"`
}

type IGraphicsAdapter_getAccelerate2DVideoEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_getAccelerate2DVideoEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGraphicsAdapter_getAccelerate2DVideoEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_getAccelerate2DVideoEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGraphicsAdapter_setAccelerate2DVideoEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_setAccelerate2DVideoEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Accelerate2DVideoEnabled bool `xml:"accelerate2DVideoEnabled,omitempty" json:"accelerate2DVideoEnabled,omitempty"`
}

type IGraphicsAdapter_setAccelerate2DVideoEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_setAccelerate2DVideoEnabledResponse"`
}

type IGraphicsAdapter_getMonitorCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_getMonitorCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGraphicsAdapter_getMonitorCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_getMonitorCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGraphicsAdapter_setMonitorCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_setMonitorCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MonitorCount uint32 `xml:"monitorCount,omitempty" json:"monitorCount,omitempty"`
}

type IGraphicsAdapter_setMonitorCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGraphicsAdapter_setMonitorCountResponse"`
}

type IBIOSSettings_getLogoFadeIn struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getLogoFadeIn"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBIOSSettings_getLogoFadeInResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getLogoFadeInResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBIOSSettings_setLogoFadeIn struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setLogoFadeIn"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LogoFadeIn bool `xml:"logoFadeIn,omitempty" json:"logoFadeIn,omitempty"`
}

type IBIOSSettings_setLogoFadeInResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setLogoFadeInResponse"`
}

type IBIOSSettings_getLogoFadeOut struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getLogoFadeOut"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBIOSSettings_getLogoFadeOutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getLogoFadeOutResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBIOSSettings_setLogoFadeOut struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setLogoFadeOut"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LogoFadeOut bool `xml:"logoFadeOut,omitempty" json:"logoFadeOut,omitempty"`
}

type IBIOSSettings_setLogoFadeOutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setLogoFadeOutResponse"`
}

type IBIOSSettings_getLogoDisplayTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getLogoDisplayTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBIOSSettings_getLogoDisplayTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getLogoDisplayTimeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBIOSSettings_setLogoDisplayTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setLogoDisplayTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LogoDisplayTime uint32 `xml:"logoDisplayTime,omitempty" json:"logoDisplayTime,omitempty"`
}

type IBIOSSettings_setLogoDisplayTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setLogoDisplayTimeResponse"`
}

type IBIOSSettings_getLogoImagePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getLogoImagePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBIOSSettings_getLogoImagePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getLogoImagePathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBIOSSettings_setLogoImagePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setLogoImagePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LogoImagePath string `xml:"logoImagePath,omitempty" json:"logoImagePath,omitempty"`
}

type IBIOSSettings_setLogoImagePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setLogoImagePathResponse"`
}

type IBIOSSettings_getBootMenuMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getBootMenuMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBIOSSettings_getBootMenuModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getBootMenuModeResponse"`

	Returnval *BIOSBootMenuMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBIOSSettings_setBootMenuMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setBootMenuMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	BootMenuMode *BIOSBootMenuMode `xml:"bootMenuMode,omitempty" json:"bootMenuMode,omitempty"`
}

type IBIOSSettings_setBootMenuModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setBootMenuModeResponse"`
}

type IBIOSSettings_getACPIEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getACPIEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBIOSSettings_getACPIEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getACPIEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBIOSSettings_setACPIEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setACPIEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ACPIEnabled bool `xml:"ACPIEnabled,omitempty" json:"ACPIEnabled,omitempty"`
}

type IBIOSSettings_setACPIEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setACPIEnabledResponse"`
}

type IBIOSSettings_getIOAPICEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getIOAPICEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBIOSSettings_getIOAPICEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getIOAPICEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBIOSSettings_setIOAPICEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setIOAPICEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IOAPICEnabled bool `xml:"IOAPICEnabled,omitempty" json:"IOAPICEnabled,omitempty"`
}

type IBIOSSettings_setIOAPICEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setIOAPICEnabledResponse"`
}

type IBIOSSettings_getAPICMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getAPICMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBIOSSettings_getAPICModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getAPICModeResponse"`

	Returnval *APICMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBIOSSettings_setAPICMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setAPICMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	APICMode *APICMode `xml:"APICMode,omitempty" json:"APICMode,omitempty"`
}

type IBIOSSettings_setAPICModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setAPICModeResponse"`
}

type IBIOSSettings_getTimeOffset struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getTimeOffset"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBIOSSettings_getTimeOffsetResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getTimeOffsetResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBIOSSettings_setTimeOffset struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setTimeOffset"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TimeOffset int64 `xml:"timeOffset,omitempty" json:"timeOffset,omitempty"`
}

type IBIOSSettings_setTimeOffsetResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setTimeOffsetResponse"`
}

type IBIOSSettings_getPXEDebugEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getPXEDebugEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBIOSSettings_getPXEDebugEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getPXEDebugEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBIOSSettings_setPXEDebugEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setPXEDebugEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	PXEDebugEnabled bool `xml:"PXEDebugEnabled,omitempty" json:"PXEDebugEnabled,omitempty"`
}

type IBIOSSettings_setPXEDebugEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setPXEDebugEnabledResponse"`
}

type IBIOSSettings_getSMBIOSUuidLittleEndian struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getSMBIOSUuidLittleEndian"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBIOSSettings_getSMBIOSUuidLittleEndianResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_getSMBIOSUuidLittleEndianResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBIOSSettings_setSMBIOSUuidLittleEndian struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setSMBIOSUuidLittleEndian"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SMBIOSUuidLittleEndian bool `xml:"SMBIOSUuidLittleEndian,omitempty" json:"SMBIOSUuidLittleEndian,omitempty"`
}

type IBIOSSettings_setSMBIOSUuidLittleEndianResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBIOSSettings_setSMBIOSUuidLittleEndianResponse"`
}

type ITrustedPlatformModule_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ITrustedPlatformModule_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ITrustedPlatformModule_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ITrustedPlatformModule_getTypeResponse"`

	Returnval *TpmType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ITrustedPlatformModule_setType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ITrustedPlatformModule_setType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ *TpmType `xml:"type,omitempty" json:"type,omitempty"`
}

type ITrustedPlatformModule_setTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ITrustedPlatformModule_setTypeResponse"`
}

type ITrustedPlatformModule_getLocation struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ITrustedPlatformModule_getLocation"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ITrustedPlatformModule_getLocationResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ITrustedPlatformModule_getLocationResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ITrustedPlatformModule_setLocation struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ITrustedPlatformModule_setLocation"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Location string `xml:"location,omitempty" json:"location,omitempty"`
}

type ITrustedPlatformModule_setLocationResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ITrustedPlatformModule_setLocationResponse"`
}

type IRecordingScreenSettings_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getIdResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type IRecordingScreenSettings_setEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setEnabledResponse"`
}

type IRecordingScreenSettings_getFeatures struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getFeatures"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getFeaturesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getFeaturesResponse"`

	Returnval []*RecordingFeature `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setFeatures struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setFeatures"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Features []*RecordingFeature `xml:"features,omitempty" json:"features,omitempty"`
}

type IRecordingScreenSettings_setFeaturesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setFeaturesResponse"`
}

type IRecordingScreenSettings_getDestination struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getDestination"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getDestinationResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getDestinationResponse"`

	Returnval *RecordingDestination `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setDestination struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setDestination"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Destination *RecordingDestination `xml:"destination,omitempty" json:"destination,omitempty"`
}

type IRecordingScreenSettings_setDestinationResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setDestinationResponse"`
}

type IRecordingScreenSettings_getFilename struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getFilename"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getFilenameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getFilenameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setFilename struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setFilename"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Filename string `xml:"filename,omitempty" json:"filename,omitempty"`
}

type IRecordingScreenSettings_setFilenameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setFilenameResponse"`
}

type IRecordingScreenSettings_getMaxTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getMaxTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getMaxTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getMaxTimeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setMaxTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setMaxTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MaxTime uint32 `xml:"maxTime,omitempty" json:"maxTime,omitempty"`
}

type IRecordingScreenSettings_setMaxTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setMaxTimeResponse"`
}

type IRecordingScreenSettings_getMaxFileSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getMaxFileSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getMaxFileSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getMaxFileSizeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setMaxFileSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setMaxFileSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MaxFileSize uint32 `xml:"maxFileSize,omitempty" json:"maxFileSize,omitempty"`
}

type IRecordingScreenSettings_setMaxFileSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setMaxFileSizeResponse"`
}

type IRecordingScreenSettings_getOptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getOptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getOptionsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setOptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setOptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Options string `xml:"options,omitempty" json:"options,omitempty"`
}

type IRecordingScreenSettings_setOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setOptionsResponse"`
}

type IRecordingScreenSettings_getAudioCodec struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getAudioCodec"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getAudioCodecResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getAudioCodecResponse"`

	Returnval *RecordingAudioCodec `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setAudioCodec struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setAudioCodec"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AudioCodec *RecordingAudioCodec `xml:"audioCodec,omitempty" json:"audioCodec,omitempty"`
}

type IRecordingScreenSettings_setAudioCodecResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setAudioCodecResponse"`
}

type IRecordingScreenSettings_getAudioRateControlMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getAudioRateControlMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getAudioRateControlModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getAudioRateControlModeResponse"`

	Returnval *RecordingRateControlMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setAudioRateControlMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setAudioRateControlMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AudioRateControlMode *RecordingRateControlMode `xml:"audioRateControlMode,omitempty" json:"audioRateControlMode,omitempty"`
}

type IRecordingScreenSettings_setAudioRateControlModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setAudioRateControlModeResponse"`
}

type IRecordingScreenSettings_getAudioDeadline struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getAudioDeadline"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getAudioDeadlineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getAudioDeadlineResponse"`

	Returnval *RecordingCodecDeadline `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setAudioDeadline struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setAudioDeadline"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AudioDeadline *RecordingCodecDeadline `xml:"audioDeadline,omitempty" json:"audioDeadline,omitempty"`
}

type IRecordingScreenSettings_setAudioDeadlineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setAudioDeadlineResponse"`
}

type IRecordingScreenSettings_getAudioHz struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getAudioHz"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getAudioHzResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getAudioHzResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setAudioHz struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setAudioHz"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AudioHz uint32 `xml:"audioHz,omitempty" json:"audioHz,omitempty"`
}

type IRecordingScreenSettings_setAudioHzResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setAudioHzResponse"`
}

type IRecordingScreenSettings_getAudioBits struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getAudioBits"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getAudioBitsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getAudioBitsResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setAudioBits struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setAudioBits"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AudioBits uint32 `xml:"audioBits,omitempty" json:"audioBits,omitempty"`
}

type IRecordingScreenSettings_setAudioBitsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setAudioBitsResponse"`
}

type IRecordingScreenSettings_getAudioChannels struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getAudioChannels"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getAudioChannelsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getAudioChannelsResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setAudioChannels struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setAudioChannels"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AudioChannels uint32 `xml:"audioChannels,omitempty" json:"audioChannels,omitempty"`
}

type IRecordingScreenSettings_setAudioChannelsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setAudioChannelsResponse"`
}

type IRecordingScreenSettings_getVideoCodec struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoCodec"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getVideoCodecResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoCodecResponse"`

	Returnval *RecordingVideoCodec `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setVideoCodec struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoCodec"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VideoCodec *RecordingVideoCodec `xml:"videoCodec,omitempty" json:"videoCodec,omitempty"`
}

type IRecordingScreenSettings_setVideoCodecResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoCodecResponse"`
}

type IRecordingScreenSettings_getVideoDeadline struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoDeadline"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getVideoDeadlineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoDeadlineResponse"`

	Returnval *RecordingCodecDeadline `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setVideoDeadline struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoDeadline"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VideoDeadline *RecordingCodecDeadline `xml:"videoDeadline,omitempty" json:"videoDeadline,omitempty"`
}

type IRecordingScreenSettings_setVideoDeadlineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoDeadlineResponse"`
}

type IRecordingScreenSettings_getVideoWidth struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoWidth"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getVideoWidthResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoWidthResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setVideoWidth struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoWidth"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VideoWidth uint32 `xml:"videoWidth,omitempty" json:"videoWidth,omitempty"`
}

type IRecordingScreenSettings_setVideoWidthResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoWidthResponse"`
}

type IRecordingScreenSettings_getVideoHeight struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoHeight"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getVideoHeightResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoHeightResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setVideoHeight struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoHeight"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VideoHeight uint32 `xml:"videoHeight,omitempty" json:"videoHeight,omitempty"`
}

type IRecordingScreenSettings_setVideoHeightResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoHeightResponse"`
}

type IRecordingScreenSettings_getVideoRate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoRate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getVideoRateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoRateResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setVideoRate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoRate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VideoRate uint32 `xml:"videoRate,omitempty" json:"videoRate,omitempty"`
}

type IRecordingScreenSettings_setVideoRateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoRateResponse"`
}

type IRecordingScreenSettings_getVideoRateControlMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoRateControlMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getVideoRateControlModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoRateControlModeResponse"`

	Returnval *RecordingRateControlMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setVideoRateControlMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoRateControlMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VideoRateControlMode *RecordingRateControlMode `xml:"videoRateControlMode,omitempty" json:"videoRateControlMode,omitempty"`
}

type IRecordingScreenSettings_setVideoRateControlModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoRateControlModeResponse"`
}

type IRecordingScreenSettings_getVideoFPS struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoFPS"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getVideoFPSResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoFPSResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setVideoFPS struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoFPS"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VideoFPS uint32 `xml:"videoFPS,omitempty" json:"videoFPS,omitempty"`
}

type IRecordingScreenSettings_setVideoFPSResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoFPSResponse"`
}

type IRecordingScreenSettings_getVideoScalingMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoScalingMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingScreenSettings_getVideoScalingModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_getVideoScalingModeResponse"`

	Returnval *RecordingVideoScalingMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingScreenSettings_setVideoScalingMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoScalingMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VideoScalingMode *RecordingVideoScalingMode `xml:"videoScalingMode,omitempty" json:"videoScalingMode,omitempty"`
}

type IRecordingScreenSettings_setVideoScalingModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_setVideoScalingModeResponse"`
}

type IRecordingScreenSettings_isFeatureEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_isFeatureEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Feature *RecordingFeature `xml:"feature,omitempty" json:"feature,omitempty"`
}

type IRecordingScreenSettings_isFeatureEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingScreenSettings_isFeatureEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingSettings_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingSettings_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingSettings_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingSettings_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingSettings_setEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingSettings_setEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type IRecordingSettings_setEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingSettings_setEnabledResponse"`
}

type IRecordingSettings_getScreens struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingSettings_getScreens"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingSettings_getScreensResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingSettings_getScreensResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingSettings_getScreenSettings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingSettings_getScreenSettings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`
}

type IRecordingSettings_getScreenSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingSettings_getScreenSettingsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPCIAddress_getBus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_getBus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPCIAddress_getBusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_getBusResponse"`

	Returnval int16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPCIAddress_setBus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_setBus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Bus int16 `xml:"bus,omitempty" json:"bus,omitempty"`
}

type IPCIAddress_setBusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_setBusResponse"`
}

type IPCIAddress_getDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_getDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPCIAddress_getDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_getDeviceResponse"`

	Returnval int16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPCIAddress_setDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_setDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Device int16 `xml:"device,omitempty" json:"device,omitempty"`
}

type IPCIAddress_setDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_setDeviceResponse"`
}

type IPCIAddress_getDevFunction struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_getDevFunction"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPCIAddress_getDevFunctionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_getDevFunctionResponse"`

	Returnval int16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPCIAddress_setDevFunction struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_setDevFunction"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DevFunction int16 `xml:"devFunction,omitempty" json:"devFunction,omitempty"`
}

type IPCIAddress_setDevFunctionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_setDevFunctionResponse"`
}

type IPCIAddress_asLong struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_asLong"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPCIAddress_asLongResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_asLongResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPCIAddress_fromLong struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_fromLong"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Number int32 `xml:"number,omitempty" json:"number,omitempty"`
}

type IPCIAddress_fromLongResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPCIAddress_fromLongResponse"`
}

type IUefiVariableStore_getSecureBootEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_getSecureBootEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUefiVariableStore_getSecureBootEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_getSecureBootEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUefiVariableStore_setSecureBootEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_setSecureBootEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SecureBootEnabled bool `xml:"secureBootEnabled,omitempty" json:"secureBootEnabled,omitempty"`
}

type IUefiVariableStore_setSecureBootEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_setSecureBootEnabledResponse"`
}

type IUefiVariableStore_addVariable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_addVariable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Owner string `xml:"owner,omitempty" json:"owner,omitempty"`

	Attributes []*UefiVariableAttributes `xml:"attributes,omitempty" json:"attributes,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type IUefiVariableStore_addVariableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_addVariableResponse"`
}

type IUefiVariableStore_deleteVariable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_deleteVariable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Owner string `xml:"owner,omitempty" json:"owner,omitempty"`
}

type IUefiVariableStore_deleteVariableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_deleteVariableResponse"`
}

type IUefiVariableStore_changeVariable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_changeVariable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type IUefiVariableStore_changeVariableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_changeVariableResponse"`
}

type IUefiVariableStore_queryVariableByName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_queryVariableByName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IUefiVariableStore_queryVariableByNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_queryVariableByNameResponse"`

	Owner string `xml:"owner,omitempty" json:"owner,omitempty"`

	Attributes []*UefiVariableAttributes `xml:"attributes,omitempty" json:"attributes,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type IUefiVariableStore_queryVariables struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_queryVariables"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUefiVariableStore_queryVariablesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_queryVariablesResponse"`

	Names []string `xml:"names,omitempty" json:"names,omitempty"`

	Owners []string `xml:"owners,omitempty" json:"owners,omitempty"`
}

type IUefiVariableStore_enrollOraclePlatformKey struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_enrollOraclePlatformKey"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUefiVariableStore_enrollOraclePlatformKeyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_enrollOraclePlatformKeyResponse"`
}

type IUefiVariableStore_enrollPlatformKey struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_enrollPlatformKey"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	PlatformKey string `xml:"platformKey,omitempty" json:"platformKey,omitempty"`

	Owner string `xml:"owner,omitempty" json:"owner,omitempty"`
}

type IUefiVariableStore_enrollPlatformKeyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_enrollPlatformKeyResponse"`
}

type IUefiVariableStore_addKek struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_addKek"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	KeyEncryptionKey string `xml:"keyEncryptionKey,omitempty" json:"keyEncryptionKey,omitempty"`

	Owner string `xml:"owner,omitempty" json:"owner,omitempty"`

	SignatureType *SignatureType `xml:"signatureType,omitempty" json:"signatureType,omitempty"`
}

type IUefiVariableStore_addKekResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_addKekResponse"`
}

type IUefiVariableStore_addSignatureToDb struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_addSignatureToDb"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Signature string `xml:"signature,omitempty" json:"signature,omitempty"`

	Owner string `xml:"owner,omitempty" json:"owner,omitempty"`

	SignatureType *SignatureType `xml:"signatureType,omitempty" json:"signatureType,omitempty"`
}

type IUefiVariableStore_addSignatureToDbResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_addSignatureToDbResponse"`
}

type IUefiVariableStore_addSignatureToDbx struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_addSignatureToDbx"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Signature string `xml:"signature,omitempty" json:"signature,omitempty"`

	Owner string `xml:"owner,omitempty" json:"owner,omitempty"`

	SignatureType *SignatureType `xml:"signatureType,omitempty" json:"signatureType,omitempty"`
}

type IUefiVariableStore_addSignatureToDbxResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_addSignatureToDbxResponse"`
}

type IUefiVariableStore_enrollDefaultMsSignatures struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_enrollDefaultMsSignatures"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUefiVariableStore_enrollDefaultMsSignaturesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_enrollDefaultMsSignaturesResponse"`
}

type IUefiVariableStore_addSignatureToMok struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_addSignatureToMok"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Signature string `xml:"signature,omitempty" json:"signature,omitempty"`

	Owner string `xml:"owner,omitempty" json:"owner,omitempty"`

	SignatureType *SignatureType `xml:"signatureType,omitempty" json:"signatureType,omitempty"`
}

type IUefiVariableStore_addSignatureToMokResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUefiVariableStore_addSignatureToMokResponse"`
}

type INvramStore_getNonVolatileStorageFile struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INvramStore_getNonVolatileStorageFile"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INvramStore_getNonVolatileStorageFileResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INvramStore_getNonVolatileStorageFileResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INvramStore_getUefiVariableStore struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INvramStore_getUefiVariableStore"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INvramStore_getUefiVariableStoreResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INvramStore_getUefiVariableStoreResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INvramStore_getKeyId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INvramStore_getKeyId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INvramStore_getKeyIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INvramStore_getKeyIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INvramStore_getKeyStore struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INvramStore_getKeyStore"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INvramStore_getKeyStoreResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INvramStore_getKeyStoreResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INvramStore_initUefiVariableStore struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INvramStore_initUefiVariableStore"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Size uint32 `xml:"size,omitempty" json:"size,omitempty"`
}

type INvramStore_initUefiVariableStoreResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INvramStore_initUefiVariableStoreResponse"`
}

type IMachine_getParent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getParent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getParentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getParentResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getIcon struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getIcon"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getIconResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getIconResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setIcon struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setIcon"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Icon string `xml:"icon,omitempty" json:"icon,omitempty"`
}

type IMachine_setIconResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setIconResponse"`
}

type IMachine_getAccessible struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAccessible"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getAccessibleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAccessibleResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getAccessError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAccessError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getAccessErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAccessErrorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMachine_setNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setNameResponse"`
}

type IMachine_getDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getDescriptionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`
}

type IMachine_setDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setDescriptionResponse"`
}

type IMachine_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getGroups struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getGroups"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getGroupsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getGroupsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setGroups struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setGroups"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Groups []string `xml:"groups,omitempty" json:"groups,omitempty"`
}

type IMachine_setGroupsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setGroupsResponse"`
}

type IMachine_getOSTypeId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getOSTypeId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getOSTypeIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getOSTypeIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setOSTypeId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setOSTypeId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	OSTypeId string `xml:"OSTypeId,omitempty" json:"OSTypeId,omitempty"`
}

type IMachine_setOSTypeIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setOSTypeIdResponse"`
}

type IMachine_getHardwareVersion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getHardwareVersion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getHardwareVersionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getHardwareVersionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setHardwareVersion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setHardwareVersion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	HardwareVersion string `xml:"hardwareVersion,omitempty" json:"hardwareVersion,omitempty"`
}

type IMachine_setHardwareVersionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setHardwareVersionResponse"`
}

type IMachine_getHardwareUUID struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getHardwareUUID"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getHardwareUUIDResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getHardwareUUIDResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setHardwareUUID struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setHardwareUUID"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	HardwareUUID string `xml:"hardwareUUID,omitempty" json:"hardwareUUID,omitempty"`
}

type IMachine_setHardwareUUIDResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setHardwareUUIDResponse"`
}

type IMachine_getCPUCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getCPUCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setCPUCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CPUCount uint32 `xml:"CPUCount,omitempty" json:"CPUCount,omitempty"`
}

type IMachine_setCPUCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUCountResponse"`
}

type IMachine_getCPUHotPlugEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUHotPlugEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getCPUHotPlugEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUHotPlugEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setCPUHotPlugEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUHotPlugEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CPUHotPlugEnabled bool `xml:"CPUHotPlugEnabled,omitempty" json:"CPUHotPlugEnabled,omitempty"`
}

type IMachine_setCPUHotPlugEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUHotPlugEnabledResponse"`
}

type IMachine_getCPUExecutionCap struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUExecutionCap"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getCPUExecutionCapResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUExecutionCapResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setCPUExecutionCap struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUExecutionCap"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CPUExecutionCap uint32 `xml:"CPUExecutionCap,omitempty" json:"CPUExecutionCap,omitempty"`
}

type IMachine_setCPUExecutionCapResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUExecutionCapResponse"`
}

type IMachine_getCPUIDPortabilityLevel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUIDPortabilityLevel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getCPUIDPortabilityLevelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUIDPortabilityLevelResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setCPUIDPortabilityLevel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUIDPortabilityLevel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CPUIDPortabilityLevel uint32 `xml:"CPUIDPortabilityLevel,omitempty" json:"CPUIDPortabilityLevel,omitempty"`
}

type IMachine_setCPUIDPortabilityLevelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUIDPortabilityLevelResponse"`
}

type IMachine_getMemorySize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getMemorySize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getMemorySizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getMemorySizeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setMemorySize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setMemorySize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MemorySize uint32 `xml:"memorySize,omitempty" json:"memorySize,omitempty"`
}

type IMachine_setMemorySizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setMemorySizeResponse"`
}

type IMachine_getMemoryBalloonSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getMemoryBalloonSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getMemoryBalloonSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getMemoryBalloonSizeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setMemoryBalloonSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setMemoryBalloonSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MemoryBalloonSize uint32 `xml:"memoryBalloonSize,omitempty" json:"memoryBalloonSize,omitempty"`
}

type IMachine_setMemoryBalloonSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setMemoryBalloonSizeResponse"`
}

type IMachine_getPageFusionEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getPageFusionEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getPageFusionEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getPageFusionEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setPageFusionEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setPageFusionEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	PageFusionEnabled bool `xml:"pageFusionEnabled,omitempty" json:"pageFusionEnabled,omitempty"`
}

type IMachine_setPageFusionEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setPageFusionEnabledResponse"`
}

type IMachine_getGraphicsAdapter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getGraphicsAdapter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getGraphicsAdapterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getGraphicsAdapterResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getBIOSSettings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getBIOSSettings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getBIOSSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getBIOSSettingsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getTrustedPlatformModule struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTrustedPlatformModule"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getTrustedPlatformModuleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTrustedPlatformModuleResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getNonVolatileStore struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getNonVolatileStore"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getNonVolatileStoreResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getNonVolatileStoreResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getRecordingSettings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getRecordingSettings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getRecordingSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getRecordingSettingsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getFirmwareType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getFirmwareType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getFirmwareTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getFirmwareTypeResponse"`

	Returnval *FirmwareType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setFirmwareType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setFirmwareType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	FirmwareType *FirmwareType `xml:"firmwareType,omitempty" json:"firmwareType,omitempty"`
}

type IMachine_setFirmwareTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setFirmwareTypeResponse"`
}

type IMachine_getPointingHIDType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getPointingHIDType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getPointingHIDTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getPointingHIDTypeResponse"`

	Returnval *PointingHIDType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setPointingHIDType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setPointingHIDType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	PointingHIDType *PointingHIDType `xml:"pointingHIDType,omitempty" json:"pointingHIDType,omitempty"`
}

type IMachine_setPointingHIDTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setPointingHIDTypeResponse"`
}

type IMachine_getKeyboardHIDType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getKeyboardHIDType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getKeyboardHIDTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getKeyboardHIDTypeResponse"`

	Returnval *KeyboardHIDType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setKeyboardHIDType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setKeyboardHIDType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	KeyboardHIDType *KeyboardHIDType `xml:"keyboardHIDType,omitempty" json:"keyboardHIDType,omitempty"`
}

type IMachine_setKeyboardHIDTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setKeyboardHIDTypeResponse"`
}

type IMachine_getHPETEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getHPETEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getHPETEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getHPETEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setHPETEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setHPETEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	HPETEnabled bool `xml:"HPETEnabled,omitempty" json:"HPETEnabled,omitempty"`
}

type IMachine_setHPETEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setHPETEnabledResponse"`
}

type IMachine_getChipsetType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getChipsetType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getChipsetTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getChipsetTypeResponse"`

	Returnval *ChipsetType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setChipsetType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setChipsetType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ChipsetType *ChipsetType `xml:"chipsetType,omitempty" json:"chipsetType,omitempty"`
}

type IMachine_setChipsetTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setChipsetTypeResponse"`
}

type IMachine_getIommuType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getIommuType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getIommuTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getIommuTypeResponse"`

	Returnval *IommuType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setIommuType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setIommuType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IommuType *IommuType `xml:"iommuType,omitempty" json:"iommuType,omitempty"`
}

type IMachine_setIommuTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setIommuTypeResponse"`
}

type IMachine_getSnapshotFolder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSnapshotFolder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getSnapshotFolderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSnapshotFolderResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setSnapshotFolder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setSnapshotFolder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SnapshotFolder string `xml:"snapshotFolder,omitempty" json:"snapshotFolder,omitempty"`
}

type IMachine_setSnapshotFolderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setSnapshotFolderResponse"`
}

type IMachine_getVRDEServer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getVRDEServer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getVRDEServerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getVRDEServerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getEmulatedUSBCardReaderEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getEmulatedUSBCardReaderEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getEmulatedUSBCardReaderEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getEmulatedUSBCardReaderEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setEmulatedUSBCardReaderEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setEmulatedUSBCardReaderEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	EmulatedUSBCardReaderEnabled bool `xml:"emulatedUSBCardReaderEnabled,omitempty" json:"emulatedUSBCardReaderEnabled,omitempty"`
}

type IMachine_setEmulatedUSBCardReaderEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setEmulatedUSBCardReaderEnabledResponse"`
}

type IMachine_getMediumAttachments struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getMediumAttachments"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getMediumAttachmentsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getMediumAttachmentsResponse"`

	Returnval []*IMediumAttachment `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getUSBControllers struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getUSBControllers"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getUSBControllersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getUSBControllersResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getUSBDeviceFilters struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getUSBDeviceFilters"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getUSBDeviceFiltersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getUSBDeviceFiltersResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getAudioSettings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAudioSettings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getAudioSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAudioSettingsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getStorageControllers struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStorageControllers"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getStorageControllersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStorageControllersResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getSettingsFilePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSettingsFilePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getSettingsFilePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSettingsFilePathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getSettingsAuxFilePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSettingsAuxFilePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getSettingsAuxFilePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSettingsAuxFilePathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getSettingsModified struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSettingsModified"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getSettingsModifiedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSettingsModifiedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getSessionState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSessionState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getSessionStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSessionStateResponse"`

	Returnval *SessionState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getSessionName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSessionName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getSessionNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSessionNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getSessionPID struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSessionPID"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getSessionPIDResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSessionPIDResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStateResponse"`

	Returnval *MachineState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getLastStateChange struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getLastStateChange"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getLastStateChangeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getLastStateChangeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getStateFilePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStateFilePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getStateFilePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStateFilePathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getLogFolder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getLogFolder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getLogFolderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getLogFolderResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getCurrentSnapshot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCurrentSnapshot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getCurrentSnapshotResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCurrentSnapshotResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getSnapshotCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSnapshotCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getSnapshotCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSnapshotCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getCurrentStateModified struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCurrentStateModified"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getCurrentStateModifiedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCurrentStateModifiedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getSharedFolders struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSharedFolders"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getSharedFoldersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSharedFoldersResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getClipboardMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getClipboardMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getClipboardModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getClipboardModeResponse"`

	Returnval *ClipboardMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setClipboardMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setClipboardMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ClipboardMode *ClipboardMode `xml:"clipboardMode,omitempty" json:"clipboardMode,omitempty"`
}

type IMachine_setClipboardModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setClipboardModeResponse"`
}

type IMachine_getClipboardFileTransfersEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getClipboardFileTransfersEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getClipboardFileTransfersEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getClipboardFileTransfersEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setClipboardFileTransfersEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setClipboardFileTransfersEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ClipboardFileTransfersEnabled bool `xml:"clipboardFileTransfersEnabled,omitempty" json:"clipboardFileTransfersEnabled,omitempty"`
}

type IMachine_setClipboardFileTransfersEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setClipboardFileTransfersEnabledResponse"`
}

type IMachine_getDnDMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getDnDMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getDnDModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getDnDModeResponse"`

	Returnval *DnDMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setDnDMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setDnDMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DnDMode *DnDMode `xml:"dnDMode,omitempty" json:"dnDMode,omitempty"`
}

type IMachine_setDnDModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setDnDModeResponse"`
}

type IMachine_getTeleporterEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTeleporterEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getTeleporterEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTeleporterEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setTeleporterEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setTeleporterEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TeleporterEnabled bool `xml:"teleporterEnabled,omitempty" json:"teleporterEnabled,omitempty"`
}

type IMachine_setTeleporterEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setTeleporterEnabledResponse"`
}

type IMachine_getTeleporterPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTeleporterPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getTeleporterPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTeleporterPortResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setTeleporterPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setTeleporterPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TeleporterPort uint32 `xml:"teleporterPort,omitempty" json:"teleporterPort,omitempty"`
}

type IMachine_setTeleporterPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setTeleporterPortResponse"`
}

type IMachine_getTeleporterAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTeleporterAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getTeleporterAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTeleporterAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setTeleporterAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setTeleporterAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TeleporterAddress string `xml:"teleporterAddress,omitempty" json:"teleporterAddress,omitempty"`
}

type IMachine_setTeleporterAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setTeleporterAddressResponse"`
}

type IMachine_getTeleporterPassword struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTeleporterPassword"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getTeleporterPasswordResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTeleporterPasswordResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setTeleporterPassword struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setTeleporterPassword"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TeleporterPassword string `xml:"teleporterPassword,omitempty" json:"teleporterPassword,omitempty"`
}

type IMachine_setTeleporterPasswordResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setTeleporterPasswordResponse"`
}

type IMachine_getParavirtProvider struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getParavirtProvider"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getParavirtProviderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getParavirtProviderResponse"`

	Returnval *ParavirtProvider `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setParavirtProvider struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setParavirtProvider"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ParavirtProvider *ParavirtProvider `xml:"paravirtProvider,omitempty" json:"paravirtProvider,omitempty"`
}

type IMachine_setParavirtProviderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setParavirtProviderResponse"`
}

type IMachine_getRTCUseUTC struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getRTCUseUTC"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getRTCUseUTCResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getRTCUseUTCResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setRTCUseUTC struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setRTCUseUTC"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	RTCUseUTC bool `xml:"RTCUseUTC,omitempty" json:"RTCUseUTC,omitempty"`
}

type IMachine_setRTCUseUTCResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setRTCUseUTCResponse"`
}

type IMachine_getIOCacheEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getIOCacheEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getIOCacheEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getIOCacheEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setIOCacheEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setIOCacheEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IOCacheEnabled bool `xml:"IOCacheEnabled,omitempty" json:"IOCacheEnabled,omitempty"`
}

type IMachine_setIOCacheEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setIOCacheEnabledResponse"`
}

type IMachine_getIOCacheSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getIOCacheSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getIOCacheSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getIOCacheSizeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setIOCacheSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setIOCacheSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IOCacheSize uint32 `xml:"IOCacheSize,omitempty" json:"IOCacheSize,omitempty"`
}

type IMachine_setIOCacheSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setIOCacheSizeResponse"`
}

type IMachine_getPCIDeviceAssignments struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getPCIDeviceAssignments"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getPCIDeviceAssignmentsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getPCIDeviceAssignmentsResponse"`

	Returnval []*IPCIDeviceAttachment `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getBandwidthControl struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getBandwidthControl"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getBandwidthControlResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getBandwidthControlResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getTracingEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTracingEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getTracingEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTracingEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setTracingEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setTracingEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TracingEnabled bool `xml:"tracingEnabled,omitempty" json:"tracingEnabled,omitempty"`
}

type IMachine_setTracingEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setTracingEnabledResponse"`
}

type IMachine_getTracingConfig struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTracingConfig"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getTracingConfigResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getTracingConfigResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setTracingConfig struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setTracingConfig"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TracingConfig string `xml:"tracingConfig,omitempty" json:"tracingConfig,omitempty"`
}

type IMachine_setTracingConfigResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setTracingConfigResponse"`
}

type IMachine_getAllowTracingToAccessVM struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAllowTracingToAccessVM"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getAllowTracingToAccessVMResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAllowTracingToAccessVMResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setAllowTracingToAccessVM struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setAllowTracingToAccessVM"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AllowTracingToAccessVM bool `xml:"allowTracingToAccessVM,omitempty" json:"allowTracingToAccessVM,omitempty"`
}

type IMachine_setAllowTracingToAccessVMResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setAllowTracingToAccessVMResponse"`
}

type IMachine_getAutostartEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAutostartEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getAutostartEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAutostartEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setAutostartEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setAutostartEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AutostartEnabled bool `xml:"autostartEnabled,omitempty" json:"autostartEnabled,omitempty"`
}

type IMachine_setAutostartEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setAutostartEnabledResponse"`
}

type IMachine_getAutostartDelay struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAutostartDelay"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getAutostartDelayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAutostartDelayResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setAutostartDelay struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setAutostartDelay"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AutostartDelay uint32 `xml:"autostartDelay,omitempty" json:"autostartDelay,omitempty"`
}

type IMachine_setAutostartDelayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setAutostartDelayResponse"`
}

type IMachine_getAutostopType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAutostopType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getAutostopTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getAutostopTypeResponse"`

	Returnval *AutostopType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setAutostopType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setAutostopType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AutostopType *AutostopType `xml:"autostopType,omitempty" json:"autostopType,omitempty"`
}

type IMachine_setAutostopTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setAutostopTypeResponse"`
}

type IMachine_getDefaultFrontend struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getDefaultFrontend"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getDefaultFrontendResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getDefaultFrontendResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setDefaultFrontend struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setDefaultFrontend"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DefaultFrontend string `xml:"defaultFrontend,omitempty" json:"defaultFrontend,omitempty"`
}

type IMachine_setDefaultFrontendResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setDefaultFrontendResponse"`
}

type IMachine_getUSBProxyAvailable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getUSBProxyAvailable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getUSBProxyAvailableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getUSBProxyAvailableResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getVMProcessPriority struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getVMProcessPriority"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getVMProcessPriorityResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getVMProcessPriorityResponse"`

	Returnval *VMProcPriority `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setVMProcessPriority struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setVMProcessPriority"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VMProcessPriority *VMProcPriority `xml:"VMProcessPriority,omitempty" json:"VMProcessPriority,omitempty"`
}

type IMachine_setVMProcessPriorityResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setVMProcessPriorityResponse"`
}

type IMachine_getParavirtDebug struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getParavirtDebug"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getParavirtDebugResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getParavirtDebugResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setParavirtDebug struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setParavirtDebug"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ParavirtDebug string `xml:"paravirtDebug,omitempty" json:"paravirtDebug,omitempty"`
}

type IMachine_setParavirtDebugResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setParavirtDebugResponse"`
}

type IMachine_getCPUProfile struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUProfile"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getCPUProfileResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUProfileResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setCPUProfile struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUProfile"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CPUProfile string `xml:"CPUProfile,omitempty" json:"CPUProfile,omitempty"`
}

type IMachine_setCPUProfileResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUProfileResponse"`
}

type IMachine_getStateKeyId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStateKeyId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getStateKeyIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStateKeyIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getStateKeyStore struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStateKeyStore"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getStateKeyStoreResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStateKeyStoreResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getLogKeyId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getLogKeyId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getLogKeyIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getLogKeyIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getLogKeyStore struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getLogKeyStore"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getLogKeyStoreResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getLogKeyStoreResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getGuestDebugControl struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getGuestDebugControl"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getGuestDebugControlResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getGuestDebugControlResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_lockMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_lockMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Session string `xml:"session,omitempty" json:"session,omitempty"`

	LockType *LockType `xml:"lockType,omitempty" json:"lockType,omitempty"`
}

type IMachine_lockMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_lockMachineResponse"`
}

type IMachine_launchVMProcess struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_launchVMProcess"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Session string `xml:"session,omitempty" json:"session,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	EnvironmentChanges []string `xml:"environmentChanges,omitempty" json:"environmentChanges,omitempty"`
}

type IMachine_launchVMProcessResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_launchVMProcessResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setBootOrder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setBootOrder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Position uint32 `xml:"position,omitempty" json:"position,omitempty"`

	Device *DeviceType `xml:"device,omitempty" json:"device,omitempty"`
}

type IMachine_setBootOrderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setBootOrderResponse"`
}

type IMachine_getBootOrder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getBootOrder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Position uint32 `xml:"position,omitempty" json:"position,omitempty"`
}

type IMachine_getBootOrderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getBootOrderResponse"`

	Returnval *DeviceType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_attachDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_attachDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`

	Type_ *DeviceType `xml:"type,omitempty" json:"type,omitempty"`

	Medium string `xml:"medium,omitempty" json:"medium,omitempty"`
}

type IMachine_attachDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_attachDeviceResponse"`
}

type IMachine_attachDeviceWithoutMedium struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_attachDeviceWithoutMedium"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`

	Type_ *DeviceType `xml:"type,omitempty" json:"type,omitempty"`
}

type IMachine_attachDeviceWithoutMediumResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_attachDeviceWithoutMediumResponse"`
}

type IMachine_detachDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_detachDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`
}

type IMachine_detachDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_detachDeviceResponse"`
}

type IMachine_passthroughDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_passthroughDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`

	Passthrough bool `xml:"passthrough,omitempty" json:"passthrough,omitempty"`
}

type IMachine_passthroughDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_passthroughDeviceResponse"`
}

type IMachine_temporaryEjectDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_temporaryEjectDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`

	TemporaryEject bool `xml:"temporaryEject,omitempty" json:"temporaryEject,omitempty"`
}

type IMachine_temporaryEjectDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_temporaryEjectDeviceResponse"`
}

type IMachine_nonRotationalDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_nonRotationalDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`

	NonRotational bool `xml:"nonRotational,omitempty" json:"nonRotational,omitempty"`
}

type IMachine_nonRotationalDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_nonRotationalDeviceResponse"`
}

type IMachine_setAutoDiscardForDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setAutoDiscardForDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`

	Discard bool `xml:"discard,omitempty" json:"discard,omitempty"`
}

type IMachine_setAutoDiscardForDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setAutoDiscardForDeviceResponse"`
}

type IMachine_setHotPluggableForDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setHotPluggableForDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`

	HotPluggable bool `xml:"hotPluggable,omitempty" json:"hotPluggable,omitempty"`
}

type IMachine_setHotPluggableForDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setHotPluggableForDeviceResponse"`
}

type IMachine_setBandwidthGroupForDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setBandwidthGroupForDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`

	BandwidthGroup string `xml:"bandwidthGroup,omitempty" json:"bandwidthGroup,omitempty"`
}

type IMachine_setBandwidthGroupForDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setBandwidthGroupForDeviceResponse"`
}

type IMachine_setNoBandwidthGroupForDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setNoBandwidthGroupForDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`
}

type IMachine_setNoBandwidthGroupForDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setNoBandwidthGroupForDeviceResponse"`
}

type IMachine_unmountMedium struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_unmountMedium"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`

	Force bool `xml:"force,omitempty" json:"force,omitempty"`
}

type IMachine_unmountMediumResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_unmountMediumResponse"`
}

type IMachine_mountMedium struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_mountMedium"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`

	Medium string `xml:"medium,omitempty" json:"medium,omitempty"`

	Force bool `xml:"force,omitempty" json:"force,omitempty"`
}

type IMachine_mountMediumResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_mountMediumResponse"`
}

type IMachine_getMedium struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getMedium"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`
}

type IMachine_getMediumResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getMediumResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getMediumAttachmentsOfController struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getMediumAttachmentsOfController"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMachine_getMediumAttachmentsOfControllerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getMediumAttachmentsOfControllerResponse"`

	Returnval []*IMediumAttachment `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getMediumAttachment struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getMediumAttachment"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ControllerPort int32 `xml:"controllerPort,omitempty" json:"controllerPort,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`
}

type IMachine_getMediumAttachmentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getMediumAttachmentResponse"`

	Returnval *IMediumAttachment `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_attachHostPCIDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_attachHostPCIDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	HostAddress int32 `xml:"hostAddress,omitempty" json:"hostAddress,omitempty"`

	DesiredGuestAddress int32 `xml:"desiredGuestAddress,omitempty" json:"desiredGuestAddress,omitempty"`

	TryToUnbind bool `xml:"tryToUnbind,omitempty" json:"tryToUnbind,omitempty"`
}

type IMachine_attachHostPCIDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_attachHostPCIDeviceResponse"`
}

type IMachine_detachHostPCIDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_detachHostPCIDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	HostAddress int32 `xml:"hostAddress,omitempty" json:"hostAddress,omitempty"`
}

type IMachine_detachHostPCIDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_detachHostPCIDeviceResponse"`
}

type IMachine_getNetworkAdapter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getNetworkAdapter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Slot uint32 `xml:"slot,omitempty" json:"slot,omitempty"`
}

type IMachine_getNetworkAdapterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getNetworkAdapterResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_addStorageController struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_addStorageController"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	ConnectionType *StorageBus `xml:"connectionType,omitempty" json:"connectionType,omitempty"`
}

type IMachine_addStorageControllerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_addStorageControllerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getStorageControllerByName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStorageControllerByName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMachine_getStorageControllerByNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStorageControllerByNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getStorageControllerByInstance struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStorageControllerByInstance"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ConnectionType *StorageBus `xml:"connectionType,omitempty" json:"connectionType,omitempty"`

	Instance uint32 `xml:"instance,omitempty" json:"instance,omitempty"`
}

type IMachine_getStorageControllerByInstanceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getStorageControllerByInstanceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_removeStorageController struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_removeStorageController"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMachine_removeStorageControllerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_removeStorageControllerResponse"`
}

type IMachine_setStorageControllerBootable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setStorageControllerBootable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Bootable bool `xml:"bootable,omitempty" json:"bootable,omitempty"`
}

type IMachine_setStorageControllerBootableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setStorageControllerBootableResponse"`
}

type IMachine_addUSBController struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_addUSBController"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Type_ *USBControllerType `xml:"type,omitempty" json:"type,omitempty"`
}

type IMachine_addUSBControllerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_addUSBControllerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_removeUSBController struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_removeUSBController"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMachine_removeUSBControllerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_removeUSBControllerResponse"`
}

type IMachine_getUSBControllerByName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getUSBControllerByName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMachine_getUSBControllerByNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getUSBControllerByNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getUSBControllerCountByType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getUSBControllerCountByType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ *USBControllerType `xml:"type,omitempty" json:"type,omitempty"`
}

type IMachine_getUSBControllerCountByTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getUSBControllerCountByTypeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getSerialPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSerialPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Slot uint32 `xml:"slot,omitempty" json:"slot,omitempty"`
}

type IMachine_getSerialPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getSerialPortResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getParallelPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getParallelPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Slot uint32 `xml:"slot,omitempty" json:"slot,omitempty"`
}

type IMachine_getParallelPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getParallelPortResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getExtraDataKeys struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getExtraDataKeys"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getExtraDataKeysResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getExtraDataKeysResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getExtraData struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getExtraData"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`
}

type IMachine_getExtraDataResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getExtraDataResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setExtraData struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setExtraData"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type IMachine_setExtraDataResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setExtraDataResponse"`
}

type IMachine_getCPUProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Property *CPUPropertyType `xml:"property,omitempty" json:"property,omitempty"`
}

type IMachine_getCPUPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUPropertyResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setCPUProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Property *CPUPropertyType `xml:"property,omitempty" json:"property,omitempty"`

	Value bool `xml:"value,omitempty" json:"value,omitempty"`
}

type IMachine_setCPUPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUPropertyResponse"`
}

type IMachine_getCPUIDLeafByOrdinal struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUIDLeafByOrdinal"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Ordinal uint32 `xml:"ordinal,omitempty" json:"ordinal,omitempty"`
}

type IMachine_getCPUIDLeafByOrdinalResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUIDLeafByOrdinalResponse"`

	Idx uint32 `xml:"idx,omitempty" json:"idx,omitempty"`

	IdxSub uint32 `xml:"idxSub,omitempty" json:"idxSub,omitempty"`

	ValEax uint32 `xml:"valEax,omitempty" json:"valEax,omitempty"`

	ValEbx uint32 `xml:"valEbx,omitempty" json:"valEbx,omitempty"`

	ValEcx uint32 `xml:"valEcx,omitempty" json:"valEcx,omitempty"`

	ValEdx uint32 `xml:"valEdx,omitempty" json:"valEdx,omitempty"`
}

type IMachine_getCPUIDLeaf struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUIDLeaf"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Idx uint32 `xml:"idx,omitempty" json:"idx,omitempty"`

	IdxSub uint32 `xml:"idxSub,omitempty" json:"idxSub,omitempty"`
}

type IMachine_getCPUIDLeafResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUIDLeafResponse"`

	ValEax uint32 `xml:"valEax,omitempty" json:"valEax,omitempty"`

	ValEbx uint32 `xml:"valEbx,omitempty" json:"valEbx,omitempty"`

	ValEcx uint32 `xml:"valEcx,omitempty" json:"valEcx,omitempty"`

	ValEdx uint32 `xml:"valEdx,omitempty" json:"valEdx,omitempty"`
}

type IMachine_setCPUIDLeaf struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUIDLeaf"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Idx uint32 `xml:"idx,omitempty" json:"idx,omitempty"`

	IdxSub uint32 `xml:"idxSub,omitempty" json:"idxSub,omitempty"`

	ValEax uint32 `xml:"valEax,omitempty" json:"valEax,omitempty"`

	ValEbx uint32 `xml:"valEbx,omitempty" json:"valEbx,omitempty"`

	ValEcx uint32 `xml:"valEcx,omitempty" json:"valEcx,omitempty"`

	ValEdx uint32 `xml:"valEdx,omitempty" json:"valEdx,omitempty"`
}

type IMachine_setCPUIDLeafResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setCPUIDLeafResponse"`
}

type IMachine_removeCPUIDLeaf struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_removeCPUIDLeaf"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Idx uint32 `xml:"idx,omitempty" json:"idx,omitempty"`

	IdxSub uint32 `xml:"idxSub,omitempty" json:"idxSub,omitempty"`
}

type IMachine_removeCPUIDLeafResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_removeCPUIDLeafResponse"`
}

type IMachine_removeAllCPUIDLeaves struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_removeAllCPUIDLeaves"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_removeAllCPUIDLeavesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_removeAllCPUIDLeavesResponse"`
}

type IMachine_getHWVirtExProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getHWVirtExProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Property *HWVirtExPropertyType `xml:"property,omitempty" json:"property,omitempty"`
}

type IMachine_getHWVirtExPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getHWVirtExPropertyResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setHWVirtExProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setHWVirtExProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Property *HWVirtExPropertyType `xml:"property,omitempty" json:"property,omitempty"`

	Value bool `xml:"value,omitempty" json:"value,omitempty"`
}

type IMachine_setHWVirtExPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setHWVirtExPropertyResponse"`
}

type IMachine_setSettingsFilePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setSettingsFilePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SettingsFilePath string `xml:"settingsFilePath,omitempty" json:"settingsFilePath,omitempty"`
}

type IMachine_setSettingsFilePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setSettingsFilePathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_saveSettings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_saveSettings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_saveSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_saveSettingsResponse"`
}

type IMachine_discardSettings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_discardSettings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_discardSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_discardSettingsResponse"`
}

type IMachine_unregister struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_unregister"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CleanupMode *CleanupMode `xml:"cleanupMode,omitempty" json:"cleanupMode,omitempty"`
}

type IMachine_unregisterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_unregisterResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_deleteConfig struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_deleteConfig"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Media []string `xml:"media,omitempty" json:"media,omitempty"`
}

type IMachine_deleteConfigResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_deleteConfigResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_exportTo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_exportTo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Appliance string `xml:"appliance,omitempty" json:"appliance,omitempty"`

	Location string `xml:"location,omitempty" json:"location,omitempty"`
}

type IMachine_exportToResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_exportToResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_findSnapshot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_findSnapshot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NameOrId string `xml:"nameOrId,omitempty" json:"nameOrId,omitempty"`
}

type IMachine_findSnapshotResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_findSnapshotResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_createSharedFolder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_createSharedFolder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	HostPath string `xml:"hostPath,omitempty" json:"hostPath,omitempty"`

	Writable bool `xml:"writable,omitempty" json:"writable,omitempty"`

	Automount bool `xml:"automount,omitempty" json:"automount,omitempty"`

	AutoMountPoint string `xml:"autoMountPoint,omitempty" json:"autoMountPoint,omitempty"`
}

type IMachine_createSharedFolderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_createSharedFolderResponse"`
}

type IMachine_removeSharedFolder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_removeSharedFolder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMachine_removeSharedFolderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_removeSharedFolderResponse"`
}

type IMachine_canShowConsoleWindow struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_canShowConsoleWindow"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_canShowConsoleWindowResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_canShowConsoleWindowResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_showConsoleWindow struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_showConsoleWindow"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_showConsoleWindowResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_showConsoleWindowResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getGuestProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getGuestProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMachine_getGuestPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getGuestPropertyResponse"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`

	Timestamp int64 `xml:"timestamp,omitempty" json:"timestamp,omitempty"`

	Flags string `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IMachine_getGuestPropertyValue struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getGuestPropertyValue"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Property string `xml:"property,omitempty" json:"property,omitempty"`
}

type IMachine_getGuestPropertyValueResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getGuestPropertyValueResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getGuestPropertyTimestamp struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getGuestPropertyTimestamp"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Property string `xml:"property,omitempty" json:"property,omitempty"`
}

type IMachine_getGuestPropertyTimestampResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getGuestPropertyTimestampResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_setGuestProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setGuestProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Property string `xml:"property,omitempty" json:"property,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`

	Flags string `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IMachine_setGuestPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setGuestPropertyResponse"`
}

type IMachine_setGuestPropertyValue struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setGuestPropertyValue"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Property string `xml:"property,omitempty" json:"property,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type IMachine_setGuestPropertyValueResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_setGuestPropertyValueResponse"`
}

type IMachine_deleteGuestProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_deleteGuestProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMachine_deleteGuestPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_deleteGuestPropertyResponse"`
}

type IMachine_enumerateGuestProperties struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_enumerateGuestProperties"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Patterns string `xml:"patterns,omitempty" json:"patterns,omitempty"`
}

type IMachine_enumerateGuestPropertiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_enumerateGuestPropertiesResponse"`

	Names []string `xml:"names,omitempty" json:"names,omitempty"`

	Values []string `xml:"values,omitempty" json:"values,omitempty"`

	Timestamps []int64 `xml:"timestamps,omitempty" json:"timestamps,omitempty"`

	Flags []string `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IMachine_querySavedGuestScreenInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_querySavedGuestScreenInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`
}

type IMachine_querySavedGuestScreenInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_querySavedGuestScreenInfoResponse"`

	OriginX uint32 `xml:"originX,omitempty" json:"originX,omitempty"`

	OriginY uint32 `xml:"originY,omitempty" json:"originY,omitempty"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type IMachine_readSavedThumbnailToArray struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_readSavedThumbnailToArray"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`

	BitmapFormat *BitmapFormat `xml:"bitmapFormat,omitempty" json:"bitmapFormat,omitempty"`
}

type IMachine_readSavedThumbnailToArrayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_readSavedThumbnailToArrayResponse"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_querySavedScreenshotInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_querySavedScreenshotInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`
}

type IMachine_querySavedScreenshotInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_querySavedScreenshotInfoResponse"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`

	Returnval []*BitmapFormat `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_readSavedScreenshotToArray struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_readSavedScreenshotToArray"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`

	BitmapFormat *BitmapFormat `xml:"bitmapFormat,omitempty" json:"bitmapFormat,omitempty"`
}

type IMachine_readSavedScreenshotToArrayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_readSavedScreenshotToArrayResponse"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_hotPlugCPU struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_hotPlugCPU"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Cpu uint32 `xml:"cpu,omitempty" json:"cpu,omitempty"`
}

type IMachine_hotPlugCPUResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_hotPlugCPUResponse"`
}

type IMachine_hotUnplugCPU struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_hotUnplugCPU"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Cpu uint32 `xml:"cpu,omitempty" json:"cpu,omitempty"`
}

type IMachine_hotUnplugCPUResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_hotUnplugCPUResponse"`
}

type IMachine_getCPUStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Cpu uint32 `xml:"cpu,omitempty" json:"cpu,omitempty"`
}

type IMachine_getCPUStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getCPUStatusResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getEffectiveParavirtProvider struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getEffectiveParavirtProvider"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getEffectiveParavirtProviderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getEffectiveParavirtProviderResponse"`

	Returnval *ParavirtProvider `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_queryLogFilename struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_queryLogFilename"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Idx uint32 `xml:"idx,omitempty" json:"idx,omitempty"`
}

type IMachine_queryLogFilenameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_queryLogFilenameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_readLog struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_readLog"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Idx uint32 `xml:"idx,omitempty" json:"idx,omitempty"`

	Offset int64 `xml:"offset,omitempty" json:"offset,omitempty"`

	Size int64 `xml:"size,omitempty" json:"size,omitempty"`
}

type IMachine_readLogResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_readLogResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_cloneTo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_cloneTo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Target string `xml:"target,omitempty" json:"target,omitempty"`

	Mode *CloneMode `xml:"mode,omitempty" json:"mode,omitempty"`

	Options []*CloneOptions `xml:"options,omitempty" json:"options,omitempty"`
}

type IMachine_cloneToResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_cloneToResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_moveTo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_moveTo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Folder string `xml:"folder,omitempty" json:"folder,omitempty"`

	Type_ string `xml:"type,omitempty" json:"type,omitempty"`
}

type IMachine_moveToResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_moveToResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_saveState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_saveState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_saveStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_saveStateResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_adoptSavedState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_adoptSavedState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SavedStateFile string `xml:"savedStateFile,omitempty" json:"savedStateFile,omitempty"`
}

type IMachine_adoptSavedStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_adoptSavedStateResponse"`
}

type IMachine_discardSavedState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_discardSavedState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	FRemoveFile bool `xml:"fRemoveFile,omitempty" json:"fRemoveFile,omitempty"`
}

type IMachine_discardSavedStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_discardSavedStateResponse"`
}

type IMachine_takeSnapshot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_takeSnapshot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	Pause bool `xml:"pause,omitempty" json:"pause,omitempty"`
}

type IMachine_takeSnapshotResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_takeSnapshotResponse"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_deleteSnapshot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_deleteSnapshot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IMachine_deleteSnapshotResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_deleteSnapshotResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_deleteSnapshotAndAllChildren struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_deleteSnapshotAndAllChildren"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IMachine_deleteSnapshotAndAllChildrenResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_deleteSnapshotAndAllChildrenResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_deleteSnapshotRange struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_deleteSnapshotRange"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	StartId string `xml:"startId,omitempty" json:"startId,omitempty"`

	EndId string `xml:"endId,omitempty" json:"endId,omitempty"`
}

type IMachine_deleteSnapshotRangeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_deleteSnapshotRangeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_restoreSnapshot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_restoreSnapshot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Snapshot string `xml:"snapshot,omitempty" json:"snapshot,omitempty"`
}

type IMachine_restoreSnapshotResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_restoreSnapshotResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_applyDefaults struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_applyDefaults"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Flags string `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IMachine_applyDefaultsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_applyDefaultsResponse"`
}

type IMachine_changeEncryption struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_changeEncryption"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CurrentPassword string `xml:"currentPassword,omitempty" json:"currentPassword,omitempty"`

	Cipher string `xml:"cipher,omitempty" json:"cipher,omitempty"`

	NewPassword string `xml:"newPassword,omitempty" json:"newPassword,omitempty"`

	NewPasswordId string `xml:"newPasswordId,omitempty" json:"newPasswordId,omitempty"`

	Force bool `xml:"force,omitempty" json:"force,omitempty"`
}

type IMachine_changeEncryptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_changeEncryptionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachine_getEncryptionSettings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getEncryptionSettings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_getEncryptionSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_getEncryptionSettingsResponse"`

	Cipher string `xml:"cipher,omitempty" json:"cipher,omitempty"`

	PasswordId string `xml:"passwordId,omitempty" json:"passwordId,omitempty"`
}

type IMachine_checkEncryptionPassword struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_checkEncryptionPassword"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type IMachine_checkEncryptionPasswordResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_checkEncryptionPasswordResponse"`
}

type IMachine_addEncryptionPassword struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_addEncryptionPassword"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type IMachine_addEncryptionPasswordResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_addEncryptionPasswordResponse"`
}

type IMachine_addEncryptionPasswords struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_addEncryptionPasswords"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Ids []string `xml:"ids,omitempty" json:"ids,omitempty"`

	Passwords []string `xml:"passwords,omitempty" json:"passwords,omitempty"`
}

type IMachine_addEncryptionPasswordsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_addEncryptionPasswordsResponse"`
}

type IMachine_removeEncryptionPassword struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_removeEncryptionPassword"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IMachine_removeEncryptionPasswordResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_removeEncryptionPasswordResponse"`
}

type IMachine_clearAllEncryptionPasswords struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_clearAllEncryptionPasswords"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachine_clearAllEncryptionPasswordsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachine_clearAllEncryptionPasswordsResponse"`
}

type IEmulatedUSB_getWebcams struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEmulatedUSB_getWebcams"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IEmulatedUSB_getWebcamsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEmulatedUSB_getWebcamsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IEmulatedUSB_webcamAttach struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEmulatedUSB_webcamAttach"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	Settings string `xml:"settings,omitempty" json:"settings,omitempty"`
}

type IEmulatedUSB_webcamAttachResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEmulatedUSB_webcamAttachResponse"`
}

type IEmulatedUSB_webcamDetach struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEmulatedUSB_webcamDetach"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`
}

type IEmulatedUSB_webcamDetachResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEmulatedUSB_webcamDetachResponse"`
}

type IConsole_getMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getMachineResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getStateResponse"`

	Returnval *MachineState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getGuest struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getGuest"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getGuestResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getGuestResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getKeyboard struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getKeyboard"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getKeyboardResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getKeyboardResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getMouse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getMouse"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getMouseResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getMouseResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getDisplay struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getDisplay"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getDisplayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getDisplayResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getDebugger struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getDebugger"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getDebuggerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getDebuggerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getUSBDevices struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getUSBDevices"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getUSBDevicesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getUSBDevicesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getRemoteUSBDevices struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getRemoteUSBDevices"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getRemoteUSBDevicesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getRemoteUSBDevicesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getSharedFolders struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getSharedFolders"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getSharedFoldersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getSharedFoldersResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getVRDEServerInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getVRDEServerInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getVRDEServerInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getVRDEServerInfoResponse"`

	Returnval *IVRDEServerInfo `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getEventSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getEventSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getEventSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getEventSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getAttachedPCIDevices struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getAttachedPCIDevices"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getAttachedPCIDevicesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getAttachedPCIDevicesResponse"`

	Returnval []*IPCIDeviceAttachment `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getUseHostClipboard struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getUseHostClipboard"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getUseHostClipboardResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getUseHostClipboardResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_setUseHostClipboard struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_setUseHostClipboard"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	UseHostClipboard bool `xml:"useHostClipboard,omitempty" json:"useHostClipboard,omitempty"`
}

type IConsole_setUseHostClipboardResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_setUseHostClipboardResponse"`
}

type IConsole_getEmulatedUSB struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getEmulatedUSB"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getEmulatedUSBResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getEmulatedUSBResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_powerUp struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_powerUp"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_powerUpResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_powerUpResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_powerUpPaused struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_powerUpPaused"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_powerUpPausedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_powerUpPausedResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_powerDown struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_powerDown"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_powerDownResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_powerDownResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_reset struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_reset"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_resetResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_resetResponse"`
}

type IConsole_pause struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_pause"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_pauseResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_pauseResponse"`
}

type IConsole_resume struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_resume"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_resumeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_resumeResponse"`
}

type IConsole_powerButton struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_powerButton"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_powerButtonResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_powerButtonResponse"`
}

type IConsole_sleepButton struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_sleepButton"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_sleepButtonResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_sleepButtonResponse"`
}

type IConsole_getPowerButtonHandled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getPowerButtonHandled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getPowerButtonHandledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getPowerButtonHandledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getGuestEnteredACPIMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getGuestEnteredACPIMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_getGuestEnteredACPIModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getGuestEnteredACPIModeResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_getDeviceActivity struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getDeviceActivity"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ []*DeviceType `xml:"type,omitempty" json:"type,omitempty"`
}

type IConsole_getDeviceActivityResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_getDeviceActivityResponse"`

	Returnval []*DeviceActivity `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_attachUSBDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_attachUSBDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	CaptureFilename string `xml:"captureFilename,omitempty" json:"captureFilename,omitempty"`
}

type IConsole_attachUSBDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_attachUSBDeviceResponse"`
}

type IConsole_detachUSBDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_detachUSBDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IConsole_detachUSBDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_detachUSBDeviceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_findUSBDeviceByAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_findUSBDeviceByAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IConsole_findUSBDeviceByAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_findUSBDeviceByAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_findUSBDeviceById struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_findUSBDeviceById"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IConsole_findUSBDeviceByIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_findUSBDeviceByIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_createSharedFolder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_createSharedFolder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	HostPath string `xml:"hostPath,omitempty" json:"hostPath,omitempty"`

	Writable bool `xml:"writable,omitempty" json:"writable,omitempty"`

	Automount bool `xml:"automount,omitempty" json:"automount,omitempty"`

	AutoMountPoint string `xml:"autoMountPoint,omitempty" json:"autoMountPoint,omitempty"`
}

type IConsole_createSharedFolderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_createSharedFolderResponse"`
}

type IConsole_removeSharedFolder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_removeSharedFolder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IConsole_removeSharedFolderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_removeSharedFolderResponse"`
}

type IConsole_teleport struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_teleport"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Hostname string `xml:"hostname,omitempty" json:"hostname,omitempty"`

	Tcpport uint32 `xml:"tcpport,omitempty" json:"tcpport,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	MaxDowntime uint32 `xml:"maxDowntime,omitempty" json:"maxDowntime,omitempty"`
}

type IConsole_teleportResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_teleportResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IConsole_addEncryptionPassword struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_addEncryptionPassword"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	ClearOnSuspend bool `xml:"clearOnSuspend,omitempty" json:"clearOnSuspend,omitempty"`
}

type IConsole_addEncryptionPasswordResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_addEncryptionPasswordResponse"`
}

type IConsole_addEncryptionPasswords struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_addEncryptionPasswords"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Ids []string `xml:"ids,omitempty" json:"ids,omitempty"`

	Passwords []string `xml:"passwords,omitempty" json:"passwords,omitempty"`

	ClearOnSuspend bool `xml:"clearOnSuspend,omitempty" json:"clearOnSuspend,omitempty"`
}

type IConsole_addEncryptionPasswordsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_addEncryptionPasswordsResponse"`
}

type IConsole_removeEncryptionPassword struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_removeEncryptionPassword"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IConsole_removeEncryptionPasswordResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_removeEncryptionPasswordResponse"`
}

type IConsole_clearAllEncryptionPasswords struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_clearAllEncryptionPasswords"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IConsole_clearAllEncryptionPasswordsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IConsole_clearAllEncryptionPasswordsResponse"`
}

type IHostNetworkInterface_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getShortName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getShortName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getShortNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getShortNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getNetworkName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getNetworkName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getNetworkNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getNetworkNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getDHCPEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getDHCPEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getDHCPEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getDHCPEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getIPAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getIPAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getIPAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getIPAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getNetworkMask struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getNetworkMask"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getNetworkMaskResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getNetworkMaskResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getIPV6Supported struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getIPV6Supported"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getIPV6SupportedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getIPV6SupportedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getIPV6Address struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getIPV6Address"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getIPV6AddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getIPV6AddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getIPV6NetworkMaskPrefixLength struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getIPV6NetworkMaskPrefixLength"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getHardwareAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getHardwareAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getHardwareAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getHardwareAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getMediumType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getMediumType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getMediumTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getMediumTypeResponse"`

	Returnval *HostNetworkInterfaceMediumType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getStatusResponse"`

	Returnval *HostNetworkInterfaceStatus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getInterfaceType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getInterfaceType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getInterfaceTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getInterfaceTypeResponse"`

	Returnval *HostNetworkInterfaceType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_getWireless struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getWireless"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_getWirelessResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_getWirelessResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNetworkInterface_enableStaticIPConfig struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_enableStaticIPConfig"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IPAddress string `xml:"IPAddress,omitempty" json:"IPAddress,omitempty"`

	NetworkMask string `xml:"networkMask,omitempty" json:"networkMask,omitempty"`
}

type IHostNetworkInterface_enableStaticIPConfigResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_enableStaticIPConfigResponse"`
}

type IHostNetworkInterface_enableStaticIPConfigV6 struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_enableStaticIPConfigV6"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IPV6Address string `xml:"IPV6Address,omitempty" json:"IPV6Address,omitempty"`

	IPV6NetworkMaskPrefixLength uint32 `xml:"IPV6NetworkMaskPrefixLength,omitempty" json:"IPV6NetworkMaskPrefixLength,omitempty"`
}

type IHostNetworkInterface_enableStaticIPConfigV6Response struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_enableStaticIPConfigV6Response"`
}

type IHostNetworkInterface_enableDynamicIPConfig struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_enableDynamicIPConfig"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_enableDynamicIPConfigResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_enableDynamicIPConfigResponse"`
}

type IHostNetworkInterface_DHCPRediscover struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_DHCPRediscover"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNetworkInterface_DHCPRediscoverResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNetworkInterface_DHCPRediscoverResponse"`
}

type IHostVideoInputDevice_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostVideoInputDevice_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostVideoInputDevice_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostVideoInputDevice_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostVideoInputDevice_getPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostVideoInputDevice_getPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostVideoInputDevice_getPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostVideoInputDevice_getPathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostVideoInputDevice_getAlias struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostVideoInputDevice_getAlias"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostVideoInputDevice_getAliasResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostVideoInputDevice_getAliasResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getEventSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getEventSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getEventSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getEventSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getOrder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getOrder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getOrderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getOrderResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getDependsOn struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getDependsOn"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getDependsOnResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getDependsOnResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getVersion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getVersion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getVersionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getVersionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getDownloadUrl struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getDownloadUrl"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getDownloadUrlResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getDownloadUrlResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getWebUrl struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getWebUrl"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getWebUrlResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getWebUrlResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getReleaseNotes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getReleaseNotes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getReleaseNotesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getReleaseNotesResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_setEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_setEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type IUpdateAgent_setEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_setEnabledResponse"`
}

type IUpdateAgent_getHidden struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getHidden"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getHiddenResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getHiddenResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getStateResponse"`

	Returnval *UpdateState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getCheckFrequency struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getCheckFrequency"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getCheckFrequencyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getCheckFrequencyResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_setCheckFrequency struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_setCheckFrequency"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CheckFrequency uint32 `xml:"checkFrequency,omitempty" json:"checkFrequency,omitempty"`
}

type IUpdateAgent_setCheckFrequencyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_setCheckFrequencyResponse"`
}

type IUpdateAgent_getChannel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getChannel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getChannelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getChannelResponse"`

	Returnval *UpdateChannel `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_setChannel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_setChannel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Channel *UpdateChannel `xml:"channel,omitempty" json:"channel,omitempty"`
}

type IUpdateAgent_setChannelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_setChannelResponse"`
}

type IUpdateAgent_getRepositoryURL struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getRepositoryURL"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getRepositoryURLResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getRepositoryURLResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_setRepositoryURL struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_setRepositoryURL"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	RepositoryURL string `xml:"repositoryURL,omitempty" json:"repositoryURL,omitempty"`
}

type IUpdateAgent_setRepositoryURLResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_setRepositoryURLResponse"`
}

type IUpdateAgent_getLastCheckDate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getLastCheckDate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getLastCheckDateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getLastCheckDateResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getCheckCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getCheckCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getCheckCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getCheckCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getIsCheckNeeded struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getIsCheckNeeded"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getIsCheckNeededResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getIsCheckNeededResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_getSupportedChannels struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getSupportedChannels"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_getSupportedChannelsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_getSupportedChannelsResponse"`

	Returnval []*UpdateChannel `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_checkFor struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_checkFor"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_checkForResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_checkForResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_download struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_download"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_downloadResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_downloadResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_install struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_install"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_installResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_installResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgent_rollback struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_rollback"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgent_rollbackResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgent_rollbackResponse"`
}

type IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostDrive_getDrivePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getDrivePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostDrive_getDrivePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getDrivePathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostDrive_getPartitioningType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getPartitioningType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostDrive_getPartitioningTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getPartitioningTypeResponse"`

	Returnval *PartitioningType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostDrive_getUuid struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getUuid"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostDrive_getUuidResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getUuidResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostDrive_getSectorSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getSectorSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostDrive_getSectorSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getSectorSizeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostDrive_getSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostDrive_getSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getSizeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostDrive_getModel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getModel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostDrive_getModelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getModelResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostDrive_getPartitions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getPartitions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostDrive_getPartitionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostDrive_getPartitionsResponse"`

	Returnval []*IHostDrivePartition `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getDVDDrives struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getDVDDrives"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getDVDDrivesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getDVDDrivesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getFloppyDrives struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getFloppyDrives"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getFloppyDrivesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getFloppyDrivesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getAudioDevices struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getAudioDevices"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getAudioDevicesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getAudioDevicesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getUSBDevices struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getUSBDevices"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getUSBDevicesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getUSBDevicesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getUSBDeviceFilters struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getUSBDeviceFilters"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getUSBDeviceFiltersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getUSBDeviceFiltersResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getNetworkInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getNetworkInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getNetworkInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getNetworkInterfacesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getNameServers struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getNameServers"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getNameServersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getNameServersResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getDomainName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getDomainName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getDomainNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getDomainNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getSearchStrings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getSearchStrings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getSearchStringsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getSearchStringsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getProcessorCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getProcessorCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getProcessorOnlineCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorOnlineCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getProcessorOnlineCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorOnlineCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getProcessorCoreCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorCoreCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getProcessorCoreCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorCoreCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getProcessorOnlineCoreCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorOnlineCoreCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getProcessorOnlineCoreCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorOnlineCoreCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getHostDrives struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getHostDrives"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getHostDrivesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getHostDrivesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getMemorySize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getMemorySize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getMemorySizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getMemorySizeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getMemoryAvailable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getMemoryAvailable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getMemoryAvailableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getMemoryAvailableResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getOperatingSystem struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getOperatingSystem"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getOperatingSystemResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getOperatingSystemResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getOSVersion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getOSVersion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getOSVersionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getOSVersionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getUTCTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getUTCTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getUTCTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getUTCTimeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getAcceleration3DAvailable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getAcceleration3DAvailable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getAcceleration3DAvailableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getAcceleration3DAvailableResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getVideoInputDevices struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getVideoInputDevices"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getVideoInputDevicesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getVideoInputDevicesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getUpdateHost struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getUpdateHost"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getUpdateHostResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getUpdateHostResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getUpdateExtPack struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getUpdateExtPack"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getUpdateExtPackResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getUpdateExtPackResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getUpdateGuestAdditions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getUpdateGuestAdditions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_getUpdateGuestAdditionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getUpdateGuestAdditionsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getProcessorSpeed struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorSpeed"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CpuId uint32 `xml:"cpuId,omitempty" json:"cpuId,omitempty"`
}

type IHost_getProcessorSpeedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorSpeedResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getProcessorFeature struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorFeature"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Feature *ProcessorFeature `xml:"feature,omitempty" json:"feature,omitempty"`
}

type IHost_getProcessorFeatureResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorFeatureResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getProcessorDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CpuId uint32 `xml:"cpuId,omitempty" json:"cpuId,omitempty"`
}

type IHost_getProcessorDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorDescriptionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_getProcessorCPUIDLeaf struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorCPUIDLeaf"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CpuId uint32 `xml:"cpuId,omitempty" json:"cpuId,omitempty"`

	Leaf uint32 `xml:"leaf,omitempty" json:"leaf,omitempty"`

	SubLeaf uint32 `xml:"subLeaf,omitempty" json:"subLeaf,omitempty"`
}

type IHost_getProcessorCPUIDLeafResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_getProcessorCPUIDLeafResponse"`

	ValEax uint32 `xml:"valEax,omitempty" json:"valEax,omitempty"`

	ValEbx uint32 `xml:"valEbx,omitempty" json:"valEbx,omitempty"`

	ValEcx uint32 `xml:"valEcx,omitempty" json:"valEcx,omitempty"`

	ValEdx uint32 `xml:"valEdx,omitempty" json:"valEdx,omitempty"`
}

type IHost_createHostOnlyNetworkInterface struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_createHostOnlyNetworkInterface"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_createHostOnlyNetworkInterfaceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_createHostOnlyNetworkInterfaceResponse"`

	HostInterface string `xml:"hostInterface,omitempty" json:"hostInterface,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_removeHostOnlyNetworkInterface struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_removeHostOnlyNetworkInterface"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IHost_removeHostOnlyNetworkInterfaceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_removeHostOnlyNetworkInterfaceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_createUSBDeviceFilter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_createUSBDeviceFilter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IHost_createUSBDeviceFilterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_createUSBDeviceFilterResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_insertUSBDeviceFilter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_insertUSBDeviceFilter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Position uint32 `xml:"position,omitempty" json:"position,omitempty"`

	Filter string `xml:"filter,omitempty" json:"filter,omitempty"`
}

type IHost_insertUSBDeviceFilterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_insertUSBDeviceFilterResponse"`
}

type IHost_removeUSBDeviceFilter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_removeUSBDeviceFilter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Position uint32 `xml:"position,omitempty" json:"position,omitempty"`
}

type IHost_removeUSBDeviceFilterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_removeUSBDeviceFilterResponse"`
}

type IHost_findHostDVDDrive struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findHostDVDDrive"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IHost_findHostDVDDriveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findHostDVDDriveResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_findHostFloppyDrive struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findHostFloppyDrive"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IHost_findHostFloppyDriveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findHostFloppyDriveResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_findHostNetworkInterfaceByName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findHostNetworkInterfaceByName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IHost_findHostNetworkInterfaceByNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findHostNetworkInterfaceByNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_findHostNetworkInterfaceById struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findHostNetworkInterfaceById"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IHost_findHostNetworkInterfaceByIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findHostNetworkInterfaceByIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_findHostNetworkInterfacesOfType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findHostNetworkInterfacesOfType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ *HostNetworkInterfaceType `xml:"type,omitempty" json:"type,omitempty"`
}

type IHost_findHostNetworkInterfacesOfTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findHostNetworkInterfacesOfTypeResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_findUSBDeviceById struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findUSBDeviceById"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IHost_findUSBDeviceByIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findUSBDeviceByIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_findUSBDeviceByAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findUSBDeviceByAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IHost_findUSBDeviceByAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_findUSBDeviceByAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_generateMACAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_generateMACAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHost_generateMACAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_generateMACAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHost_addUSBDeviceSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_addUSBDeviceSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Backend string `xml:"backend,omitempty" json:"backend,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Address string `xml:"address,omitempty" json:"address,omitempty"`

	PropertyNames []string `xml:"propertyNames,omitempty" json:"propertyNames,omitempty"`

	PropertyValues []string `xml:"propertyValues,omitempty" json:"propertyValues,omitempty"`
}

type IHost_addUSBDeviceSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_addUSBDeviceSourceResponse"`
}

type IHost_removeUSBDeviceSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_removeUSBDeviceSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IHost_removeUSBDeviceSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHost_removeUSBDeviceSourceResponse"`
}

type ICPUProfile_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICPUProfile_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICPUProfile_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICPUProfile_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICPUProfile_getFullName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICPUProfile_getFullName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICPUProfile_getFullNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICPUProfile_getFullNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICPUProfile_getArchitecture struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICPUProfile_getArchitecture"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICPUProfile_getArchitectureResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICPUProfile_getArchitectureResponse"`

	Returnval *CPUArchitecture `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMinGuestRAM struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMinGuestRAM"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getMinGuestRAMResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMinGuestRAMResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMaxGuestRAM struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxGuestRAM"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getMaxGuestRAMResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxGuestRAMResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMinGuestVRAM struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMinGuestVRAM"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getMinGuestVRAMResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMinGuestVRAMResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMaxGuestVRAM struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxGuestVRAM"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getMaxGuestVRAMResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxGuestVRAMResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMinGuestCPUCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMinGuestCPUCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getMinGuestCPUCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMinGuestCPUCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMaxGuestCPUCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxGuestCPUCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getMaxGuestCPUCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxGuestCPUCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMaxGuestMonitors struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxGuestMonitors"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getMaxGuestMonitorsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxGuestMonitorsResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getInfoVDSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getInfoVDSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getInfoVDSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getInfoVDSizeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSerialPortCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSerialPortCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSerialPortCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSerialPortCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getParallelPortCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getParallelPortCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getParallelPortCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getParallelPortCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMaxBootPosition struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxBootPosition"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getMaxBootPositionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxBootPositionResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getRawModeSupported struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getRawModeSupported"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getRawModeSupportedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getRawModeSupportedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getExclusiveHwVirt struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getExclusiveHwVirt"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getExclusiveHwVirtResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getExclusiveHwVirtResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setExclusiveHwVirt struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setExclusiveHwVirt"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ExclusiveHwVirt bool `xml:"exclusiveHwVirt,omitempty" json:"exclusiveHwVirt,omitempty"`
}

type ISystemProperties_setExclusiveHwVirtResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setExclusiveHwVirtResponse"`
}

type ISystemProperties_getDefaultMachineFolder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultMachineFolder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getDefaultMachineFolderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultMachineFolderResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setDefaultMachineFolder struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setDefaultMachineFolder"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DefaultMachineFolder string `xml:"defaultMachineFolder,omitempty" json:"defaultMachineFolder,omitempty"`
}

type ISystemProperties_setDefaultMachineFolderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setDefaultMachineFolderResponse"`
}

type ISystemProperties_getLoggingLevel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getLoggingLevel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getLoggingLevelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getLoggingLevelResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setLoggingLevel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setLoggingLevel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LoggingLevel string `xml:"loggingLevel,omitempty" json:"loggingLevel,omitempty"`
}

type ISystemProperties_setLoggingLevelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setLoggingLevelResponse"`
}

type ISystemProperties_getMediumFormats struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMediumFormats"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getMediumFormatsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMediumFormatsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getDefaultHardDiskFormat struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultHardDiskFormat"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getDefaultHardDiskFormatResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultHardDiskFormatResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setDefaultHardDiskFormat struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setDefaultHardDiskFormat"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DefaultHardDiskFormat string `xml:"defaultHardDiskFormat,omitempty" json:"defaultHardDiskFormat,omitempty"`
}

type ISystemProperties_setDefaultHardDiskFormatResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setDefaultHardDiskFormatResponse"`
}

type ISystemProperties_getFreeDiskSpaceWarning struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getFreeDiskSpaceWarning"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getFreeDiskSpaceWarningResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getFreeDiskSpaceWarningResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setFreeDiskSpaceWarning struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setFreeDiskSpaceWarning"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	FreeDiskSpaceWarning int64 `xml:"freeDiskSpaceWarning,omitempty" json:"freeDiskSpaceWarning,omitempty"`
}

type ISystemProperties_setFreeDiskSpaceWarningResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setFreeDiskSpaceWarningResponse"`
}

type ISystemProperties_getFreeDiskSpacePercentWarning struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getFreeDiskSpacePercentWarning"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getFreeDiskSpacePercentWarningResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getFreeDiskSpacePercentWarningResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setFreeDiskSpacePercentWarning struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setFreeDiskSpacePercentWarning"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	FreeDiskSpacePercentWarning uint32 `xml:"freeDiskSpacePercentWarning,omitempty" json:"freeDiskSpacePercentWarning,omitempty"`
}

type ISystemProperties_setFreeDiskSpacePercentWarningResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setFreeDiskSpacePercentWarningResponse"`
}

type ISystemProperties_getFreeDiskSpaceError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getFreeDiskSpaceError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getFreeDiskSpaceErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getFreeDiskSpaceErrorResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setFreeDiskSpaceError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setFreeDiskSpaceError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	FreeDiskSpaceError int64 `xml:"freeDiskSpaceError,omitempty" json:"freeDiskSpaceError,omitempty"`
}

type ISystemProperties_setFreeDiskSpaceErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setFreeDiskSpaceErrorResponse"`
}

type ISystemProperties_getFreeDiskSpacePercentError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getFreeDiskSpacePercentError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getFreeDiskSpacePercentErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getFreeDiskSpacePercentErrorResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setFreeDiskSpacePercentError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setFreeDiskSpacePercentError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	FreeDiskSpacePercentError uint32 `xml:"freeDiskSpacePercentError,omitempty" json:"freeDiskSpacePercentError,omitempty"`
}

type ISystemProperties_setFreeDiskSpacePercentErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setFreeDiskSpacePercentErrorResponse"`
}

type ISystemProperties_getVRDEAuthLibrary struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getVRDEAuthLibrary"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getVRDEAuthLibraryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getVRDEAuthLibraryResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setVRDEAuthLibrary struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setVRDEAuthLibrary"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VRDEAuthLibrary string `xml:"VRDEAuthLibrary,omitempty" json:"VRDEAuthLibrary,omitempty"`
}

type ISystemProperties_setVRDEAuthLibraryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setVRDEAuthLibraryResponse"`
}

type ISystemProperties_getWebServiceAuthLibrary struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getWebServiceAuthLibrary"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getWebServiceAuthLibraryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getWebServiceAuthLibraryResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setWebServiceAuthLibrary struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setWebServiceAuthLibrary"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	WebServiceAuthLibrary string `xml:"webServiceAuthLibrary,omitempty" json:"webServiceAuthLibrary,omitempty"`
}

type ISystemProperties_setWebServiceAuthLibraryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setWebServiceAuthLibraryResponse"`
}

type ISystemProperties_getDefaultVRDEExtPack struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultVRDEExtPack"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getDefaultVRDEExtPackResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultVRDEExtPackResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setDefaultVRDEExtPack struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setDefaultVRDEExtPack"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DefaultVRDEExtPack string `xml:"defaultVRDEExtPack,omitempty" json:"defaultVRDEExtPack,omitempty"`
}

type ISystemProperties_setDefaultVRDEExtPackResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setDefaultVRDEExtPackResponse"`
}

type ISystemProperties_getDefaultCryptoExtPack struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultCryptoExtPack"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getDefaultCryptoExtPackResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultCryptoExtPackResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setDefaultCryptoExtPack struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setDefaultCryptoExtPack"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DefaultCryptoExtPack string `xml:"defaultCryptoExtPack,omitempty" json:"defaultCryptoExtPack,omitempty"`
}

type ISystemProperties_setDefaultCryptoExtPackResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setDefaultCryptoExtPackResponse"`
}

type ISystemProperties_getLogHistoryCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getLogHistoryCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getLogHistoryCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getLogHistoryCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setLogHistoryCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setLogHistoryCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LogHistoryCount uint32 `xml:"logHistoryCount,omitempty" json:"logHistoryCount,omitempty"`
}

type ISystemProperties_setLogHistoryCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setLogHistoryCountResponse"`
}

type ISystemProperties_getDefaultAudioDriver struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultAudioDriver"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getDefaultAudioDriverResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultAudioDriverResponse"`

	Returnval *AudioDriverType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getAutostartDatabasePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getAutostartDatabasePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getAutostartDatabasePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getAutostartDatabasePathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setAutostartDatabasePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setAutostartDatabasePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AutostartDatabasePath string `xml:"autostartDatabasePath,omitempty" json:"autostartDatabasePath,omitempty"`
}

type ISystemProperties_setAutostartDatabasePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setAutostartDatabasePathResponse"`
}

type ISystemProperties_getDefaultAdditionsISO struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultAdditionsISO"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getDefaultAdditionsISOResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultAdditionsISOResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setDefaultAdditionsISO struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setDefaultAdditionsISO"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DefaultAdditionsISO string `xml:"defaultAdditionsISO,omitempty" json:"defaultAdditionsISO,omitempty"`
}

type ISystemProperties_setDefaultAdditionsISOResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setDefaultAdditionsISOResponse"`
}

type ISystemProperties_getDefaultFrontend struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultFrontend"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getDefaultFrontendResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultFrontendResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setDefaultFrontend struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setDefaultFrontend"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DefaultFrontend string `xml:"defaultFrontend,omitempty" json:"defaultFrontend,omitempty"`
}

type ISystemProperties_setDefaultFrontendResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setDefaultFrontendResponse"`
}

type ISystemProperties_getScreenShotFormats struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getScreenShotFormats"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getScreenShotFormatsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getScreenShotFormatsResponse"`

	Returnval []*BitmapFormat `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getProxyMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getProxyMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getProxyModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getProxyModeResponse"`

	Returnval *ProxyMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setProxyMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setProxyMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ProxyMode *ProxyMode `xml:"proxyMode,omitempty" json:"proxyMode,omitempty"`
}

type ISystemProperties_setProxyModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setProxyModeResponse"`
}

type ISystemProperties_getProxyURL struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getProxyURL"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getProxyURLResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getProxyURLResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setProxyURL struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setProxyURL"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ProxyURL string `xml:"proxyURL,omitempty" json:"proxyURL,omitempty"`
}

type ISystemProperties_setProxyURLResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setProxyURLResponse"`
}

type ISystemProperties_getSupportedParavirtProviders struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedParavirtProviders"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedParavirtProvidersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedParavirtProvidersResponse"`

	Returnval []*ParavirtProvider `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedClipboardModes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedClipboardModes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedClipboardModesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedClipboardModesResponse"`

	Returnval []*ClipboardMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedDnDModes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedDnDModes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedDnDModesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedDnDModesResponse"`

	Returnval []*DnDMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedFirmwareTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedFirmwareTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedFirmwareTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedFirmwareTypesResponse"`

	Returnval []*FirmwareType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedPointingHIDTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedPointingHIDTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedPointingHIDTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedPointingHIDTypesResponse"`

	Returnval []*PointingHIDType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedKeyboardHIDTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedKeyboardHIDTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedKeyboardHIDTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedKeyboardHIDTypesResponse"`

	Returnval []*KeyboardHIDType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedVFSTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedVFSTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedVFSTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedVFSTypesResponse"`

	Returnval []*VFSType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedImportOptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedImportOptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedImportOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedImportOptionsResponse"`

	Returnval []*ImportOptions `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedExportOptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedExportOptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedExportOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedExportOptionsResponse"`

	Returnval []*ExportOptions `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedRecordingFeatures struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedRecordingFeatures"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedRecordingFeaturesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedRecordingFeaturesResponse"`

	Returnval []*RecordingFeature `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedRecordingAudioCodecs struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedRecordingAudioCodecs"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedRecordingAudioCodecsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedRecordingAudioCodecsResponse"`

	Returnval []*RecordingAudioCodec `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedRecordingVideoCodecs struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedRecordingVideoCodecs"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedRecordingVideoCodecsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedRecordingVideoCodecsResponse"`

	Returnval []*RecordingVideoCodec `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedRecordingVSModes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedRecordingVSModes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedRecordingVSModesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedRecordingVSModesResponse"`

	Returnval []*RecordingVideoScalingMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedRecordingARCModes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedRecordingARCModes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedRecordingARCModesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedRecordingARCModesResponse"`

	Returnval []*RecordingRateControlMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedRecordingVRCModes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedRecordingVRCModes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedRecordingVRCModesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedRecordingVRCModesResponse"`

	Returnval []*RecordingRateControlMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedGraphicsControllerTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedGraphicsControllerTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedGraphicsControllerTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedGraphicsControllerTypesResponse"`

	Returnval []*GraphicsControllerType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedCloneOptions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedCloneOptions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedCloneOptionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedCloneOptionsResponse"`

	Returnval []*CloneOptions `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedAutostopTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedAutostopTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedAutostopTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedAutostopTypesResponse"`

	Returnval []*AutostopType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedVMProcPriorities struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedVMProcPriorities"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedVMProcPrioritiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedVMProcPrioritiesResponse"`

	Returnval []*VMProcPriority `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedNetworkAttachmentTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedNetworkAttachmentTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedNetworkAttachmentTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedNetworkAttachmentTypesResponse"`

	Returnval []*NetworkAttachmentType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedNetworkAdapterTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedNetworkAdapterTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedNetworkAdapterTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedNetworkAdapterTypesResponse"`

	Returnval []*NetworkAdapterType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedPortModes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedPortModes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedPortModesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedPortModesResponse"`

	Returnval []*PortMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedUartTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedUartTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedUartTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedUartTypesResponse"`

	Returnval []*UartType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedUSBControllerTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedUSBControllerTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedUSBControllerTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedUSBControllerTypesResponse"`

	Returnval []*USBControllerType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedAudioDriverTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedAudioDriverTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedAudioDriverTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedAudioDriverTypesResponse"`

	Returnval []*AudioDriverType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedAudioControllerTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedAudioControllerTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedAudioControllerTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedAudioControllerTypesResponse"`

	Returnval []*AudioControllerType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedStorageBuses struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedStorageBuses"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedStorageBusesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedStorageBusesResponse"`

	Returnval []*StorageBus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedStorageControllerTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedStorageControllerTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedStorageControllerTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedStorageControllerTypesResponse"`

	Returnval []*StorageControllerType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedChipsetTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedChipsetTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedChipsetTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedChipsetTypesResponse"`

	Returnval []*ChipsetType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedIommuTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedIommuTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedIommuTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedIommuTypesResponse"`

	Returnval []*IommuType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getSupportedTpmTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedTpmTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getSupportedTpmTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getSupportedTpmTypesResponse"`

	Returnval []*TpmType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getLanguageId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getLanguageId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISystemProperties_getLanguageIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getLanguageIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_setLanguageId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setLanguageId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LanguageId string `xml:"languageId,omitempty" json:"languageId,omitempty"`
}

type ISystemProperties_setLanguageIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_setLanguageIdResponse"`
}

type ISystemProperties_getMaxNetworkAdapters struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxNetworkAdapters"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Chipset *ChipsetType `xml:"chipset,omitempty" json:"chipset,omitempty"`
}

type ISystemProperties_getMaxNetworkAdaptersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxNetworkAdaptersResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMaxNetworkAdaptersOfType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxNetworkAdaptersOfType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Chipset *ChipsetType `xml:"chipset,omitempty" json:"chipset,omitempty"`

	Type_ *NetworkAttachmentType `xml:"type,omitempty" json:"type,omitempty"`
}

type ISystemProperties_getMaxNetworkAdaptersOfTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxNetworkAdaptersOfTypeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMaxDevicesPerPortForStorageBus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxDevicesPerPortForStorageBus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Bus *StorageBus `xml:"bus,omitempty" json:"bus,omitempty"`
}

type ISystemProperties_getMaxDevicesPerPortForStorageBusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxDevicesPerPortForStorageBusResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMinPortCountForStorageBus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMinPortCountForStorageBus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Bus *StorageBus `xml:"bus,omitempty" json:"bus,omitempty"`
}

type ISystemProperties_getMinPortCountForStorageBusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMinPortCountForStorageBusResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMaxPortCountForStorageBus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxPortCountForStorageBus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Bus *StorageBus `xml:"bus,omitempty" json:"bus,omitempty"`
}

type ISystemProperties_getMaxPortCountForStorageBusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxPortCountForStorageBusResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMaxInstancesOfStorageBus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxInstancesOfStorageBus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Chipset *ChipsetType `xml:"chipset,omitempty" json:"chipset,omitempty"`

	Bus *StorageBus `xml:"bus,omitempty" json:"bus,omitempty"`
}

type ISystemProperties_getMaxInstancesOfStorageBusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxInstancesOfStorageBusResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getDeviceTypesForStorageBus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDeviceTypesForStorageBus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Bus *StorageBus `xml:"bus,omitempty" json:"bus,omitempty"`
}

type ISystemProperties_getDeviceTypesForStorageBusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDeviceTypesForStorageBusResponse"`

	Returnval []*DeviceType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getStorageBusForStorageControllerType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getStorageBusForStorageControllerType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	StorageControllerType *StorageControllerType `xml:"storageControllerType,omitempty" json:"storageControllerType,omitempty"`
}

type ISystemProperties_getStorageBusForStorageControllerTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getStorageBusForStorageControllerTypeResponse"`

	Returnval *StorageBus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getStorageControllerTypesForStorageBus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getStorageControllerTypesForStorageBus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	StorageBus *StorageBus `xml:"storageBus,omitempty" json:"storageBus,omitempty"`
}

type ISystemProperties_getStorageControllerTypesForStorageBusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getStorageControllerTypesForStorageBusResponse"`

	Returnval []*StorageControllerType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getDefaultIoCacheSettingForStorageController struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultIoCacheSettingForStorageController"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ControllerType *StorageControllerType `xml:"controllerType,omitempty" json:"controllerType,omitempty"`
}

type ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getStorageControllerHotplugCapable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getStorageControllerHotplugCapable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ControllerType *StorageControllerType `xml:"controllerType,omitempty" json:"controllerType,omitempty"`
}

type ISystemProperties_getStorageControllerHotplugCapableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getStorageControllerHotplugCapableResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getMaxInstancesOfUSBControllerType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxInstancesOfUSBControllerType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Chipset *ChipsetType `xml:"chipset,omitempty" json:"chipset,omitempty"`

	Type_ *USBControllerType `xml:"type,omitempty" json:"type,omitempty"`
}

type ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISystemProperties_getCPUProfiles struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getCPUProfiles"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Architecture *CPUArchitecture `xml:"architecture,omitempty" json:"architecture,omitempty"`

	NamePattern string `xml:"namePattern,omitempty" json:"namePattern,omitempty"`
}

type ISystemProperties_getCPUProfilesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISystemProperties_getCPUProfilesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDnDBase_getFormats struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDBase_getFormats"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDnDBase_getFormatsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDBase_getFormatsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDnDBase_isFormatSupported struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDBase_isFormatSupported"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Format string `xml:"format,omitempty" json:"format,omitempty"`
}

type IDnDBase_isFormatSupportedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDBase_isFormatSupportedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDnDBase_addFormats struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDBase_addFormats"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Formats []string `xml:"formats,omitempty" json:"formats,omitempty"`
}

type IDnDBase_addFormatsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDBase_addFormatsResponse"`
}

type IDnDBase_removeFormats struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDBase_removeFormats"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Formats []string `xml:"formats,omitempty" json:"formats,omitempty"`
}

type IDnDBase_removeFormatsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDBase_removeFormatsResponse"`
}

type IDnDSource_dragIsPending struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDSource_dragIsPending"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`
}

type IDnDSource_dragIsPendingResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDSource_dragIsPendingResponse"`

	Formats []string `xml:"formats,omitempty" json:"formats,omitempty"`

	AllowedActions []*DnDAction `xml:"allowedActions,omitempty" json:"allowedActions,omitempty"`

	Returnval *DnDAction `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDnDSource_drop struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDSource_drop"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Format string `xml:"format,omitempty" json:"format,omitempty"`

	Action *DnDAction `xml:"action,omitempty" json:"action,omitempty"`
}

type IDnDSource_dropResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDSource_dropResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDnDSource_receiveData struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDSource_receiveData"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDnDSource_receiveDataResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDSource_receiveDataResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDnDTarget_enter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDTarget_enter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`

	Y uint32 `xml:"y,omitempty" json:"y,omitempty"`

	X uint32 `xml:"x,omitempty" json:"x,omitempty"`

	DefaultAction *DnDAction `xml:"defaultAction,omitempty" json:"defaultAction,omitempty"`

	AllowedActions []*DnDAction `xml:"allowedActions,omitempty" json:"allowedActions,omitempty"`

	Formats []string `xml:"formats,omitempty" json:"formats,omitempty"`
}

type IDnDTarget_enterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDTarget_enterResponse"`

	Returnval *DnDAction `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDnDTarget_move struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDTarget_move"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`

	X uint32 `xml:"x,omitempty" json:"x,omitempty"`

	Y uint32 `xml:"y,omitempty" json:"y,omitempty"`

	DefaultAction *DnDAction `xml:"defaultAction,omitempty" json:"defaultAction,omitempty"`

	AllowedActions []*DnDAction `xml:"allowedActions,omitempty" json:"allowedActions,omitempty"`

	Formats []string `xml:"formats,omitempty" json:"formats,omitempty"`
}

type IDnDTarget_moveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDTarget_moveResponse"`

	Returnval *DnDAction `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDnDTarget_leave struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDTarget_leave"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`
}

type IDnDTarget_leaveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDTarget_leaveResponse"`
}

type IDnDTarget_drop struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDTarget_drop"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`

	X uint32 `xml:"x,omitempty" json:"x,omitempty"`

	Y uint32 `xml:"y,omitempty" json:"y,omitempty"`

	DefaultAction *DnDAction `xml:"defaultAction,omitempty" json:"defaultAction,omitempty"`

	AllowedActions []*DnDAction `xml:"allowedActions,omitempty" json:"allowedActions,omitempty"`

	Formats []string `xml:"formats,omitempty" json:"formats,omitempty"`
}

type IDnDTarget_dropResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDTarget_dropResponse"`

	Format string `xml:"format,omitempty" json:"format,omitempty"`

	Returnval *DnDAction `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDnDTarget_sendData struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDTarget_sendData"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`

	Format string `xml:"format,omitempty" json:"format,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type IDnDTarget_sendDataResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDTarget_sendDataResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDnDTarget_cancel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDTarget_cancel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDnDTarget_cancelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDTarget_cancelResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getUser struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getUser"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getUserResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getUserResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getDomain struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getDomain"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getDomainResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getDomainResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getIdResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getTimeout struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getTimeout"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getTimeoutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getTimeoutResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_setTimeout struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_setTimeout"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Timeout uint32 `xml:"timeout,omitempty" json:"timeout,omitempty"`
}

type IGuestSession_setTimeoutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_setTimeoutResponse"`
}

type IGuestSession_getProtocolVersion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getProtocolVersion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getProtocolVersionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getProtocolVersionResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getStatusResponse"`

	Returnval *GuestSessionStatus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getEnvironmentChanges struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getEnvironmentChanges"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getEnvironmentChangesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getEnvironmentChangesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_setEnvironmentChanges struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_setEnvironmentChanges"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	EnvironmentChanges []string `xml:"environmentChanges,omitempty" json:"environmentChanges,omitempty"`
}

type IGuestSession_setEnvironmentChangesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_setEnvironmentChangesResponse"`
}

type IGuestSession_getEnvironmentBase struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getEnvironmentBase"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getEnvironmentBaseResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getEnvironmentBaseResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getProcesses struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getProcesses"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getProcessesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getProcessesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getPathStyle struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getPathStyle"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getPathStyleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getPathStyleResponse"`

	Returnval *PathStyle `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getCurrentDirectory struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getCurrentDirectory"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getCurrentDirectoryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getCurrentDirectoryResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_setCurrentDirectory struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_setCurrentDirectory"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CurrentDirectory string `xml:"currentDirectory,omitempty" json:"currentDirectory,omitempty"`
}

type IGuestSession_setCurrentDirectoryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_setCurrentDirectoryResponse"`
}

type IGuestSession_getUserHome struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getUserHome"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getUserHomeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getUserHomeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getUserDocuments struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getUserDocuments"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getUserDocumentsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getUserDocumentsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getDirectories struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getDirectories"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getDirectoriesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getDirectoriesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getFiles struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getFiles"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getFilesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getFilesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_getEventSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getEventSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_getEventSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_getEventSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_close struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_close"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSession_closeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_closeResponse"`
}

type IGuestSession_copyFromGuest struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_copyFromGuest"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Sources []string `xml:"sources,omitempty" json:"sources,omitempty"`

	Filters []string `xml:"filters,omitempty" json:"filters,omitempty"`

	Flags []string `xml:"flags,omitempty" json:"flags,omitempty"`

	Destination string `xml:"destination,omitempty" json:"destination,omitempty"`
}

type IGuestSession_copyFromGuestResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_copyFromGuestResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_copyToGuest struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_copyToGuest"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Sources []string `xml:"sources,omitempty" json:"sources,omitempty"`

	Filters []string `xml:"filters,omitempty" json:"filters,omitempty"`

	Flags []string `xml:"flags,omitempty" json:"flags,omitempty"`

	Destination string `xml:"destination,omitempty" json:"destination,omitempty"`
}

type IGuestSession_copyToGuestResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_copyToGuestResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_directoryCopy struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryCopy"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Source string `xml:"source,omitempty" json:"source,omitempty"`

	Destination string `xml:"destination,omitempty" json:"destination,omitempty"`

	Flags []*DirectoryCopyFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_directoryCopyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryCopyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_directoryCopyFromGuest struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryCopyFromGuest"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Source string `xml:"source,omitempty" json:"source,omitempty"`

	Destination string `xml:"destination,omitempty" json:"destination,omitempty"`

	Flags []*DirectoryCopyFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_directoryCopyFromGuestResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryCopyFromGuestResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_directoryCopyToGuest struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryCopyToGuest"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Source string `xml:"source,omitempty" json:"source,omitempty"`

	Destination string `xml:"destination,omitempty" json:"destination,omitempty"`

	Flags []*DirectoryCopyFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_directoryCopyToGuestResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryCopyToGuestResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_directoryCreate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryCreate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	Mode uint32 `xml:"mode,omitempty" json:"mode,omitempty"`

	Flags []*DirectoryCreateFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_directoryCreateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryCreateResponse"`
}

type IGuestSession_directoryCreateTemp struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryCreateTemp"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TemplateName string `xml:"templateName,omitempty" json:"templateName,omitempty"`

	Mode uint32 `xml:"mode,omitempty" json:"mode,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	Secure bool `xml:"secure,omitempty" json:"secure,omitempty"`
}

type IGuestSession_directoryCreateTempResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryCreateTempResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_directoryExists struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryExists"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	FollowSymlinks bool `xml:"followSymlinks,omitempty" json:"followSymlinks,omitempty"`
}

type IGuestSession_directoryExistsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryExistsResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_directoryOpen struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryOpen"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	Filter string `xml:"filter,omitempty" json:"filter,omitempty"`

	Flags []*DirectoryOpenFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_directoryOpenResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryOpenResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_directoryRemove struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryRemove"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`
}

type IGuestSession_directoryRemoveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryRemoveResponse"`
}

type IGuestSession_directoryRemoveRecursive struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryRemoveRecursive"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	Flags []*DirectoryRemoveRecFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_directoryRemoveRecursiveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_directoryRemoveRecursiveResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_environmentScheduleSet struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_environmentScheduleSet"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type IGuestSession_environmentScheduleSetResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_environmentScheduleSetResponse"`
}

type IGuestSession_environmentScheduleUnset struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_environmentScheduleUnset"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IGuestSession_environmentScheduleUnsetResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_environmentScheduleUnsetResponse"`
}

type IGuestSession_environmentGetBaseVariable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_environmentGetBaseVariable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IGuestSession_environmentGetBaseVariableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_environmentGetBaseVariableResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_environmentDoesBaseVariableExist struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_environmentDoesBaseVariableExist"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IGuestSession_environmentDoesBaseVariableExistResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_environmentDoesBaseVariableExistResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fileCopy struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileCopy"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Source string `xml:"source,omitempty" json:"source,omitempty"`

	Destination string `xml:"destination,omitempty" json:"destination,omitempty"`

	Flags []*FileCopyFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_fileCopyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileCopyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fileCopyFromGuest struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileCopyFromGuest"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Source string `xml:"source,omitempty" json:"source,omitempty"`

	Destination string `xml:"destination,omitempty" json:"destination,omitempty"`

	Flags []*FileCopyFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_fileCopyFromGuestResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileCopyFromGuestResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fileCopyToGuest struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileCopyToGuest"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Source string `xml:"source,omitempty" json:"source,omitempty"`

	Destination string `xml:"destination,omitempty" json:"destination,omitempty"`

	Flags []*FileCopyFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_fileCopyToGuestResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileCopyToGuestResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fileCreateTemp struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileCreateTemp"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TemplateName string `xml:"templateName,omitempty" json:"templateName,omitempty"`

	Mode uint32 `xml:"mode,omitempty" json:"mode,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	Secure bool `xml:"secure,omitempty" json:"secure,omitempty"`
}

type IGuestSession_fileCreateTempResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileCreateTempResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fileExists struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileExists"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	FollowSymlinks bool `xml:"followSymlinks,omitempty" json:"followSymlinks,omitempty"`
}

type IGuestSession_fileExistsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileExistsResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fileOpen struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileOpen"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	AccessMode *FileAccessMode `xml:"accessMode,omitempty" json:"accessMode,omitempty"`

	OpenAction *FileOpenAction `xml:"openAction,omitempty" json:"openAction,omitempty"`

	CreationMode uint32 `xml:"creationMode,omitempty" json:"creationMode,omitempty"`
}

type IGuestSession_fileOpenResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileOpenResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fileOpenEx struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileOpenEx"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	AccessMode *FileAccessMode `xml:"accessMode,omitempty" json:"accessMode,omitempty"`

	OpenAction *FileOpenAction `xml:"openAction,omitempty" json:"openAction,omitempty"`

	SharingMode *FileSharingMode `xml:"sharingMode,omitempty" json:"sharingMode,omitempty"`

	CreationMode uint32 `xml:"creationMode,omitempty" json:"creationMode,omitempty"`

	Flags []*FileOpenExFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_fileOpenExResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileOpenExResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fileQuerySize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileQuerySize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	FollowSymlinks bool `xml:"followSymlinks,omitempty" json:"followSymlinks,omitempty"`
}

type IGuestSession_fileQuerySizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fileQuerySizeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fsObjExists struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjExists"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	FollowSymlinks bool `xml:"followSymlinks,omitempty" json:"followSymlinks,omitempty"`
}

type IGuestSession_fsObjExistsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjExistsResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fsObjQueryInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjQueryInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	FollowSymlinks bool `xml:"followSymlinks,omitempty" json:"followSymlinks,omitempty"`
}

type IGuestSession_fsObjQueryInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjQueryInfoResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fsObjRemove struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjRemove"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`
}

type IGuestSession_fsObjRemoveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjRemoveResponse"`
}

type IGuestSession_fsObjRemoveArray struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjRemoveArray"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path []string `xml:"path,omitempty" json:"path,omitempty"`
}

type IGuestSession_fsObjRemoveArrayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjRemoveArrayResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fsObjRename struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjRename"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	OldPath string `xml:"oldPath,omitempty" json:"oldPath,omitempty"`

	NewPath string `xml:"newPath,omitempty" json:"newPath,omitempty"`

	Flags []*FsObjRenameFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_fsObjRenameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjRenameResponse"`
}

type IGuestSession_fsObjMove struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjMove"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Source string `xml:"source,omitempty" json:"source,omitempty"`

	Destination string `xml:"destination,omitempty" json:"destination,omitempty"`

	Flags []*FsObjMoveFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_fsObjMoveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjMoveResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fsObjMoveArray struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjMoveArray"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Source []string `xml:"source,omitempty" json:"source,omitempty"`

	Destination string `xml:"destination,omitempty" json:"destination,omitempty"`

	Flags []*FsObjMoveFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_fsObjMoveArrayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjMoveArrayResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fsObjCopyArray struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjCopyArray"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Source []string `xml:"source,omitempty" json:"source,omitempty"`

	Destination string `xml:"destination,omitempty" json:"destination,omitempty"`

	Flags []*FileCopyFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_fsObjCopyArrayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjCopyArrayResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fsObjSetACL struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjSetACL"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`

	FollowSymlinks bool `xml:"followSymlinks,omitempty" json:"followSymlinks,omitempty"`

	Acl string `xml:"acl,omitempty" json:"acl,omitempty"`

	Mode uint32 `xml:"mode,omitempty" json:"mode,omitempty"`
}

type IGuestSession_fsObjSetACLResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsObjSetACLResponse"`
}

type IGuestSession_fsQueryFreeSpace struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsQueryFreeSpace"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`
}

type IGuestSession_fsQueryFreeSpaceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsQueryFreeSpaceResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_fsQueryInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsQueryInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`
}

type IGuestSession_fsQueryInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_fsQueryInfoResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_processCreate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_processCreate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Executable string `xml:"executable,omitempty" json:"executable,omitempty"`

	Arguments []string `xml:"arguments,omitempty" json:"arguments,omitempty"`

	EnvironmentChanges []string `xml:"environmentChanges,omitempty" json:"environmentChanges,omitempty"`

	Flags []*ProcessCreateFlag `xml:"flags,omitempty" json:"flags,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IGuestSession_processCreateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_processCreateResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_processCreateEx struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_processCreateEx"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Executable string `xml:"executable,omitempty" json:"executable,omitempty"`

	Arguments []string `xml:"arguments,omitempty" json:"arguments,omitempty"`

	EnvironmentChanges []string `xml:"environmentChanges,omitempty" json:"environmentChanges,omitempty"`

	Flags []*ProcessCreateFlag `xml:"flags,omitempty" json:"flags,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`

	Priority *ProcessPriority `xml:"priority,omitempty" json:"priority,omitempty"`

	Affinity []int32 `xml:"affinity,omitempty" json:"affinity,omitempty"`
}

type IGuestSession_processCreateExResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_processCreateExResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_processGet struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_processGet"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Pid uint32 `xml:"pid,omitempty" json:"pid,omitempty"`
}

type IGuestSession_processGetResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_processGetResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_symlinkCreate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_symlinkCreate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Symlink string `xml:"symlink,omitempty" json:"symlink,omitempty"`

	Target string `xml:"target,omitempty" json:"target,omitempty"`

	Type_ *SymlinkType `xml:"type,omitempty" json:"type,omitempty"`
}

type IGuestSession_symlinkCreateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_symlinkCreateResponse"`
}

type IGuestSession_symlinkExists struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_symlinkExists"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Symlink string `xml:"symlink,omitempty" json:"symlink,omitempty"`
}

type IGuestSession_symlinkExistsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_symlinkExistsResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_symlinkRead struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_symlinkRead"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Symlink string `xml:"symlink,omitempty" json:"symlink,omitempty"`

	Flags []*SymlinkReadFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuestSession_symlinkReadResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_symlinkReadResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_waitFor struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_waitFor"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	WaitFor uint32 `xml:"waitFor,omitempty" json:"waitFor,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IGuestSession_waitForResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_waitForResponse"`

	Returnval *GuestSessionWaitResult `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSession_waitForArray struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_waitForArray"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	WaitFor []*GuestSessionWaitForFlag `xml:"waitFor,omitempty" json:"waitFor,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IGuestSession_waitForArrayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSession_waitForArrayResponse"`

	Returnval *GuestSessionWaitResult `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_getArguments struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getArguments"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProcess_getArgumentsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getArgumentsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_getEnvironment struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getEnvironment"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProcess_getEnvironmentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getEnvironmentResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_getEventSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getEventSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProcess_getEventSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getEventSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_getExecutablePath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getExecutablePath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProcess_getExecutablePathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getExecutablePathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_getExitCode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getExitCode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProcess_getExitCodeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getExitCodeResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProcess_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_getPID struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getPID"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProcess_getPIDResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getPIDResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_getStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProcess_getStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_getStatusResponse"`

	Returnval *ProcessStatus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_waitFor struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_waitFor"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	WaitFor uint32 `xml:"waitFor,omitempty" json:"waitFor,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IProcess_waitForResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_waitForResponse"`

	Returnval *ProcessWaitResult `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_waitForArray struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_waitForArray"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	WaitFor []*ProcessWaitForFlag `xml:"waitFor,omitempty" json:"waitFor,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IProcess_waitForArrayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_waitForArrayResponse"`

	Returnval *ProcessWaitResult `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_read struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_read"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Handle uint32 `xml:"handle,omitempty" json:"handle,omitempty"`

	ToRead uint32 `xml:"toRead,omitempty" json:"toRead,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IProcess_readResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_readResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_write struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_write"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Handle uint32 `xml:"handle,omitempty" json:"handle,omitempty"`

	Flags uint32 `xml:"flags,omitempty" json:"flags,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IProcess_writeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_writeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_writeArray struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_writeArray"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Handle uint32 `xml:"handle,omitempty" json:"handle,omitempty"`

	Flags []*ProcessInputFlag `xml:"flags,omitempty" json:"flags,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IProcess_writeArrayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_writeArrayResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProcess_terminate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_terminate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProcess_terminateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProcess_terminateResponse"`
}

type IGuestProcess_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcess_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDirectory_getDirectoryName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDirectory_getDirectoryName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDirectory_getDirectoryNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDirectory_getDirectoryNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDirectory_getFilter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDirectory_getFilter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDirectory_getFilterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDirectory_getFilterResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDirectory_close struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDirectory_close"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDirectory_closeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDirectory_closeResponse"`
}

type IDirectory_read struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDirectory_read"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDirectory_readResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDirectory_readResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_getEventSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getEventSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFile_getEventSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getEventSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFile_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getIdResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_getInitialSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getInitialSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFile_getInitialSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getInitialSizeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_getOffset struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getOffset"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFile_getOffsetResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getOffsetResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_getStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFile_getStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getStatusResponse"`

	Returnval *FileStatus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_getFilename struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getFilename"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFile_getFilenameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getFilenameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_getCreationMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getCreationMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFile_getCreationModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getCreationModeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_getOpenAction struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getOpenAction"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFile_getOpenActionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getOpenActionResponse"`

	Returnval *FileOpenAction `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_getAccessMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getAccessMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFile_getAccessModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_getAccessModeResponse"`

	Returnval *FileAccessMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_close struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_close"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFile_closeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_closeResponse"`
}

type IFile_queryInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_queryInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFile_queryInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_queryInfoResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_querySize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_querySize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFile_querySizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_querySizeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_read struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_read"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ToRead uint32 `xml:"toRead,omitempty" json:"toRead,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IFile_readResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_readResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_readAt struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_readAt"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Offset int64 `xml:"offset,omitempty" json:"offset,omitempty"`

	ToRead uint32 `xml:"toRead,omitempty" json:"toRead,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IFile_readAtResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_readAtResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_seek struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_seek"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Offset int64 `xml:"offset,omitempty" json:"offset,omitempty"`

	Whence *FileSeekOrigin `xml:"whence,omitempty" json:"whence,omitempty"`
}

type IFile_seekResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_seekResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_setACL struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_setACL"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Acl string `xml:"acl,omitempty" json:"acl,omitempty"`

	Mode uint32 `xml:"mode,omitempty" json:"mode,omitempty"`
}

type IFile_setACLResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_setACLResponse"`
}

type IFile_setSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_setSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Size int64 `xml:"size,omitempty" json:"size,omitempty"`
}

type IFile_setSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_setSizeResponse"`
}

type IFile_write struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_write"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IFile_writeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_writeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFile_writeAt struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_writeAt"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Offset int64 `xml:"offset,omitempty" json:"offset,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IFile_writeAtResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFile_writeAtResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFile_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFile_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getFreeSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getFreeSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getFreeSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getFreeSizeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getTotalSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getTotalSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getTotalSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getTotalSizeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getBlockSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getBlockSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getBlockSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getBlockSizeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getSectorSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getSectorSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getSectorSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getSectorSizeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getSerialNumber struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getSerialNumber"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getSerialNumberResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getSerialNumberResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getIsRemote struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getIsRemote"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getIsRemoteResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getIsRemoteResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getIsCaseSensitive struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getIsCaseSensitive"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getIsCaseSensitiveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getIsCaseSensitiveResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getIsReadOnly struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getIsReadOnly"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getIsReadOnlyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getIsReadOnlyResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getIsCompressed struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getIsCompressed"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getIsCompressedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getIsCompressedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getSupportsFileCompression struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getSupportsFileCompression"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getSupportsFileCompressionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getSupportsFileCompressionResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getMaxComponent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getMaxComponent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getMaxComponentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getMaxComponentResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getTypeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getLabel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getLabel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getLabelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getLabelResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsInfo_getMountPoint struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getMountPoint"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsInfo_getMountPointResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsInfo_getMountPointResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getTypeResponse"`

	Returnval *FsObjType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getFileAttributes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getFileAttributes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getFileAttributesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getFileAttributesResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getObjectSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getObjectSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getObjectSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getObjectSizeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getAllocatedSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getAllocatedSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getAllocatedSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getAllocatedSizeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getAccessTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getAccessTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getAccessTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getAccessTimeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getBirthTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getBirthTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getBirthTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getBirthTimeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getChangeTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getChangeTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getChangeTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getChangeTimeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getModificationTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getModificationTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getModificationTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getModificationTimeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getUID struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getUID"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getUIDResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getUIDResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getUserName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getUserName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getUserNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getUserNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getGID struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getGID"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getGIDResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getGIDResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getGroupName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getGroupName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getGroupNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getGroupNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getNodeId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getNodeId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getNodeIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getNodeIdResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getNodeIdDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getNodeIdDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getNodeIdDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getNodeIdDeviceResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getHardLinks struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getHardLinks"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getHardLinksResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getHardLinksResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getDeviceNumber struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getDeviceNumber"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getDeviceNumberResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getDeviceNumberResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getGenerationId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getGenerationId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getGenerationIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getGenerationIdResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFsObjInfo_getUserFlags struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getUserFlags"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFsObjInfo_getUserFlagsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFsObjInfo_getUserFlagsResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFsInfo_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFsInfo_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFsInfo_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFsInfo_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_getOSTypeId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getOSTypeId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuest_getOSTypeIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getOSTypeIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_getAdditionsRunLevel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getAdditionsRunLevel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuest_getAdditionsRunLevelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getAdditionsRunLevelResponse"`

	Returnval *AdditionsRunLevelType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_getAdditionsVersion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getAdditionsVersion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuest_getAdditionsVersionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getAdditionsVersionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_getAdditionsRevision struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getAdditionsRevision"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuest_getAdditionsRevisionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getAdditionsRevisionResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_getDnDSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getDnDSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuest_getDnDSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getDnDSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_getDnDTarget struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getDnDTarget"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuest_getDnDTargetResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getDnDTargetResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_getEventSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getEventSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuest_getEventSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getEventSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_getFacilities struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getFacilities"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuest_getFacilitiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getFacilitiesResponse"`

	Returnval []*IAdditionsFacility `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_getSessions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getSessions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuest_getSessionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getSessionsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_getMemoryBalloonSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getMemoryBalloonSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuest_getMemoryBalloonSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getMemoryBalloonSizeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_setMemoryBalloonSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_setMemoryBalloonSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MemoryBalloonSize uint32 `xml:"memoryBalloonSize,omitempty" json:"memoryBalloonSize,omitempty"`
}

type IGuest_setMemoryBalloonSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_setMemoryBalloonSizeResponse"`
}

type IGuest_getStatisticsUpdateInterval struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getStatisticsUpdateInterval"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuest_getStatisticsUpdateIntervalResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getStatisticsUpdateIntervalResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_setStatisticsUpdateInterval struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_setStatisticsUpdateInterval"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	StatisticsUpdateInterval uint32 `xml:"statisticsUpdateInterval,omitempty" json:"statisticsUpdateInterval,omitempty"`
}

type IGuest_setStatisticsUpdateIntervalResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_setStatisticsUpdateIntervalResponse"`
}

type IGuest_internalGetStatistics struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_internalGetStatistics"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuest_internalGetStatisticsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_internalGetStatisticsResponse"`

	CpuUser uint32 `xml:"cpuUser,omitempty" json:"cpuUser,omitempty"`

	CpuKernel uint32 `xml:"cpuKernel,omitempty" json:"cpuKernel,omitempty"`

	CpuIdle uint32 `xml:"cpuIdle,omitempty" json:"cpuIdle,omitempty"`

	MemTotal uint32 `xml:"memTotal,omitempty" json:"memTotal,omitempty"`

	MemFree uint32 `xml:"memFree,omitempty" json:"memFree,omitempty"`

	MemBalloon uint32 `xml:"memBalloon,omitempty" json:"memBalloon,omitempty"`

	MemShared uint32 `xml:"memShared,omitempty" json:"memShared,omitempty"`

	MemCache uint32 `xml:"memCache,omitempty" json:"memCache,omitempty"`

	PagedTotal uint32 `xml:"pagedTotal,omitempty" json:"pagedTotal,omitempty"`

	MemAllocTotal uint32 `xml:"memAllocTotal,omitempty" json:"memAllocTotal,omitempty"`

	MemFreeTotal uint32 `xml:"memFreeTotal,omitempty" json:"memFreeTotal,omitempty"`

	MemBalloonTotal uint32 `xml:"memBalloonTotal,omitempty" json:"memBalloonTotal,omitempty"`

	MemSharedTotal uint32 `xml:"memSharedTotal,omitempty" json:"memSharedTotal,omitempty"`
}

type IGuest_getFacilityStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getFacilityStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Facility *AdditionsFacilityType `xml:"facility,omitempty" json:"facility,omitempty"`
}

type IGuest_getFacilityStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getFacilityStatusResponse"`

	Timestamp int64 `xml:"timestamp,omitempty" json:"timestamp,omitempty"`

	Returnval *AdditionsFacilityStatus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_getAdditionsStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getAdditionsStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Level *AdditionsRunLevelType `xml:"level,omitempty" json:"level,omitempty"`
}

type IGuest_getAdditionsStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_getAdditionsStatusResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_setCredentials struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_setCredentials"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	UserName string `xml:"userName,omitempty" json:"userName,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Domain string `xml:"domain,omitempty" json:"domain,omitempty"`

	AllowInteractiveLogon bool `xml:"allowInteractiveLogon,omitempty" json:"allowInteractiveLogon,omitempty"`
}

type IGuest_setCredentialsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_setCredentialsResponse"`
}

type IGuest_createSession struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_createSession"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	User string `xml:"user,omitempty" json:"user,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`

	Domain string `xml:"domain,omitempty" json:"domain,omitempty"`

	SessionName string `xml:"sessionName,omitempty" json:"sessionName,omitempty"`
}

type IGuest_createSessionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_createSessionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_findSession struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_findSession"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SessionName string `xml:"sessionName,omitempty" json:"sessionName,omitempty"`
}

type IGuest_findSessionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_findSessionResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuest_shutdown struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_shutdown"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Flags []*GuestShutdownFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuest_shutdownResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_shutdownResponse"`
}

type IGuest_updateGuestAdditions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_updateGuestAdditions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Source string `xml:"source,omitempty" json:"source,omitempty"`

	Arguments []string `xml:"arguments,omitempty" json:"arguments,omitempty"`

	Flags []*AdditionsUpdateFlag `xml:"flags,omitempty" json:"flags,omitempty"`
}

type IGuest_updateGuestAdditionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuest_updateGuestAdditionsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getDescriptionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getInitiator struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getInitiator"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getInitiatorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getInitiatorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getCancelable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getCancelable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getCancelableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getCancelableResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getPercent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getPercent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getPercentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getPercentResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getTimeRemaining struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getTimeRemaining"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getTimeRemainingResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getTimeRemainingResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getCompleted struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getCompleted"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getCompletedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getCompletedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getCanceled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getCanceled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getCanceledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getCanceledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getResultCode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getResultCode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getResultCodeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getResultCodeResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getErrorInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getErrorInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getErrorInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getErrorInfoResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getOperationCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getOperationCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getOperationCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getOperationCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getOperation struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getOperation"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getOperationResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getOperationResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getOperationDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getOperationDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getOperationDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getOperationDescriptionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getOperationPercent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getOperationPercent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getOperationPercentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getOperationPercentResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getOperationWeight struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getOperationWeight"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getOperationWeightResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getOperationWeightResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_getTimeout struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getTimeout"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getTimeoutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getTimeoutResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_setTimeout struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_setTimeout"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Timeout uint32 `xml:"timeout,omitempty" json:"timeout,omitempty"`
}

type IProgress_setTimeoutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_setTimeoutResponse"`
}

type IProgress_getEventSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getEventSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_getEventSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_getEventSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgress_waitForCompletion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_waitForCompletion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Timeout int32 `xml:"timeout,omitempty" json:"timeout,omitempty"`
}

type IProgress_waitForCompletionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_waitForCompletionResponse"`
}

type IProgress_waitForOperationCompletion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_waitForOperationCompletion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Operation uint32 `xml:"operation,omitempty" json:"operation,omitempty"`

	Timeout int32 `xml:"timeout,omitempty" json:"timeout,omitempty"`
}

type IProgress_waitForOperationCompletionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_waitForOperationCompletionResponse"`
}

type IProgress_cancel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_cancel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgress_cancelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgress_cancelResponse"`
}

type ISnapshot_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshot_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshot_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshot_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshot_setName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_setName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type ISnapshot_setNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_setNameResponse"`
}

type ISnapshot_getDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshot_getDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getDescriptionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshot_setDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_setDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`
}

type ISnapshot_setDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_setDescriptionResponse"`
}

type ISnapshot_getTimeStamp struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getTimeStamp"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshot_getTimeStampResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getTimeStampResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshot_getOnline struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getOnline"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshot_getOnlineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getOnlineResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshot_getMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshot_getMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getMachineResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshot_getParent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getParent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshot_getParentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getParentResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshot_getChildren struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getChildren"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshot_getChildrenResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getChildrenResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshot_getChildrenCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getChildrenCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshot_getChildrenCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshot_getChildrenCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getDescriptionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_setDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`
}

type IMedium_setDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setDescriptionResponse"`
}

type IMedium_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getStateResponse"`

	Returnval *MediumState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getVariant struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getVariant"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getVariantResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getVariantResponse"`

	Returnval []*MediumVariant `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getLocation struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getLocation"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getLocationResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getLocationResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_setLocation struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setLocation"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Location string `xml:"location,omitempty" json:"location,omitempty"`
}

type IMedium_setLocationResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setLocationResponse"`
}

type IMedium_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getDeviceType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getDeviceType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getDeviceTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getDeviceTypeResponse"`

	Returnval *DeviceType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getHostDrive struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getHostDrive"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getHostDriveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getHostDriveResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getSizeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getFormat struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getFormat"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getFormatResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getFormatResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getMediumFormat struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getMediumFormat"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getMediumFormatResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getMediumFormatResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getTypeResponse"`

	Returnval *MediumType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_setType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ *MediumType `xml:"type,omitempty" json:"type,omitempty"`
}

type IMedium_setTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setTypeResponse"`
}

type IMedium_getAllowedTypes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getAllowedTypes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getAllowedTypesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getAllowedTypesResponse"`

	Returnval []*MediumType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getParent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getParent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getParentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getParentResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getChildren struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getChildren"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getChildrenResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getChildrenResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getBase struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getBase"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getBaseResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getBaseResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getReadOnly struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getReadOnly"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getReadOnlyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getReadOnlyResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getLogicalSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getLogicalSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getLogicalSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getLogicalSizeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getAutoReset struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getAutoReset"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getAutoResetResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getAutoResetResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_setAutoReset struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setAutoReset"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AutoReset bool `xml:"autoReset,omitempty" json:"autoReset,omitempty"`
}

type IMedium_setAutoResetResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setAutoResetResponse"`
}

type IMedium_getLastAccessError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getLastAccessError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getLastAccessErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getLastAccessErrorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getMachineIds struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getMachineIds"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getMachineIdsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getMachineIdsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_setIds struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setIds"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SetImageId bool `xml:"setImageId,omitempty" json:"setImageId,omitempty"`

	ImageId string `xml:"imageId,omitempty" json:"imageId,omitempty"`

	SetParentId bool `xml:"setParentId,omitempty" json:"setParentId,omitempty"`

	ParentId string `xml:"parentId,omitempty" json:"parentId,omitempty"`
}

type IMedium_setIdsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setIdsResponse"`
}

type IMedium_refreshState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_refreshState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_refreshStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_refreshStateResponse"`

	Returnval *MediumState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getSnapshotIds struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getSnapshotIds"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MachineId string `xml:"machineId,omitempty" json:"machineId,omitempty"`
}

type IMedium_getSnapshotIdsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getSnapshotIdsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_lockRead struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_lockRead"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_lockReadResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_lockReadResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_lockWrite struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_lockWrite"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_lockWriteResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_lockWriteResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_close struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_close"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_closeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_closeResponse"`
}

type IMedium_getProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMedium_getPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getPropertyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_setProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type IMedium_setPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setPropertyResponse"`
}

type IMedium_getProperties struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getProperties"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Names string `xml:"names,omitempty" json:"names,omitempty"`
}

type IMedium_getPropertiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getPropertiesResponse"`

	ReturnNames []string `xml:"returnNames,omitempty" json:"returnNames,omitempty"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_setProperties struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setProperties"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Names []string `xml:"names,omitempty" json:"names,omitempty"`

	Values []string `xml:"values,omitempty" json:"values,omitempty"`
}

type IMedium_setPropertiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_setPropertiesResponse"`
}

type IMedium_createBaseStorage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_createBaseStorage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LogicalSize int64 `xml:"logicalSize,omitempty" json:"logicalSize,omitempty"`

	Variant []*MediumVariant `xml:"variant,omitempty" json:"variant,omitempty"`
}

type IMedium_createBaseStorageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_createBaseStorageResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_deleteStorage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_deleteStorage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_deleteStorageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_deleteStorageResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_createDiffStorage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_createDiffStorage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Target string `xml:"target,omitempty" json:"target,omitempty"`

	Variant []*MediumVariant `xml:"variant,omitempty" json:"variant,omitempty"`
}

type IMedium_createDiffStorageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_createDiffStorageResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_mergeTo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_mergeTo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Target string `xml:"target,omitempty" json:"target,omitempty"`
}

type IMedium_mergeToResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_mergeToResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_cloneTo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_cloneTo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Target string `xml:"target,omitempty" json:"target,omitempty"`

	Variant []*MediumVariant `xml:"variant,omitempty" json:"variant,omitempty"`

	Parent string `xml:"parent,omitempty" json:"parent,omitempty"`
}

type IMedium_cloneToResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_cloneToResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_cloneToBase struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_cloneToBase"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Target string `xml:"target,omitempty" json:"target,omitempty"`

	Variant []*MediumVariant `xml:"variant,omitempty" json:"variant,omitempty"`
}

type IMedium_cloneToBaseResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_cloneToBaseResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_moveTo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_moveTo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Location string `xml:"location,omitempty" json:"location,omitempty"`
}

type IMedium_moveToResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_moveToResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_compact struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_compact"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_compactResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_compactResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_resize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_resize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LogicalSize int64 `xml:"logicalSize,omitempty" json:"logicalSize,omitempty"`
}

type IMedium_resizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_resizeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_reset struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_reset"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_resetResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_resetResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_changeEncryption struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_changeEncryption"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CurrentPassword string `xml:"currentPassword,omitempty" json:"currentPassword,omitempty"`

	Cipher string `xml:"cipher,omitempty" json:"cipher,omitempty"`

	NewPassword string `xml:"newPassword,omitempty" json:"newPassword,omitempty"`

	NewPasswordId string `xml:"newPasswordId,omitempty" json:"newPasswordId,omitempty"`
}

type IMedium_changeEncryptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_changeEncryptionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_getEncryptionSettings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getEncryptionSettings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMedium_getEncryptionSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_getEncryptionSettingsResponse"`

	Cipher string `xml:"cipher,omitempty" json:"cipher,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_checkEncryptionPassword struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_checkEncryptionPassword"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type IMedium_checkEncryptionPasswordResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_checkEncryptionPasswordResponse"`
}

type IMedium_openForIO struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_openForIO"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Writable bool `xml:"writable,omitempty" json:"writable,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type IMedium_openForIOResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_openForIOResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMedium_resizeAndCloneTo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_resizeAndCloneTo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Target string `xml:"target,omitempty" json:"target,omitempty"`

	LogicalSize int64 `xml:"logicalSize,omitempty" json:"logicalSize,omitempty"`

	Variant []*MediumVariant `xml:"variant,omitempty" json:"variant,omitempty"`

	Parent string `xml:"parent,omitempty" json:"parent,omitempty"`
}

type IMedium_resizeAndCloneToResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMedium_resizeAndCloneToResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumFormat_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumFormat_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumFormat_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumFormat_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumFormat_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumFormat_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumFormat_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumFormat_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumFormat_getCapabilities struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumFormat_getCapabilities"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumFormat_getCapabilitiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumFormat_getCapabilitiesResponse"`

	Returnval []*MediumFormatCapabilities `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumFormat_describeFileExtensions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumFormat_describeFileExtensions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumFormat_describeFileExtensionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumFormat_describeFileExtensionsResponse"`

	Extensions []string `xml:"extensions,omitempty" json:"extensions,omitempty"`

	Types []*DeviceType `xml:"types,omitempty" json:"types,omitempty"`
}

type IMediumFormat_describeProperties struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumFormat_describeProperties"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumFormat_describePropertiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumFormat_describePropertiesResponse"`

	Names []string `xml:"names,omitempty" json:"names,omitempty"`

	Descriptions []string `xml:"descriptions,omitempty" json:"descriptions,omitempty"`

	Types []*DataType `xml:"types,omitempty" json:"types,omitempty"`

	Flags []uint32 `xml:"flags,omitempty" json:"flags,omitempty"`

	Defaults []string `xml:"defaults,omitempty" json:"defaults,omitempty"`
}

type IDataStream_getReadSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDataStream_getReadSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDataStream_getReadSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDataStream_getReadSizeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDataStream_read struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDataStream_read"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Size uint32 `xml:"size,omitempty" json:"size,omitempty"`

	TimeoutMS uint32 `xml:"timeoutMS,omitempty" json:"timeoutMS,omitempty"`
}

type IDataStream_readResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDataStream_readResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumIO_getMedium struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_getMedium"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumIO_getMediumResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_getMediumResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumIO_getWritable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_getWritable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumIO_getWritableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_getWritableResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumIO_getExplorer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_getExplorer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumIO_getExplorerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_getExplorerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumIO_read struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_read"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Offset int64 `xml:"offset,omitempty" json:"offset,omitempty"`

	Size uint32 `xml:"size,omitempty" json:"size,omitempty"`
}

type IMediumIO_readResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_readResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumIO_write struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_write"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Offset int64 `xml:"offset,omitempty" json:"offset,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type IMediumIO_writeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_writeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumIO_formatFAT struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_formatFAT"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Quick bool `xml:"quick,omitempty" json:"quick,omitempty"`
}

type IMediumIO_formatFATResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_formatFATResponse"`
}

type IMediumIO_initializePartitionTable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_initializePartitionTable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Format *PartitionTableType `xml:"format,omitempty" json:"format,omitempty"`

	WholeDiskInOneEntry bool `xml:"wholeDiskInOneEntry,omitempty" json:"wholeDiskInOneEntry,omitempty"`
}

type IMediumIO_initializePartitionTableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_initializePartitionTableResponse"`
}

type IMediumIO_convertToStream struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_convertToStream"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Format string `xml:"format,omitempty" json:"format,omitempty"`

	Variant []*MediumVariant `xml:"variant,omitempty" json:"variant,omitempty"`

	BufferSize uint32 `xml:"bufferSize,omitempty" json:"bufferSize,omitempty"`
}

type IMediumIO_convertToStreamResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_convertToStreamResponse"`

	Stream string `xml:"stream,omitempty" json:"stream,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumIO_close struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_close"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumIO_closeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumIO_closeResponse"`
}

type IToken_abandon struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IToken_abandon"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IToken_abandonResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IToken_abandonResponse"`
}

type IToken_dummy struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IToken_dummy"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IToken_dummyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IToken_dummyResponse"`
}

type IKeyboard_getKeyboardLEDs struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_getKeyboardLEDs"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IKeyboard_getKeyboardLEDsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_getKeyboardLEDsResponse"`

	Returnval []*KeyboardLED `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IKeyboard_getEventSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_getEventSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IKeyboard_getEventSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_getEventSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IKeyboard_putScancode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_putScancode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Scancode int32 `xml:"scancode,omitempty" json:"scancode,omitempty"`
}

type IKeyboard_putScancodeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_putScancodeResponse"`
}

type IKeyboard_putScancodes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_putScancodes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Scancodes []int32 `xml:"scancodes,omitempty" json:"scancodes,omitempty"`
}

type IKeyboard_putScancodesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_putScancodesResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IKeyboard_putCAD struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_putCAD"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IKeyboard_putCADResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_putCADResponse"`
}

type IKeyboard_releaseKeys struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_releaseKeys"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IKeyboard_releaseKeysResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_releaseKeysResponse"`
}

type IKeyboard_putUsageCode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_putUsageCode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	UsageCode int32 `xml:"usageCode,omitempty" json:"usageCode,omitempty"`

	UsagePage int32 `xml:"usagePage,omitempty" json:"usagePage,omitempty"`

	KeyRelease bool `xml:"keyRelease,omitempty" json:"keyRelease,omitempty"`
}

type IKeyboard_putUsageCodeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboard_putUsageCodeResponse"`
}

type IMousePointerShape_getVisible struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getVisible"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShape_getVisibleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getVisibleResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShape_getAlpha struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getAlpha"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShape_getAlphaResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getAlphaResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShape_getHotX struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getHotX"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShape_getHotXResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getHotXResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShape_getHotY struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getHotY"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShape_getHotYResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getHotYResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShape_getWidth struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getWidth"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShape_getWidthResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getWidthResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShape_getHeight struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getHeight"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShape_getHeightResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getHeightResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShape_getShape struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getShape"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShape_getShapeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShape_getShapeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouse_getAbsoluteSupported struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getAbsoluteSupported"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMouse_getAbsoluteSupportedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getAbsoluteSupportedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouse_getRelativeSupported struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getRelativeSupported"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMouse_getRelativeSupportedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getRelativeSupportedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouse_getTouchScreenSupported struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getTouchScreenSupported"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMouse_getTouchScreenSupportedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getTouchScreenSupportedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouse_getTouchPadSupported struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getTouchPadSupported"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMouse_getTouchPadSupportedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getTouchPadSupportedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouse_getNeedsHostCursor struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getNeedsHostCursor"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMouse_getNeedsHostCursorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getNeedsHostCursorResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouse_getPointerShape struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getPointerShape"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMouse_getPointerShapeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getPointerShapeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouse_getEventSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getEventSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMouse_getEventSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_getEventSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouse_putMouseEvent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_putMouseEvent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Dx int32 `xml:"dx,omitempty" json:"dx,omitempty"`

	Dy int32 `xml:"dy,omitempty" json:"dy,omitempty"`

	Dz int32 `xml:"dz,omitempty" json:"dz,omitempty"`

	Dw int32 `xml:"dw,omitempty" json:"dw,omitempty"`

	ButtonState int32 `xml:"buttonState,omitempty" json:"buttonState,omitempty"`
}

type IMouse_putMouseEventResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_putMouseEventResponse"`
}

type IMouse_putMouseEventAbsolute struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_putMouseEventAbsolute"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	X int32 `xml:"x,omitempty" json:"x,omitempty"`

	Y int32 `xml:"y,omitempty" json:"y,omitempty"`

	Dz int32 `xml:"dz,omitempty" json:"dz,omitempty"`

	Dw int32 `xml:"dw,omitempty" json:"dw,omitempty"`

	ButtonState int32 `xml:"buttonState,omitempty" json:"buttonState,omitempty"`
}

type IMouse_putMouseEventAbsoluteResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_putMouseEventAbsoluteResponse"`
}

type IMouse_putEventMultiTouch struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_putEventMultiTouch"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Count int32 `xml:"count,omitempty" json:"count,omitempty"`

	Contacts []int64 `xml:"contacts,omitempty" json:"contacts,omitempty"`

	IsTouchScreen bool `xml:"isTouchScreen,omitempty" json:"isTouchScreen,omitempty"`

	ScanTime uint32 `xml:"scanTime,omitempty" json:"scanTime,omitempty"`
}

type IMouse_putEventMultiTouchResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_putEventMultiTouchResponse"`
}

type IMouse_putEventMultiTouchString struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_putEventMultiTouchString"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Count int32 `xml:"count,omitempty" json:"count,omitempty"`

	Contacts string `xml:"contacts,omitempty" json:"contacts,omitempty"`

	IsTouchScreen bool `xml:"isTouchScreen,omitempty" json:"isTouchScreen,omitempty"`

	ScanTime uint32 `xml:"scanTime,omitempty" json:"scanTime,omitempty"`
}

type IMouse_putEventMultiTouchStringResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouse_putEventMultiTouchStringResponse"`
}

type IFramebuffer_getWidth struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getWidth"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFramebuffer_getWidthResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getWidthResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebuffer_getHeight struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getHeight"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFramebuffer_getHeightResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getHeightResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebuffer_getBitsPerPixel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getBitsPerPixel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFramebuffer_getBitsPerPixelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getBitsPerPixelResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebuffer_getBytesPerLine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getBytesPerLine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFramebuffer_getBytesPerLineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getBytesPerLineResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebuffer_getPixelFormat struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getPixelFormat"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFramebuffer_getPixelFormatResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getPixelFormatResponse"`

	Returnval *BitmapFormat `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebuffer_getHeightReduction struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getHeightReduction"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFramebuffer_getHeightReductionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getHeightReductionResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebuffer_getOverlay struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getOverlay"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFramebuffer_getOverlayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getOverlayResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebuffer_getCapabilities struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getCapabilities"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFramebuffer_getCapabilitiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_getCapabilitiesResponse"`

	Returnval []*FramebufferCapabilities `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebuffer_notifyUpdate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_notifyUpdate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	X uint32 `xml:"x,omitempty" json:"x,omitempty"`

	Y uint32 `xml:"y,omitempty" json:"y,omitempty"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`
}

type IFramebuffer_notifyUpdateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_notifyUpdateResponse"`
}

type IFramebuffer_notifyUpdateImage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_notifyUpdateImage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	X uint32 `xml:"x,omitempty" json:"x,omitempty"`

	Y uint32 `xml:"y,omitempty" json:"y,omitempty"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`

	Image string `xml:"image,omitempty" json:"image,omitempty"`
}

type IFramebuffer_notifyUpdateImageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_notifyUpdateImageResponse"`
}

type IFramebuffer_notifyChange struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_notifyChange"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`

	XOrigin uint32 `xml:"xOrigin,omitempty" json:"xOrigin,omitempty"`

	YOrigin uint32 `xml:"yOrigin,omitempty" json:"yOrigin,omitempty"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`
}

type IFramebuffer_notifyChangeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_notifyChangeResponse"`
}

type IFramebuffer_videoModeSupported struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_videoModeSupported"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`

	Bpp uint32 `xml:"bpp,omitempty" json:"bpp,omitempty"`
}

type IFramebuffer_videoModeSupportedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_videoModeSupportedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebuffer_notify3DEvent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_notify3DEvent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ uint32 `xml:"type,omitempty" json:"type,omitempty"`

	Data string `xml:"data,omitempty" json:"data,omitempty"`
}

type IFramebuffer_notify3DEventResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebuffer_notify3DEventResponse"`
}

type IFramebufferOverlay_getX struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_getX"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFramebufferOverlay_getXResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_getXResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebufferOverlay_getY struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_getY"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFramebufferOverlay_getYResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_getYResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebufferOverlay_getVisible struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_getVisible"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFramebufferOverlay_getVisibleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_getVisibleResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebufferOverlay_setVisible struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_setVisible"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Visible bool `xml:"visible,omitempty" json:"visible,omitempty"`
}

type IFramebufferOverlay_setVisibleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_setVisibleResponse"`
}

type IFramebufferOverlay_getAlpha struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_getAlpha"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFramebufferOverlay_getAlphaResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_getAlphaResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFramebufferOverlay_setAlpha struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_setAlpha"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Alpha uint32 `xml:"alpha,omitempty" json:"alpha,omitempty"`
}

type IFramebufferOverlay_setAlphaResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_setAlphaResponse"`
}

type IFramebufferOverlay_move struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_move"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	X uint32 `xml:"x,omitempty" json:"x,omitempty"`

	Y uint32 `xml:"y,omitempty" json:"y,omitempty"`
}

type IFramebufferOverlay_moveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFramebufferOverlay_moveResponse"`
}

type IGuestScreenInfo_getScreenId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getScreenId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestScreenInfo_getScreenIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getScreenIdResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestScreenInfo_getGuestMonitorStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getGuestMonitorStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestScreenInfo_getGuestMonitorStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getGuestMonitorStatusResponse"`

	Returnval *GuestMonitorStatus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestScreenInfo_getPrimary struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getPrimary"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestScreenInfo_getPrimaryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getPrimaryResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestScreenInfo_getOrigin struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getOrigin"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestScreenInfo_getOriginResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getOriginResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestScreenInfo_getOriginX struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getOriginX"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestScreenInfo_getOriginXResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getOriginXResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestScreenInfo_getOriginY struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getOriginY"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestScreenInfo_getOriginYResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getOriginYResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestScreenInfo_getWidth struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getWidth"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestScreenInfo_getWidthResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getWidthResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestScreenInfo_getHeight struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getHeight"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestScreenInfo_getHeightResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getHeightResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestScreenInfo_getBitsPerPixel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getBitsPerPixel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestScreenInfo_getBitsPerPixelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getBitsPerPixelResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestScreenInfo_getExtendedInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getExtendedInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestScreenInfo_getExtendedInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestScreenInfo_getExtendedInfoResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDisplay_getGuestScreenLayout struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_getGuestScreenLayout"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDisplay_getGuestScreenLayoutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_getGuestScreenLayoutResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDisplay_getScreenResolution struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_getScreenResolution"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`
}

type IDisplay_getScreenResolutionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_getScreenResolutionResponse"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`

	BitsPerPixel uint32 `xml:"bitsPerPixel,omitempty" json:"bitsPerPixel,omitempty"`

	XOrigin int32 `xml:"xOrigin,omitempty" json:"xOrigin,omitempty"`

	YOrigin int32 `xml:"yOrigin,omitempty" json:"yOrigin,omitempty"`

	GuestMonitorStatus *GuestMonitorStatus `xml:"guestMonitorStatus,omitempty" json:"guestMonitorStatus,omitempty"`
}

type IDisplay_attachFramebuffer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_attachFramebuffer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`

	Framebuffer string `xml:"framebuffer,omitempty" json:"framebuffer,omitempty"`
}

type IDisplay_attachFramebufferResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_attachFramebufferResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDisplay_detachFramebuffer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_detachFramebuffer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type IDisplay_detachFramebufferResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_detachFramebufferResponse"`
}

type IDisplay_queryFramebuffer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_queryFramebuffer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`
}

type IDisplay_queryFramebufferResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_queryFramebufferResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDisplay_setVideoModeHint struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_setVideoModeHint"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Display uint32 `xml:"display,omitempty" json:"display,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`

	ChangeOrigin bool `xml:"changeOrigin,omitempty" json:"changeOrigin,omitempty"`

	OriginX int32 `xml:"originX,omitempty" json:"originX,omitempty"`

	OriginY int32 `xml:"originY,omitempty" json:"originY,omitempty"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`

	BitsPerPixel uint32 `xml:"bitsPerPixel,omitempty" json:"bitsPerPixel,omitempty"`

	Notify bool `xml:"notify,omitempty" json:"notify,omitempty"`
}

type IDisplay_setVideoModeHintResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_setVideoModeHintResponse"`
}

type IDisplay_getVideoModeHint struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_getVideoModeHint"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Display uint32 `xml:"display,omitempty" json:"display,omitempty"`
}

type IDisplay_getVideoModeHintResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_getVideoModeHintResponse"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`

	ChangeOrigin bool `xml:"changeOrigin,omitempty" json:"changeOrigin,omitempty"`

	OriginX int32 `xml:"originX,omitempty" json:"originX,omitempty"`

	OriginY int32 `xml:"originY,omitempty" json:"originY,omitempty"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`

	BitsPerPixel uint32 `xml:"bitsPerPixel,omitempty" json:"bitsPerPixel,omitempty"`
}

type IDisplay_setSeamlessMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_setSeamlessMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type IDisplay_setSeamlessModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_setSeamlessModeResponse"`
}

type IDisplay_takeScreenShotToArray struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_takeScreenShotToArray"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`

	BitmapFormat *BitmapFormat `xml:"bitmapFormat,omitempty" json:"bitmapFormat,omitempty"`
}

type IDisplay_takeScreenShotToArrayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_takeScreenShotToArrayResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDisplay_invalidateAndUpdate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_invalidateAndUpdate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDisplay_invalidateAndUpdateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_invalidateAndUpdateResponse"`
}

type IDisplay_invalidateAndUpdateScreen struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_invalidateAndUpdateScreen"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`
}

type IDisplay_invalidateAndUpdateScreenResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_invalidateAndUpdateScreenResponse"`
}

type IDisplay_viewportChanged struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_viewportChanged"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`

	X uint32 `xml:"x,omitempty" json:"x,omitempty"`

	Y uint32 `xml:"y,omitempty" json:"y,omitempty"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`
}

type IDisplay_viewportChangedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_viewportChangedResponse"`
}

type IDisplay_notifyScaleFactorChange struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_notifyScaleFactorChange"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenId uint32 `xml:"screenId,omitempty" json:"screenId,omitempty"`

	U32ScaleFactorWMultiplied uint32 `xml:"u32ScaleFactorWMultiplied,omitempty" json:"u32ScaleFactorWMultiplied,omitempty"`

	U32ScaleFactorHMultiplied uint32 `xml:"u32ScaleFactorHMultiplied,omitempty" json:"u32ScaleFactorHMultiplied,omitempty"`
}

type IDisplay_notifyScaleFactorChangeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_notifyScaleFactorChangeResponse"`
}

type IDisplay_notifyHiDPIOutputPolicyChange struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_notifyHiDPIOutputPolicyChange"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	FUnscaledHiDPI bool `xml:"fUnscaledHiDPI,omitempty" json:"fUnscaledHiDPI,omitempty"`
}

type IDisplay_notifyHiDPIOutputPolicyChangeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_notifyHiDPIOutputPolicyChangeResponse"`
}

type IDisplay_setScreenLayout struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_setScreenLayout"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenLayoutMode *ScreenLayoutMode `xml:"screenLayoutMode,omitempty" json:"screenLayoutMode,omitempty"`

	GuestScreenInfo []string `xml:"guestScreenInfo,omitempty" json:"guestScreenInfo,omitempty"`
}

type IDisplay_setScreenLayoutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_setScreenLayoutResponse"`
}

type IDisplay_detachScreens struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_detachScreens"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ScreenIds []int32 `xml:"screenIds,omitempty" json:"screenIds,omitempty"`
}

type IDisplay_detachScreensResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_detachScreensResponse"`
}

type IDisplay_createGuestScreenInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_createGuestScreenInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Display uint32 `xml:"display,omitempty" json:"display,omitempty"`

	Status *GuestMonitorStatus `xml:"status,omitempty" json:"status,omitempty"`

	Primary bool `xml:"primary,omitempty" json:"primary,omitempty"`

	ChangeOrigin bool `xml:"changeOrigin,omitempty" json:"changeOrigin,omitempty"`

	OriginX int32 `xml:"originX,omitempty" json:"originX,omitempty"`

	OriginY int32 `xml:"originY,omitempty" json:"originY,omitempty"`

	Width uint32 `xml:"width,omitempty" json:"width,omitempty"`

	Height uint32 `xml:"height,omitempty" json:"height,omitempty"`

	BitsPerPixel uint32 `xml:"bitsPerPixel,omitempty" json:"bitsPerPixel,omitempty"`
}

type IDisplay_createGuestScreenInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDisplay_createGuestScreenInfoResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_getAdapterType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getAdapterType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getAdapterTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getAdapterTypeResponse"`

	Returnval *NetworkAdapterType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setAdapterType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setAdapterType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AdapterType *NetworkAdapterType `xml:"adapterType,omitempty" json:"adapterType,omitempty"`
}

type INetworkAdapter_setAdapterTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setAdapterTypeResponse"`
}

type INetworkAdapter_getSlot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getSlot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getSlotResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getSlotResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type INetworkAdapter_setEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setEnabledResponse"`
}

type INetworkAdapter_getMACAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getMACAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getMACAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getMACAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setMACAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setMACAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MACAddress string `xml:"MACAddress,omitempty" json:"MACAddress,omitempty"`
}

type INetworkAdapter_setMACAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setMACAddressResponse"`
}

type INetworkAdapter_getAttachmentType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getAttachmentType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getAttachmentTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getAttachmentTypeResponse"`

	Returnval *NetworkAttachmentType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setAttachmentType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setAttachmentType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AttachmentType *NetworkAttachmentType `xml:"attachmentType,omitempty" json:"attachmentType,omitempty"`
}

type INetworkAdapter_setAttachmentTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setAttachmentTypeResponse"`
}

type INetworkAdapter_getBridgedInterface struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getBridgedInterface"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getBridgedInterfaceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getBridgedInterfaceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setBridgedInterface struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setBridgedInterface"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	BridgedInterface string `xml:"bridgedInterface,omitempty" json:"bridgedInterface,omitempty"`
}

type INetworkAdapter_setBridgedInterfaceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setBridgedInterfaceResponse"`
}

type INetworkAdapter_getHostOnlyInterface struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getHostOnlyInterface"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getHostOnlyInterfaceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getHostOnlyInterfaceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setHostOnlyInterface struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setHostOnlyInterface"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	HostOnlyInterface string `xml:"hostOnlyInterface,omitempty" json:"hostOnlyInterface,omitempty"`
}

type INetworkAdapter_setHostOnlyInterfaceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setHostOnlyInterfaceResponse"`
}

type INetworkAdapter_getHostOnlyNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getHostOnlyNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getHostOnlyNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getHostOnlyNetworkResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setHostOnlyNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setHostOnlyNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	HostOnlyNetwork string `xml:"hostOnlyNetwork,omitempty" json:"hostOnlyNetwork,omitempty"`
}

type INetworkAdapter_setHostOnlyNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setHostOnlyNetworkResponse"`
}

type INetworkAdapter_getInternalNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getInternalNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getInternalNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getInternalNetworkResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setInternalNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setInternalNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	InternalNetwork string `xml:"internalNetwork,omitempty" json:"internalNetwork,omitempty"`
}

type INetworkAdapter_setInternalNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setInternalNetworkResponse"`
}

type INetworkAdapter_getNATNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getNATNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getNATNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getNATNetworkResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setNATNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setNATNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	NATNetwork string `xml:"NATNetwork,omitempty" json:"NATNetwork,omitempty"`
}

type INetworkAdapter_setNATNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setNATNetworkResponse"`
}

type INetworkAdapter_getGenericDriver struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getGenericDriver"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getGenericDriverResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getGenericDriverResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setGenericDriver struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setGenericDriver"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	GenericDriver string `xml:"genericDriver,omitempty" json:"genericDriver,omitempty"`
}

type INetworkAdapter_setGenericDriverResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setGenericDriverResponse"`
}

type INetworkAdapter_getCloudNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getCloudNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getCloudNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getCloudNetworkResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setCloudNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setCloudNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CloudNetwork string `xml:"cloudNetwork,omitempty" json:"cloudNetwork,omitempty"`
}

type INetworkAdapter_setCloudNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setCloudNetworkResponse"`
}

type INetworkAdapter_getCableConnected struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getCableConnected"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getCableConnectedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getCableConnectedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setCableConnected struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setCableConnected"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CableConnected bool `xml:"cableConnected,omitempty" json:"cableConnected,omitempty"`
}

type INetworkAdapter_setCableConnectedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setCableConnectedResponse"`
}

type INetworkAdapter_getLineSpeed struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getLineSpeed"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getLineSpeedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getLineSpeedResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setLineSpeed struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setLineSpeed"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LineSpeed uint32 `xml:"lineSpeed,omitempty" json:"lineSpeed,omitempty"`
}

type INetworkAdapter_setLineSpeedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setLineSpeedResponse"`
}

type INetworkAdapter_getPromiscModePolicy struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getPromiscModePolicy"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getPromiscModePolicyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getPromiscModePolicyResponse"`

	Returnval *NetworkAdapterPromiscModePolicy `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setPromiscModePolicy struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setPromiscModePolicy"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	PromiscModePolicy *NetworkAdapterPromiscModePolicy `xml:"promiscModePolicy,omitempty" json:"promiscModePolicy,omitempty"`
}

type INetworkAdapter_setPromiscModePolicyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setPromiscModePolicyResponse"`
}

type INetworkAdapter_getTraceEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getTraceEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getTraceEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getTraceEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setTraceEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setTraceEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TraceEnabled bool `xml:"traceEnabled,omitempty" json:"traceEnabled,omitempty"`
}

type INetworkAdapter_setTraceEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setTraceEnabledResponse"`
}

type INetworkAdapter_getTraceFile struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getTraceFile"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getTraceFileResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getTraceFileResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setTraceFile struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setTraceFile"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TraceFile string `xml:"traceFile,omitempty" json:"traceFile,omitempty"`
}

type INetworkAdapter_setTraceFileResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setTraceFileResponse"`
}

type INetworkAdapter_getNATEngine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getNATEngine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getNATEngineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getNATEngineResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_getBootPriority struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getBootPriority"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getBootPriorityResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getBootPriorityResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setBootPriority struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setBootPriority"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	BootPriority uint32 `xml:"bootPriority,omitempty" json:"bootPriority,omitempty"`
}

type INetworkAdapter_setBootPriorityResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setBootPriorityResponse"`
}

type INetworkAdapter_getBandwidthGroup struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getBandwidthGroup"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapter_getBandwidthGroupResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getBandwidthGroupResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setBandwidthGroup struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setBandwidthGroup"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	BandwidthGroup string `xml:"bandwidthGroup,omitempty" json:"bandwidthGroup,omitempty"`
}

type INetworkAdapter_setBandwidthGroupResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setBandwidthGroupResponse"`
}

type INetworkAdapter_getProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`
}

type INetworkAdapter_getPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getPropertyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapter_setProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type INetworkAdapter_setPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_setPropertyResponse"`
}

type INetworkAdapter_getProperties struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getProperties"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Names string `xml:"names,omitempty" json:"names,omitempty"`
}

type INetworkAdapter_getPropertiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapter_getPropertiesResponse"`

	ReturnNames []string `xml:"returnNames,omitempty" json:"returnNames,omitempty"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISerialPort_getSlot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getSlot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISerialPort_getSlotResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getSlotResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISerialPort_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISerialPort_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISerialPort_setEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type ISerialPort_setEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setEnabledResponse"`
}

type ISerialPort_getIOBase struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getIOBase"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISerialPort_getIOBaseResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getIOBaseResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISerialPort_setIOBase struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setIOBase"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IOBase uint32 `xml:"IOBase,omitempty" json:"IOBase,omitempty"`
}

type ISerialPort_setIOBaseResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setIOBaseResponse"`
}

type ISerialPort_getIRQ struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getIRQ"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISerialPort_getIRQResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getIRQResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISerialPort_setIRQ struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setIRQ"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IRQ uint32 `xml:"IRQ,omitempty" json:"IRQ,omitempty"`
}

type ISerialPort_setIRQResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setIRQResponse"`
}

type ISerialPort_getHostMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getHostMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISerialPort_getHostModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getHostModeResponse"`

	Returnval *PortMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISerialPort_setHostMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setHostMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	HostMode *PortMode `xml:"hostMode,omitempty" json:"hostMode,omitempty"`
}

type ISerialPort_setHostModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setHostModeResponse"`
}

type ISerialPort_getServer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getServer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISerialPort_getServerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getServerResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISerialPort_setServer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setServer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Server bool `xml:"server,omitempty" json:"server,omitempty"`
}

type ISerialPort_setServerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setServerResponse"`
}

type ISerialPort_getPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISerialPort_getPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getPathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISerialPort_setPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`
}

type ISerialPort_setPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setPathResponse"`
}

type ISerialPort_getUartType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getUartType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISerialPort_getUartTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_getUartTypeResponse"`

	Returnval *UartType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISerialPort_setUartType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setUartType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	UartType *UartType `xml:"uartType,omitempty" json:"uartType,omitempty"`
}

type ISerialPort_setUartTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPort_setUartTypeResponse"`
}

type IParallelPort_getSlot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_getSlot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IParallelPort_getSlotResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_getSlotResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IParallelPort_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IParallelPort_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IParallelPort_setEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_setEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type IParallelPort_setEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_setEnabledResponse"`
}

type IParallelPort_getIOBase struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_getIOBase"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IParallelPort_getIOBaseResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_getIOBaseResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IParallelPort_setIOBase struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_setIOBase"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IOBase uint32 `xml:"IOBase,omitempty" json:"IOBase,omitempty"`
}

type IParallelPort_setIOBaseResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_setIOBaseResponse"`
}

type IParallelPort_getIRQ struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_getIRQ"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IParallelPort_getIRQResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_getIRQResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IParallelPort_setIRQ struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_setIRQ"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IRQ uint32 `xml:"IRQ,omitempty" json:"IRQ,omitempty"`
}

type IParallelPort_setIRQResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_setIRQResponse"`
}

type IParallelPort_getPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_getPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IParallelPort_getPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_getPathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IParallelPort_setPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_setPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Path string `xml:"path,omitempty" json:"path,omitempty"`
}

type IParallelPort_setPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPort_setPathResponse"`
}

type IMachineDebugger_getSingleStep struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getSingleStep"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getSingleStepResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getSingleStepResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_setSingleStep struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_setSingleStep"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SingleStep bool `xml:"singleStep,omitempty" json:"singleStep,omitempty"`
}

type IMachineDebugger_setSingleStepResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_setSingleStepResponse"`
}

type IMachineDebugger_getExecuteAllInIEM struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getExecuteAllInIEM"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getExecuteAllInIEMResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getExecuteAllInIEMResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_setExecuteAllInIEM struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_setExecuteAllInIEM"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ExecuteAllInIEM bool `xml:"executeAllInIEM,omitempty" json:"executeAllInIEM,omitempty"`
}

type IMachineDebugger_setExecuteAllInIEMResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_setExecuteAllInIEMResponse"`
}

type IMachineDebugger_getLogEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getLogEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_setLogEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_setLogEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LogEnabled bool `xml:"logEnabled,omitempty" json:"logEnabled,omitempty"`
}

type IMachineDebugger_setLogEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_setLogEnabledResponse"`
}

type IMachineDebugger_getLogDbgFlags struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogDbgFlags"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getLogDbgFlagsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogDbgFlagsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getLogDbgGroups struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogDbgGroups"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getLogDbgGroupsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogDbgGroupsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getLogDbgDestinations struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogDbgDestinations"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getLogDbgDestinationsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogDbgDestinationsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getLogRelFlags struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogRelFlags"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getLogRelFlagsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogRelFlagsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getLogRelGroups struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogRelGroups"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getLogRelGroupsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogRelGroupsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getLogRelDestinations struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogRelDestinations"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getLogRelDestinationsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getLogRelDestinationsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getExecutionEngine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getExecutionEngine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getExecutionEngineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getExecutionEngineResponse"`

	Returnval *VMExecutionEngine `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getHWVirtExNestedPagingEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getHWVirtExNestedPagingEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getHWVirtExNestedPagingEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getHWVirtExNestedPagingEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getHWVirtExVPIDEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getHWVirtExVPIDEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getHWVirtExVPIDEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getHWVirtExVPIDEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getHWVirtExUXEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getHWVirtExUXEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getHWVirtExUXEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getHWVirtExUXEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getOSName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getOSName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getOSNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getOSNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getOSVersion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getOSVersion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getOSVersionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getOSVersionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getPAEEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getPAEEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getPAEEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getPAEEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getVirtualTimeRate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getVirtualTimeRate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getVirtualTimeRateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getVirtualTimeRateResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_setVirtualTimeRate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_setVirtualTimeRate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VirtualTimeRate uint32 `xml:"virtualTimeRate,omitempty" json:"virtualTimeRate,omitempty"`
}

type IMachineDebugger_setVirtualTimeRateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_setVirtualTimeRateResponse"`
}

type IMachineDebugger_getUptime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getUptime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_getUptimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getUptimeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_dumpGuestCore struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_dumpGuestCore"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Filename string `xml:"filename,omitempty" json:"filename,omitempty"`

	Compression string `xml:"compression,omitempty" json:"compression,omitempty"`
}

type IMachineDebugger_dumpGuestCoreResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_dumpGuestCoreResponse"`
}

type IMachineDebugger_dumpHostProcessCore struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_dumpHostProcessCore"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Filename string `xml:"filename,omitempty" json:"filename,omitempty"`

	Compression string `xml:"compression,omitempty" json:"compression,omitempty"`
}

type IMachineDebugger_dumpHostProcessCoreResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_dumpHostProcessCoreResponse"`
}

type IMachineDebugger_info struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_info"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Args string `xml:"args,omitempty" json:"args,omitempty"`
}

type IMachineDebugger_infoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_infoResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_injectNMI struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_injectNMI"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_injectNMIResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_injectNMIResponse"`
}

type IMachineDebugger_modifyLogGroups struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_modifyLogGroups"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Settings string `xml:"settings,omitempty" json:"settings,omitempty"`
}

type IMachineDebugger_modifyLogGroupsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_modifyLogGroupsResponse"`
}

type IMachineDebugger_modifyLogFlags struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_modifyLogFlags"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Settings string `xml:"settings,omitempty" json:"settings,omitempty"`
}

type IMachineDebugger_modifyLogFlagsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_modifyLogFlagsResponse"`
}

type IMachineDebugger_modifyLogDestinations struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_modifyLogDestinations"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Settings string `xml:"settings,omitempty" json:"settings,omitempty"`
}

type IMachineDebugger_modifyLogDestinationsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_modifyLogDestinationsResponse"`
}

type IMachineDebugger_readPhysicalMemory struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_readPhysicalMemory"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Address int64 `xml:"address,omitempty" json:"address,omitempty"`

	Size uint32 `xml:"size,omitempty" json:"size,omitempty"`
}

type IMachineDebugger_readPhysicalMemoryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_readPhysicalMemoryResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_writePhysicalMemory struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_writePhysicalMemory"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Address int64 `xml:"address,omitempty" json:"address,omitempty"`

	Size uint32 `xml:"size,omitempty" json:"size,omitempty"`

	Bytes string `xml:"bytes,omitempty" json:"bytes,omitempty"`
}

type IMachineDebugger_writePhysicalMemoryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_writePhysicalMemoryResponse"`
}

type IMachineDebugger_readVirtualMemory struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_readVirtualMemory"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CpuId uint32 `xml:"cpuId,omitempty" json:"cpuId,omitempty"`

	Address int64 `xml:"address,omitempty" json:"address,omitempty"`

	Size uint32 `xml:"size,omitempty" json:"size,omitempty"`
}

type IMachineDebugger_readVirtualMemoryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_readVirtualMemoryResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_writeVirtualMemory struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_writeVirtualMemory"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CpuId uint32 `xml:"cpuId,omitempty" json:"cpuId,omitempty"`

	Address int64 `xml:"address,omitempty" json:"address,omitempty"`

	Size uint32 `xml:"size,omitempty" json:"size,omitempty"`

	Bytes string `xml:"bytes,omitempty" json:"bytes,omitempty"`
}

type IMachineDebugger_writeVirtualMemoryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_writeVirtualMemoryResponse"`
}

type IMachineDebugger_loadPlugIn struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_loadPlugIn"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMachineDebugger_loadPlugInResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_loadPlugInResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_unloadPlugIn struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_unloadPlugIn"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMachineDebugger_unloadPlugInResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_unloadPlugInResponse"`
}

type IMachineDebugger_detectOS struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_detectOS"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDebugger_detectOSResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_detectOSResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_queryOSKernelLog struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_queryOSKernelLog"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MaxMessages uint32 `xml:"maxMessages,omitempty" json:"maxMessages,omitempty"`
}

type IMachineDebugger_queryOSKernelLogResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_queryOSKernelLogResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getRegister struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getRegister"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CpuId uint32 `xml:"cpuId,omitempty" json:"cpuId,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IMachineDebugger_getRegisterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getRegisterResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getRegisters struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getRegisters"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CpuId uint32 `xml:"cpuId,omitempty" json:"cpuId,omitempty"`
}

type IMachineDebugger_getRegistersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getRegistersResponse"`

	Names []string `xml:"names,omitempty" json:"names,omitempty"`

	Values []string `xml:"values,omitempty" json:"values,omitempty"`
}

type IMachineDebugger_setRegister struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_setRegister"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CpuId uint32 `xml:"cpuId,omitempty" json:"cpuId,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type IMachineDebugger_setRegisterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_setRegisterResponse"`
}

type IMachineDebugger_setRegisters struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_setRegisters"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CpuId uint32 `xml:"cpuId,omitempty" json:"cpuId,omitempty"`

	Names []string `xml:"names,omitempty" json:"names,omitempty"`

	Values []string `xml:"values,omitempty" json:"values,omitempty"`
}

type IMachineDebugger_setRegistersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_setRegistersResponse"`
}

type IMachineDebugger_dumpGuestStack struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_dumpGuestStack"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CpuId uint32 `xml:"cpuId,omitempty" json:"cpuId,omitempty"`
}

type IMachineDebugger_dumpGuestStackResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_dumpGuestStackResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_resetStats struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_resetStats"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Pattern string `xml:"pattern,omitempty" json:"pattern,omitempty"`
}

type IMachineDebugger_resetStatsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_resetStatsResponse"`
}

type IMachineDebugger_dumpStats struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_dumpStats"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Pattern string `xml:"pattern,omitempty" json:"pattern,omitempty"`
}

type IMachineDebugger_dumpStatsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_dumpStatsResponse"`
}

type IMachineDebugger_getStats struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getStats"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Pattern string `xml:"pattern,omitempty" json:"pattern,omitempty"`

	WithDescriptions bool `xml:"withDescriptions,omitempty" json:"withDescriptions,omitempty"`
}

type IMachineDebugger_getStatsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getStatsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_getCPULoad struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getCPULoad"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	CpuId uint32 `xml:"cpuId,omitempty" json:"cpuId,omitempty"`
}

type IMachineDebugger_getCPULoadResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_getCPULoadResponse"`

	PctExecuting uint32 `xml:"pctExecuting,omitempty" json:"pctExecuting,omitempty"`

	PctHalted uint32 `xml:"pctHalted,omitempty" json:"pctHalted,omitempty"`

	PctOther uint32 `xml:"pctOther,omitempty" json:"pctOther,omitempty"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDebugger_takeGuestSample struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_takeGuestSample"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Filename string `xml:"filename,omitempty" json:"filename,omitempty"`

	UsInterval uint32 `xml:"usInterval,omitempty" json:"usInterval,omitempty"`

	UsSampleTime int64 `xml:"usSampleTime,omitempty" json:"usSampleTime,omitempty"`
}

type IMachineDebugger_takeGuestSampleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDebugger_takeGuestSampleResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilters_getDeviceFilters struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilters_getDeviceFilters"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceFilters_getDeviceFiltersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilters_getDeviceFiltersResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilters_createDeviceFilter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilters_createDeviceFilter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IUSBDeviceFilters_createDeviceFilterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilters_createDeviceFilterResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilters_insertDeviceFilter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilters_insertDeviceFilter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Position uint32 `xml:"position,omitempty" json:"position,omitempty"`

	Filter string `xml:"filter,omitempty" json:"filter,omitempty"`
}

type IUSBDeviceFilters_insertDeviceFilterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilters_insertDeviceFilterResponse"`
}

type IUSBDeviceFilters_removeDeviceFilter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilters_removeDeviceFilter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Position uint32 `xml:"position,omitempty" json:"position,omitempty"`
}

type IUSBDeviceFilters_removeDeviceFilterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilters_removeDeviceFilterResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBController_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBController_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBController_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBController_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBController_setName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBController_setName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IUSBController_setNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBController_setNameResponse"`
}

type IUSBController_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBController_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBController_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBController_getTypeResponse"`

	Returnval *USBControllerType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBController_setType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBController_setType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ *USBControllerType `xml:"type,omitempty" json:"type,omitempty"`
}

type IUSBController_setTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBController_setTypeResponse"`
}

type IUSBController_getUSBStandard struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBController_getUSBStandard"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBController_getUSBStandardResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBController_getUSBStandardResponse"`

	Returnval uint16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getVendorId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getVendorId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getVendorIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getVendorIdResponse"`

	Returnval uint16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getProductId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getProductId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getProductIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getProductIdResponse"`

	Returnval uint16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getRevision struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getRevision"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getRevisionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getRevisionResponse"`

	Returnval uint16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getManufacturer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getManufacturer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getManufacturerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getManufacturerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getProduct struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getProduct"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getProductResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getProductResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getSerialNumber struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getSerialNumber"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getSerialNumberResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getSerialNumberResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getPortResponse"`

	Returnval uint16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getPortPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getPortPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getPortPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getPortPathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getVersion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getVersion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getVersionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getVersionResponse"`

	Returnval uint16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getSpeed struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getSpeed"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getSpeedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getSpeedResponse"`

	Returnval *USBConnectionSpeed `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getRemote struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getRemote"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getRemoteResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getRemoteResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getDeviceInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getDeviceInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getDeviceInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getDeviceInfoResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDevice_getBackend struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getBackend"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDevice_getBackendResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDevice_getBackendResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilter_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceFilter_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilter_setName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IUSBDeviceFilter_setNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setNameResponse"`
}

type IUSBDeviceFilter_getActive struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getActive"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceFilter_getActiveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getActiveResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilter_setActive struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setActive"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Active bool `xml:"active,omitempty" json:"active,omitempty"`
}

type IUSBDeviceFilter_setActiveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setActiveResponse"`
}

type IUSBDeviceFilter_getVendorId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getVendorId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceFilter_getVendorIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getVendorIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilter_setVendorId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setVendorId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VendorId string `xml:"vendorId,omitempty" json:"vendorId,omitempty"`
}

type IUSBDeviceFilter_setVendorIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setVendorIdResponse"`
}

type IUSBDeviceFilter_getProductId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getProductId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceFilter_getProductIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getProductIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilter_setProductId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setProductId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ProductId string `xml:"productId,omitempty" json:"productId,omitempty"`
}

type IUSBDeviceFilter_setProductIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setProductIdResponse"`
}

type IUSBDeviceFilter_getRevision struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getRevision"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceFilter_getRevisionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getRevisionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilter_setRevision struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setRevision"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Revision string `xml:"revision,omitempty" json:"revision,omitempty"`
}

type IUSBDeviceFilter_setRevisionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setRevisionResponse"`
}

type IUSBDeviceFilter_getManufacturer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getManufacturer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceFilter_getManufacturerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getManufacturerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilter_setManufacturer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setManufacturer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Manufacturer string `xml:"manufacturer,omitempty" json:"manufacturer,omitempty"`
}

type IUSBDeviceFilter_setManufacturerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setManufacturerResponse"`
}

type IUSBDeviceFilter_getProduct struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getProduct"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceFilter_getProductResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getProductResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilter_setProduct struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setProduct"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Product string `xml:"product,omitempty" json:"product,omitempty"`
}

type IUSBDeviceFilter_setProductResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setProductResponse"`
}

type IUSBDeviceFilter_getSerialNumber struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getSerialNumber"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceFilter_getSerialNumberResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getSerialNumberResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilter_setSerialNumber struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setSerialNumber"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SerialNumber string `xml:"serialNumber,omitempty" json:"serialNumber,omitempty"`
}

type IUSBDeviceFilter_setSerialNumberResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setSerialNumberResponse"`
}

type IUSBDeviceFilter_getPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceFilter_getPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getPortResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilter_setPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Port string `xml:"port,omitempty" json:"port,omitempty"`
}

type IUSBDeviceFilter_setPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setPortResponse"`
}

type IUSBDeviceFilter_getRemote struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getRemote"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceFilter_getRemoteResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getRemoteResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilter_setRemote struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setRemote"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Remote string `xml:"remote,omitempty" json:"remote,omitempty"`
}

type IUSBDeviceFilter_setRemoteResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setRemoteResponse"`
}

type IUSBDeviceFilter_getMaskedInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getMaskedInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceFilter_getMaskedInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_getMaskedInterfacesResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceFilter_setMaskedInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setMaskedInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MaskedInterfaces uint32 `xml:"maskedInterfaces,omitempty" json:"maskedInterfaces,omitempty"`
}

type IUSBDeviceFilter_setMaskedInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceFilter_setMaskedInterfacesResponse"`
}

type IHostUSBDevice_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostUSBDevice_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostUSBDevice_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostUSBDevice_getStateResponse"`

	Returnval *USBDeviceState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostUSBDeviceFilter_getAction struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostUSBDeviceFilter_getAction"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostUSBDeviceFilter_getActionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostUSBDeviceFilter_getActionResponse"`

	Returnval *USBDeviceFilterAction `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostUSBDeviceFilter_setAction struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostUSBDeviceFilter_setAction"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Action *USBDeviceFilterAction `xml:"action,omitempty" json:"action,omitempty"`
}

type IHostUSBDeviceFilter_setActionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostUSBDeviceFilter_setActionResponse"`
}

type IUSBProxyBackend_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBProxyBackend_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBProxyBackend_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBProxyBackend_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBProxyBackend_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBProxyBackend_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBProxyBackend_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBProxyBackend_getTypeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAudioAdapter_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAudioAdapter_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAudioAdapter_setEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type IAudioAdapter_setEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setEnabledResponse"`
}

type IAudioAdapter_getEnabledIn struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getEnabledIn"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAudioAdapter_getEnabledInResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getEnabledInResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAudioAdapter_setEnabledIn struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setEnabledIn"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	EnabledIn bool `xml:"enabledIn,omitempty" json:"enabledIn,omitempty"`
}

type IAudioAdapter_setEnabledInResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setEnabledInResponse"`
}

type IAudioAdapter_getEnabledOut struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getEnabledOut"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAudioAdapter_getEnabledOutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getEnabledOutResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAudioAdapter_setEnabledOut struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setEnabledOut"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	EnabledOut bool `xml:"enabledOut,omitempty" json:"enabledOut,omitempty"`
}

type IAudioAdapter_setEnabledOutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setEnabledOutResponse"`
}

type IAudioAdapter_getAudioController struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getAudioController"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAudioAdapter_getAudioControllerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getAudioControllerResponse"`

	Returnval *AudioControllerType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAudioAdapter_setAudioController struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setAudioController"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AudioController *AudioControllerType `xml:"audioController,omitempty" json:"audioController,omitempty"`
}

type IAudioAdapter_setAudioControllerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setAudioControllerResponse"`
}

type IAudioAdapter_getAudioCodec struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getAudioCodec"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAudioAdapter_getAudioCodecResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getAudioCodecResponse"`

	Returnval *AudioCodecType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAudioAdapter_setAudioCodec struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setAudioCodec"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AudioCodec *AudioCodecType `xml:"audioCodec,omitempty" json:"audioCodec,omitempty"`
}

type IAudioAdapter_setAudioCodecResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setAudioCodecResponse"`
}

type IAudioAdapter_getAudioDriver struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getAudioDriver"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAudioAdapter_getAudioDriverResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getAudioDriverResponse"`

	Returnval *AudioDriverType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAudioAdapter_setAudioDriver struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setAudioDriver"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AudioDriver *AudioDriverType `xml:"audioDriver,omitempty" json:"audioDriver,omitempty"`
}

type IAudioAdapter_setAudioDriverResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setAudioDriverResponse"`
}

type IAudioAdapter_getPropertiesList struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getPropertiesList"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAudioAdapter_getPropertiesListResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getPropertiesListResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAudioAdapter_setProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type IAudioAdapter_setPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_setPropertyResponse"`
}

type IAudioAdapter_getProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`
}

type IAudioAdapter_getPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapter_getPropertyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDevice_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostAudioDevice_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDevice_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostAudioDevice_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDevice_setName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IHostAudioDevice_setNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setNameResponse"`
}

type IHostAudioDevice_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostAudioDevice_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getTypeResponse"`

	Returnval *AudioDeviceType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDevice_setType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Type_ *AudioDeviceType `xml:"type,omitempty" json:"type,omitempty"`
}

type IHostAudioDevice_setTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setTypeResponse"`
}

type IHostAudioDevice_getUsage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getUsage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostAudioDevice_getUsageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getUsageResponse"`

	Returnval *AudioDirection `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDevice_setUsage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setUsage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Usage *AudioDirection `xml:"usage,omitempty" json:"usage,omitempty"`
}

type IHostAudioDevice_setUsageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setUsageResponse"`
}

type IHostAudioDevice_getDefaultIn struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getDefaultIn"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostAudioDevice_getDefaultInResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getDefaultInResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDevice_setDefaultIn struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setDefaultIn"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DefaultIn bool `xml:"defaultIn,omitempty" json:"defaultIn,omitempty"`
}

type IHostAudioDevice_setDefaultInResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setDefaultInResponse"`
}

type IHostAudioDevice_getDefaultOut struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getDefaultOut"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostAudioDevice_getDefaultOutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getDefaultOutResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDevice_setDefaultOut struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setDefaultOut"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DefaultOut bool `xml:"defaultOut,omitempty" json:"defaultOut,omitempty"`
}

type IHostAudioDevice_setDefaultOutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setDefaultOutResponse"`
}

type IHostAudioDevice_getIsHotPlug struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getIsHotPlug"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostAudioDevice_getIsHotPlugResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getIsHotPlugResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDevice_setIsHotPlug struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setIsHotPlug"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	IsHotPlug bool `xml:"isHotPlug,omitempty" json:"isHotPlug,omitempty"`
}

type IHostAudioDevice_setIsHotPlugResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setIsHotPlugResponse"`
}

type IHostAudioDevice_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostAudioDevice_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getStateResponse"`

	Returnval *AudioDeviceState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDevice_setState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	State *AudioDeviceState `xml:"state,omitempty" json:"state,omitempty"`
}

type IHostAudioDevice_setStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_setStateResponse"`
}

type IHostAudioDevice_getProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`
}

type IHostAudioDevice_getPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDevice_getPropertyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAudioSettings_getAdapter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioSettings_getAdapter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAudioSettings_getAdapterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioSettings_getAdapterResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAudioSettings_getHostAudioDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioSettings_getHostAudioDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Usage *AudioDirection `xml:"usage,omitempty" json:"usage,omitempty"`
}

type IAudioSettings_getHostAudioDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioSettings_getHostAudioDeviceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAudioSettings_setHostAudioDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioSettings_setHostAudioDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Device string `xml:"device,omitempty" json:"device,omitempty"`

	Usage *AudioDirection `xml:"usage,omitempty" json:"usage,omitempty"`
}

type IAudioSettings_setHostAudioDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioSettings_setHostAudioDeviceResponse"`
}

type IVRDEServer_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVRDEServer_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVRDEServer_setEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Enabled bool `xml:"enabled,omitempty" json:"enabled,omitempty"`
}

type IVRDEServer_setEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setEnabledResponse"`
}

type IVRDEServer_getAuthType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getAuthType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVRDEServer_getAuthTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getAuthTypeResponse"`

	Returnval *AuthType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVRDEServer_setAuthType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setAuthType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AuthType *AuthType `xml:"authType,omitempty" json:"authType,omitempty"`
}

type IVRDEServer_setAuthTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setAuthTypeResponse"`
}

type IVRDEServer_getAuthTimeout struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getAuthTimeout"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVRDEServer_getAuthTimeoutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getAuthTimeoutResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVRDEServer_setAuthTimeout struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setAuthTimeout"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AuthTimeout uint32 `xml:"authTimeout,omitempty" json:"authTimeout,omitempty"`
}

type IVRDEServer_setAuthTimeoutResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setAuthTimeoutResponse"`
}

type IVRDEServer_getAllowMultiConnection struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getAllowMultiConnection"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVRDEServer_getAllowMultiConnectionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getAllowMultiConnectionResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVRDEServer_setAllowMultiConnection struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setAllowMultiConnection"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AllowMultiConnection bool `xml:"allowMultiConnection,omitempty" json:"allowMultiConnection,omitempty"`
}

type IVRDEServer_setAllowMultiConnectionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setAllowMultiConnectionResponse"`
}

type IVRDEServer_getReuseSingleConnection struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getReuseSingleConnection"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVRDEServer_getReuseSingleConnectionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getReuseSingleConnectionResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVRDEServer_setReuseSingleConnection struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setReuseSingleConnection"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ReuseSingleConnection bool `xml:"reuseSingleConnection,omitempty" json:"reuseSingleConnection,omitempty"`
}

type IVRDEServer_setReuseSingleConnectionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setReuseSingleConnectionResponse"`
}

type IVRDEServer_getVRDEExtPack struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getVRDEExtPack"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVRDEServer_getVRDEExtPackResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getVRDEExtPackResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVRDEServer_setVRDEExtPack struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setVRDEExtPack"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	VRDEExtPack string `xml:"VRDEExtPack,omitempty" json:"VRDEExtPack,omitempty"`
}

type IVRDEServer_setVRDEExtPackResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setVRDEExtPackResponse"`
}

type IVRDEServer_getAuthLibrary struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getAuthLibrary"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVRDEServer_getAuthLibraryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getAuthLibraryResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVRDEServer_setAuthLibrary struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setAuthLibrary"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AuthLibrary string `xml:"authLibrary,omitempty" json:"authLibrary,omitempty"`
}

type IVRDEServer_setAuthLibraryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setAuthLibraryResponse"`
}

type IVRDEServer_getVRDEProperties struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getVRDEProperties"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVRDEServer_getVRDEPropertiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getVRDEPropertiesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVRDEServer_setVRDEProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setVRDEProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type IVRDEServer_setVRDEPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_setVRDEPropertyResponse"`
}

type IVRDEServer_getVRDEProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getVRDEProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Key string `xml:"key,omitempty" json:"key,omitempty"`
}

type IVRDEServer_getVRDEPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServer_getVRDEPropertyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISharedFolder_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISharedFolder_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISharedFolder_getHostPath struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getHostPath"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISharedFolder_getHostPathResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getHostPathResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISharedFolder_getAccessible struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getAccessible"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISharedFolder_getAccessibleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getAccessibleResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISharedFolder_getWritable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getWritable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISharedFolder_getWritableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getWritableResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISharedFolder_setWritable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_setWritable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Writable bool `xml:"writable,omitempty" json:"writable,omitempty"`
}

type ISharedFolder_setWritableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_setWritableResponse"`
}

type ISharedFolder_getAutoMount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getAutoMount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISharedFolder_getAutoMountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getAutoMountResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISharedFolder_setAutoMount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_setAutoMount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AutoMount bool `xml:"autoMount,omitempty" json:"autoMount,omitempty"`
}

type ISharedFolder_setAutoMountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_setAutoMountResponse"`
}

type ISharedFolder_getAutoMountPoint struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getAutoMountPoint"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISharedFolder_getAutoMountPointResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getAutoMountPointResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISharedFolder_setAutoMountPoint struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_setAutoMountPoint"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AutoMountPoint string `xml:"autoMountPoint,omitempty" json:"autoMountPoint,omitempty"`
}

type ISharedFolder_setAutoMountPointResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_setAutoMountPointResponse"`
}

type ISharedFolder_getLastAccessError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getLastAccessError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISharedFolder_getLastAccessErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolder_getLastAccessErrorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISession_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISession_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_getStateResponse"`

	Returnval *SessionState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISession_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISession_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_getTypeResponse"`

	Returnval *SessionType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISession_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISession_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISession_setName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_setName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type ISession_setNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_setNameResponse"`
}

type ISession_getMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_getMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISession_getMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_getMachineResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISession_getConsole struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_getConsole"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISession_getConsoleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_getConsoleResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISession_unlockMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_unlockMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISession_unlockMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISession_unlockMachineResponse"`
}

type IStorageController_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageController_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageController_setName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_setName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IStorageController_setNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_setNameResponse"`
}

type IStorageController_getMaxDevicesPerPortCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getMaxDevicesPerPortCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageController_getMaxDevicesPerPortCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getMaxDevicesPerPortCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageController_getMinPortCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getMinPortCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageController_getMinPortCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getMinPortCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageController_getMaxPortCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getMaxPortCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageController_getMaxPortCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getMaxPortCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageController_getInstance struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getInstance"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageController_getInstanceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getInstanceResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageController_setInstance struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_setInstance"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Instance uint32 `xml:"instance,omitempty" json:"instance,omitempty"`
}

type IStorageController_setInstanceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_setInstanceResponse"`
}

type IStorageController_getPortCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getPortCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageController_getPortCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getPortCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageController_setPortCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_setPortCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	PortCount uint32 `xml:"portCount,omitempty" json:"portCount,omitempty"`
}

type IStorageController_setPortCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_setPortCountResponse"`
}

type IStorageController_getBus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getBus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageController_getBusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getBusResponse"`

	Returnval *StorageBus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageController_getControllerType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getControllerType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageController_getControllerTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getControllerTypeResponse"`

	Returnval *StorageControllerType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageController_setControllerType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_setControllerType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ControllerType *StorageControllerType `xml:"controllerType,omitempty" json:"controllerType,omitempty"`
}

type IStorageController_setControllerTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_setControllerTypeResponse"`
}

type IStorageController_getUseHostIOCache struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getUseHostIOCache"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageController_getUseHostIOCacheResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getUseHostIOCacheResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageController_setUseHostIOCache struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_setUseHostIOCache"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	UseHostIOCache bool `xml:"useHostIOCache,omitempty" json:"useHostIOCache,omitempty"`
}

type IStorageController_setUseHostIOCacheResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_setUseHostIOCacheResponse"`
}

type IStorageController_getBootable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getBootable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageController_getBootableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageController_getBootableResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IManagedObjectRef_getInterfaceName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IManagedObjectRef_getInterfaceName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IManagedObjectRef_getInterfaceNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IManagedObjectRef_getInterfaceNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IManagedObjectRef_release struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IManagedObjectRef_release"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IManagedObjectRef_releaseResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IManagedObjectRef_releaseResponse"`
}

type IWebsessionManager_logon struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IWebsessionManager_logon"`

	Username string `xml:"username,omitempty" json:"username,omitempty"`

	Password string `xml:"password,omitempty" json:"password,omitempty"`
}

type IWebsessionManager_logonResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IWebsessionManager_logonResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IWebsessionManager_getSessionObject struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IWebsessionManager_getSessionObject"`

	RefIVirtualBox string `xml:"refIVirtualBox,omitempty" json:"refIVirtualBox,omitempty"`
}

type IWebsessionManager_getSessionObjectResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IWebsessionManager_getSessionObjectResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IWebsessionManager_logoff struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IWebsessionManager_logoff"`

	RefIVirtualBox string `xml:"refIVirtualBox,omitempty" json:"refIVirtualBox,omitempty"`
}

type IWebsessionManager_logoffResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IWebsessionManager_logoffResponse"`
}

type IPerformanceMetric_getMetricName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getMetricName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPerformanceMetric_getMetricNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getMetricNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceMetric_getObject struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getObject"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPerformanceMetric_getObjectResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getObjectResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceMetric_getDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPerformanceMetric_getDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getDescriptionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceMetric_getPeriod struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getPeriod"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPerformanceMetric_getPeriodResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getPeriodResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceMetric_getCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPerformanceMetric_getCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getCountResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceMetric_getUnit struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getUnit"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPerformanceMetric_getUnitResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getUnitResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceMetric_getMinimumValue struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getMinimumValue"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPerformanceMetric_getMinimumValueResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getMinimumValueResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceMetric_getMaximumValue struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getMaximumValue"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPerformanceMetric_getMaximumValueResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceMetric_getMaximumValueResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceCollector_getMetricNames struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceCollector_getMetricNames"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IPerformanceCollector_getMetricNamesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceCollector_getMetricNamesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceCollector_getMetrics struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceCollector_getMetrics"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MetricNames []string `xml:"metricNames,omitempty" json:"metricNames,omitempty"`

	Objects []string `xml:"objects,omitempty" json:"objects,omitempty"`
}

type IPerformanceCollector_getMetricsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceCollector_getMetricsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceCollector_setupMetrics struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceCollector_setupMetrics"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MetricNames []string `xml:"metricNames,omitempty" json:"metricNames,omitempty"`

	Objects []string `xml:"objects,omitempty" json:"objects,omitempty"`

	Period uint32 `xml:"period,omitempty" json:"period,omitempty"`

	Count uint32 `xml:"count,omitempty" json:"count,omitempty"`
}

type IPerformanceCollector_setupMetricsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceCollector_setupMetricsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceCollector_enableMetrics struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceCollector_enableMetrics"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MetricNames []string `xml:"metricNames,omitempty" json:"metricNames,omitempty"`

	Objects []string `xml:"objects,omitempty" json:"objects,omitempty"`
}

type IPerformanceCollector_enableMetricsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceCollector_enableMetricsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceCollector_disableMetrics struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceCollector_disableMetrics"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MetricNames []string `xml:"metricNames,omitempty" json:"metricNames,omitempty"`

	Objects []string `xml:"objects,omitempty" json:"objects,omitempty"`
}

type IPerformanceCollector_disableMetricsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceCollector_disableMetricsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPerformanceCollector_queryMetricsData struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceCollector_queryMetricsData"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MetricNames []string `xml:"metricNames,omitempty" json:"metricNames,omitempty"`

	Objects []string `xml:"objects,omitempty" json:"objects,omitempty"`
}

type IPerformanceCollector_queryMetricsDataResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IPerformanceCollector_queryMetricsDataResponse"`

	ReturnMetricNames []string `xml:"returnMetricNames,omitempty" json:"returnMetricNames,omitempty"`

	ReturnObjects []string `xml:"returnObjects,omitempty" json:"returnObjects,omitempty"`

	ReturnUnits []string `xml:"returnUnits,omitempty" json:"returnUnits,omitempty"`

	ReturnScales []uint32 `xml:"returnScales,omitempty" json:"returnScales,omitempty"`

	ReturnSequenceNumbers []uint32 `xml:"returnSequenceNumbers,omitempty" json:"returnSequenceNumbers,omitempty"`

	ReturnDataIndices []uint32 `xml:"returnDataIndices,omitempty" json:"returnDataIndices,omitempty"`

	ReturnDataLengths []uint32 `xml:"returnDataLengths,omitempty" json:"returnDataLengths,omitempty"`

	Returnval []int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATEngine_getNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATEngine_getNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getNetworkResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATEngine_setNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Network string `xml:"network,omitempty" json:"network,omitempty"`
}

type INATEngine_setNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setNetworkResponse"`
}

type INATEngine_getHostIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getHostIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATEngine_getHostIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getHostIPResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATEngine_setHostIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setHostIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	HostIP string `xml:"hostIP,omitempty" json:"hostIP,omitempty"`
}

type INATEngine_setHostIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setHostIPResponse"`
}

type INATEngine_getTFTPPrefix struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getTFTPPrefix"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATEngine_getTFTPPrefixResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getTFTPPrefixResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATEngine_setTFTPPrefix struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setTFTPPrefix"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TFTPPrefix string `xml:"TFTPPrefix,omitempty" json:"TFTPPrefix,omitempty"`
}

type INATEngine_setTFTPPrefixResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setTFTPPrefixResponse"`
}

type INATEngine_getTFTPBootFile struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getTFTPBootFile"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATEngine_getTFTPBootFileResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getTFTPBootFileResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATEngine_setTFTPBootFile struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setTFTPBootFile"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TFTPBootFile string `xml:"TFTPBootFile,omitempty" json:"TFTPBootFile,omitempty"`
}

type INATEngine_setTFTPBootFileResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setTFTPBootFileResponse"`
}

type INATEngine_getTFTPNextServer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getTFTPNextServer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATEngine_getTFTPNextServerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getTFTPNextServerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATEngine_setTFTPNextServer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setTFTPNextServer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TFTPNextServer string `xml:"TFTPNextServer,omitempty" json:"TFTPNextServer,omitempty"`
}

type INATEngine_setTFTPNextServerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setTFTPNextServerResponse"`
}

type INATEngine_getAliasMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getAliasMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATEngine_getAliasModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getAliasModeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATEngine_setAliasMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setAliasMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	AliasMode uint32 `xml:"aliasMode,omitempty" json:"aliasMode,omitempty"`
}

type INATEngine_setAliasModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setAliasModeResponse"`
}

type INATEngine_getDNSPassDomain struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getDNSPassDomain"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATEngine_getDNSPassDomainResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getDNSPassDomainResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATEngine_setDNSPassDomain struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setDNSPassDomain"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DNSPassDomain bool `xml:"DNSPassDomain,omitempty" json:"DNSPassDomain,omitempty"`
}

type INATEngine_setDNSPassDomainResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setDNSPassDomainResponse"`
}

type INATEngine_getDNSProxy struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getDNSProxy"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATEngine_getDNSProxyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getDNSProxyResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATEngine_setDNSProxy struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setDNSProxy"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DNSProxy bool `xml:"DNSProxy,omitempty" json:"DNSProxy,omitempty"`
}

type INATEngine_setDNSProxyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setDNSProxyResponse"`
}

type INATEngine_getDNSUseHostResolver struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getDNSUseHostResolver"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATEngine_getDNSUseHostResolverResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getDNSUseHostResolverResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATEngine_setDNSUseHostResolver struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setDNSUseHostResolver"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DNSUseHostResolver bool `xml:"DNSUseHostResolver,omitempty" json:"DNSUseHostResolver,omitempty"`
}

type INATEngine_setDNSUseHostResolverResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setDNSUseHostResolverResponse"`
}

type INATEngine_getRedirects struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getRedirects"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATEngine_getRedirectsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getRedirectsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATEngine_getLocalhostReachable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getLocalhostReachable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATEngine_getLocalhostReachableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getLocalhostReachableResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATEngine_setLocalhostReachable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setLocalhostReachable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	LocalhostReachable bool `xml:"localhostReachable,omitempty" json:"localhostReachable,omitempty"`
}

type INATEngine_setLocalhostReachableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setLocalhostReachableResponse"`
}

type INATEngine_setNetworkSettings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setNetworkSettings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Mtu uint32 `xml:"mtu,omitempty" json:"mtu,omitempty"`

	SockSnd uint32 `xml:"sockSnd,omitempty" json:"sockSnd,omitempty"`

	SockRcv uint32 `xml:"sockRcv,omitempty" json:"sockRcv,omitempty"`

	TcpWndSnd uint32 `xml:"TcpWndSnd,omitempty" json:"TcpWndSnd,omitempty"`

	TcpWndRcv uint32 `xml:"TcpWndRcv,omitempty" json:"TcpWndRcv,omitempty"`
}

type INATEngine_setNetworkSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_setNetworkSettingsResponse"`
}

type INATEngine_getNetworkSettings struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getNetworkSettings"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATEngine_getNetworkSettingsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_getNetworkSettingsResponse"`

	Mtu uint32 `xml:"mtu,omitempty" json:"mtu,omitempty"`

	SockSnd uint32 `xml:"sockSnd,omitempty" json:"sockSnd,omitempty"`

	SockRcv uint32 `xml:"sockRcv,omitempty" json:"sockRcv,omitempty"`

	TcpWndSnd uint32 `xml:"TcpWndSnd,omitempty" json:"TcpWndSnd,omitempty"`

	TcpWndRcv uint32 `xml:"TcpWndRcv,omitempty" json:"TcpWndRcv,omitempty"`
}

type INATEngine_addRedirect struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_addRedirect"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Proto *NATProtocol `xml:"proto,omitempty" json:"proto,omitempty"`

	HostIP string `xml:"hostIP,omitempty" json:"hostIP,omitempty"`

	HostPort uint16 `xml:"hostPort,omitempty" json:"hostPort,omitempty"`

	GuestIP string `xml:"guestIP,omitempty" json:"guestIP,omitempty"`

	GuestPort uint16 `xml:"guestPort,omitempty" json:"guestPort,omitempty"`
}

type INATEngine_addRedirectResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_addRedirectResponse"`
}

type INATEngine_removeRedirect struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_removeRedirect"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type INATEngine_removeRedirectResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATEngine_removeRedirectResponse"`
}

type IBandwidthGroup_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthGroup_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBandwidthGroup_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthGroup_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBandwidthGroup_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthGroup_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBandwidthGroup_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthGroup_getTypeResponse"`

	Returnval *BandwidthGroupType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBandwidthGroup_getReference struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthGroup_getReference"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBandwidthGroup_getReferenceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthGroup_getReferenceResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBandwidthGroup_getMaxBytesPerSec struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthGroup_getMaxBytesPerSec"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBandwidthGroup_getMaxBytesPerSecResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthGroup_getMaxBytesPerSecResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBandwidthGroup_setMaxBytesPerSec struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthGroup_setMaxBytesPerSec"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MaxBytesPerSec int64 `xml:"maxBytesPerSec,omitempty" json:"maxBytesPerSec,omitempty"`
}

type IBandwidthGroup_setMaxBytesPerSecResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthGroup_setMaxBytesPerSecResponse"`
}

type IBandwidthControl_getNumGroups struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthControl_getNumGroups"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBandwidthControl_getNumGroupsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthControl_getNumGroupsResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBandwidthControl_createBandwidthGroup struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthControl_createBandwidthGroup"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Type_ *BandwidthGroupType `xml:"type,omitempty" json:"type,omitempty"`

	MaxBytesPerSec int64 `xml:"maxBytesPerSec,omitempty" json:"maxBytesPerSec,omitempty"`
}

type IBandwidthControl_createBandwidthGroupResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthControl_createBandwidthGroupResponse"`
}

type IBandwidthControl_deleteBandwidthGroup struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthControl_deleteBandwidthGroup"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IBandwidthControl_deleteBandwidthGroupResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthControl_deleteBandwidthGroupResponse"`
}

type IBandwidthControl_getBandwidthGroup struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthControl_getBandwidthGroup"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IBandwidthControl_getBandwidthGroupResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthControl_getBandwidthGroupResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBandwidthControl_getAllBandwidthGroups struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthControl_getAllBandwidthGroups"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBandwidthControl_getAllBandwidthGroupsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthControl_getAllBandwidthGroupsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestDebugControl_getDebugProvider struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_getDebugProvider"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestDebugControl_getDebugProviderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_getDebugProviderResponse"`

	Returnval *GuestDebugProvider `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestDebugControl_setDebugProvider struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_setDebugProvider"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DebugProvider *GuestDebugProvider `xml:"debugProvider,omitempty" json:"debugProvider,omitempty"`
}

type IGuestDebugControl_setDebugProviderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_setDebugProviderResponse"`
}

type IGuestDebugControl_getDebugIoProvider struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_getDebugIoProvider"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestDebugControl_getDebugIoProviderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_getDebugIoProviderResponse"`

	Returnval *GuestDebugIoProvider `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestDebugControl_setDebugIoProvider struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_setDebugIoProvider"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DebugIoProvider *GuestDebugIoProvider `xml:"debugIoProvider,omitempty" json:"debugIoProvider,omitempty"`
}

type IGuestDebugControl_setDebugIoProviderResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_setDebugIoProviderResponse"`
}

type IGuestDebugControl_getDebugAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_getDebugAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestDebugControl_getDebugAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_getDebugAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestDebugControl_setDebugAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_setDebugAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DebugAddress string `xml:"debugAddress,omitempty" json:"debugAddress,omitempty"`
}

type IGuestDebugControl_setDebugAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_setDebugAddressResponse"`
}

type IGuestDebugControl_getDebugPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_getDebugPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestDebugControl_getDebugPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_getDebugPortResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestDebugControl_setDebugPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_setDebugPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	DebugPort uint32 `xml:"debugPort,omitempty" json:"debugPort,omitempty"`
}

type IGuestDebugControl_setDebugPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControl_setDebugPortResponse"`
}

type IEventSource_createListener struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_createListener"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IEventSource_createListenerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_createListenerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IEventSource_createAggregator struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_createAggregator"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Subordinates []string `xml:"subordinates,omitempty" json:"subordinates,omitempty"`
}

type IEventSource_createAggregatorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_createAggregatorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IEventSource_registerListener struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_registerListener"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Listener string `xml:"listener,omitempty" json:"listener,omitempty"`

	Interesting []*VBoxEventType `xml:"interesting,omitempty" json:"interesting,omitempty"`

	Active bool `xml:"active,omitempty" json:"active,omitempty"`
}

type IEventSource_registerListenerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_registerListenerResponse"`
}

type IEventSource_unregisterListener struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_unregisterListener"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Listener string `xml:"listener,omitempty" json:"listener,omitempty"`
}

type IEventSource_unregisterListenerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_unregisterListenerResponse"`
}

type IEventSource_fireEvent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_fireEvent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Event string `xml:"event,omitempty" json:"event,omitempty"`

	Timeout int32 `xml:"timeout,omitempty" json:"timeout,omitempty"`
}

type IEventSource_fireEventResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_fireEventResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IEventSource_getEvent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_getEvent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Listener string `xml:"listener,omitempty" json:"listener,omitempty"`

	Timeout int32 `xml:"timeout,omitempty" json:"timeout,omitempty"`
}

type IEventSource_getEventResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_getEventResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IEventSource_eventProcessed struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_eventProcessed"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Listener string `xml:"listener,omitempty" json:"listener,omitempty"`

	Event string `xml:"event,omitempty" json:"event,omitempty"`
}

type IEventSource_eventProcessedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSource_eventProcessedResponse"`
}

type IEventListener_handleEvent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventListener_handleEvent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Event string `xml:"event,omitempty" json:"event,omitempty"`
}

type IEventListener_handleEventResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventListener_handleEventResponse"`
}

type IEvent_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEvent_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IEvent_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEvent_getTypeResponse"`

	Returnval *VBoxEventType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IEvent_getSource struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEvent_getSource"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IEvent_getSourceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEvent_getSourceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IEvent_getWaitable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEvent_getWaitable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IEvent_getWaitableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEvent_getWaitableResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IEvent_setProcessed struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEvent_setProcessed"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IEvent_setProcessedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEvent_setProcessedResponse"`
}

type IEvent_waitProcessed struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEvent_waitProcessed"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Timeout int32 `xml:"timeout,omitempty" json:"timeout,omitempty"`
}

type IEvent_waitProcessedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEvent_waitProcessedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IReusableEvent_getGeneration struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IReusableEvent_getGeneration"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IReusableEvent_getGenerationResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IReusableEvent_getGenerationResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IReusableEvent_reuse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IReusableEvent_reuse"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IReusableEvent_reuseResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IReusableEvent_reuseResponse"`
}

type IMachineEvent_getMachineId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineEvent_getMachineId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineEvent_getMachineIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineEvent_getMachineIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineStateChangedEvent_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineStateChangedEvent_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineStateChangedEvent_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineStateChangedEvent_getStateResponse"`

	Returnval *MachineState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineDataChangedEvent_getTemporary struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDataChangedEvent_getTemporary"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineDataChangedEvent_getTemporaryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineDataChangedEvent_getTemporaryResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumRegisteredEvent_getMediumId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumRegisteredEvent_getMediumId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumRegisteredEvent_getMediumIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumRegisteredEvent_getMediumIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumRegisteredEvent_getMediumType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumRegisteredEvent_getMediumType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumRegisteredEvent_getMediumTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumRegisteredEvent_getMediumTypeResponse"`

	Returnval *DeviceType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumRegisteredEvent_getRegistered struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumRegisteredEvent_getRegistered"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumRegisteredEvent_getRegisteredResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumRegisteredEvent_getRegisteredResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumConfigChangedEvent_getMedium struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumConfigChangedEvent_getMedium"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumConfigChangedEvent_getMediumResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumConfigChangedEvent_getMediumResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineRegisteredEvent_getRegistered struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineRegisteredEvent_getRegistered"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineRegisteredEvent_getRegisteredResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineRegisteredEvent_getRegisteredResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISessionStateChangedEvent_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISessionStateChangedEvent_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISessionStateChangedEvent_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISessionStateChangedEvent_getStateResponse"`

	Returnval *SessionState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestPropertyChangedEvent_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestPropertyChangedEvent_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestPropertyChangedEvent_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestPropertyChangedEvent_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestPropertyChangedEvent_getValue struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestPropertyChangedEvent_getValue"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestPropertyChangedEvent_getValueResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestPropertyChangedEvent_getValueResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestPropertyChangedEvent_getFlags struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestPropertyChangedEvent_getFlags"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestPropertyChangedEvent_getFlagsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestPropertyChangedEvent_getFlagsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestPropertyChangedEvent_getFWasDeleted struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestPropertyChangedEvent_getFWasDeleted"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestPropertyChangedEvent_getFWasDeletedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestPropertyChangedEvent_getFWasDeletedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshotEvent_getSnapshotId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshotEvent_getSnapshotId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshotEvent_getSnapshotIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshotEvent_getSnapshotIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShapeChangedEvent_getVisible struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getVisible"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShapeChangedEvent_getVisibleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getVisibleResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShapeChangedEvent_getAlpha struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getAlpha"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShapeChangedEvent_getAlphaResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getAlphaResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShapeChangedEvent_getXhot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getXhot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShapeChangedEvent_getXhotResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getXhotResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShapeChangedEvent_getYhot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getYhot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShapeChangedEvent_getYhotResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getYhotResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShapeChangedEvent_getWidth struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getWidth"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShapeChangedEvent_getWidthResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getWidthResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShapeChangedEvent_getHeight struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getHeight"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShapeChangedEvent_getHeightResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getHeightResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMousePointerShapeChangedEvent_getShape struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getShape"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMousePointerShapeChangedEvent_getShapeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMousePointerShapeChangedEvent_getShapeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouseCapabilityChangedEvent_getSupportsAbsolute struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouseCapabilityChangedEvent_getSupportsAbsolute"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouseCapabilityChangedEvent_getSupportsRelative struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouseCapabilityChangedEvent_getSupportsRelative"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMouseCapabilityChangedEvent_getSupportsRelativeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouseCapabilityChangedEvent_getSupportsRelativeResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouseCapabilityChangedEvent_getSupportsTouchScreen struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouseCapabilityChangedEvent_getSupportsTouchScreen"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMouseCapabilityChangedEvent_getSupportsTouchScreenResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouseCapabilityChangedEvent_getSupportsTouchScreenResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouseCapabilityChangedEvent_getSupportsTouchPad struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouseCapabilityChangedEvent_getSupportsTouchPad"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMouseCapabilityChangedEvent_getSupportsTouchPadResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouseCapabilityChangedEvent_getSupportsTouchPadResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMouseCapabilityChangedEvent_getNeedsHostCursor struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouseCapabilityChangedEvent_getNeedsHostCursor"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMouseCapabilityChangedEvent_getNeedsHostCursorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMouseCapabilityChangedEvent_getNeedsHostCursorResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IKeyboardLedsChangedEvent_getNumLock struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboardLedsChangedEvent_getNumLock"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IKeyboardLedsChangedEvent_getNumLockResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboardLedsChangedEvent_getNumLockResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IKeyboardLedsChangedEvent_getCapsLock struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboardLedsChangedEvent_getCapsLock"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IKeyboardLedsChangedEvent_getCapsLockResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboardLedsChangedEvent_getCapsLockResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IKeyboardLedsChangedEvent_getScrollLock struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboardLedsChangedEvent_getScrollLock"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IKeyboardLedsChangedEvent_getScrollLockResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IKeyboardLedsChangedEvent_getScrollLockResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStateChangedEvent_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStateChangedEvent_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStateChangedEvent_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStateChangedEvent_getStateResponse"`

	Returnval *MachineState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INetworkAdapterChangedEvent_getNetworkAdapter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapterChangedEvent_getNetworkAdapter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INetworkAdapterChangedEvent_getNetworkAdapterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INetworkAdapterChangedEvent_getNetworkAdapterResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IAudioAdapterChangedEvent_getAudioAdapter struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapterChangedEvent_getAudioAdapter"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IAudioAdapterChangedEvent_getAudioAdapterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IAudioAdapterChangedEvent_getAudioAdapterResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISerialPortChangedEvent_getSerialPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPortChangedEvent_getSerialPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISerialPortChangedEvent_getSerialPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISerialPortChangedEvent_getSerialPortResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IParallelPortChangedEvent_getParallelPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPortChangedEvent_getParallelPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IParallelPortChangedEvent_getParallelPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IParallelPortChangedEvent_getParallelPortResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageControllerChangedEvent_getMachinId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageControllerChangedEvent_getMachinId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageControllerChangedEvent_getMachinIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageControllerChangedEvent_getMachinIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageControllerChangedEvent_getControllerName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageControllerChangedEvent_getControllerName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageControllerChangedEvent_getControllerNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageControllerChangedEvent_getControllerNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMediumChangedEvent_getMediumAttachment struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumChangedEvent_getMediumAttachment"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMediumChangedEvent_getMediumAttachmentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMediumChangedEvent_getMediumAttachmentResponse"`

	Returnval *IMediumAttachment `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IClipboardModeChangedEvent_getClipboardMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IClipboardModeChangedEvent_getClipboardMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IClipboardModeChangedEvent_getClipboardModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IClipboardModeChangedEvent_getClipboardModeResponse"`

	Returnval *ClipboardMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IClipboardFileTransferModeChangedEvent_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IClipboardFileTransferModeChangedEvent_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IClipboardFileTransferModeChangedEvent_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IClipboardFileTransferModeChangedEvent_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IDnDModeChangedEvent_getDndMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDModeChangedEvent_getDndMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IDnDModeChangedEvent_getDndModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IDnDModeChangedEvent_getDndModeResponse"`

	Returnval *DnDMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICPUChangedEvent_getCPU struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICPUChangedEvent_getCPU"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICPUChangedEvent_getCPUResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICPUChangedEvent_getCPUResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICPUChangedEvent_getAdd struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICPUChangedEvent_getAdd"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICPUChangedEvent_getAddResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICPUChangedEvent_getAddResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICPUExecutionCapChangedEvent_getExecutionCap struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICPUExecutionCapChangedEvent_getExecutionCap"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICPUExecutionCapChangedEvent_getExecutionCapResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICPUExecutionCapChangedEvent_getExecutionCapResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestKeyboardEvent_getScancodes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestKeyboardEvent_getScancodes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestKeyboardEvent_getScancodesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestKeyboardEvent_getScancodesResponse"`

	Returnval []int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMouseEvent_getMode struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMouseEvent_getMode"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMouseEvent_getModeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMouseEvent_getModeResponse"`

	Returnval *GuestMouseEventMode `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMouseEvent_getX struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMouseEvent_getX"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMouseEvent_getXResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMouseEvent_getXResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMouseEvent_getY struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMouseEvent_getY"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMouseEvent_getYResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMouseEvent_getYResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMouseEvent_getZ struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMouseEvent_getZ"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMouseEvent_getZResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMouseEvent_getZResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMouseEvent_getW struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMouseEvent_getW"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMouseEvent_getWResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMouseEvent_getWResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMouseEvent_getButtons struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMouseEvent_getButtons"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMouseEvent_getButtonsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMouseEvent_getButtonsResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMultiTouchEvent_getContactCount struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getContactCount"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMultiTouchEvent_getContactCountResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getContactCountResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMultiTouchEvent_getXPositions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getXPositions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMultiTouchEvent_getXPositionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getXPositionsResponse"`

	Returnval []int16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMultiTouchEvent_getYPositions struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getYPositions"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMultiTouchEvent_getYPositionsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getYPositionsResponse"`

	Returnval []int16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMultiTouchEvent_getContactIds struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getContactIds"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMultiTouchEvent_getContactIdsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getContactIdsResponse"`

	Returnval []uint16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMultiTouchEvent_getContactFlags struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getContactFlags"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMultiTouchEvent_getContactFlagsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getContactFlagsResponse"`

	Returnval []uint16 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMultiTouchEvent_getIsTouchScreen struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getIsTouchScreen"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMultiTouchEvent_getIsTouchScreenResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getIsTouchScreenResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMultiTouchEvent_getScanTime struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getScanTime"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMultiTouchEvent_getScanTimeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMultiTouchEvent_getScanTimeResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSessionEvent_getSession struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSessionEvent_getSession"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSessionEvent_getSessionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSessionEvent_getSessionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSessionStateChangedEvent_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSessionStateChangedEvent_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSessionStateChangedEvent_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSessionStateChangedEvent_getIdResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSessionStateChangedEvent_getStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSessionStateChangedEvent_getStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSessionStateChangedEvent_getStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSessionStateChangedEvent_getStatusResponse"`

	Returnval *GuestSessionStatus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSessionStateChangedEvent_getError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSessionStateChangedEvent_getError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSessionStateChangedEvent_getErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSessionStateChangedEvent_getErrorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestSessionRegisteredEvent_getRegistered struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSessionRegisteredEvent_getRegistered"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestSessionRegisteredEvent_getRegisteredResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestSessionRegisteredEvent_getRegisteredResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestProcessEvent_getProcess struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessEvent_getProcess"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestProcessEvent_getProcessResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessEvent_getProcessResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestProcessEvent_getPid struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessEvent_getPid"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestProcessEvent_getPidResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessEvent_getPidResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestProcessRegisteredEvent_getRegistered struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessRegisteredEvent_getRegistered"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestProcessRegisteredEvent_getRegisteredResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessRegisteredEvent_getRegisteredResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestProcessStateChangedEvent_getStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessStateChangedEvent_getStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestProcessStateChangedEvent_getStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessStateChangedEvent_getStatusResponse"`

	Returnval *ProcessStatus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestProcessStateChangedEvent_getError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessStateChangedEvent_getError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestProcessStateChangedEvent_getErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessStateChangedEvent_getErrorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestProcessIOEvent_getHandle struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessIOEvent_getHandle"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestProcessIOEvent_getHandleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessIOEvent_getHandleResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestProcessIOEvent_getProcessed struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessIOEvent_getProcessed"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestProcessIOEvent_getProcessedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessIOEvent_getProcessedResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestProcessInputNotifyEvent_getStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessInputNotifyEvent_getStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestProcessInputNotifyEvent_getStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessInputNotifyEvent_getStatusResponse"`

	Returnval *ProcessInputStatus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestProcessOutputEvent_getData struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessOutputEvent_getData"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestProcessOutputEvent_getDataResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestProcessOutputEvent_getDataResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFileEvent_getFile struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileEvent_getFile"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFileEvent_getFileResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileEvent_getFileResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFileRegisteredEvent_getRegistered struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileRegisteredEvent_getRegistered"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFileRegisteredEvent_getRegisteredResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileRegisteredEvent_getRegisteredResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFileStateChangedEvent_getStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileStateChangedEvent_getStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFileStateChangedEvent_getStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileStateChangedEvent_getStatusResponse"`

	Returnval *FileStatus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFileStateChangedEvent_getError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileStateChangedEvent_getError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFileStateChangedEvent_getErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileStateChangedEvent_getErrorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFileIOEvent_getOffset struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileIOEvent_getOffset"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFileIOEvent_getOffsetResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileIOEvent_getOffsetResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFileIOEvent_getProcessed struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileIOEvent_getProcessed"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFileIOEvent_getProcessedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileIOEvent_getProcessedResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFileSizeChangedEvent_getNewSize struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileSizeChangedEvent_getNewSize"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFileSizeChangedEvent_getNewSizeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileSizeChangedEvent_getNewSizeResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFileReadEvent_getData struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileReadEvent_getData"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFileReadEvent_getDataResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileReadEvent_getDataResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceStateChangedEvent_getDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceStateChangedEvent_getDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceStateChangedEvent_getDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceStateChangedEvent_getDeviceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceStateChangedEvent_getAttached struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceStateChangedEvent_getAttached"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceStateChangedEvent_getAttachedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceStateChangedEvent_getAttachedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUSBDeviceStateChangedEvent_getError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceStateChangedEvent_getError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUSBDeviceStateChangedEvent_getErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUSBDeviceStateChangedEvent_getErrorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ISharedFolderChangedEvent_getScope struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolderChangedEvent_getScope"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ISharedFolderChangedEvent_getScopeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ISharedFolderChangedEvent_getScopeResponse"`

	Returnval *Scope `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRuntimeErrorEvent_getFatal struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRuntimeErrorEvent_getFatal"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRuntimeErrorEvent_getFatalResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRuntimeErrorEvent_getFatalResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRuntimeErrorEvent_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRuntimeErrorEvent_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRuntimeErrorEvent_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRuntimeErrorEvent_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRuntimeErrorEvent_getMessage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRuntimeErrorEvent_getMessage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRuntimeErrorEvent_getMessageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRuntimeErrorEvent_getMessageResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IEventSourceChangedEvent_getListener struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSourceChangedEvent_getListener"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IEventSourceChangedEvent_getListenerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSourceChangedEvent_getListenerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IEventSourceChangedEvent_getAdd struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSourceChangedEvent_getAdd"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IEventSourceChangedEvent_getAddResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IEventSourceChangedEvent_getAddResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IExtraDataChangedEvent_getMachineId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IExtraDataChangedEvent_getMachineId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IExtraDataChangedEvent_getMachineIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IExtraDataChangedEvent_getMachineIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IExtraDataChangedEvent_getKey struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IExtraDataChangedEvent_getKey"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IExtraDataChangedEvent_getKeyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IExtraDataChangedEvent_getKeyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IExtraDataChangedEvent_getValue struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IExtraDataChangedEvent_getValue"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IExtraDataChangedEvent_getValueResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IExtraDataChangedEvent_getValueResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVetoEvent_addVeto struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVetoEvent_addVeto"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Reason string `xml:"reason,omitempty" json:"reason,omitempty"`
}

type IVetoEvent_addVetoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVetoEvent_addVetoResponse"`
}

type IVetoEvent_isVetoed struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVetoEvent_isVetoed"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVetoEvent_isVetoedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVetoEvent_isVetoedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVetoEvent_getVetos struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVetoEvent_getVetos"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVetoEvent_getVetosResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVetoEvent_getVetosResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVetoEvent_addApproval struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVetoEvent_addApproval"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Reason string `xml:"reason,omitempty" json:"reason,omitempty"`
}

type IVetoEvent_addApprovalResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVetoEvent_addApprovalResponse"`
}

type IVetoEvent_isApproved struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVetoEvent_isApproved"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVetoEvent_isApprovedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVetoEvent_isApprovedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVetoEvent_getApprovals struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVetoEvent_getApprovals"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVetoEvent_getApprovalsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVetoEvent_getApprovalsResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IExtraDataCanChangeEvent_getMachineId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IExtraDataCanChangeEvent_getMachineId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IExtraDataCanChangeEvent_getMachineIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IExtraDataCanChangeEvent_getMachineIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IExtraDataCanChangeEvent_getKey struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IExtraDataCanChangeEvent_getKey"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IExtraDataCanChangeEvent_getKeyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IExtraDataCanChangeEvent_getKeyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IExtraDataCanChangeEvent_getValue struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IExtraDataCanChangeEvent_getValue"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IExtraDataCanChangeEvent_getValueResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IExtraDataCanChangeEvent_getValueResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IShowWindowEvent_getWinId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IShowWindowEvent_getWinId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IShowWindowEvent_getWinIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IShowWindowEvent_getWinIdResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IShowWindowEvent_setWinId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IShowWindowEvent_setWinId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	WinId int64 `xml:"winId,omitempty" json:"winId,omitempty"`
}

type IShowWindowEvent_setWinIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IShowWindowEvent_setWinIdResponse"`
}

type INATRedirectEvent_getSlot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getSlot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATRedirectEvent_getSlotResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getSlotResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATRedirectEvent_getRemove struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getRemove"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATRedirectEvent_getRemoveResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getRemoveResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATRedirectEvent_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATRedirectEvent_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATRedirectEvent_getProto struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getProto"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATRedirectEvent_getProtoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getProtoResponse"`

	Returnval *NATProtocol `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATRedirectEvent_getHostIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getHostIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATRedirectEvent_getHostIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getHostIPResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATRedirectEvent_getHostPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getHostPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATRedirectEvent_getHostPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getHostPortResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATRedirectEvent_getGuestIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getGuestIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATRedirectEvent_getGuestIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getGuestIPResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATRedirectEvent_getGuestPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getGuestPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATRedirectEvent_getGuestPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATRedirectEvent_getGuestPortResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDeviceChangedEvent_getDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDeviceChangedEvent_getDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostAudioDeviceChangedEvent_getDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDeviceChangedEvent_getDeviceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDeviceChangedEvent_getNew struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDeviceChangedEvent_getNew"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostAudioDeviceChangedEvent_getNewResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDeviceChangedEvent_getNewResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDeviceChangedEvent_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDeviceChangedEvent_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostAudioDeviceChangedEvent_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDeviceChangedEvent_getStateResponse"`

	Returnval *AudioDeviceState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostAudioDeviceChangedEvent_getError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDeviceChangedEvent_getError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostAudioDeviceChangedEvent_getErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostAudioDeviceChangedEvent_getErrorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostPCIDevicePlugEvent_getPlugged struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostPCIDevicePlugEvent_getPlugged"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostPCIDevicePlugEvent_getPluggedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostPCIDevicePlugEvent_getPluggedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostPCIDevicePlugEvent_getSuccess struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostPCIDevicePlugEvent_getSuccess"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostPCIDevicePlugEvent_getSuccessResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostPCIDevicePlugEvent_getSuccessResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostPCIDevicePlugEvent_getAttachment struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostPCIDevicePlugEvent_getAttachment"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostPCIDevicePlugEvent_getAttachmentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostPCIDevicePlugEvent_getAttachmentResponse"`

	Returnval *IPCIDeviceAttachment `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostPCIDevicePlugEvent_getMessage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostPCIDevicePlugEvent_getMessage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostPCIDevicePlugEvent_getMessageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostPCIDevicePlugEvent_getMessageResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVBoxSVCAvailabilityChangedEvent_getAvailable struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVBoxSVCAvailabilityChangedEvent_getAvailable"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVBoxSVCAvailabilityChangedEvent_getAvailableResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVBoxSVCAvailabilityChangedEvent_getAvailableResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBandwidthGroupChangedEvent_getBandwidthGroup struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthGroupChangedEvent_getBandwidthGroup"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBandwidthGroupChangedEvent_getBandwidthGroupResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBandwidthGroupChangedEvent_getBandwidthGroupResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMonitorChangedEvent_getChangeType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorChangedEvent_getChangeType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMonitorChangedEvent_getChangeTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorChangedEvent_getChangeTypeResponse"`

	Returnval *GuestMonitorChangedEventType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMonitorChangedEvent_getScreenId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorChangedEvent_getScreenId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMonitorChangedEvent_getScreenIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorChangedEvent_getScreenIdResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMonitorChangedEvent_getOriginX struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorChangedEvent_getOriginX"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMonitorChangedEvent_getOriginXResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorChangedEvent_getOriginXResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMonitorChangedEvent_getOriginY struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorChangedEvent_getOriginY"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMonitorChangedEvent_getOriginYResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorChangedEvent_getOriginYResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMonitorChangedEvent_getWidth struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorChangedEvent_getWidth"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMonitorChangedEvent_getWidthResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorChangedEvent_getWidthResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMonitorChangedEvent_getHeight struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorChangedEvent_getHeight"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMonitorChangedEvent_getHeightResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorChangedEvent_getHeightResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestUserStateChangedEvent_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestUserStateChangedEvent_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestUserStateChangedEvent_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestUserStateChangedEvent_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestUserStateChangedEvent_getDomain struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestUserStateChangedEvent_getDomain"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestUserStateChangedEvent_getDomainResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestUserStateChangedEvent_getDomainResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestUserStateChangedEvent_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestUserStateChangedEvent_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestUserStateChangedEvent_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestUserStateChangedEvent_getStateResponse"`

	Returnval *GuestUserState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestUserStateChangedEvent_getStateDetails struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestUserStateChangedEvent_getStateDetails"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestUserStateChangedEvent_getStateDetailsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestUserStateChangedEvent_getStateDetailsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageDeviceChangedEvent_getStorageDevice struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageDeviceChangedEvent_getStorageDevice"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageDeviceChangedEvent_getStorageDeviceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageDeviceChangedEvent_getStorageDeviceResponse"`

	Returnval *IMediumAttachment `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageDeviceChangedEvent_getRemoved struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageDeviceChangedEvent_getRemoved"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageDeviceChangedEvent_getRemovedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageDeviceChangedEvent_getRemovedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStorageDeviceChangedEvent_getSilent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageDeviceChangedEvent_getSilent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStorageDeviceChangedEvent_getSilentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStorageDeviceChangedEvent_getSilentResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkChangedEvent_getNetworkName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkChangedEvent_getNetworkName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkChangedEvent_getNetworkNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkChangedEvent_getNetworkNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkStartStopEvent_getStartEvent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkStartStopEvent_getStartEvent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkStartStopEvent_getStartEventResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkStartStopEvent_getStartEventResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkCreationDeletionEvent_getCreationEvent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkCreationDeletionEvent_getCreationEvent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkCreationDeletionEvent_getCreationEventResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkCreationDeletionEvent_getCreationEventResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkSettingEvent_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkSettingEvent_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkSettingEvent_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkSettingEvent_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkSettingEvent_getNetwork struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkSettingEvent_getNetwork"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkSettingEvent_getNetworkResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkSettingEvent_getNetworkResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkSettingEvent_getGateway struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkSettingEvent_getGateway"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkSettingEvent_getGatewayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkSettingEvent_getGatewayResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkSettingEvent_getNeedDhcpServer struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkSettingEvent_getNeedDhcpServer"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkSettingEvent_getNeedDhcpServerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkSettingEvent_getNeedDhcpServerResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkPortForwardEvent_getCreate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getCreate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkPortForwardEvent_getCreateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getCreateResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkPortForwardEvent_getIpv6 struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getIpv6"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkPortForwardEvent_getIpv6Response struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getIpv6Response"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkPortForwardEvent_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkPortForwardEvent_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkPortForwardEvent_getProto struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getProto"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkPortForwardEvent_getProtoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getProtoResponse"`

	Returnval *NATProtocol `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkPortForwardEvent_getHostIp struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getHostIp"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkPortForwardEvent_getHostIpResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getHostIpResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkPortForwardEvent_getHostPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getHostPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkPortForwardEvent_getHostPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getHostPortResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkPortForwardEvent_getGuestIp struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getGuestIp"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkPortForwardEvent_getGuestIpResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getGuestIpResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type INATNetworkPortForwardEvent_getGuestPort struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getGuestPort"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type INATNetworkPortForwardEvent_getGuestPortResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ INATNetworkPortForwardEvent_getGuestPortResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgressEvent_getProgressId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgressEvent_getProgressId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgressEvent_getProgressIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgressEvent_getProgressIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgressCreatedEvent_getCreate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgressCreatedEvent_getCreate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgressCreatedEvent_getCreateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgressCreatedEvent_getCreateResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgressPercentageChangedEvent_getPercent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgressPercentageChangedEvent_getPercent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgressPercentageChangedEvent_getPercentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgressPercentageChangedEvent_getPercentResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICursorPositionChangedEvent_getHasData struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICursorPositionChangedEvent_getHasData"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICursorPositionChangedEvent_getHasDataResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICursorPositionChangedEvent_getHasDataResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICursorPositionChangedEvent_getX struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICursorPositionChangedEvent_getX"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICursorPositionChangedEvent_getXResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICursorPositionChangedEvent_getXResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICursorPositionChangedEvent_getY struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICursorPositionChangedEvent_getY"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICursorPositionChangedEvent_getYResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICursorPositionChangedEvent_getYResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestAdditionsStatusChangedEvent_getFacility struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestAdditionsStatusChangedEvent_getFacility"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestAdditionsStatusChangedEvent_getFacilityResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestAdditionsStatusChangedEvent_getFacilityResponse"`

	Returnval *AdditionsFacilityType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestAdditionsStatusChangedEvent_getStatus struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestAdditionsStatusChangedEvent_getStatus"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestAdditionsStatusChangedEvent_getStatusResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestAdditionsStatusChangedEvent_getStatusResponse"`

	Returnval *AdditionsFacilityStatus `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestAdditionsStatusChangedEvent_getRunLevel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestAdditionsStatusChangedEvent_getRunLevel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestAdditionsStatusChangedEvent_getRunLevelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestAdditionsStatusChangedEvent_getRunLevelResponse"`

	Returnval *AdditionsRunLevelType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestAdditionsStatusChangedEvent_getTimestamp struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestAdditionsStatusChangedEvent_getTimestamp"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestAdditionsStatusChangedEvent_getTimestampResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestAdditionsStatusChangedEvent_getTimestampResponse"`

	Returnval int64 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestMonitorInfoChangedEvent_getOutput struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorInfoChangedEvent_getOutput"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestMonitorInfoChangedEvent_getOutputResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestMonitorInfoChangedEvent_getOutputResponse"`

	Returnval uint32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgentEvent_getAgent struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentEvent_getAgent"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgentEvent_getAgentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentEvent_getAgentResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgentSettingsChangedEvent_getAttributeHint struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentSettingsChangedEvent_getAttributeHint"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgentSettingsChangedEvent_getAttributeHintResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentSettingsChangedEvent_getAttributeHintResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgentErrorEvent_getMsg struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentErrorEvent_getMsg"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgentErrorEvent_getMsgResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentErrorEvent_getMsgResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgentErrorEvent_getRcError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentErrorEvent_getRcError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgentErrorEvent_getRcErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentErrorEvent_getRcErrorResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgentAvailableEvent_getVersion struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentAvailableEvent_getVersion"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgentAvailableEvent_getVersionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentAvailableEvent_getVersionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgentAvailableEvent_getChannel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentAvailableEvent_getChannel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgentAvailableEvent_getChannelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentAvailableEvent_getChannelResponse"`

	Returnval *UpdateChannel `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgentAvailableEvent_getSeverity struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentAvailableEvent_getSeverity"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgentAvailableEvent_getSeverityResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentAvailableEvent_getSeverityResponse"`

	Returnval *UpdateSeverity `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgentAvailableEvent_getDownloadURL struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentAvailableEvent_getDownloadURL"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgentAvailableEvent_getDownloadURLResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentAvailableEvent_getDownloadURLResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgentAvailableEvent_getWebURL struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentAvailableEvent_getWebURL"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgentAvailableEvent_getWebURLResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentAvailableEvent_getWebURLResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgentAvailableEvent_getReleaseNotes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentAvailableEvent_getReleaseNotes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgentAvailableEvent_getReleaseNotesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentAvailableEvent_getReleaseNotesResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IUpdateAgentStateChangedEvent_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentStateChangedEvent_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IUpdateAgentStateChangedEvent_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IUpdateAgentStateChangedEvent_getStateResponse"`

	Returnval *UpdateState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IGuestDebugControlChangedEvent_getGuestDebugControl struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControlChangedEvent_getGuestDebugControl"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IGuestDebugControlChangedEvent_getGuestDebugControlResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IGuestDebugControlChangedEvent_getGuestDebugControlResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IMachineGroupsChangedEvent_getDummy struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineGroupsChangedEvent_getDummy"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IMachineGroupsChangedEvent_getDummyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IMachineGroupsChangedEvent_getDummyResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStringArray_getValues struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStringArray_getValues"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStringArray_getValuesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStringArray_getValuesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFormValue_getType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getType"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFormValue_getTypeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getTypeResponse"`

	Returnval *FormValueType `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFormValue_getGeneration struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getGeneration"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFormValue_getGenerationResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getGenerationResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFormValue_getEnabled struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getEnabled"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFormValue_getEnabledResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getEnabledResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFormValue_getVisible struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getVisible"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFormValue_getVisibleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getVisibleResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFormValue_getLabel struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getLabel"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFormValue_getLabelResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getLabelResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFormValue_getDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFormValue_getDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getDescriptionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IFormValue_getHelp struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getHelp"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IFormValue_getHelpResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IFormValue_getHelpResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBooleanFormValue_getSelected struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBooleanFormValue_getSelected"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IBooleanFormValue_getSelectedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBooleanFormValue_getSelectedResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IBooleanFormValue_setSelected struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBooleanFormValue_setSelected"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Selected bool `xml:"selected,omitempty" json:"selected,omitempty"`
}

type IBooleanFormValue_setSelectedResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IBooleanFormValue_setSelectedResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRangedIntegerFormValue_getSuffix struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRangedIntegerFormValue_getSuffix"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRangedIntegerFormValue_getSuffixResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRangedIntegerFormValue_getSuffixResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRangedIntegerFormValue_getMinimum struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRangedIntegerFormValue_getMinimum"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRangedIntegerFormValue_getMinimumResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRangedIntegerFormValue_getMinimumResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRangedIntegerFormValue_getMaximum struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRangedIntegerFormValue_getMaximum"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRangedIntegerFormValue_getMaximumResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRangedIntegerFormValue_getMaximumResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRangedIntegerFormValue_getInteger struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRangedIntegerFormValue_getInteger"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IRangedIntegerFormValue_getIntegerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRangedIntegerFormValue_getIntegerResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IRangedIntegerFormValue_setInteger struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRangedIntegerFormValue_setInteger"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Value int32 `xml:"value,omitempty" json:"value,omitempty"`
}

type IRangedIntegerFormValue_setIntegerResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IRangedIntegerFormValue_setIntegerResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStringFormValue_getMultiline struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStringFormValue_getMultiline"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStringFormValue_getMultilineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStringFormValue_getMultilineResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStringFormValue_getClipboardString struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStringFormValue_getClipboardString"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStringFormValue_getClipboardStringResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStringFormValue_getClipboardStringResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStringFormValue_getString struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStringFormValue_getString"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IStringFormValue_getStringResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStringFormValue_getStringResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IStringFormValue_setString struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStringFormValue_setString"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Text string `xml:"text,omitempty" json:"text,omitempty"`
}

type IStringFormValue_setStringResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IStringFormValue_setStringResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IChoiceFormValue_getValues struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IChoiceFormValue_getValues"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IChoiceFormValue_getValuesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IChoiceFormValue_getValuesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IChoiceFormValue_getSelectedIndex struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IChoiceFormValue_getSelectedIndex"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IChoiceFormValue_getSelectedIndexResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IChoiceFormValue_getSelectedIndexResponse"`

	Returnval int32 `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IChoiceFormValue_setSelectedIndex struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IChoiceFormValue_setSelectedIndex"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Index int32 `xml:"index,omitempty" json:"index,omitempty"`
}

type IChoiceFormValue_setSelectedIndexResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IChoiceFormValue_setSelectedIndexResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IForm_getValues struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IForm_getValues"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IForm_getValuesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IForm_getValuesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IForm_getFieldGroup struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IForm_getFieldGroup"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Field string `xml:"field,omitempty" json:"field,omitempty"`
}

type IForm_getFieldGroupResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IForm_getFieldGroupResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IForm_apply struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IForm_apply"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IForm_applyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IForm_applyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IVirtualSystemDescriptionForm_getVirtualSystemDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescriptionForm_getVirtualSystemDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type IVirtualSystemDescriptionForm_getVirtualSystemDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ IVirtualSystemDescriptionForm_getVirtualSystemDescriptionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudNetworkGatewayInfo_getPublicIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetworkGatewayInfo_getPublicIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudNetworkGatewayInfo_getPublicIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetworkGatewayInfo_getPublicIPResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudNetworkGatewayInfo_getSecondaryPublicIP struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetworkGatewayInfo_getSecondaryPublicIP"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudNetworkGatewayInfo_getSecondaryPublicIPResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetworkGatewayInfo_getSecondaryPublicIPResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudNetworkGatewayInfo_getMacAddress struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetworkGatewayInfo_getMacAddress"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudNetworkGatewayInfo_getMacAddressResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetworkGatewayInfo_getMacAddressResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudNetworkGatewayInfo_getInstanceId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetworkGatewayInfo_getInstanceId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudNetworkGatewayInfo_getInstanceIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetworkGatewayInfo_getInstanceIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudNetworkEnvironmentInfo_getTunnelNetworkId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetworkEnvironmentInfo_getTunnelNetworkId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudNetworkEnvironmentInfo_getTunnelNetworkIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudNetworkEnvironmentInfo_getTunnelNetworkIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getAccessible struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getAccessible"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getAccessibleResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getAccessibleResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getAccessError struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getAccessError"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getAccessErrorResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getAccessErrorResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getOSTypeId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getOSTypeId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getOSTypeIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getOSTypeIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getState struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getState"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getStateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getStateResponse"`

	Returnval *CloudMachineState `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getConsoleConnectionFingerprint struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getConsoleConnectionFingerprint"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getConsoleConnectionFingerprintResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getConsoleConnectionFingerprintResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getSerialConsoleCommand struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getSerialConsoleCommand"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getSerialConsoleCommandResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getSerialConsoleCommandResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getSerialConsoleCommandWindows struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getSerialConsoleCommandWindows"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getSerialConsoleCommandWindowsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getSerialConsoleCommandWindowsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getVNCConsoleCommand struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getVNCConsoleCommand"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getVNCConsoleCommandResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getVNCConsoleCommandResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getVNCConsoleCommandWindows struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getVNCConsoleCommandWindows"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getVNCConsoleCommandWindowsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getVNCConsoleCommandWindowsResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_refresh struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_refresh"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_refreshResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_refreshResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getDetailsForm struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getDetailsForm"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getDetailsFormResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getDetailsFormResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getSettingsForm struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getSettingsForm"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getSettingsFormResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getSettingsFormResponse"`

	Form string `xml:"form,omitempty" json:"form,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_powerUp struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_powerUp"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_powerUpResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_powerUpResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_reboot struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_reboot"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_rebootResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_rebootResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_shutdown struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_shutdown"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_shutdownResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_shutdownResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_powerDown struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_powerDown"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_powerDownResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_powerDownResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_terminate struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_terminate"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_terminateResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_terminateResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_unregister struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_unregister"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_unregisterResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_unregisterResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_remove struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_remove"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_removeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_removeResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_getConsoleHistory struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getConsoleHistory"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_getConsoleHistoryResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_getConsoleHistoryResponse"`

	Stream string `xml:"stream,omitempty" json:"stream,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_createConsoleConnection struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_createConsoleConnection"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	SshPublicKey string `xml:"sshPublicKey,omitempty" json:"sshPublicKey,omitempty"`
}

type ICloudMachine_createConsoleConnectionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_createConsoleConnectionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudMachine_deleteConsoleConnection struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_deleteConsoleConnection"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudMachine_deleteConsoleConnectionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudMachine_deleteConsoleConnectionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_getCloudMachineList struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getCloudMachineList"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudClient_getCloudMachineListResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getCloudMachineListResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_getCloudMachineStubList struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getCloudMachineStubList"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudClient_getCloudMachineStubListResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getCloudMachineStubListResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_getExportDescriptionForm struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getExportDescriptionForm"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`
}

type ICloudClient_getExportDescriptionFormResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getExportDescriptionFormResponse"`

	Form string `xml:"form,omitempty" json:"form,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_exportVM struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_exportVM"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	Progress string `xml:"progress,omitempty" json:"progress,omitempty"`
}

type ICloudClient_exportVMResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_exportVMResponse"`
}

type ICloudClient_getLaunchDescriptionForm struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getLaunchDescriptionForm"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`
}

type ICloudClient_getLaunchDescriptionFormResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getLaunchDescriptionFormResponse"`

	Form string `xml:"form,omitempty" json:"form,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_launchVM struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_launchVM"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`
}

type ICloudClient_launchVMResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_launchVMResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_getImportDescriptionForm struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getImportDescriptionForm"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`
}

type ICloudClient_getImportDescriptionFormResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getImportDescriptionFormResponse"`

	Form string `xml:"form,omitempty" json:"form,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_importInstance struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_importInstance"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	Progress string `xml:"progress,omitempty" json:"progress,omitempty"`
}

type ICloudClient_importInstanceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_importInstanceResponse"`
}

type ICloudClient_getCloudMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getCloudMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`
}

type ICloudClient_getCloudMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getCloudMachineResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_readCloudMachineList struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_readCloudMachineList"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudClient_readCloudMachineListResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_readCloudMachineListResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_readCloudMachineStubList struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_readCloudMachineStubList"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudClient_readCloudMachineStubListResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_readCloudMachineStubListResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_addCloudMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_addCloudMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	InstanceId string `xml:"instanceId,omitempty" json:"instanceId,omitempty"`
}

type ICloudClient_addCloudMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_addCloudMachineResponse"`

	Machine string `xml:"machine,omitempty" json:"machine,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_createCloudMachine struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_createCloudMachine"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`
}

type ICloudClient_createCloudMachineResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_createCloudMachineResponse"`

	Machine string `xml:"machine,omitempty" json:"machine,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_listInstances struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_listInstances"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	MachineState []*CloudMachineState `xml:"machineState,omitempty" json:"machineState,omitempty"`
}

type ICloudClient_listInstancesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_listInstancesResponse"`

	ReturnNames string `xml:"returnNames,omitempty" json:"returnNames,omitempty"`

	ReturnIds string `xml:"returnIds,omitempty" json:"returnIds,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_listSourceInstances struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_listSourceInstances"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudClient_listSourceInstancesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_listSourceInstancesResponse"`

	ReturnNames string `xml:"returnNames,omitempty" json:"returnNames,omitempty"`

	ReturnIds string `xml:"returnIds,omitempty" json:"returnIds,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_listImages struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_listImages"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ImageState []*CloudImageState `xml:"imageState,omitempty" json:"imageState,omitempty"`
}

type ICloudClient_listImagesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_listImagesResponse"`

	ReturnNames string `xml:"returnNames,omitempty" json:"returnNames,omitempty"`

	ReturnIds string `xml:"returnIds,omitempty" json:"returnIds,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_listBootVolumes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_listBootVolumes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudClient_listBootVolumesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_listBootVolumesResponse"`

	ReturnNames string `xml:"returnNames,omitempty" json:"returnNames,omitempty"`

	ReturnIds string `xml:"returnIds,omitempty" json:"returnIds,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_listSourceBootVolumes struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_listSourceBootVolumes"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudClient_listSourceBootVolumesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_listSourceBootVolumesResponse"`

	ReturnNames string `xml:"returnNames,omitempty" json:"returnNames,omitempty"`

	ReturnIds string `xml:"returnIds,omitempty" json:"returnIds,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_listVnicAttachments struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_listVnicAttachments"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Parameters []string `xml:"parameters,omitempty" json:"parameters,omitempty"`
}

type ICloudClient_listVnicAttachmentsResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_listVnicAttachmentsResponse"`

	ReturnVnicAttachmentIds string `xml:"returnVnicAttachmentIds,omitempty" json:"returnVnicAttachmentIds,omitempty"`

	ReturnVnicIds string `xml:"returnVnicIds,omitempty" json:"returnVnicIds,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_getInstanceInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getInstanceInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Uid string `xml:"uid,omitempty" json:"uid,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`
}

type ICloudClient_getInstanceInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getInstanceInfoResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_startInstance struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_startInstance"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Uid string `xml:"uid,omitempty" json:"uid,omitempty"`
}

type ICloudClient_startInstanceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_startInstanceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_pauseInstance struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_pauseInstance"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Uid string `xml:"uid,omitempty" json:"uid,omitempty"`
}

type ICloudClient_pauseInstanceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_pauseInstanceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_terminateInstance struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_terminateInstance"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Uid string `xml:"uid,omitempty" json:"uid,omitempty"`
}

type ICloudClient_terminateInstanceResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_terminateInstanceResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_createImage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_createImage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Parameters []string `xml:"parameters,omitempty" json:"parameters,omitempty"`
}

type ICloudClient_createImageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_createImageResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_exportImage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_exportImage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Image string `xml:"image,omitempty" json:"image,omitempty"`

	Parameters []string `xml:"parameters,omitempty" json:"parameters,omitempty"`
}

type ICloudClient_exportImageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_exportImageResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_importImage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_importImage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Uid string `xml:"uid,omitempty" json:"uid,omitempty"`

	Parameters []string `xml:"parameters,omitempty" json:"parameters,omitempty"`
}

type ICloudClient_importImageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_importImageResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_deleteImage struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_deleteImage"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Uid string `xml:"uid,omitempty" json:"uid,omitempty"`
}

type ICloudClient_deleteImageResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_deleteImageResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_getImageInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getImageInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Uid string `xml:"uid,omitempty" json:"uid,omitempty"`
}

type ICloudClient_getImageInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getImageInfoResponse"`

	InfoArray string `xml:"infoArray,omitempty" json:"infoArray,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_startCloudNetworkGateway struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_startCloudNetworkGateway"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Network string `xml:"network,omitempty" json:"network,omitempty"`

	SshPublicKey string `xml:"sshPublicKey,omitempty" json:"sshPublicKey,omitempty"`
}

type ICloudClient_startCloudNetworkGatewayResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_startCloudNetworkGatewayResponse"`

	GatewayInfo string `xml:"gatewayInfo,omitempty" json:"gatewayInfo,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_setupCloudNetworkEnvironment struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_setupCloudNetworkEnvironment"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	TunnelNetworkName string `xml:"tunnelNetworkName,omitempty" json:"tunnelNetworkName,omitempty"`

	TunnelNetworkRange string `xml:"tunnelNetworkRange,omitempty" json:"tunnelNetworkRange,omitempty"`

	GatewayOsName string `xml:"gatewayOsName,omitempty" json:"gatewayOsName,omitempty"`

	GatewayOsVersion string `xml:"gatewayOsVersion,omitempty" json:"gatewayOsVersion,omitempty"`

	GatewayShape string `xml:"gatewayShape,omitempty" json:"gatewayShape,omitempty"`
}

type ICloudClient_setupCloudNetworkEnvironmentResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_setupCloudNetworkEnvironmentResponse"`

	NetworkEnvironmentInfo string `xml:"networkEnvironmentInfo,omitempty" json:"networkEnvironmentInfo,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_getVnicInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getVnicInfo"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Uid string `xml:"uid,omitempty" json:"uid,omitempty"`
}

type ICloudClient_getVnicInfoResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getVnicInfoResponse"`

	InfoArray string `xml:"infoArray,omitempty" json:"infoArray,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudClient_getSubnetSelectionForm struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getSubnetSelectionForm"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`
}

type ICloudClient_getSubnetSelectionFormResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudClient_getSubnetSelectionFormResponse"`

	Form string `xml:"form,omitempty" json:"form,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProfile_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProfile_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProfile_setName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_setName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type ICloudProfile_setNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_setNameResponse"`
}

type ICloudProfile_getProviderId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_getProviderId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProfile_getProviderIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_getProviderIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProfile_getProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_getProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type ICloudProfile_getPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_getPropertyResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProfile_setProperty struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_setProperty"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Value string `xml:"value,omitempty" json:"value,omitempty"`
}

type ICloudProfile_setPropertyResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_setPropertyResponse"`
}

type ICloudProfile_getProperties struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_getProperties"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Names string `xml:"names,omitempty" json:"names,omitempty"`
}

type ICloudProfile_getPropertiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_getPropertiesResponse"`

	ReturnNames []string `xml:"returnNames,omitempty" json:"returnNames,omitempty"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProfile_setProperties struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_setProperties"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Names []string `xml:"names,omitempty" json:"names,omitempty"`

	Values []string `xml:"values,omitempty" json:"values,omitempty"`
}

type ICloudProfile_setPropertiesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_setPropertiesResponse"`
}

type ICloudProfile_remove struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_remove"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProfile_removeResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_removeResponse"`
}

type ICloudProfile_createCloudClient struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_createCloudClient"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProfile_createCloudClientResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfile_createCloudClientResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProvider_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProvider_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProvider_getShortName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getShortName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProvider_getShortNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getShortNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProvider_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProvider_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProvider_getProfiles struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getProfiles"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProvider_getProfilesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getProfilesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProvider_getProfileNames struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getProfileNames"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProvider_getProfileNamesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getProfileNamesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProvider_getSupportedPropertyNames struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getSupportedPropertyNames"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProvider_getSupportedPropertyNamesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getSupportedPropertyNamesResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProvider_getPropertyDescription struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getPropertyDescription"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type ICloudProvider_getPropertyDescriptionResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getPropertyDescriptionResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProvider_createProfile struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_createProfile"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ProfileName string `xml:"profileName,omitempty" json:"profileName,omitempty"`

	Names []string `xml:"names,omitempty" json:"names,omitempty"`

	Values []string `xml:"values,omitempty" json:"values,omitempty"`
}

type ICloudProvider_createProfileResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_createProfileResponse"`
}

type ICloudProvider_importProfiles struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_importProfiles"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProvider_importProfilesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_importProfilesResponse"`
}

type ICloudProvider_restoreProfiles struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_restoreProfiles"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProvider_restoreProfilesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_restoreProfilesResponse"`
}

type ICloudProvider_saveProfiles struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_saveProfiles"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProvider_saveProfilesResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_saveProfilesResponse"`
}

type ICloudProvider_getProfileByName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getProfileByName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ProfileName string `xml:"profileName,omitempty" json:"profileName,omitempty"`
}

type ICloudProvider_getProfileByNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_getProfileByNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProvider_prepareUninstall struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_prepareUninstall"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProvider_prepareUninstallResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProvider_prepareUninstallResponse"`
}

type ICloudProviderManager_getProviders struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderManager_getProviders"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProviderManager_getProvidersResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderManager_getProvidersResponse"`

	Returnval []string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProviderManager_getProviderById struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderManager_getProviderById"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ProviderId string `xml:"providerId,omitempty" json:"providerId,omitempty"`
}

type ICloudProviderManager_getProviderByIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderManager_getProviderByIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProviderManager_getProviderByShortName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderManager_getProviderByShortName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ProviderName string `xml:"providerName,omitempty" json:"providerName,omitempty"`
}

type ICloudProviderManager_getProviderByShortNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderManager_getProviderByShortNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProviderManager_getProviderByName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderManager_getProviderByName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`

	ProviderName string `xml:"providerName,omitempty" json:"providerName,omitempty"`
}

type ICloudProviderManager_getProviderByNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderManager_getProviderByNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProviderListChangedEvent_getRegistered struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderListChangedEvent_getRegistered"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProviderListChangedEvent_getRegisteredResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderListChangedEvent_getRegisteredResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProviderRegisteredEvent_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderRegisteredEvent_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProviderRegisteredEvent_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderRegisteredEvent_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProviderRegisteredEvent_getRegistered struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderRegisteredEvent_getRegistered"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProviderRegisteredEvent_getRegisteredResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderRegisteredEvent_getRegisteredResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProviderUninstallEvent_getId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderUninstallEvent_getId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProviderUninstallEvent_getIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProviderUninstallEvent_getIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProfileRegisteredEvent_getProviderId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfileRegisteredEvent_getProviderId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProfileRegisteredEvent_getProviderIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfileRegisteredEvent_getProviderIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProfileRegisteredEvent_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfileRegisteredEvent_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProfileRegisteredEvent_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfileRegisteredEvent_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProfileRegisteredEvent_getRegistered struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfileRegisteredEvent_getRegistered"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProfileRegisteredEvent_getRegisteredResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfileRegisteredEvent_getRegisteredResponse"`

	Returnval bool `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProfileChangedEvent_getProviderId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfileChangedEvent_getProviderId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProfileChangedEvent_getProviderIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfileChangedEvent_getProviderIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ICloudProfileChangedEvent_getName struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfileChangedEvent_getName"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ICloudProfileChangedEvent_getNameResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ICloudProfileChangedEvent_getNameResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type ILanguageChangedEvent_getLanguageId struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ILanguageChangedEvent_getLanguageId"`

	This string `xml:"_this,omitempty" json:"_this,omitempty"`
}

type ILanguageChangedEvent_getLanguageIdResponse struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ ILanguageChangedEvent_getLanguageIdResponse"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type InvalidObjectFault struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ InvalidObjectFault"`

	BadObjectID string `xml:"badObjectID,omitempty" json:"badObjectID,omitempty"`
}

type RuntimeFault struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ RuntimeFault"`

	ResultCode int32 `xml:"resultCode,omitempty" json:"resultCode,omitempty"`

	Returnval string `xml:"returnval,omitempty" json:"returnval,omitempty"`
}

type IPCIDeviceAttachment struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ returnval"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	IsPhysicalDevice bool `xml:"isPhysicalDevice,omitempty" json:"isPhysicalDevice,omitempty"`

	HostAddress int32 `xml:"hostAddress,omitempty" json:"hostAddress,omitempty"`

	GuestAddress int32 `xml:"guestAddress,omitempty" json:"guestAddress,omitempty"`
}

type IVRDEServerInfo struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ returnval"`

	Active bool `xml:"active,omitempty" json:"active,omitempty"`

	Port int32 `xml:"port,omitempty" json:"port,omitempty"`

	NumberOfClients uint32 `xml:"numberOfClients,omitempty" json:"numberOfClients,omitempty"`

	BeginTime int64 `xml:"beginTime,omitempty" json:"beginTime,omitempty"`

	EndTime int64 `xml:"endTime,omitempty" json:"endTime,omitempty"`

	BytesSent int64 `xml:"bytesSent,omitempty" json:"bytesSent,omitempty"`

	BytesSentTotal int64 `xml:"bytesSentTotal,omitempty" json:"bytesSentTotal,omitempty"`

	BytesReceived int64 `xml:"bytesReceived,omitempty" json:"bytesReceived,omitempty"`

	BytesReceivedTotal int64 `xml:"bytesReceivedTotal,omitempty" json:"bytesReceivedTotal,omitempty"`

	User string `xml:"user,omitempty" json:"user,omitempty"`

	Domain string `xml:"domain,omitempty" json:"domain,omitempty"`

	ClientName string `xml:"clientName,omitempty" json:"clientName,omitempty"`

	ClientIP string `xml:"clientIP,omitempty" json:"clientIP,omitempty"`

	ClientVersion uint32 `xml:"clientVersion,omitempty" json:"clientVersion,omitempty"`

	EncryptionStyle uint32 `xml:"encryptionStyle,omitempty" json:"encryptionStyle,omitempty"`
}

type IHostDrivePartition struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ returnval"`

	Number uint32 `xml:"number,omitempty" json:"number,omitempty"`

	Size int64 `xml:"size,omitempty" json:"size,omitempty"`

	Start int64 `xml:"start,omitempty" json:"start,omitempty"`

	Type_ *PartitionType `xml:"type,omitempty" json:"type,omitempty"`

	Active bool `xml:"active,omitempty" json:"active,omitempty"`

	TypeMBR uint32 `xml:"typeMBR,omitempty" json:"typeMBR,omitempty"`

	StartCylinder uint32 `xml:"startCylinder,omitempty" json:"startCylinder,omitempty"`

	StartHead uint32 `xml:"startHead,omitempty" json:"startHead,omitempty"`

	StartSector uint32 `xml:"startSector,omitempty" json:"startSector,omitempty"`

	EndCylinder uint32 `xml:"endCylinder,omitempty" json:"endCylinder,omitempty"`

	EndHead uint32 `xml:"endHead,omitempty" json:"endHead,omitempty"`

	EndSector uint32 `xml:"endSector,omitempty" json:"endSector,omitempty"`

	TypeUuid string `xml:"typeUuid,omitempty" json:"typeUuid,omitempty"`

	Uuid string `xml:"uuid,omitempty" json:"uuid,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`
}

type IGuestOSType struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ returnval"`

	FamilyId string `xml:"familyId,omitempty" json:"familyId,omitempty"`

	FamilyDescription string `xml:"familyDescription,omitempty" json:"familyDescription,omitempty"`

	Id string `xml:"id,omitempty" json:"id,omitempty"`

	Description string `xml:"description,omitempty" json:"description,omitempty"`

	Is64Bit bool `xml:"is64Bit,omitempty" json:"is64Bit,omitempty"`

	RecommendedIOAPIC bool `xml:"recommendedIOAPIC,omitempty" json:"recommendedIOAPIC,omitempty"`

	RecommendedVirtEx bool `xml:"recommendedVirtEx,omitempty" json:"recommendedVirtEx,omitempty"`

	RecommendedRAM uint32 `xml:"recommendedRAM,omitempty" json:"recommendedRAM,omitempty"`

	RecommendedGraphicsController *GraphicsControllerType `xml:"recommendedGraphicsController,omitempty" json:"recommendedGraphicsController,omitempty"`

	RecommendedVRAM uint32 `xml:"recommendedVRAM,omitempty" json:"recommendedVRAM,omitempty"`

	Recommended2DVideoAcceleration bool `xml:"recommended2DVideoAcceleration,omitempty" json:"recommended2DVideoAcceleration,omitempty"`

	Recommended3DAcceleration bool `xml:"recommended3DAcceleration,omitempty" json:"recommended3DAcceleration,omitempty"`

	RecommendedHDD int64 `xml:"recommendedHDD,omitempty" json:"recommendedHDD,omitempty"`

	AdapterType *NetworkAdapterType `xml:"adapterType,omitempty" json:"adapterType,omitempty"`

	RecommendedPAE bool `xml:"recommendedPAE,omitempty" json:"recommendedPAE,omitempty"`

	RecommendedDVDStorageController *StorageControllerType `xml:"recommendedDVDStorageController,omitempty" json:"recommendedDVDStorageController,omitempty"`

	RecommendedDVDStorageBus *StorageBus `xml:"recommendedDVDStorageBus,omitempty" json:"recommendedDVDStorageBus,omitempty"`

	RecommendedHDStorageController *StorageControllerType `xml:"recommendedHDStorageController,omitempty" json:"recommendedHDStorageController,omitempty"`

	RecommendedHDStorageBus *StorageBus `xml:"recommendedHDStorageBus,omitempty" json:"recommendedHDStorageBus,omitempty"`

	RecommendedFirmware *FirmwareType `xml:"recommendedFirmware,omitempty" json:"recommendedFirmware,omitempty"`

	RecommendedUSBHID bool `xml:"recommendedUSBHID,omitempty" json:"recommendedUSBHID,omitempty"`

	RecommendedHPET bool `xml:"recommendedHPET,omitempty" json:"recommendedHPET,omitempty"`

	RecommendedUSBTablet bool `xml:"recommendedUSBTablet,omitempty" json:"recommendedUSBTablet,omitempty"`

	RecommendedRTCUseUTC bool `xml:"recommendedRTCUseUTC,omitempty" json:"recommendedRTCUseUTC,omitempty"`

	RecommendedChipset *ChipsetType `xml:"recommendedChipset,omitempty" json:"recommendedChipset,omitempty"`

	RecommendedIommuType *IommuType `xml:"recommendedIommuType,omitempty" json:"recommendedIommuType,omitempty"`

	RecommendedAudioController *AudioControllerType `xml:"recommendedAudioController,omitempty" json:"recommendedAudioController,omitempty"`

	RecommendedAudioCodec *AudioCodecType `xml:"recommendedAudioCodec,omitempty" json:"recommendedAudioCodec,omitempty"`

	RecommendedFloppy bool `xml:"recommendedFloppy,omitempty" json:"recommendedFloppy,omitempty"`

	RecommendedUSB bool `xml:"recommendedUSB,omitempty" json:"recommendedUSB,omitempty"`

	RecommendedUSB3 bool `xml:"recommendedUSB3,omitempty" json:"recommendedUSB3,omitempty"`

	RecommendedTFReset bool `xml:"recommendedTFReset,omitempty" json:"recommendedTFReset,omitempty"`

	RecommendedX2APIC bool `xml:"recommendedX2APIC,omitempty" json:"recommendedX2APIC,omitempty"`

	RecommendedCPUCount uint32 `xml:"recommendedCPUCount,omitempty" json:"recommendedCPUCount,omitempty"`

	RecommendedTpmType *TpmType `xml:"recommendedTpmType,omitempty" json:"recommendedTpmType,omitempty"`

	RecommendedSecureBoot bool `xml:"recommendedSecureBoot,omitempty" json:"recommendedSecureBoot,omitempty"`

	RecommendedWDDMGraphics bool `xml:"recommendedWDDMGraphics,omitempty" json:"recommendedWDDMGraphics,omitempty"`
}

type IAdditionsFacility struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ returnval"`

	ClassType *AdditionsFacilityClass `xml:"classType,omitempty" json:"classType,omitempty"`

	LastUpdated int64 `xml:"lastUpdated,omitempty" json:"lastUpdated,omitempty"`

	Name string `xml:"name,omitempty" json:"name,omitempty"`

	Status *AdditionsFacilityStatus `xml:"status,omitempty" json:"status,omitempty"`

	Type_ *AdditionsFacilityType `xml:"type,omitempty" json:"type,omitempty"`
}

type IMediumAttachment struct {
	XMLName xml.Name `xml:"http://www.virtualbox.org/ returnval"`

	Machine string `xml:"machine,omitempty" json:"machine,omitempty"`

	Medium string `xml:"medium,omitempty" json:"medium,omitempty"`

	Controller string `xml:"controller,omitempty" json:"controller,omitempty"`

	Port int32 `xml:"port,omitempty" json:"port,omitempty"`

	Device int32 `xml:"device,omitempty" json:"device,omitempty"`

	Type_ *DeviceType `xml:"type,omitempty" json:"type,omitempty"`

	Passthrough bool `xml:"passthrough,omitempty" json:"passthrough,omitempty"`

	TemporaryEject bool `xml:"temporaryEject,omitempty" json:"temporaryEject,omitempty"`

	IsEjected bool `xml:"isEjected,omitempty" json:"isEjected,omitempty"`

	NonRotational bool `xml:"nonRotational,omitempty" json:"nonRotational,omitempty"`

	Discard bool `xml:"discard,omitempty" json:"discard,omitempty"`

	HotPluggable bool `xml:"hotPluggable,omitempty" json:"hotPluggable,omitempty"`

	BandwidthGroup string `xml:"bandwidthGroup,omitempty" json:"bandwidthGroup,omitempty"`
}

type VboxPortType interface {

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBoxErrorInfo_getResultCode(request *IVirtualBoxErrorInfo_getResultCode) (*IVirtualBoxErrorInfo_getResultCodeResponse, error)

	IVirtualBoxErrorInfo_getResultCodeContext(ctx context.Context, request *IVirtualBoxErrorInfo_getResultCode) (*IVirtualBoxErrorInfo_getResultCodeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBoxErrorInfo_getResultDetail(request *IVirtualBoxErrorInfo_getResultDetail) (*IVirtualBoxErrorInfo_getResultDetailResponse, error)

	IVirtualBoxErrorInfo_getResultDetailContext(ctx context.Context, request *IVirtualBoxErrorInfo_getResultDetail) (*IVirtualBoxErrorInfo_getResultDetailResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBoxErrorInfo_getInterfaceID(request *IVirtualBoxErrorInfo_getInterfaceID) (*IVirtualBoxErrorInfo_getInterfaceIDResponse, error)

	IVirtualBoxErrorInfo_getInterfaceIDContext(ctx context.Context, request *IVirtualBoxErrorInfo_getInterfaceID) (*IVirtualBoxErrorInfo_getInterfaceIDResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBoxErrorInfo_getComponent(request *IVirtualBoxErrorInfo_getComponent) (*IVirtualBoxErrorInfo_getComponentResponse, error)

	IVirtualBoxErrorInfo_getComponentContext(ctx context.Context, request *IVirtualBoxErrorInfo_getComponent) (*IVirtualBoxErrorInfo_getComponentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBoxErrorInfo_getText(request *IVirtualBoxErrorInfo_getText) (*IVirtualBoxErrorInfo_getTextResponse, error)

	IVirtualBoxErrorInfo_getTextContext(ctx context.Context, request *IVirtualBoxErrorInfo_getText) (*IVirtualBoxErrorInfo_getTextResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBoxErrorInfo_getNext(request *IVirtualBoxErrorInfo_getNext) (*IVirtualBoxErrorInfo_getNextResponse, error)

	IVirtualBoxErrorInfo_getNextContext(ctx context.Context, request *IVirtualBoxErrorInfo_getNext) (*IVirtualBoxErrorInfo_getNextResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getNetworkName(request *INATNetwork_getNetworkName) (*INATNetwork_getNetworkNameResponse, error)

	INATNetwork_getNetworkNameContext(ctx context.Context, request *INATNetwork_getNetworkName) (*INATNetwork_getNetworkNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_setNetworkName(request *INATNetwork_setNetworkName) (*INATNetwork_setNetworkNameResponse, error)

	INATNetwork_setNetworkNameContext(ctx context.Context, request *INATNetwork_setNetworkName) (*INATNetwork_setNetworkNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getEnabled(request *INATNetwork_getEnabled) (*INATNetwork_getEnabledResponse, error)

	INATNetwork_getEnabledContext(ctx context.Context, request *INATNetwork_getEnabled) (*INATNetwork_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_setEnabled(request *INATNetwork_setEnabled) (*INATNetwork_setEnabledResponse, error)

	INATNetwork_setEnabledContext(ctx context.Context, request *INATNetwork_setEnabled) (*INATNetwork_setEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getNetwork(request *INATNetwork_getNetwork) (*INATNetwork_getNetworkResponse, error)

	INATNetwork_getNetworkContext(ctx context.Context, request *INATNetwork_getNetwork) (*INATNetwork_getNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_setNetwork(request *INATNetwork_setNetwork) (*INATNetwork_setNetworkResponse, error)

	INATNetwork_setNetworkContext(ctx context.Context, request *INATNetwork_setNetwork) (*INATNetwork_setNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getGateway(request *INATNetwork_getGateway) (*INATNetwork_getGatewayResponse, error)

	INATNetwork_getGatewayContext(ctx context.Context, request *INATNetwork_getGateway) (*INATNetwork_getGatewayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getIPv6Enabled(request *INATNetwork_getIPv6Enabled) (*INATNetwork_getIPv6EnabledResponse, error)

	INATNetwork_getIPv6EnabledContext(ctx context.Context, request *INATNetwork_getIPv6Enabled) (*INATNetwork_getIPv6EnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_setIPv6Enabled(request *INATNetwork_setIPv6Enabled) (*INATNetwork_setIPv6EnabledResponse, error)

	INATNetwork_setIPv6EnabledContext(ctx context.Context, request *INATNetwork_setIPv6Enabled) (*INATNetwork_setIPv6EnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getIPv6Prefix(request *INATNetwork_getIPv6Prefix) (*INATNetwork_getIPv6PrefixResponse, error)

	INATNetwork_getIPv6PrefixContext(ctx context.Context, request *INATNetwork_getIPv6Prefix) (*INATNetwork_getIPv6PrefixResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_setIPv6Prefix(request *INATNetwork_setIPv6Prefix) (*INATNetwork_setIPv6PrefixResponse, error)

	INATNetwork_setIPv6PrefixContext(ctx context.Context, request *INATNetwork_setIPv6Prefix) (*INATNetwork_setIPv6PrefixResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getAdvertiseDefaultIPv6RouteEnabled(request *INATNetwork_getAdvertiseDefaultIPv6RouteEnabled) (*INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse, error)

	INATNetwork_getAdvertiseDefaultIPv6RouteEnabledContext(ctx context.Context, request *INATNetwork_getAdvertiseDefaultIPv6RouteEnabled) (*INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_setAdvertiseDefaultIPv6RouteEnabled(request *INATNetwork_setAdvertiseDefaultIPv6RouteEnabled) (*INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse, error)

	INATNetwork_setAdvertiseDefaultIPv6RouteEnabledContext(ctx context.Context, request *INATNetwork_setAdvertiseDefaultIPv6RouteEnabled) (*INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getNeedDhcpServer(request *INATNetwork_getNeedDhcpServer) (*INATNetwork_getNeedDhcpServerResponse, error)

	INATNetwork_getNeedDhcpServerContext(ctx context.Context, request *INATNetwork_getNeedDhcpServer) (*INATNetwork_getNeedDhcpServerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_setNeedDhcpServer(request *INATNetwork_setNeedDhcpServer) (*INATNetwork_setNeedDhcpServerResponse, error)

	INATNetwork_setNeedDhcpServerContext(ctx context.Context, request *INATNetwork_setNeedDhcpServer) (*INATNetwork_setNeedDhcpServerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getEventSource(request *INATNetwork_getEventSource) (*INATNetwork_getEventSourceResponse, error)

	INATNetwork_getEventSourceContext(ctx context.Context, request *INATNetwork_getEventSource) (*INATNetwork_getEventSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getPortForwardRules4(request *INATNetwork_getPortForwardRules4) (*INATNetwork_getPortForwardRules4Response, error)

	INATNetwork_getPortForwardRules4Context(ctx context.Context, request *INATNetwork_getPortForwardRules4) (*INATNetwork_getPortForwardRules4Response, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getLocalMappings(request *INATNetwork_getLocalMappings) (*INATNetwork_getLocalMappingsResponse, error)

	INATNetwork_getLocalMappingsContext(ctx context.Context, request *INATNetwork_getLocalMappings) (*INATNetwork_getLocalMappingsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getLoopbackIp6(request *INATNetwork_getLoopbackIp6) (*INATNetwork_getLoopbackIp6Response, error)

	INATNetwork_getLoopbackIp6Context(ctx context.Context, request *INATNetwork_getLoopbackIp6) (*INATNetwork_getLoopbackIp6Response, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_setLoopbackIp6(request *INATNetwork_setLoopbackIp6) (*INATNetwork_setLoopbackIp6Response, error)

	INATNetwork_setLoopbackIp6Context(ctx context.Context, request *INATNetwork_setLoopbackIp6) (*INATNetwork_setLoopbackIp6Response, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_getPortForwardRules6(request *INATNetwork_getPortForwardRules6) (*INATNetwork_getPortForwardRules6Response, error)

	INATNetwork_getPortForwardRules6Context(ctx context.Context, request *INATNetwork_getPortForwardRules6) (*INATNetwork_getPortForwardRules6Response, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_addLocalMapping(request *INATNetwork_addLocalMapping) (*INATNetwork_addLocalMappingResponse, error)

	INATNetwork_addLocalMappingContext(ctx context.Context, request *INATNetwork_addLocalMapping) (*INATNetwork_addLocalMappingResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_addPortForwardRule(request *INATNetwork_addPortForwardRule) (*INATNetwork_addPortForwardRuleResponse, error)

	INATNetwork_addPortForwardRuleContext(ctx context.Context, request *INATNetwork_addPortForwardRule) (*INATNetwork_addPortForwardRuleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_removePortForwardRule(request *INATNetwork_removePortForwardRule) (*INATNetwork_removePortForwardRuleResponse, error)

	INATNetwork_removePortForwardRuleContext(ctx context.Context, request *INATNetwork_removePortForwardRule) (*INATNetwork_removePortForwardRuleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_start(request *INATNetwork_start) (*INATNetwork_startResponse, error)

	INATNetwork_startContext(ctx context.Context, request *INATNetwork_start) (*INATNetwork_startResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetwork_stop(request *INATNetwork_stop) (*INATNetwork_stopResponse, error)

	INATNetwork_stopContext(ctx context.Context, request *INATNetwork_stop) (*INATNetwork_stopResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetwork_getNetworkName(request *ICloudNetwork_getNetworkName) (*ICloudNetwork_getNetworkNameResponse, error)

	ICloudNetwork_getNetworkNameContext(ctx context.Context, request *ICloudNetwork_getNetworkName) (*ICloudNetwork_getNetworkNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetwork_setNetworkName(request *ICloudNetwork_setNetworkName) (*ICloudNetwork_setNetworkNameResponse, error)

	ICloudNetwork_setNetworkNameContext(ctx context.Context, request *ICloudNetwork_setNetworkName) (*ICloudNetwork_setNetworkNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetwork_getEnabled(request *ICloudNetwork_getEnabled) (*ICloudNetwork_getEnabledResponse, error)

	ICloudNetwork_getEnabledContext(ctx context.Context, request *ICloudNetwork_getEnabled) (*ICloudNetwork_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetwork_setEnabled(request *ICloudNetwork_setEnabled) (*ICloudNetwork_setEnabledResponse, error)

	ICloudNetwork_setEnabledContext(ctx context.Context, request *ICloudNetwork_setEnabled) (*ICloudNetwork_setEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetwork_getProvider(request *ICloudNetwork_getProvider) (*ICloudNetwork_getProviderResponse, error)

	ICloudNetwork_getProviderContext(ctx context.Context, request *ICloudNetwork_getProvider) (*ICloudNetwork_getProviderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetwork_setProvider(request *ICloudNetwork_setProvider) (*ICloudNetwork_setProviderResponse, error)

	ICloudNetwork_setProviderContext(ctx context.Context, request *ICloudNetwork_setProvider) (*ICloudNetwork_setProviderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetwork_getProfile(request *ICloudNetwork_getProfile) (*ICloudNetwork_getProfileResponse, error)

	ICloudNetwork_getProfileContext(ctx context.Context, request *ICloudNetwork_getProfile) (*ICloudNetwork_getProfileResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetwork_setProfile(request *ICloudNetwork_setProfile) (*ICloudNetwork_setProfileResponse, error)

	ICloudNetwork_setProfileContext(ctx context.Context, request *ICloudNetwork_setProfile) (*ICloudNetwork_setProfileResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetwork_getNetworkId(request *ICloudNetwork_getNetworkId) (*ICloudNetwork_getNetworkIdResponse, error)

	ICloudNetwork_getNetworkIdContext(ctx context.Context, request *ICloudNetwork_getNetworkId) (*ICloudNetwork_getNetworkIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetwork_setNetworkId(request *ICloudNetwork_setNetworkId) (*ICloudNetwork_setNetworkIdResponse, error)

	ICloudNetwork_setNetworkIdContext(ctx context.Context, request *ICloudNetwork_setNetworkId) (*ICloudNetwork_setNetworkIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_getNetworkName(request *IHostOnlyNetwork_getNetworkName) (*IHostOnlyNetwork_getNetworkNameResponse, error)

	IHostOnlyNetwork_getNetworkNameContext(ctx context.Context, request *IHostOnlyNetwork_getNetworkName) (*IHostOnlyNetwork_getNetworkNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_setNetworkName(request *IHostOnlyNetwork_setNetworkName) (*IHostOnlyNetwork_setNetworkNameResponse, error)

	IHostOnlyNetwork_setNetworkNameContext(ctx context.Context, request *IHostOnlyNetwork_setNetworkName) (*IHostOnlyNetwork_setNetworkNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_getEnabled(request *IHostOnlyNetwork_getEnabled) (*IHostOnlyNetwork_getEnabledResponse, error)

	IHostOnlyNetwork_getEnabledContext(ctx context.Context, request *IHostOnlyNetwork_getEnabled) (*IHostOnlyNetwork_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_setEnabled(request *IHostOnlyNetwork_setEnabled) (*IHostOnlyNetwork_setEnabledResponse, error)

	IHostOnlyNetwork_setEnabledContext(ctx context.Context, request *IHostOnlyNetwork_setEnabled) (*IHostOnlyNetwork_setEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_getNetworkMask(request *IHostOnlyNetwork_getNetworkMask) (*IHostOnlyNetwork_getNetworkMaskResponse, error)

	IHostOnlyNetwork_getNetworkMaskContext(ctx context.Context, request *IHostOnlyNetwork_getNetworkMask) (*IHostOnlyNetwork_getNetworkMaskResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_setNetworkMask(request *IHostOnlyNetwork_setNetworkMask) (*IHostOnlyNetwork_setNetworkMaskResponse, error)

	IHostOnlyNetwork_setNetworkMaskContext(ctx context.Context, request *IHostOnlyNetwork_setNetworkMask) (*IHostOnlyNetwork_setNetworkMaskResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_getHostIP(request *IHostOnlyNetwork_getHostIP) (*IHostOnlyNetwork_getHostIPResponse, error)

	IHostOnlyNetwork_getHostIPContext(ctx context.Context, request *IHostOnlyNetwork_getHostIP) (*IHostOnlyNetwork_getHostIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_getLowerIP(request *IHostOnlyNetwork_getLowerIP) (*IHostOnlyNetwork_getLowerIPResponse, error)

	IHostOnlyNetwork_getLowerIPContext(ctx context.Context, request *IHostOnlyNetwork_getLowerIP) (*IHostOnlyNetwork_getLowerIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_setLowerIP(request *IHostOnlyNetwork_setLowerIP) (*IHostOnlyNetwork_setLowerIPResponse, error)

	IHostOnlyNetwork_setLowerIPContext(ctx context.Context, request *IHostOnlyNetwork_setLowerIP) (*IHostOnlyNetwork_setLowerIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_getUpperIP(request *IHostOnlyNetwork_getUpperIP) (*IHostOnlyNetwork_getUpperIPResponse, error)

	IHostOnlyNetwork_getUpperIPContext(ctx context.Context, request *IHostOnlyNetwork_getUpperIP) (*IHostOnlyNetwork_getUpperIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_setUpperIP(request *IHostOnlyNetwork_setUpperIP) (*IHostOnlyNetwork_setUpperIPResponse, error)

	IHostOnlyNetwork_setUpperIPContext(ctx context.Context, request *IHostOnlyNetwork_setUpperIP) (*IHostOnlyNetwork_setUpperIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_getId(request *IHostOnlyNetwork_getId) (*IHostOnlyNetwork_getIdResponse, error)

	IHostOnlyNetwork_getIdContext(ctx context.Context, request *IHostOnlyNetwork_getId) (*IHostOnlyNetwork_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostOnlyNetwork_setId(request *IHostOnlyNetwork_setId) (*IHostOnlyNetwork_setIdResponse, error)

	IHostOnlyNetwork_setIdContext(ctx context.Context, request *IHostOnlyNetwork_setId) (*IHostOnlyNetwork_setIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_getEventSource(request *IDHCPServer_getEventSource) (*IDHCPServer_getEventSourceResponse, error)

	IDHCPServer_getEventSourceContext(ctx context.Context, request *IDHCPServer_getEventSource) (*IDHCPServer_getEventSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_getEnabled(request *IDHCPServer_getEnabled) (*IDHCPServer_getEnabledResponse, error)

	IDHCPServer_getEnabledContext(ctx context.Context, request *IDHCPServer_getEnabled) (*IDHCPServer_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_setEnabled(request *IDHCPServer_setEnabled) (*IDHCPServer_setEnabledResponse, error)

	IDHCPServer_setEnabledContext(ctx context.Context, request *IDHCPServer_setEnabled) (*IDHCPServer_setEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_getIPAddress(request *IDHCPServer_getIPAddress) (*IDHCPServer_getIPAddressResponse, error)

	IDHCPServer_getIPAddressContext(ctx context.Context, request *IDHCPServer_getIPAddress) (*IDHCPServer_getIPAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_getNetworkMask(request *IDHCPServer_getNetworkMask) (*IDHCPServer_getNetworkMaskResponse, error)

	IDHCPServer_getNetworkMaskContext(ctx context.Context, request *IDHCPServer_getNetworkMask) (*IDHCPServer_getNetworkMaskResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_getNetworkName(request *IDHCPServer_getNetworkName) (*IDHCPServer_getNetworkNameResponse, error)

	IDHCPServer_getNetworkNameContext(ctx context.Context, request *IDHCPServer_getNetworkName) (*IDHCPServer_getNetworkNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_getLowerIP(request *IDHCPServer_getLowerIP) (*IDHCPServer_getLowerIPResponse, error)

	IDHCPServer_getLowerIPContext(ctx context.Context, request *IDHCPServer_getLowerIP) (*IDHCPServer_getLowerIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_getUpperIP(request *IDHCPServer_getUpperIP) (*IDHCPServer_getUpperIPResponse, error)

	IDHCPServer_getUpperIPContext(ctx context.Context, request *IDHCPServer_getUpperIP) (*IDHCPServer_getUpperIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_getGlobalConfig(request *IDHCPServer_getGlobalConfig) (*IDHCPServer_getGlobalConfigResponse, error)

	IDHCPServer_getGlobalConfigContext(ctx context.Context, request *IDHCPServer_getGlobalConfig) (*IDHCPServer_getGlobalConfigResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_getGroupConfigs(request *IDHCPServer_getGroupConfigs) (*IDHCPServer_getGroupConfigsResponse, error)

	IDHCPServer_getGroupConfigsContext(ctx context.Context, request *IDHCPServer_getGroupConfigs) (*IDHCPServer_getGroupConfigsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_getIndividualConfigs(request *IDHCPServer_getIndividualConfigs) (*IDHCPServer_getIndividualConfigsResponse, error)

	IDHCPServer_getIndividualConfigsContext(ctx context.Context, request *IDHCPServer_getIndividualConfigs) (*IDHCPServer_getIndividualConfigsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_setConfiguration(request *IDHCPServer_setConfiguration) (*IDHCPServer_setConfigurationResponse, error)

	IDHCPServer_setConfigurationContext(ctx context.Context, request *IDHCPServer_setConfiguration) (*IDHCPServer_setConfigurationResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_start(request *IDHCPServer_start) (*IDHCPServer_startResponse, error)

	IDHCPServer_startContext(ctx context.Context, request *IDHCPServer_start) (*IDHCPServer_startResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_stop(request *IDHCPServer_stop) (*IDHCPServer_stopResponse, error)

	IDHCPServer_stopContext(ctx context.Context, request *IDHCPServer_stop) (*IDHCPServer_stopResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_restart(request *IDHCPServer_restart) (*IDHCPServer_restartResponse, error)

	IDHCPServer_restartContext(ctx context.Context, request *IDHCPServer_restart) (*IDHCPServer_restartResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_findLeaseByMAC(request *IDHCPServer_findLeaseByMAC) (*IDHCPServer_findLeaseByMACResponse, error)

	IDHCPServer_findLeaseByMACContext(ctx context.Context, request *IDHCPServer_findLeaseByMAC) (*IDHCPServer_findLeaseByMACResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPServer_getConfig(request *IDHCPServer_getConfig) (*IDHCPServer_getConfigResponse, error)

	IDHCPServer_getConfigContext(ctx context.Context, request *IDHCPServer_getConfig) (*IDHCPServer_getConfigResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_getScope(request *IDHCPConfig_getScope) (*IDHCPConfig_getScopeResponse, error)

	IDHCPConfig_getScopeContext(ctx context.Context, request *IDHCPConfig_getScope) (*IDHCPConfig_getScopeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_getMinLeaseTime(request *IDHCPConfig_getMinLeaseTime) (*IDHCPConfig_getMinLeaseTimeResponse, error)

	IDHCPConfig_getMinLeaseTimeContext(ctx context.Context, request *IDHCPConfig_getMinLeaseTime) (*IDHCPConfig_getMinLeaseTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_setMinLeaseTime(request *IDHCPConfig_setMinLeaseTime) (*IDHCPConfig_setMinLeaseTimeResponse, error)

	IDHCPConfig_setMinLeaseTimeContext(ctx context.Context, request *IDHCPConfig_setMinLeaseTime) (*IDHCPConfig_setMinLeaseTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_getDefaultLeaseTime(request *IDHCPConfig_getDefaultLeaseTime) (*IDHCPConfig_getDefaultLeaseTimeResponse, error)

	IDHCPConfig_getDefaultLeaseTimeContext(ctx context.Context, request *IDHCPConfig_getDefaultLeaseTime) (*IDHCPConfig_getDefaultLeaseTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_setDefaultLeaseTime(request *IDHCPConfig_setDefaultLeaseTime) (*IDHCPConfig_setDefaultLeaseTimeResponse, error)

	IDHCPConfig_setDefaultLeaseTimeContext(ctx context.Context, request *IDHCPConfig_setDefaultLeaseTime) (*IDHCPConfig_setDefaultLeaseTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_getMaxLeaseTime(request *IDHCPConfig_getMaxLeaseTime) (*IDHCPConfig_getMaxLeaseTimeResponse, error)

	IDHCPConfig_getMaxLeaseTimeContext(ctx context.Context, request *IDHCPConfig_getMaxLeaseTime) (*IDHCPConfig_getMaxLeaseTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_setMaxLeaseTime(request *IDHCPConfig_setMaxLeaseTime) (*IDHCPConfig_setMaxLeaseTimeResponse, error)

	IDHCPConfig_setMaxLeaseTimeContext(ctx context.Context, request *IDHCPConfig_setMaxLeaseTime) (*IDHCPConfig_setMaxLeaseTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_getForcedOptions(request *IDHCPConfig_getForcedOptions) (*IDHCPConfig_getForcedOptionsResponse, error)

	IDHCPConfig_getForcedOptionsContext(ctx context.Context, request *IDHCPConfig_getForcedOptions) (*IDHCPConfig_getForcedOptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_setForcedOptions(request *IDHCPConfig_setForcedOptions) (*IDHCPConfig_setForcedOptionsResponse, error)

	IDHCPConfig_setForcedOptionsContext(ctx context.Context, request *IDHCPConfig_setForcedOptions) (*IDHCPConfig_setForcedOptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_getSuppressedOptions(request *IDHCPConfig_getSuppressedOptions) (*IDHCPConfig_getSuppressedOptionsResponse, error)

	IDHCPConfig_getSuppressedOptionsContext(ctx context.Context, request *IDHCPConfig_getSuppressedOptions) (*IDHCPConfig_getSuppressedOptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_setSuppressedOptions(request *IDHCPConfig_setSuppressedOptions) (*IDHCPConfig_setSuppressedOptionsResponse, error)

	IDHCPConfig_setSuppressedOptionsContext(ctx context.Context, request *IDHCPConfig_setSuppressedOptions) (*IDHCPConfig_setSuppressedOptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_setOption(request *IDHCPConfig_setOption) (*IDHCPConfig_setOptionResponse, error)

	IDHCPConfig_setOptionContext(ctx context.Context, request *IDHCPConfig_setOption) (*IDHCPConfig_setOptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_removeOption(request *IDHCPConfig_removeOption) (*IDHCPConfig_removeOptionResponse, error)

	IDHCPConfig_removeOptionContext(ctx context.Context, request *IDHCPConfig_removeOption) (*IDHCPConfig_removeOptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_removeAllOptions(request *IDHCPConfig_removeAllOptions) (*IDHCPConfig_removeAllOptionsResponse, error)

	IDHCPConfig_removeAllOptionsContext(ctx context.Context, request *IDHCPConfig_removeAllOptions) (*IDHCPConfig_removeAllOptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_getOption(request *IDHCPConfig_getOption) (*IDHCPConfig_getOptionResponse, error)

	IDHCPConfig_getOptionContext(ctx context.Context, request *IDHCPConfig_getOption) (*IDHCPConfig_getOptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_getAllOptions(request *IDHCPConfig_getAllOptions) (*IDHCPConfig_getAllOptionsResponse, error)

	IDHCPConfig_getAllOptionsContext(ctx context.Context, request *IDHCPConfig_getAllOptions) (*IDHCPConfig_getAllOptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPConfig_remove(request *IDHCPConfig_remove) (*IDHCPConfig_removeResponse, error)

	IDHCPConfig_removeContext(ctx context.Context, request *IDHCPConfig_remove) (*IDHCPConfig_removeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPGroupCondition_getInclusive(request *IDHCPGroupCondition_getInclusive) (*IDHCPGroupCondition_getInclusiveResponse, error)

	IDHCPGroupCondition_getInclusiveContext(ctx context.Context, request *IDHCPGroupCondition_getInclusive) (*IDHCPGroupCondition_getInclusiveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPGroupCondition_setInclusive(request *IDHCPGroupCondition_setInclusive) (*IDHCPGroupCondition_setInclusiveResponse, error)

	IDHCPGroupCondition_setInclusiveContext(ctx context.Context, request *IDHCPGroupCondition_setInclusive) (*IDHCPGroupCondition_setInclusiveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPGroupCondition_getType(request *IDHCPGroupCondition_getType) (*IDHCPGroupCondition_getTypeResponse, error)

	IDHCPGroupCondition_getTypeContext(ctx context.Context, request *IDHCPGroupCondition_getType) (*IDHCPGroupCondition_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPGroupCondition_setType(request *IDHCPGroupCondition_setType) (*IDHCPGroupCondition_setTypeResponse, error)

	IDHCPGroupCondition_setTypeContext(ctx context.Context, request *IDHCPGroupCondition_setType) (*IDHCPGroupCondition_setTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPGroupCondition_getValue(request *IDHCPGroupCondition_getValue) (*IDHCPGroupCondition_getValueResponse, error)

	IDHCPGroupCondition_getValueContext(ctx context.Context, request *IDHCPGroupCondition_getValue) (*IDHCPGroupCondition_getValueResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPGroupCondition_setValue(request *IDHCPGroupCondition_setValue) (*IDHCPGroupCondition_setValueResponse, error)

	IDHCPGroupCondition_setValueContext(ctx context.Context, request *IDHCPGroupCondition_setValue) (*IDHCPGroupCondition_setValueResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPGroupCondition_remove(request *IDHCPGroupCondition_remove) (*IDHCPGroupCondition_removeResponse, error)

	IDHCPGroupCondition_removeContext(ctx context.Context, request *IDHCPGroupCondition_remove) (*IDHCPGroupCondition_removeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPGroupConfig_getName(request *IDHCPGroupConfig_getName) (*IDHCPGroupConfig_getNameResponse, error)

	IDHCPGroupConfig_getNameContext(ctx context.Context, request *IDHCPGroupConfig_getName) (*IDHCPGroupConfig_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPGroupConfig_setName(request *IDHCPGroupConfig_setName) (*IDHCPGroupConfig_setNameResponse, error)

	IDHCPGroupConfig_setNameContext(ctx context.Context, request *IDHCPGroupConfig_setName) (*IDHCPGroupConfig_setNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPGroupConfig_getConditions(request *IDHCPGroupConfig_getConditions) (*IDHCPGroupConfig_getConditionsResponse, error)

	IDHCPGroupConfig_getConditionsContext(ctx context.Context, request *IDHCPGroupConfig_getConditions) (*IDHCPGroupConfig_getConditionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPGroupConfig_addCondition(request *IDHCPGroupConfig_addCondition) (*IDHCPGroupConfig_addConditionResponse, error)

	IDHCPGroupConfig_addConditionContext(ctx context.Context, request *IDHCPGroupConfig_addCondition) (*IDHCPGroupConfig_addConditionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPGroupConfig_removeAllConditions(request *IDHCPGroupConfig_removeAllConditions) (*IDHCPGroupConfig_removeAllConditionsResponse, error)

	IDHCPGroupConfig_removeAllConditionsContext(ctx context.Context, request *IDHCPGroupConfig_removeAllConditions) (*IDHCPGroupConfig_removeAllConditionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPIndividualConfig_getMACAddress(request *IDHCPIndividualConfig_getMACAddress) (*IDHCPIndividualConfig_getMACAddressResponse, error)

	IDHCPIndividualConfig_getMACAddressContext(ctx context.Context, request *IDHCPIndividualConfig_getMACAddress) (*IDHCPIndividualConfig_getMACAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPIndividualConfig_getMachineId(request *IDHCPIndividualConfig_getMachineId) (*IDHCPIndividualConfig_getMachineIdResponse, error)

	IDHCPIndividualConfig_getMachineIdContext(ctx context.Context, request *IDHCPIndividualConfig_getMachineId) (*IDHCPIndividualConfig_getMachineIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPIndividualConfig_getSlot(request *IDHCPIndividualConfig_getSlot) (*IDHCPIndividualConfig_getSlotResponse, error)

	IDHCPIndividualConfig_getSlotContext(ctx context.Context, request *IDHCPIndividualConfig_getSlot) (*IDHCPIndividualConfig_getSlotResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPIndividualConfig_getFixedAddress(request *IDHCPIndividualConfig_getFixedAddress) (*IDHCPIndividualConfig_getFixedAddressResponse, error)

	IDHCPIndividualConfig_getFixedAddressContext(ctx context.Context, request *IDHCPIndividualConfig_getFixedAddress) (*IDHCPIndividualConfig_getFixedAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDHCPIndividualConfig_setFixedAddress(request *IDHCPIndividualConfig_setFixedAddress) (*IDHCPIndividualConfig_setFixedAddressResponse, error)

	IDHCPIndividualConfig_setFixedAddressContext(ctx context.Context, request *IDHCPIndividualConfig_setFixedAddress) (*IDHCPIndividualConfig_setFixedAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getVersion(request *IVirtualBox_getVersion) (*IVirtualBox_getVersionResponse, error)

	IVirtualBox_getVersionContext(ctx context.Context, request *IVirtualBox_getVersion) (*IVirtualBox_getVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getVersionNormalized(request *IVirtualBox_getVersionNormalized) (*IVirtualBox_getVersionNormalizedResponse, error)

	IVirtualBox_getVersionNormalizedContext(ctx context.Context, request *IVirtualBox_getVersionNormalized) (*IVirtualBox_getVersionNormalizedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getRevision(request *IVirtualBox_getRevision) (*IVirtualBox_getRevisionResponse, error)

	IVirtualBox_getRevisionContext(ctx context.Context, request *IVirtualBox_getRevision) (*IVirtualBox_getRevisionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getPackageType(request *IVirtualBox_getPackageType) (*IVirtualBox_getPackageTypeResponse, error)

	IVirtualBox_getPackageTypeContext(ctx context.Context, request *IVirtualBox_getPackageType) (*IVirtualBox_getPackageTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getAPIVersion(request *IVirtualBox_getAPIVersion) (*IVirtualBox_getAPIVersionResponse, error)

	IVirtualBox_getAPIVersionContext(ctx context.Context, request *IVirtualBox_getAPIVersion) (*IVirtualBox_getAPIVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getAPIRevision(request *IVirtualBox_getAPIRevision) (*IVirtualBox_getAPIRevisionResponse, error)

	IVirtualBox_getAPIRevisionContext(ctx context.Context, request *IVirtualBox_getAPIRevision) (*IVirtualBox_getAPIRevisionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getHomeFolder(request *IVirtualBox_getHomeFolder) (*IVirtualBox_getHomeFolderResponse, error)

	IVirtualBox_getHomeFolderContext(ctx context.Context, request *IVirtualBox_getHomeFolder) (*IVirtualBox_getHomeFolderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getSettingsFilePath(request *IVirtualBox_getSettingsFilePath) (*IVirtualBox_getSettingsFilePathResponse, error)

	IVirtualBox_getSettingsFilePathContext(ctx context.Context, request *IVirtualBox_getSettingsFilePath) (*IVirtualBox_getSettingsFilePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getHost(request *IVirtualBox_getHost) (*IVirtualBox_getHostResponse, error)

	IVirtualBox_getHostContext(ctx context.Context, request *IVirtualBox_getHost) (*IVirtualBox_getHostResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getSystemProperties(request *IVirtualBox_getSystemProperties) (*IVirtualBox_getSystemPropertiesResponse, error)

	IVirtualBox_getSystemPropertiesContext(ctx context.Context, request *IVirtualBox_getSystemProperties) (*IVirtualBox_getSystemPropertiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getMachines(request *IVirtualBox_getMachines) (*IVirtualBox_getMachinesResponse, error)

	IVirtualBox_getMachinesContext(ctx context.Context, request *IVirtualBox_getMachines) (*IVirtualBox_getMachinesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getMachineGroups(request *IVirtualBox_getMachineGroups) (*IVirtualBox_getMachineGroupsResponse, error)

	IVirtualBox_getMachineGroupsContext(ctx context.Context, request *IVirtualBox_getMachineGroups) (*IVirtualBox_getMachineGroupsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getHardDisks(request *IVirtualBox_getHardDisks) (*IVirtualBox_getHardDisksResponse, error)

	IVirtualBox_getHardDisksContext(ctx context.Context, request *IVirtualBox_getHardDisks) (*IVirtualBox_getHardDisksResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getDVDImages(request *IVirtualBox_getDVDImages) (*IVirtualBox_getDVDImagesResponse, error)

	IVirtualBox_getDVDImagesContext(ctx context.Context, request *IVirtualBox_getDVDImages) (*IVirtualBox_getDVDImagesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getFloppyImages(request *IVirtualBox_getFloppyImages) (*IVirtualBox_getFloppyImagesResponse, error)

	IVirtualBox_getFloppyImagesContext(ctx context.Context, request *IVirtualBox_getFloppyImages) (*IVirtualBox_getFloppyImagesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getProgressOperations(request *IVirtualBox_getProgressOperations) (*IVirtualBox_getProgressOperationsResponse, error)

	IVirtualBox_getProgressOperationsContext(ctx context.Context, request *IVirtualBox_getProgressOperations) (*IVirtualBox_getProgressOperationsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getGuestOSTypes(request *IVirtualBox_getGuestOSTypes) (*IVirtualBox_getGuestOSTypesResponse, error)

	IVirtualBox_getGuestOSTypesContext(ctx context.Context, request *IVirtualBox_getGuestOSTypes) (*IVirtualBox_getGuestOSTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getSharedFolders(request *IVirtualBox_getSharedFolders) (*IVirtualBox_getSharedFoldersResponse, error)

	IVirtualBox_getSharedFoldersContext(ctx context.Context, request *IVirtualBox_getSharedFolders) (*IVirtualBox_getSharedFoldersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getPerformanceCollector(request *IVirtualBox_getPerformanceCollector) (*IVirtualBox_getPerformanceCollectorResponse, error)

	IVirtualBox_getPerformanceCollectorContext(ctx context.Context, request *IVirtualBox_getPerformanceCollector) (*IVirtualBox_getPerformanceCollectorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getDHCPServers(request *IVirtualBox_getDHCPServers) (*IVirtualBox_getDHCPServersResponse, error)

	IVirtualBox_getDHCPServersContext(ctx context.Context, request *IVirtualBox_getDHCPServers) (*IVirtualBox_getDHCPServersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getNATNetworks(request *IVirtualBox_getNATNetworks) (*IVirtualBox_getNATNetworksResponse, error)

	IVirtualBox_getNATNetworksContext(ctx context.Context, request *IVirtualBox_getNATNetworks) (*IVirtualBox_getNATNetworksResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getEventSource(request *IVirtualBox_getEventSource) (*IVirtualBox_getEventSourceResponse, error)

	IVirtualBox_getEventSourceContext(ctx context.Context, request *IVirtualBox_getEventSource) (*IVirtualBox_getEventSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getInternalNetworks(request *IVirtualBox_getInternalNetworks) (*IVirtualBox_getInternalNetworksResponse, error)

	IVirtualBox_getInternalNetworksContext(ctx context.Context, request *IVirtualBox_getInternalNetworks) (*IVirtualBox_getInternalNetworksResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getHostOnlyNetworks(request *IVirtualBox_getHostOnlyNetworks) (*IVirtualBox_getHostOnlyNetworksResponse, error)

	IVirtualBox_getHostOnlyNetworksContext(ctx context.Context, request *IVirtualBox_getHostOnlyNetworks) (*IVirtualBox_getHostOnlyNetworksResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getGenericNetworkDrivers(request *IVirtualBox_getGenericNetworkDrivers) (*IVirtualBox_getGenericNetworkDriversResponse, error)

	IVirtualBox_getGenericNetworkDriversContext(ctx context.Context, request *IVirtualBox_getGenericNetworkDrivers) (*IVirtualBox_getGenericNetworkDriversResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getCloudNetworks(request *IVirtualBox_getCloudNetworks) (*IVirtualBox_getCloudNetworksResponse, error)

	IVirtualBox_getCloudNetworksContext(ctx context.Context, request *IVirtualBox_getCloudNetworks) (*IVirtualBox_getCloudNetworksResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getCloudProviderManager(request *IVirtualBox_getCloudProviderManager) (*IVirtualBox_getCloudProviderManagerResponse, error)

	IVirtualBox_getCloudProviderManagerContext(ctx context.Context, request *IVirtualBox_getCloudProviderManager) (*IVirtualBox_getCloudProviderManagerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_composeMachineFilename(request *IVirtualBox_composeMachineFilename) (*IVirtualBox_composeMachineFilenameResponse, error)

	IVirtualBox_composeMachineFilenameContext(ctx context.Context, request *IVirtualBox_composeMachineFilename) (*IVirtualBox_composeMachineFilenameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_createMachine(request *IVirtualBox_createMachine) (*IVirtualBox_createMachineResponse, error)

	IVirtualBox_createMachineContext(ctx context.Context, request *IVirtualBox_createMachine) (*IVirtualBox_createMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_openMachine(request *IVirtualBox_openMachine) (*IVirtualBox_openMachineResponse, error)

	IVirtualBox_openMachineContext(ctx context.Context, request *IVirtualBox_openMachine) (*IVirtualBox_openMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_registerMachine(request *IVirtualBox_registerMachine) (*IVirtualBox_registerMachineResponse, error)

	IVirtualBox_registerMachineContext(ctx context.Context, request *IVirtualBox_registerMachine) (*IVirtualBox_registerMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_findMachine(request *IVirtualBox_findMachine) (*IVirtualBox_findMachineResponse, error)

	IVirtualBox_findMachineContext(ctx context.Context, request *IVirtualBox_findMachine) (*IVirtualBox_findMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getMachinesByGroups(request *IVirtualBox_getMachinesByGroups) (*IVirtualBox_getMachinesByGroupsResponse, error)

	IVirtualBox_getMachinesByGroupsContext(ctx context.Context, request *IVirtualBox_getMachinesByGroups) (*IVirtualBox_getMachinesByGroupsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getMachineStates(request *IVirtualBox_getMachineStates) (*IVirtualBox_getMachineStatesResponse, error)

	IVirtualBox_getMachineStatesContext(ctx context.Context, request *IVirtualBox_getMachineStates) (*IVirtualBox_getMachineStatesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_createAppliance(request *IVirtualBox_createAppliance) (*IVirtualBox_createApplianceResponse, error)

	IVirtualBox_createApplianceContext(ctx context.Context, request *IVirtualBox_createAppliance) (*IVirtualBox_createApplianceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_createUnattendedInstaller(request *IVirtualBox_createUnattendedInstaller) (*IVirtualBox_createUnattendedInstallerResponse, error)

	IVirtualBox_createUnattendedInstallerContext(ctx context.Context, request *IVirtualBox_createUnattendedInstaller) (*IVirtualBox_createUnattendedInstallerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_createMedium(request *IVirtualBox_createMedium) (*IVirtualBox_createMediumResponse, error)

	IVirtualBox_createMediumContext(ctx context.Context, request *IVirtualBox_createMedium) (*IVirtualBox_createMediumResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_openMedium(request *IVirtualBox_openMedium) (*IVirtualBox_openMediumResponse, error)

	IVirtualBox_openMediumContext(ctx context.Context, request *IVirtualBox_openMedium) (*IVirtualBox_openMediumResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getGuestOSType(request *IVirtualBox_getGuestOSType) (*IVirtualBox_getGuestOSTypeResponse, error)

	IVirtualBox_getGuestOSTypeContext(ctx context.Context, request *IVirtualBox_getGuestOSType) (*IVirtualBox_getGuestOSTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_createSharedFolder(request *IVirtualBox_createSharedFolder) (*IVirtualBox_createSharedFolderResponse, error)

	IVirtualBox_createSharedFolderContext(ctx context.Context, request *IVirtualBox_createSharedFolder) (*IVirtualBox_createSharedFolderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_removeSharedFolder(request *IVirtualBox_removeSharedFolder) (*IVirtualBox_removeSharedFolderResponse, error)

	IVirtualBox_removeSharedFolderContext(ctx context.Context, request *IVirtualBox_removeSharedFolder) (*IVirtualBox_removeSharedFolderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getExtraDataKeys(request *IVirtualBox_getExtraDataKeys) (*IVirtualBox_getExtraDataKeysResponse, error)

	IVirtualBox_getExtraDataKeysContext(ctx context.Context, request *IVirtualBox_getExtraDataKeys) (*IVirtualBox_getExtraDataKeysResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_getExtraData(request *IVirtualBox_getExtraData) (*IVirtualBox_getExtraDataResponse, error)

	IVirtualBox_getExtraDataContext(ctx context.Context, request *IVirtualBox_getExtraData) (*IVirtualBox_getExtraDataResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_setExtraData(request *IVirtualBox_setExtraData) (*IVirtualBox_setExtraDataResponse, error)

	IVirtualBox_setExtraDataContext(ctx context.Context, request *IVirtualBox_setExtraData) (*IVirtualBox_setExtraDataResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_setSettingsSecret(request *IVirtualBox_setSettingsSecret) (*IVirtualBox_setSettingsSecretResponse, error)

	IVirtualBox_setSettingsSecretContext(ctx context.Context, request *IVirtualBox_setSettingsSecret) (*IVirtualBox_setSettingsSecretResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_createDHCPServer(request *IVirtualBox_createDHCPServer) (*IVirtualBox_createDHCPServerResponse, error)

	IVirtualBox_createDHCPServerContext(ctx context.Context, request *IVirtualBox_createDHCPServer) (*IVirtualBox_createDHCPServerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_findDHCPServerByNetworkName(request *IVirtualBox_findDHCPServerByNetworkName) (*IVirtualBox_findDHCPServerByNetworkNameResponse, error)

	IVirtualBox_findDHCPServerByNetworkNameContext(ctx context.Context, request *IVirtualBox_findDHCPServerByNetworkName) (*IVirtualBox_findDHCPServerByNetworkNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_removeDHCPServer(request *IVirtualBox_removeDHCPServer) (*IVirtualBox_removeDHCPServerResponse, error)

	IVirtualBox_removeDHCPServerContext(ctx context.Context, request *IVirtualBox_removeDHCPServer) (*IVirtualBox_removeDHCPServerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_createNATNetwork(request *IVirtualBox_createNATNetwork) (*IVirtualBox_createNATNetworkResponse, error)

	IVirtualBox_createNATNetworkContext(ctx context.Context, request *IVirtualBox_createNATNetwork) (*IVirtualBox_createNATNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_findNATNetworkByName(request *IVirtualBox_findNATNetworkByName) (*IVirtualBox_findNATNetworkByNameResponse, error)

	IVirtualBox_findNATNetworkByNameContext(ctx context.Context, request *IVirtualBox_findNATNetworkByName) (*IVirtualBox_findNATNetworkByNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_removeNATNetwork(request *IVirtualBox_removeNATNetwork) (*IVirtualBox_removeNATNetworkResponse, error)

	IVirtualBox_removeNATNetworkContext(ctx context.Context, request *IVirtualBox_removeNATNetwork) (*IVirtualBox_removeNATNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_createHostOnlyNetwork(request *IVirtualBox_createHostOnlyNetwork) (*IVirtualBox_createHostOnlyNetworkResponse, error)

	IVirtualBox_createHostOnlyNetworkContext(ctx context.Context, request *IVirtualBox_createHostOnlyNetwork) (*IVirtualBox_createHostOnlyNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_findHostOnlyNetworkByName(request *IVirtualBox_findHostOnlyNetworkByName) (*IVirtualBox_findHostOnlyNetworkByNameResponse, error)

	IVirtualBox_findHostOnlyNetworkByNameContext(ctx context.Context, request *IVirtualBox_findHostOnlyNetworkByName) (*IVirtualBox_findHostOnlyNetworkByNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_findHostOnlyNetworkById(request *IVirtualBox_findHostOnlyNetworkById) (*IVirtualBox_findHostOnlyNetworkByIdResponse, error)

	IVirtualBox_findHostOnlyNetworkByIdContext(ctx context.Context, request *IVirtualBox_findHostOnlyNetworkById) (*IVirtualBox_findHostOnlyNetworkByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_removeHostOnlyNetwork(request *IVirtualBox_removeHostOnlyNetwork) (*IVirtualBox_removeHostOnlyNetworkResponse, error)

	IVirtualBox_removeHostOnlyNetworkContext(ctx context.Context, request *IVirtualBox_removeHostOnlyNetwork) (*IVirtualBox_removeHostOnlyNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_createCloudNetwork(request *IVirtualBox_createCloudNetwork) (*IVirtualBox_createCloudNetworkResponse, error)

	IVirtualBox_createCloudNetworkContext(ctx context.Context, request *IVirtualBox_createCloudNetwork) (*IVirtualBox_createCloudNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_findCloudNetworkByName(request *IVirtualBox_findCloudNetworkByName) (*IVirtualBox_findCloudNetworkByNameResponse, error)

	IVirtualBox_findCloudNetworkByNameContext(ctx context.Context, request *IVirtualBox_findCloudNetworkByName) (*IVirtualBox_findCloudNetworkByNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_removeCloudNetwork(request *IVirtualBox_removeCloudNetwork) (*IVirtualBox_removeCloudNetworkResponse, error)

	IVirtualBox_removeCloudNetworkContext(ctx context.Context, request *IVirtualBox_removeCloudNetwork) (*IVirtualBox_removeCloudNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_checkFirmwarePresent(request *IVirtualBox_checkFirmwarePresent) (*IVirtualBox_checkFirmwarePresentResponse, error)

	IVirtualBox_checkFirmwarePresentContext(ctx context.Context, request *IVirtualBox_checkFirmwarePresent) (*IVirtualBox_checkFirmwarePresentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualBox_findProgressById(request *IVirtualBox_findProgressById) (*IVirtualBox_findProgressByIdResponse, error)

	IVirtualBox_findProgressByIdContext(ctx context.Context, request *IVirtualBox_findProgressById) (*IVirtualBox_findProgressByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVFSExplorer_getPath(request *IVFSExplorer_getPath) (*IVFSExplorer_getPathResponse, error)

	IVFSExplorer_getPathContext(ctx context.Context, request *IVFSExplorer_getPath) (*IVFSExplorer_getPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVFSExplorer_getType(request *IVFSExplorer_getType) (*IVFSExplorer_getTypeResponse, error)

	IVFSExplorer_getTypeContext(ctx context.Context, request *IVFSExplorer_getType) (*IVFSExplorer_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVFSExplorer_update(request *IVFSExplorer_update) (*IVFSExplorer_updateResponse, error)

	IVFSExplorer_updateContext(ctx context.Context, request *IVFSExplorer_update) (*IVFSExplorer_updateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVFSExplorer_cd(request *IVFSExplorer_cd) (*IVFSExplorer_cdResponse, error)

	IVFSExplorer_cdContext(ctx context.Context, request *IVFSExplorer_cd) (*IVFSExplorer_cdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVFSExplorer_cdUp(request *IVFSExplorer_cdUp) (*IVFSExplorer_cdUpResponse, error)

	IVFSExplorer_cdUpContext(ctx context.Context, request *IVFSExplorer_cdUp) (*IVFSExplorer_cdUpResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVFSExplorer_entryList(request *IVFSExplorer_entryList) (*IVFSExplorer_entryListResponse, error)

	IVFSExplorer_entryListContext(ctx context.Context, request *IVFSExplorer_entryList) (*IVFSExplorer_entryListResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVFSExplorer_exists(request *IVFSExplorer_exists) (*IVFSExplorer_existsResponse, error)

	IVFSExplorer_existsContext(ctx context.Context, request *IVFSExplorer_exists) (*IVFSExplorer_existsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVFSExplorer_remove(request *IVFSExplorer_remove) (*IVFSExplorer_removeResponse, error)

	IVFSExplorer_removeContext(ctx context.Context, request *IVFSExplorer_remove) (*IVFSExplorer_removeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getVersionNumber(request *ICertificate_getVersionNumber) (*ICertificate_getVersionNumberResponse, error)

	ICertificate_getVersionNumberContext(ctx context.Context, request *ICertificate_getVersionNumber) (*ICertificate_getVersionNumberResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getSerialNumber(request *ICertificate_getSerialNumber) (*ICertificate_getSerialNumberResponse, error)

	ICertificate_getSerialNumberContext(ctx context.Context, request *ICertificate_getSerialNumber) (*ICertificate_getSerialNumberResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getSignatureAlgorithmOID(request *ICertificate_getSignatureAlgorithmOID) (*ICertificate_getSignatureAlgorithmOIDResponse, error)

	ICertificate_getSignatureAlgorithmOIDContext(ctx context.Context, request *ICertificate_getSignatureAlgorithmOID) (*ICertificate_getSignatureAlgorithmOIDResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getSignatureAlgorithmName(request *ICertificate_getSignatureAlgorithmName) (*ICertificate_getSignatureAlgorithmNameResponse, error)

	ICertificate_getSignatureAlgorithmNameContext(ctx context.Context, request *ICertificate_getSignatureAlgorithmName) (*ICertificate_getSignatureAlgorithmNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getIssuerName(request *ICertificate_getIssuerName) (*ICertificate_getIssuerNameResponse, error)

	ICertificate_getIssuerNameContext(ctx context.Context, request *ICertificate_getIssuerName) (*ICertificate_getIssuerNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getSubjectName(request *ICertificate_getSubjectName) (*ICertificate_getSubjectNameResponse, error)

	ICertificate_getSubjectNameContext(ctx context.Context, request *ICertificate_getSubjectName) (*ICertificate_getSubjectNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getFriendlyName(request *ICertificate_getFriendlyName) (*ICertificate_getFriendlyNameResponse, error)

	ICertificate_getFriendlyNameContext(ctx context.Context, request *ICertificate_getFriendlyName) (*ICertificate_getFriendlyNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getValidityPeriodNotBefore(request *ICertificate_getValidityPeriodNotBefore) (*ICertificate_getValidityPeriodNotBeforeResponse, error)

	ICertificate_getValidityPeriodNotBeforeContext(ctx context.Context, request *ICertificate_getValidityPeriodNotBefore) (*ICertificate_getValidityPeriodNotBeforeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getValidityPeriodNotAfter(request *ICertificate_getValidityPeriodNotAfter) (*ICertificate_getValidityPeriodNotAfterResponse, error)

	ICertificate_getValidityPeriodNotAfterContext(ctx context.Context, request *ICertificate_getValidityPeriodNotAfter) (*ICertificate_getValidityPeriodNotAfterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getPublicKeyAlgorithmOID(request *ICertificate_getPublicKeyAlgorithmOID) (*ICertificate_getPublicKeyAlgorithmOIDResponse, error)

	ICertificate_getPublicKeyAlgorithmOIDContext(ctx context.Context, request *ICertificate_getPublicKeyAlgorithmOID) (*ICertificate_getPublicKeyAlgorithmOIDResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getPublicKeyAlgorithm(request *ICertificate_getPublicKeyAlgorithm) (*ICertificate_getPublicKeyAlgorithmResponse, error)

	ICertificate_getPublicKeyAlgorithmContext(ctx context.Context, request *ICertificate_getPublicKeyAlgorithm) (*ICertificate_getPublicKeyAlgorithmResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getSubjectPublicKey(request *ICertificate_getSubjectPublicKey) (*ICertificate_getSubjectPublicKeyResponse, error)

	ICertificate_getSubjectPublicKeyContext(ctx context.Context, request *ICertificate_getSubjectPublicKey) (*ICertificate_getSubjectPublicKeyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getIssuerUniqueIdentifier(request *ICertificate_getIssuerUniqueIdentifier) (*ICertificate_getIssuerUniqueIdentifierResponse, error)

	ICertificate_getIssuerUniqueIdentifierContext(ctx context.Context, request *ICertificate_getIssuerUniqueIdentifier) (*ICertificate_getIssuerUniqueIdentifierResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getSubjectUniqueIdentifier(request *ICertificate_getSubjectUniqueIdentifier) (*ICertificate_getSubjectUniqueIdentifierResponse, error)

	ICertificate_getSubjectUniqueIdentifierContext(ctx context.Context, request *ICertificate_getSubjectUniqueIdentifier) (*ICertificate_getSubjectUniqueIdentifierResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getCertificateAuthority(request *ICertificate_getCertificateAuthority) (*ICertificate_getCertificateAuthorityResponse, error)

	ICertificate_getCertificateAuthorityContext(ctx context.Context, request *ICertificate_getCertificateAuthority) (*ICertificate_getCertificateAuthorityResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getKeyUsage(request *ICertificate_getKeyUsage) (*ICertificate_getKeyUsageResponse, error)

	ICertificate_getKeyUsageContext(ctx context.Context, request *ICertificate_getKeyUsage) (*ICertificate_getKeyUsageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getExtendedKeyUsage(request *ICertificate_getExtendedKeyUsage) (*ICertificate_getExtendedKeyUsageResponse, error)

	ICertificate_getExtendedKeyUsageContext(ctx context.Context, request *ICertificate_getExtendedKeyUsage) (*ICertificate_getExtendedKeyUsageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getRawCertData(request *ICertificate_getRawCertData) (*ICertificate_getRawCertDataResponse, error)

	ICertificate_getRawCertDataContext(ctx context.Context, request *ICertificate_getRawCertData) (*ICertificate_getRawCertDataResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getSelfSigned(request *ICertificate_getSelfSigned) (*ICertificate_getSelfSignedResponse, error)

	ICertificate_getSelfSignedContext(ctx context.Context, request *ICertificate_getSelfSigned) (*ICertificate_getSelfSignedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getTrusted(request *ICertificate_getTrusted) (*ICertificate_getTrustedResponse, error)

	ICertificate_getTrustedContext(ctx context.Context, request *ICertificate_getTrusted) (*ICertificate_getTrustedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_getExpired(request *ICertificate_getExpired) (*ICertificate_getExpiredResponse, error)

	ICertificate_getExpiredContext(ctx context.Context, request *ICertificate_getExpired) (*ICertificate_getExpiredResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_isCurrentlyExpired(request *ICertificate_isCurrentlyExpired) (*ICertificate_isCurrentlyExpiredResponse, error)

	ICertificate_isCurrentlyExpiredContext(ctx context.Context, request *ICertificate_isCurrentlyExpired) (*ICertificate_isCurrentlyExpiredResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICertificate_queryInfo(request *ICertificate_queryInfo) (*ICertificate_queryInfoResponse, error)

	ICertificate_queryInfoContext(ctx context.Context, request *ICertificate_queryInfo) (*ICertificate_queryInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_getPath(request *IAppliance_getPath) (*IAppliance_getPathResponse, error)

	IAppliance_getPathContext(ctx context.Context, request *IAppliance_getPath) (*IAppliance_getPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_getDisks(request *IAppliance_getDisks) (*IAppliance_getDisksResponse, error)

	IAppliance_getDisksContext(ctx context.Context, request *IAppliance_getDisks) (*IAppliance_getDisksResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_getVirtualSystemDescriptions(request *IAppliance_getVirtualSystemDescriptions) (*IAppliance_getVirtualSystemDescriptionsResponse, error)

	IAppliance_getVirtualSystemDescriptionsContext(ctx context.Context, request *IAppliance_getVirtualSystemDescriptions) (*IAppliance_getVirtualSystemDescriptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_getMachines(request *IAppliance_getMachines) (*IAppliance_getMachinesResponse, error)

	IAppliance_getMachinesContext(ctx context.Context, request *IAppliance_getMachines) (*IAppliance_getMachinesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_getCertificate(request *IAppliance_getCertificate) (*IAppliance_getCertificateResponse, error)

	IAppliance_getCertificateContext(ctx context.Context, request *IAppliance_getCertificate) (*IAppliance_getCertificateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_read(request *IAppliance_read) (*IAppliance_readResponse, error)

	IAppliance_readContext(ctx context.Context, request *IAppliance_read) (*IAppliance_readResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_interpret(request *IAppliance_interpret) (*IAppliance_interpretResponse, error)

	IAppliance_interpretContext(ctx context.Context, request *IAppliance_interpret) (*IAppliance_interpretResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_importMachines(request *IAppliance_importMachines) (*IAppliance_importMachinesResponse, error)

	IAppliance_importMachinesContext(ctx context.Context, request *IAppliance_importMachines) (*IAppliance_importMachinesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_createVFSExplorer(request *IAppliance_createVFSExplorer) (*IAppliance_createVFSExplorerResponse, error)

	IAppliance_createVFSExplorerContext(ctx context.Context, request *IAppliance_createVFSExplorer) (*IAppliance_createVFSExplorerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_write(request *IAppliance_write) (*IAppliance_writeResponse, error)

	IAppliance_writeContext(ctx context.Context, request *IAppliance_write) (*IAppliance_writeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_getWarnings(request *IAppliance_getWarnings) (*IAppliance_getWarningsResponse, error)

	IAppliance_getWarningsContext(ctx context.Context, request *IAppliance_getWarnings) (*IAppliance_getWarningsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_getPasswordIds(request *IAppliance_getPasswordIds) (*IAppliance_getPasswordIdsResponse, error)

	IAppliance_getPasswordIdsContext(ctx context.Context, request *IAppliance_getPasswordIds) (*IAppliance_getPasswordIdsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_getMediumIdsForPasswordId(request *IAppliance_getMediumIdsForPasswordId) (*IAppliance_getMediumIdsForPasswordIdResponse, error)

	IAppliance_getMediumIdsForPasswordIdContext(ctx context.Context, request *IAppliance_getMediumIdsForPasswordId) (*IAppliance_getMediumIdsForPasswordIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_addPasswords(request *IAppliance_addPasswords) (*IAppliance_addPasswordsResponse, error)

	IAppliance_addPasswordsContext(ctx context.Context, request *IAppliance_addPasswords) (*IAppliance_addPasswordsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAppliance_createVirtualSystemDescriptions(request *IAppliance_createVirtualSystemDescriptions) (*IAppliance_createVirtualSystemDescriptionsResponse, error)

	IAppliance_createVirtualSystemDescriptionsContext(ctx context.Context, request *IAppliance_createVirtualSystemDescriptions) (*IAppliance_createVirtualSystemDescriptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualSystemDescription_getCount(request *IVirtualSystemDescription_getCount) (*IVirtualSystemDescription_getCountResponse, error)

	IVirtualSystemDescription_getCountContext(ctx context.Context, request *IVirtualSystemDescription_getCount) (*IVirtualSystemDescription_getCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualSystemDescription_getDescription(request *IVirtualSystemDescription_getDescription) (*IVirtualSystemDescription_getDescriptionResponse, error)

	IVirtualSystemDescription_getDescriptionContext(ctx context.Context, request *IVirtualSystemDescription_getDescription) (*IVirtualSystemDescription_getDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualSystemDescription_getDescriptionByType(request *IVirtualSystemDescription_getDescriptionByType) (*IVirtualSystemDescription_getDescriptionByTypeResponse, error)

	IVirtualSystemDescription_getDescriptionByTypeContext(ctx context.Context, request *IVirtualSystemDescription_getDescriptionByType) (*IVirtualSystemDescription_getDescriptionByTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualSystemDescription_removeDescriptionByType(request *IVirtualSystemDescription_removeDescriptionByType) (*IVirtualSystemDescription_removeDescriptionByTypeResponse, error)

	IVirtualSystemDescription_removeDescriptionByTypeContext(ctx context.Context, request *IVirtualSystemDescription_removeDescriptionByType) (*IVirtualSystemDescription_removeDescriptionByTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualSystemDescription_getValuesByType(request *IVirtualSystemDescription_getValuesByType) (*IVirtualSystemDescription_getValuesByTypeResponse, error)

	IVirtualSystemDescription_getValuesByTypeContext(ctx context.Context, request *IVirtualSystemDescription_getValuesByType) (*IVirtualSystemDescription_getValuesByTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualSystemDescription_setFinalValues(request *IVirtualSystemDescription_setFinalValues) (*IVirtualSystemDescription_setFinalValuesResponse, error)

	IVirtualSystemDescription_setFinalValuesContext(ctx context.Context, request *IVirtualSystemDescription_setFinalValues) (*IVirtualSystemDescription_setFinalValuesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualSystemDescription_addDescription(request *IVirtualSystemDescription_addDescription) (*IVirtualSystemDescription_addDescriptionResponse, error)

	IVirtualSystemDescription_addDescriptionContext(ctx context.Context, request *IVirtualSystemDescription_addDescription) (*IVirtualSystemDescription_addDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getIsoPath(request *IUnattended_getIsoPath) (*IUnattended_getIsoPathResponse, error)

	IUnattended_getIsoPathContext(ctx context.Context, request *IUnattended_getIsoPath) (*IUnattended_getIsoPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setIsoPath(request *IUnattended_setIsoPath) (*IUnattended_setIsoPathResponse, error)

	IUnattended_setIsoPathContext(ctx context.Context, request *IUnattended_setIsoPath) (*IUnattended_setIsoPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getMachine(request *IUnattended_getMachine) (*IUnattended_getMachineResponse, error)

	IUnattended_getMachineContext(ctx context.Context, request *IUnattended_getMachine) (*IUnattended_getMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setMachine(request *IUnattended_setMachine) (*IUnattended_setMachineResponse, error)

	IUnattended_setMachineContext(ctx context.Context, request *IUnattended_setMachine) (*IUnattended_setMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getUser(request *IUnattended_getUser) (*IUnattended_getUserResponse, error)

	IUnattended_getUserContext(ctx context.Context, request *IUnattended_getUser) (*IUnattended_getUserResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setUser(request *IUnattended_setUser) (*IUnattended_setUserResponse, error)

	IUnattended_setUserContext(ctx context.Context, request *IUnattended_setUser) (*IUnattended_setUserResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getPassword(request *IUnattended_getPassword) (*IUnattended_getPasswordResponse, error)

	IUnattended_getPasswordContext(ctx context.Context, request *IUnattended_getPassword) (*IUnattended_getPasswordResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setPassword(request *IUnattended_setPassword) (*IUnattended_setPasswordResponse, error)

	IUnattended_setPasswordContext(ctx context.Context, request *IUnattended_setPassword) (*IUnattended_setPasswordResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getFullUserName(request *IUnattended_getFullUserName) (*IUnattended_getFullUserNameResponse, error)

	IUnattended_getFullUserNameContext(ctx context.Context, request *IUnattended_getFullUserName) (*IUnattended_getFullUserNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setFullUserName(request *IUnattended_setFullUserName) (*IUnattended_setFullUserNameResponse, error)

	IUnattended_setFullUserNameContext(ctx context.Context, request *IUnattended_setFullUserName) (*IUnattended_setFullUserNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getProductKey(request *IUnattended_getProductKey) (*IUnattended_getProductKeyResponse, error)

	IUnattended_getProductKeyContext(ctx context.Context, request *IUnattended_getProductKey) (*IUnattended_getProductKeyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setProductKey(request *IUnattended_setProductKey) (*IUnattended_setProductKeyResponse, error)

	IUnattended_setProductKeyContext(ctx context.Context, request *IUnattended_setProductKey) (*IUnattended_setProductKeyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getAdditionsIsoPath(request *IUnattended_getAdditionsIsoPath) (*IUnattended_getAdditionsIsoPathResponse, error)

	IUnattended_getAdditionsIsoPathContext(ctx context.Context, request *IUnattended_getAdditionsIsoPath) (*IUnattended_getAdditionsIsoPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setAdditionsIsoPath(request *IUnattended_setAdditionsIsoPath) (*IUnattended_setAdditionsIsoPathResponse, error)

	IUnattended_setAdditionsIsoPathContext(ctx context.Context, request *IUnattended_setAdditionsIsoPath) (*IUnattended_setAdditionsIsoPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getInstallGuestAdditions(request *IUnattended_getInstallGuestAdditions) (*IUnattended_getInstallGuestAdditionsResponse, error)

	IUnattended_getInstallGuestAdditionsContext(ctx context.Context, request *IUnattended_getInstallGuestAdditions) (*IUnattended_getInstallGuestAdditionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setInstallGuestAdditions(request *IUnattended_setInstallGuestAdditions) (*IUnattended_setInstallGuestAdditionsResponse, error)

	IUnattended_setInstallGuestAdditionsContext(ctx context.Context, request *IUnattended_setInstallGuestAdditions) (*IUnattended_setInstallGuestAdditionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getValidationKitIsoPath(request *IUnattended_getValidationKitIsoPath) (*IUnattended_getValidationKitIsoPathResponse, error)

	IUnattended_getValidationKitIsoPathContext(ctx context.Context, request *IUnattended_getValidationKitIsoPath) (*IUnattended_getValidationKitIsoPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setValidationKitIsoPath(request *IUnattended_setValidationKitIsoPath) (*IUnattended_setValidationKitIsoPathResponse, error)

	IUnattended_setValidationKitIsoPathContext(ctx context.Context, request *IUnattended_setValidationKitIsoPath) (*IUnattended_setValidationKitIsoPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getInstallTestExecService(request *IUnattended_getInstallTestExecService) (*IUnattended_getInstallTestExecServiceResponse, error)

	IUnattended_getInstallTestExecServiceContext(ctx context.Context, request *IUnattended_getInstallTestExecService) (*IUnattended_getInstallTestExecServiceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setInstallTestExecService(request *IUnattended_setInstallTestExecService) (*IUnattended_setInstallTestExecServiceResponse, error)

	IUnattended_setInstallTestExecServiceContext(ctx context.Context, request *IUnattended_setInstallTestExecService) (*IUnattended_setInstallTestExecServiceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getTimeZone(request *IUnattended_getTimeZone) (*IUnattended_getTimeZoneResponse, error)

	IUnattended_getTimeZoneContext(ctx context.Context, request *IUnattended_getTimeZone) (*IUnattended_getTimeZoneResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setTimeZone(request *IUnattended_setTimeZone) (*IUnattended_setTimeZoneResponse, error)

	IUnattended_setTimeZoneContext(ctx context.Context, request *IUnattended_setTimeZone) (*IUnattended_setTimeZoneResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getLocale(request *IUnattended_getLocale) (*IUnattended_getLocaleResponse, error)

	IUnattended_getLocaleContext(ctx context.Context, request *IUnattended_getLocale) (*IUnattended_getLocaleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setLocale(request *IUnattended_setLocale) (*IUnattended_setLocaleResponse, error)

	IUnattended_setLocaleContext(ctx context.Context, request *IUnattended_setLocale) (*IUnattended_setLocaleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getLanguage(request *IUnattended_getLanguage) (*IUnattended_getLanguageResponse, error)

	IUnattended_getLanguageContext(ctx context.Context, request *IUnattended_getLanguage) (*IUnattended_getLanguageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setLanguage(request *IUnattended_setLanguage) (*IUnattended_setLanguageResponse, error)

	IUnattended_setLanguageContext(ctx context.Context, request *IUnattended_setLanguage) (*IUnattended_setLanguageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getCountry(request *IUnattended_getCountry) (*IUnattended_getCountryResponse, error)

	IUnattended_getCountryContext(ctx context.Context, request *IUnattended_getCountry) (*IUnattended_getCountryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setCountry(request *IUnattended_setCountry) (*IUnattended_setCountryResponse, error)

	IUnattended_setCountryContext(ctx context.Context, request *IUnattended_setCountry) (*IUnattended_setCountryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getProxy(request *IUnattended_getProxy) (*IUnattended_getProxyResponse, error)

	IUnattended_getProxyContext(ctx context.Context, request *IUnattended_getProxy) (*IUnattended_getProxyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setProxy(request *IUnattended_setProxy) (*IUnattended_setProxyResponse, error)

	IUnattended_setProxyContext(ctx context.Context, request *IUnattended_setProxy) (*IUnattended_setProxyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getPackageSelectionAdjustments(request *IUnattended_getPackageSelectionAdjustments) (*IUnattended_getPackageSelectionAdjustmentsResponse, error)

	IUnattended_getPackageSelectionAdjustmentsContext(ctx context.Context, request *IUnattended_getPackageSelectionAdjustments) (*IUnattended_getPackageSelectionAdjustmentsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setPackageSelectionAdjustments(request *IUnattended_setPackageSelectionAdjustments) (*IUnattended_setPackageSelectionAdjustmentsResponse, error)

	IUnattended_setPackageSelectionAdjustmentsContext(ctx context.Context, request *IUnattended_setPackageSelectionAdjustments) (*IUnattended_setPackageSelectionAdjustmentsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getHostname(request *IUnattended_getHostname) (*IUnattended_getHostnameResponse, error)

	IUnattended_getHostnameContext(ctx context.Context, request *IUnattended_getHostname) (*IUnattended_getHostnameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setHostname(request *IUnattended_setHostname) (*IUnattended_setHostnameResponse, error)

	IUnattended_setHostnameContext(ctx context.Context, request *IUnattended_setHostname) (*IUnattended_setHostnameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getAuxiliaryBasePath(request *IUnattended_getAuxiliaryBasePath) (*IUnattended_getAuxiliaryBasePathResponse, error)

	IUnattended_getAuxiliaryBasePathContext(ctx context.Context, request *IUnattended_getAuxiliaryBasePath) (*IUnattended_getAuxiliaryBasePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setAuxiliaryBasePath(request *IUnattended_setAuxiliaryBasePath) (*IUnattended_setAuxiliaryBasePathResponse, error)

	IUnattended_setAuxiliaryBasePathContext(ctx context.Context, request *IUnattended_setAuxiliaryBasePath) (*IUnattended_setAuxiliaryBasePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getImageIndex(request *IUnattended_getImageIndex) (*IUnattended_getImageIndexResponse, error)

	IUnattended_getImageIndexContext(ctx context.Context, request *IUnattended_getImageIndex) (*IUnattended_getImageIndexResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setImageIndex(request *IUnattended_setImageIndex) (*IUnattended_setImageIndexResponse, error)

	IUnattended_setImageIndexContext(ctx context.Context, request *IUnattended_setImageIndex) (*IUnattended_setImageIndexResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getScriptTemplatePath(request *IUnattended_getScriptTemplatePath) (*IUnattended_getScriptTemplatePathResponse, error)

	IUnattended_getScriptTemplatePathContext(ctx context.Context, request *IUnattended_getScriptTemplatePath) (*IUnattended_getScriptTemplatePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setScriptTemplatePath(request *IUnattended_setScriptTemplatePath) (*IUnattended_setScriptTemplatePathResponse, error)

	IUnattended_setScriptTemplatePathContext(ctx context.Context, request *IUnattended_setScriptTemplatePath) (*IUnattended_setScriptTemplatePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getPostInstallScriptTemplatePath(request *IUnattended_getPostInstallScriptTemplatePath) (*IUnattended_getPostInstallScriptTemplatePathResponse, error)

	IUnattended_getPostInstallScriptTemplatePathContext(ctx context.Context, request *IUnattended_getPostInstallScriptTemplatePath) (*IUnattended_getPostInstallScriptTemplatePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setPostInstallScriptTemplatePath(request *IUnattended_setPostInstallScriptTemplatePath) (*IUnattended_setPostInstallScriptTemplatePathResponse, error)

	IUnattended_setPostInstallScriptTemplatePathContext(ctx context.Context, request *IUnattended_setPostInstallScriptTemplatePath) (*IUnattended_setPostInstallScriptTemplatePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getPostInstallCommand(request *IUnattended_getPostInstallCommand) (*IUnattended_getPostInstallCommandResponse, error)

	IUnattended_getPostInstallCommandContext(ctx context.Context, request *IUnattended_getPostInstallCommand) (*IUnattended_getPostInstallCommandResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setPostInstallCommand(request *IUnattended_setPostInstallCommand) (*IUnattended_setPostInstallCommandResponse, error)

	IUnattended_setPostInstallCommandContext(ctx context.Context, request *IUnattended_setPostInstallCommand) (*IUnattended_setPostInstallCommandResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getExtraInstallKernelParameters(request *IUnattended_getExtraInstallKernelParameters) (*IUnattended_getExtraInstallKernelParametersResponse, error)

	IUnattended_getExtraInstallKernelParametersContext(ctx context.Context, request *IUnattended_getExtraInstallKernelParameters) (*IUnattended_getExtraInstallKernelParametersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setExtraInstallKernelParameters(request *IUnattended_setExtraInstallKernelParameters) (*IUnattended_setExtraInstallKernelParametersResponse, error)

	IUnattended_setExtraInstallKernelParametersContext(ctx context.Context, request *IUnattended_setExtraInstallKernelParameters) (*IUnattended_setExtraInstallKernelParametersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getDetectedOSTypeId(request *IUnattended_getDetectedOSTypeId) (*IUnattended_getDetectedOSTypeIdResponse, error)

	IUnattended_getDetectedOSTypeIdContext(ctx context.Context, request *IUnattended_getDetectedOSTypeId) (*IUnattended_getDetectedOSTypeIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getDetectedOSVersion(request *IUnattended_getDetectedOSVersion) (*IUnattended_getDetectedOSVersionResponse, error)

	IUnattended_getDetectedOSVersionContext(ctx context.Context, request *IUnattended_getDetectedOSVersion) (*IUnattended_getDetectedOSVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getDetectedOSFlavor(request *IUnattended_getDetectedOSFlavor) (*IUnattended_getDetectedOSFlavorResponse, error)

	IUnattended_getDetectedOSFlavorContext(ctx context.Context, request *IUnattended_getDetectedOSFlavor) (*IUnattended_getDetectedOSFlavorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getDetectedOSLanguages(request *IUnattended_getDetectedOSLanguages) (*IUnattended_getDetectedOSLanguagesResponse, error)

	IUnattended_getDetectedOSLanguagesContext(ctx context.Context, request *IUnattended_getDetectedOSLanguages) (*IUnattended_getDetectedOSLanguagesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getDetectedOSHints(request *IUnattended_getDetectedOSHints) (*IUnattended_getDetectedOSHintsResponse, error)

	IUnattended_getDetectedOSHintsContext(ctx context.Context, request *IUnattended_getDetectedOSHints) (*IUnattended_getDetectedOSHintsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getDetectedImageNames(request *IUnattended_getDetectedImageNames) (*IUnattended_getDetectedImageNamesResponse, error)

	IUnattended_getDetectedImageNamesContext(ctx context.Context, request *IUnattended_getDetectedImageNames) (*IUnattended_getDetectedImageNamesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getDetectedImageIndices(request *IUnattended_getDetectedImageIndices) (*IUnattended_getDetectedImageIndicesResponse, error)

	IUnattended_getDetectedImageIndicesContext(ctx context.Context, request *IUnattended_getDetectedImageIndices) (*IUnattended_getDetectedImageIndicesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getIsUnattendedInstallSupported(request *IUnattended_getIsUnattendedInstallSupported) (*IUnattended_getIsUnattendedInstallSupportedResponse, error)

	IUnattended_getIsUnattendedInstallSupportedContext(ctx context.Context, request *IUnattended_getIsUnattendedInstallSupported) (*IUnattended_getIsUnattendedInstallSupportedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_getAvoidUpdatesOverNetwork(request *IUnattended_getAvoidUpdatesOverNetwork) (*IUnattended_getAvoidUpdatesOverNetworkResponse, error)

	IUnattended_getAvoidUpdatesOverNetworkContext(ctx context.Context, request *IUnattended_getAvoidUpdatesOverNetwork) (*IUnattended_getAvoidUpdatesOverNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_setAvoidUpdatesOverNetwork(request *IUnattended_setAvoidUpdatesOverNetwork) (*IUnattended_setAvoidUpdatesOverNetworkResponse, error)

	IUnattended_setAvoidUpdatesOverNetworkContext(ctx context.Context, request *IUnattended_setAvoidUpdatesOverNetwork) (*IUnattended_setAvoidUpdatesOverNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_detectIsoOS(request *IUnattended_detectIsoOS) (*IUnattended_detectIsoOSResponse, error)

	IUnattended_detectIsoOSContext(ctx context.Context, request *IUnattended_detectIsoOS) (*IUnattended_detectIsoOSResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_prepare(request *IUnattended_prepare) (*IUnattended_prepareResponse, error)

	IUnattended_prepareContext(ctx context.Context, request *IUnattended_prepare) (*IUnattended_prepareResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_constructMedia(request *IUnattended_constructMedia) (*IUnattended_constructMediaResponse, error)

	IUnattended_constructMediaContext(ctx context.Context, request *IUnattended_constructMedia) (*IUnattended_constructMediaResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_reconfigureVM(request *IUnattended_reconfigureVM) (*IUnattended_reconfigureVMResponse, error)

	IUnattended_reconfigureVMContext(ctx context.Context, request *IUnattended_reconfigureVM) (*IUnattended_reconfigureVMResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUnattended_done(request *IUnattended_done) (*IUnattended_doneResponse, error)

	IUnattended_doneContext(ctx context.Context, request *IUnattended_done) (*IUnattended_doneResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGraphicsAdapter_getGraphicsControllerType(request *IGraphicsAdapter_getGraphicsControllerType) (*IGraphicsAdapter_getGraphicsControllerTypeResponse, error)

	IGraphicsAdapter_getGraphicsControllerTypeContext(ctx context.Context, request *IGraphicsAdapter_getGraphicsControllerType) (*IGraphicsAdapter_getGraphicsControllerTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGraphicsAdapter_setGraphicsControllerType(request *IGraphicsAdapter_setGraphicsControllerType) (*IGraphicsAdapter_setGraphicsControllerTypeResponse, error)

	IGraphicsAdapter_setGraphicsControllerTypeContext(ctx context.Context, request *IGraphicsAdapter_setGraphicsControllerType) (*IGraphicsAdapter_setGraphicsControllerTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGraphicsAdapter_getVRAMSize(request *IGraphicsAdapter_getVRAMSize) (*IGraphicsAdapter_getVRAMSizeResponse, error)

	IGraphicsAdapter_getVRAMSizeContext(ctx context.Context, request *IGraphicsAdapter_getVRAMSize) (*IGraphicsAdapter_getVRAMSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGraphicsAdapter_setVRAMSize(request *IGraphicsAdapter_setVRAMSize) (*IGraphicsAdapter_setVRAMSizeResponse, error)

	IGraphicsAdapter_setVRAMSizeContext(ctx context.Context, request *IGraphicsAdapter_setVRAMSize) (*IGraphicsAdapter_setVRAMSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGraphicsAdapter_getAccelerate3DEnabled(request *IGraphicsAdapter_getAccelerate3DEnabled) (*IGraphicsAdapter_getAccelerate3DEnabledResponse, error)

	IGraphicsAdapter_getAccelerate3DEnabledContext(ctx context.Context, request *IGraphicsAdapter_getAccelerate3DEnabled) (*IGraphicsAdapter_getAccelerate3DEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGraphicsAdapter_setAccelerate3DEnabled(request *IGraphicsAdapter_setAccelerate3DEnabled) (*IGraphicsAdapter_setAccelerate3DEnabledResponse, error)

	IGraphicsAdapter_setAccelerate3DEnabledContext(ctx context.Context, request *IGraphicsAdapter_setAccelerate3DEnabled) (*IGraphicsAdapter_setAccelerate3DEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGraphicsAdapter_getAccelerate2DVideoEnabled(request *IGraphicsAdapter_getAccelerate2DVideoEnabled) (*IGraphicsAdapter_getAccelerate2DVideoEnabledResponse, error)

	IGraphicsAdapter_getAccelerate2DVideoEnabledContext(ctx context.Context, request *IGraphicsAdapter_getAccelerate2DVideoEnabled) (*IGraphicsAdapter_getAccelerate2DVideoEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGraphicsAdapter_setAccelerate2DVideoEnabled(request *IGraphicsAdapter_setAccelerate2DVideoEnabled) (*IGraphicsAdapter_setAccelerate2DVideoEnabledResponse, error)

	IGraphicsAdapter_setAccelerate2DVideoEnabledContext(ctx context.Context, request *IGraphicsAdapter_setAccelerate2DVideoEnabled) (*IGraphicsAdapter_setAccelerate2DVideoEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGraphicsAdapter_getMonitorCount(request *IGraphicsAdapter_getMonitorCount) (*IGraphicsAdapter_getMonitorCountResponse, error)

	IGraphicsAdapter_getMonitorCountContext(ctx context.Context, request *IGraphicsAdapter_getMonitorCount) (*IGraphicsAdapter_getMonitorCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGraphicsAdapter_setMonitorCount(request *IGraphicsAdapter_setMonitorCount) (*IGraphicsAdapter_setMonitorCountResponse, error)

	IGraphicsAdapter_setMonitorCountContext(ctx context.Context, request *IGraphicsAdapter_setMonitorCount) (*IGraphicsAdapter_setMonitorCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_getLogoFadeIn(request *IBIOSSettings_getLogoFadeIn) (*IBIOSSettings_getLogoFadeInResponse, error)

	IBIOSSettings_getLogoFadeInContext(ctx context.Context, request *IBIOSSettings_getLogoFadeIn) (*IBIOSSettings_getLogoFadeInResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_setLogoFadeIn(request *IBIOSSettings_setLogoFadeIn) (*IBIOSSettings_setLogoFadeInResponse, error)

	IBIOSSettings_setLogoFadeInContext(ctx context.Context, request *IBIOSSettings_setLogoFadeIn) (*IBIOSSettings_setLogoFadeInResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_getLogoFadeOut(request *IBIOSSettings_getLogoFadeOut) (*IBIOSSettings_getLogoFadeOutResponse, error)

	IBIOSSettings_getLogoFadeOutContext(ctx context.Context, request *IBIOSSettings_getLogoFadeOut) (*IBIOSSettings_getLogoFadeOutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_setLogoFadeOut(request *IBIOSSettings_setLogoFadeOut) (*IBIOSSettings_setLogoFadeOutResponse, error)

	IBIOSSettings_setLogoFadeOutContext(ctx context.Context, request *IBIOSSettings_setLogoFadeOut) (*IBIOSSettings_setLogoFadeOutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_getLogoDisplayTime(request *IBIOSSettings_getLogoDisplayTime) (*IBIOSSettings_getLogoDisplayTimeResponse, error)

	IBIOSSettings_getLogoDisplayTimeContext(ctx context.Context, request *IBIOSSettings_getLogoDisplayTime) (*IBIOSSettings_getLogoDisplayTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_setLogoDisplayTime(request *IBIOSSettings_setLogoDisplayTime) (*IBIOSSettings_setLogoDisplayTimeResponse, error)

	IBIOSSettings_setLogoDisplayTimeContext(ctx context.Context, request *IBIOSSettings_setLogoDisplayTime) (*IBIOSSettings_setLogoDisplayTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_getLogoImagePath(request *IBIOSSettings_getLogoImagePath) (*IBIOSSettings_getLogoImagePathResponse, error)

	IBIOSSettings_getLogoImagePathContext(ctx context.Context, request *IBIOSSettings_getLogoImagePath) (*IBIOSSettings_getLogoImagePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_setLogoImagePath(request *IBIOSSettings_setLogoImagePath) (*IBIOSSettings_setLogoImagePathResponse, error)

	IBIOSSettings_setLogoImagePathContext(ctx context.Context, request *IBIOSSettings_setLogoImagePath) (*IBIOSSettings_setLogoImagePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_getBootMenuMode(request *IBIOSSettings_getBootMenuMode) (*IBIOSSettings_getBootMenuModeResponse, error)

	IBIOSSettings_getBootMenuModeContext(ctx context.Context, request *IBIOSSettings_getBootMenuMode) (*IBIOSSettings_getBootMenuModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_setBootMenuMode(request *IBIOSSettings_setBootMenuMode) (*IBIOSSettings_setBootMenuModeResponse, error)

	IBIOSSettings_setBootMenuModeContext(ctx context.Context, request *IBIOSSettings_setBootMenuMode) (*IBIOSSettings_setBootMenuModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_getACPIEnabled(request *IBIOSSettings_getACPIEnabled) (*IBIOSSettings_getACPIEnabledResponse, error)

	IBIOSSettings_getACPIEnabledContext(ctx context.Context, request *IBIOSSettings_getACPIEnabled) (*IBIOSSettings_getACPIEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_setACPIEnabled(request *IBIOSSettings_setACPIEnabled) (*IBIOSSettings_setACPIEnabledResponse, error)

	IBIOSSettings_setACPIEnabledContext(ctx context.Context, request *IBIOSSettings_setACPIEnabled) (*IBIOSSettings_setACPIEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_getIOAPICEnabled(request *IBIOSSettings_getIOAPICEnabled) (*IBIOSSettings_getIOAPICEnabledResponse, error)

	IBIOSSettings_getIOAPICEnabledContext(ctx context.Context, request *IBIOSSettings_getIOAPICEnabled) (*IBIOSSettings_getIOAPICEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_setIOAPICEnabled(request *IBIOSSettings_setIOAPICEnabled) (*IBIOSSettings_setIOAPICEnabledResponse, error)

	IBIOSSettings_setIOAPICEnabledContext(ctx context.Context, request *IBIOSSettings_setIOAPICEnabled) (*IBIOSSettings_setIOAPICEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_getAPICMode(request *IBIOSSettings_getAPICMode) (*IBIOSSettings_getAPICModeResponse, error)

	IBIOSSettings_getAPICModeContext(ctx context.Context, request *IBIOSSettings_getAPICMode) (*IBIOSSettings_getAPICModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_setAPICMode(request *IBIOSSettings_setAPICMode) (*IBIOSSettings_setAPICModeResponse, error)

	IBIOSSettings_setAPICModeContext(ctx context.Context, request *IBIOSSettings_setAPICMode) (*IBIOSSettings_setAPICModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_getTimeOffset(request *IBIOSSettings_getTimeOffset) (*IBIOSSettings_getTimeOffsetResponse, error)

	IBIOSSettings_getTimeOffsetContext(ctx context.Context, request *IBIOSSettings_getTimeOffset) (*IBIOSSettings_getTimeOffsetResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_setTimeOffset(request *IBIOSSettings_setTimeOffset) (*IBIOSSettings_setTimeOffsetResponse, error)

	IBIOSSettings_setTimeOffsetContext(ctx context.Context, request *IBIOSSettings_setTimeOffset) (*IBIOSSettings_setTimeOffsetResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_getPXEDebugEnabled(request *IBIOSSettings_getPXEDebugEnabled) (*IBIOSSettings_getPXEDebugEnabledResponse, error)

	IBIOSSettings_getPXEDebugEnabledContext(ctx context.Context, request *IBIOSSettings_getPXEDebugEnabled) (*IBIOSSettings_getPXEDebugEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_setPXEDebugEnabled(request *IBIOSSettings_setPXEDebugEnabled) (*IBIOSSettings_setPXEDebugEnabledResponse, error)

	IBIOSSettings_setPXEDebugEnabledContext(ctx context.Context, request *IBIOSSettings_setPXEDebugEnabled) (*IBIOSSettings_setPXEDebugEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_getSMBIOSUuidLittleEndian(request *IBIOSSettings_getSMBIOSUuidLittleEndian) (*IBIOSSettings_getSMBIOSUuidLittleEndianResponse, error)

	IBIOSSettings_getSMBIOSUuidLittleEndianContext(ctx context.Context, request *IBIOSSettings_getSMBIOSUuidLittleEndian) (*IBIOSSettings_getSMBIOSUuidLittleEndianResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBIOSSettings_setSMBIOSUuidLittleEndian(request *IBIOSSettings_setSMBIOSUuidLittleEndian) (*IBIOSSettings_setSMBIOSUuidLittleEndianResponse, error)

	IBIOSSettings_setSMBIOSUuidLittleEndianContext(ctx context.Context, request *IBIOSSettings_setSMBIOSUuidLittleEndian) (*IBIOSSettings_setSMBIOSUuidLittleEndianResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ITrustedPlatformModule_getType(request *ITrustedPlatformModule_getType) (*ITrustedPlatformModule_getTypeResponse, error)

	ITrustedPlatformModule_getTypeContext(ctx context.Context, request *ITrustedPlatformModule_getType) (*ITrustedPlatformModule_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ITrustedPlatformModule_setType(request *ITrustedPlatformModule_setType) (*ITrustedPlatformModule_setTypeResponse, error)

	ITrustedPlatformModule_setTypeContext(ctx context.Context, request *ITrustedPlatformModule_setType) (*ITrustedPlatformModule_setTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ITrustedPlatformModule_getLocation(request *ITrustedPlatformModule_getLocation) (*ITrustedPlatformModule_getLocationResponse, error)

	ITrustedPlatformModule_getLocationContext(ctx context.Context, request *ITrustedPlatformModule_getLocation) (*ITrustedPlatformModule_getLocationResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ITrustedPlatformModule_setLocation(request *ITrustedPlatformModule_setLocation) (*ITrustedPlatformModule_setLocationResponse, error)

	ITrustedPlatformModule_setLocationContext(ctx context.Context, request *ITrustedPlatformModule_setLocation) (*ITrustedPlatformModule_setLocationResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getId(request *IRecordingScreenSettings_getId) (*IRecordingScreenSettings_getIdResponse, error)

	IRecordingScreenSettings_getIdContext(ctx context.Context, request *IRecordingScreenSettings_getId) (*IRecordingScreenSettings_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getEnabled(request *IRecordingScreenSettings_getEnabled) (*IRecordingScreenSettings_getEnabledResponse, error)

	IRecordingScreenSettings_getEnabledContext(ctx context.Context, request *IRecordingScreenSettings_getEnabled) (*IRecordingScreenSettings_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setEnabled(request *IRecordingScreenSettings_setEnabled) (*IRecordingScreenSettings_setEnabledResponse, error)

	IRecordingScreenSettings_setEnabledContext(ctx context.Context, request *IRecordingScreenSettings_setEnabled) (*IRecordingScreenSettings_setEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getFeatures(request *IRecordingScreenSettings_getFeatures) (*IRecordingScreenSettings_getFeaturesResponse, error)

	IRecordingScreenSettings_getFeaturesContext(ctx context.Context, request *IRecordingScreenSettings_getFeatures) (*IRecordingScreenSettings_getFeaturesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setFeatures(request *IRecordingScreenSettings_setFeatures) (*IRecordingScreenSettings_setFeaturesResponse, error)

	IRecordingScreenSettings_setFeaturesContext(ctx context.Context, request *IRecordingScreenSettings_setFeatures) (*IRecordingScreenSettings_setFeaturesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getDestination(request *IRecordingScreenSettings_getDestination) (*IRecordingScreenSettings_getDestinationResponse, error)

	IRecordingScreenSettings_getDestinationContext(ctx context.Context, request *IRecordingScreenSettings_getDestination) (*IRecordingScreenSettings_getDestinationResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setDestination(request *IRecordingScreenSettings_setDestination) (*IRecordingScreenSettings_setDestinationResponse, error)

	IRecordingScreenSettings_setDestinationContext(ctx context.Context, request *IRecordingScreenSettings_setDestination) (*IRecordingScreenSettings_setDestinationResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getFilename(request *IRecordingScreenSettings_getFilename) (*IRecordingScreenSettings_getFilenameResponse, error)

	IRecordingScreenSettings_getFilenameContext(ctx context.Context, request *IRecordingScreenSettings_getFilename) (*IRecordingScreenSettings_getFilenameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setFilename(request *IRecordingScreenSettings_setFilename) (*IRecordingScreenSettings_setFilenameResponse, error)

	IRecordingScreenSettings_setFilenameContext(ctx context.Context, request *IRecordingScreenSettings_setFilename) (*IRecordingScreenSettings_setFilenameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getMaxTime(request *IRecordingScreenSettings_getMaxTime) (*IRecordingScreenSettings_getMaxTimeResponse, error)

	IRecordingScreenSettings_getMaxTimeContext(ctx context.Context, request *IRecordingScreenSettings_getMaxTime) (*IRecordingScreenSettings_getMaxTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setMaxTime(request *IRecordingScreenSettings_setMaxTime) (*IRecordingScreenSettings_setMaxTimeResponse, error)

	IRecordingScreenSettings_setMaxTimeContext(ctx context.Context, request *IRecordingScreenSettings_setMaxTime) (*IRecordingScreenSettings_setMaxTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getMaxFileSize(request *IRecordingScreenSettings_getMaxFileSize) (*IRecordingScreenSettings_getMaxFileSizeResponse, error)

	IRecordingScreenSettings_getMaxFileSizeContext(ctx context.Context, request *IRecordingScreenSettings_getMaxFileSize) (*IRecordingScreenSettings_getMaxFileSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setMaxFileSize(request *IRecordingScreenSettings_setMaxFileSize) (*IRecordingScreenSettings_setMaxFileSizeResponse, error)

	IRecordingScreenSettings_setMaxFileSizeContext(ctx context.Context, request *IRecordingScreenSettings_setMaxFileSize) (*IRecordingScreenSettings_setMaxFileSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getOptions(request *IRecordingScreenSettings_getOptions) (*IRecordingScreenSettings_getOptionsResponse, error)

	IRecordingScreenSettings_getOptionsContext(ctx context.Context, request *IRecordingScreenSettings_getOptions) (*IRecordingScreenSettings_getOptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setOptions(request *IRecordingScreenSettings_setOptions) (*IRecordingScreenSettings_setOptionsResponse, error)

	IRecordingScreenSettings_setOptionsContext(ctx context.Context, request *IRecordingScreenSettings_setOptions) (*IRecordingScreenSettings_setOptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getAudioCodec(request *IRecordingScreenSettings_getAudioCodec) (*IRecordingScreenSettings_getAudioCodecResponse, error)

	IRecordingScreenSettings_getAudioCodecContext(ctx context.Context, request *IRecordingScreenSettings_getAudioCodec) (*IRecordingScreenSettings_getAudioCodecResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setAudioCodec(request *IRecordingScreenSettings_setAudioCodec) (*IRecordingScreenSettings_setAudioCodecResponse, error)

	IRecordingScreenSettings_setAudioCodecContext(ctx context.Context, request *IRecordingScreenSettings_setAudioCodec) (*IRecordingScreenSettings_setAudioCodecResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getAudioRateControlMode(request *IRecordingScreenSettings_getAudioRateControlMode) (*IRecordingScreenSettings_getAudioRateControlModeResponse, error)

	IRecordingScreenSettings_getAudioRateControlModeContext(ctx context.Context, request *IRecordingScreenSettings_getAudioRateControlMode) (*IRecordingScreenSettings_getAudioRateControlModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setAudioRateControlMode(request *IRecordingScreenSettings_setAudioRateControlMode) (*IRecordingScreenSettings_setAudioRateControlModeResponse, error)

	IRecordingScreenSettings_setAudioRateControlModeContext(ctx context.Context, request *IRecordingScreenSettings_setAudioRateControlMode) (*IRecordingScreenSettings_setAudioRateControlModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getAudioDeadline(request *IRecordingScreenSettings_getAudioDeadline) (*IRecordingScreenSettings_getAudioDeadlineResponse, error)

	IRecordingScreenSettings_getAudioDeadlineContext(ctx context.Context, request *IRecordingScreenSettings_getAudioDeadline) (*IRecordingScreenSettings_getAudioDeadlineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setAudioDeadline(request *IRecordingScreenSettings_setAudioDeadline) (*IRecordingScreenSettings_setAudioDeadlineResponse, error)

	IRecordingScreenSettings_setAudioDeadlineContext(ctx context.Context, request *IRecordingScreenSettings_setAudioDeadline) (*IRecordingScreenSettings_setAudioDeadlineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getAudioHz(request *IRecordingScreenSettings_getAudioHz) (*IRecordingScreenSettings_getAudioHzResponse, error)

	IRecordingScreenSettings_getAudioHzContext(ctx context.Context, request *IRecordingScreenSettings_getAudioHz) (*IRecordingScreenSettings_getAudioHzResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setAudioHz(request *IRecordingScreenSettings_setAudioHz) (*IRecordingScreenSettings_setAudioHzResponse, error)

	IRecordingScreenSettings_setAudioHzContext(ctx context.Context, request *IRecordingScreenSettings_setAudioHz) (*IRecordingScreenSettings_setAudioHzResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getAudioBits(request *IRecordingScreenSettings_getAudioBits) (*IRecordingScreenSettings_getAudioBitsResponse, error)

	IRecordingScreenSettings_getAudioBitsContext(ctx context.Context, request *IRecordingScreenSettings_getAudioBits) (*IRecordingScreenSettings_getAudioBitsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setAudioBits(request *IRecordingScreenSettings_setAudioBits) (*IRecordingScreenSettings_setAudioBitsResponse, error)

	IRecordingScreenSettings_setAudioBitsContext(ctx context.Context, request *IRecordingScreenSettings_setAudioBits) (*IRecordingScreenSettings_setAudioBitsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getAudioChannels(request *IRecordingScreenSettings_getAudioChannels) (*IRecordingScreenSettings_getAudioChannelsResponse, error)

	IRecordingScreenSettings_getAudioChannelsContext(ctx context.Context, request *IRecordingScreenSettings_getAudioChannels) (*IRecordingScreenSettings_getAudioChannelsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setAudioChannels(request *IRecordingScreenSettings_setAudioChannels) (*IRecordingScreenSettings_setAudioChannelsResponse, error)

	IRecordingScreenSettings_setAudioChannelsContext(ctx context.Context, request *IRecordingScreenSettings_setAudioChannels) (*IRecordingScreenSettings_setAudioChannelsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getVideoCodec(request *IRecordingScreenSettings_getVideoCodec) (*IRecordingScreenSettings_getVideoCodecResponse, error)

	IRecordingScreenSettings_getVideoCodecContext(ctx context.Context, request *IRecordingScreenSettings_getVideoCodec) (*IRecordingScreenSettings_getVideoCodecResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setVideoCodec(request *IRecordingScreenSettings_setVideoCodec) (*IRecordingScreenSettings_setVideoCodecResponse, error)

	IRecordingScreenSettings_setVideoCodecContext(ctx context.Context, request *IRecordingScreenSettings_setVideoCodec) (*IRecordingScreenSettings_setVideoCodecResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getVideoDeadline(request *IRecordingScreenSettings_getVideoDeadline) (*IRecordingScreenSettings_getVideoDeadlineResponse, error)

	IRecordingScreenSettings_getVideoDeadlineContext(ctx context.Context, request *IRecordingScreenSettings_getVideoDeadline) (*IRecordingScreenSettings_getVideoDeadlineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setVideoDeadline(request *IRecordingScreenSettings_setVideoDeadline) (*IRecordingScreenSettings_setVideoDeadlineResponse, error)

	IRecordingScreenSettings_setVideoDeadlineContext(ctx context.Context, request *IRecordingScreenSettings_setVideoDeadline) (*IRecordingScreenSettings_setVideoDeadlineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getVideoWidth(request *IRecordingScreenSettings_getVideoWidth) (*IRecordingScreenSettings_getVideoWidthResponse, error)

	IRecordingScreenSettings_getVideoWidthContext(ctx context.Context, request *IRecordingScreenSettings_getVideoWidth) (*IRecordingScreenSettings_getVideoWidthResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setVideoWidth(request *IRecordingScreenSettings_setVideoWidth) (*IRecordingScreenSettings_setVideoWidthResponse, error)

	IRecordingScreenSettings_setVideoWidthContext(ctx context.Context, request *IRecordingScreenSettings_setVideoWidth) (*IRecordingScreenSettings_setVideoWidthResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getVideoHeight(request *IRecordingScreenSettings_getVideoHeight) (*IRecordingScreenSettings_getVideoHeightResponse, error)

	IRecordingScreenSettings_getVideoHeightContext(ctx context.Context, request *IRecordingScreenSettings_getVideoHeight) (*IRecordingScreenSettings_getVideoHeightResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setVideoHeight(request *IRecordingScreenSettings_setVideoHeight) (*IRecordingScreenSettings_setVideoHeightResponse, error)

	IRecordingScreenSettings_setVideoHeightContext(ctx context.Context, request *IRecordingScreenSettings_setVideoHeight) (*IRecordingScreenSettings_setVideoHeightResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getVideoRate(request *IRecordingScreenSettings_getVideoRate) (*IRecordingScreenSettings_getVideoRateResponse, error)

	IRecordingScreenSettings_getVideoRateContext(ctx context.Context, request *IRecordingScreenSettings_getVideoRate) (*IRecordingScreenSettings_getVideoRateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setVideoRate(request *IRecordingScreenSettings_setVideoRate) (*IRecordingScreenSettings_setVideoRateResponse, error)

	IRecordingScreenSettings_setVideoRateContext(ctx context.Context, request *IRecordingScreenSettings_setVideoRate) (*IRecordingScreenSettings_setVideoRateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getVideoRateControlMode(request *IRecordingScreenSettings_getVideoRateControlMode) (*IRecordingScreenSettings_getVideoRateControlModeResponse, error)

	IRecordingScreenSettings_getVideoRateControlModeContext(ctx context.Context, request *IRecordingScreenSettings_getVideoRateControlMode) (*IRecordingScreenSettings_getVideoRateControlModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setVideoRateControlMode(request *IRecordingScreenSettings_setVideoRateControlMode) (*IRecordingScreenSettings_setVideoRateControlModeResponse, error)

	IRecordingScreenSettings_setVideoRateControlModeContext(ctx context.Context, request *IRecordingScreenSettings_setVideoRateControlMode) (*IRecordingScreenSettings_setVideoRateControlModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getVideoFPS(request *IRecordingScreenSettings_getVideoFPS) (*IRecordingScreenSettings_getVideoFPSResponse, error)

	IRecordingScreenSettings_getVideoFPSContext(ctx context.Context, request *IRecordingScreenSettings_getVideoFPS) (*IRecordingScreenSettings_getVideoFPSResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setVideoFPS(request *IRecordingScreenSettings_setVideoFPS) (*IRecordingScreenSettings_setVideoFPSResponse, error)

	IRecordingScreenSettings_setVideoFPSContext(ctx context.Context, request *IRecordingScreenSettings_setVideoFPS) (*IRecordingScreenSettings_setVideoFPSResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_getVideoScalingMode(request *IRecordingScreenSettings_getVideoScalingMode) (*IRecordingScreenSettings_getVideoScalingModeResponse, error)

	IRecordingScreenSettings_getVideoScalingModeContext(ctx context.Context, request *IRecordingScreenSettings_getVideoScalingMode) (*IRecordingScreenSettings_getVideoScalingModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_setVideoScalingMode(request *IRecordingScreenSettings_setVideoScalingMode) (*IRecordingScreenSettings_setVideoScalingModeResponse, error)

	IRecordingScreenSettings_setVideoScalingModeContext(ctx context.Context, request *IRecordingScreenSettings_setVideoScalingMode) (*IRecordingScreenSettings_setVideoScalingModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingScreenSettings_isFeatureEnabled(request *IRecordingScreenSettings_isFeatureEnabled) (*IRecordingScreenSettings_isFeatureEnabledResponse, error)

	IRecordingScreenSettings_isFeatureEnabledContext(ctx context.Context, request *IRecordingScreenSettings_isFeatureEnabled) (*IRecordingScreenSettings_isFeatureEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingSettings_getEnabled(request *IRecordingSettings_getEnabled) (*IRecordingSettings_getEnabledResponse, error)

	IRecordingSettings_getEnabledContext(ctx context.Context, request *IRecordingSettings_getEnabled) (*IRecordingSettings_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingSettings_setEnabled(request *IRecordingSettings_setEnabled) (*IRecordingSettings_setEnabledResponse, error)

	IRecordingSettings_setEnabledContext(ctx context.Context, request *IRecordingSettings_setEnabled) (*IRecordingSettings_setEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingSettings_getScreens(request *IRecordingSettings_getScreens) (*IRecordingSettings_getScreensResponse, error)

	IRecordingSettings_getScreensContext(ctx context.Context, request *IRecordingSettings_getScreens) (*IRecordingSettings_getScreensResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingSettings_getScreenSettings(request *IRecordingSettings_getScreenSettings) (*IRecordingSettings_getScreenSettingsResponse, error)

	IRecordingSettings_getScreenSettingsContext(ctx context.Context, request *IRecordingSettings_getScreenSettings) (*IRecordingSettings_getScreenSettingsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPCIAddress_getBus(request *IPCIAddress_getBus) (*IPCIAddress_getBusResponse, error)

	IPCIAddress_getBusContext(ctx context.Context, request *IPCIAddress_getBus) (*IPCIAddress_getBusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPCIAddress_setBus(request *IPCIAddress_setBus) (*IPCIAddress_setBusResponse, error)

	IPCIAddress_setBusContext(ctx context.Context, request *IPCIAddress_setBus) (*IPCIAddress_setBusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPCIAddress_getDevice(request *IPCIAddress_getDevice) (*IPCIAddress_getDeviceResponse, error)

	IPCIAddress_getDeviceContext(ctx context.Context, request *IPCIAddress_getDevice) (*IPCIAddress_getDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPCIAddress_setDevice(request *IPCIAddress_setDevice) (*IPCIAddress_setDeviceResponse, error)

	IPCIAddress_setDeviceContext(ctx context.Context, request *IPCIAddress_setDevice) (*IPCIAddress_setDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPCIAddress_getDevFunction(request *IPCIAddress_getDevFunction) (*IPCIAddress_getDevFunctionResponse, error)

	IPCIAddress_getDevFunctionContext(ctx context.Context, request *IPCIAddress_getDevFunction) (*IPCIAddress_getDevFunctionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPCIAddress_setDevFunction(request *IPCIAddress_setDevFunction) (*IPCIAddress_setDevFunctionResponse, error)

	IPCIAddress_setDevFunctionContext(ctx context.Context, request *IPCIAddress_setDevFunction) (*IPCIAddress_setDevFunctionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPCIAddress_asLong(request *IPCIAddress_asLong) (*IPCIAddress_asLongResponse, error)

	IPCIAddress_asLongContext(ctx context.Context, request *IPCIAddress_asLong) (*IPCIAddress_asLongResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPCIAddress_fromLong(request *IPCIAddress_fromLong) (*IPCIAddress_fromLongResponse, error)

	IPCIAddress_fromLongContext(ctx context.Context, request *IPCIAddress_fromLong) (*IPCIAddress_fromLongResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_getSecureBootEnabled(request *IUefiVariableStore_getSecureBootEnabled) (*IUefiVariableStore_getSecureBootEnabledResponse, error)

	IUefiVariableStore_getSecureBootEnabledContext(ctx context.Context, request *IUefiVariableStore_getSecureBootEnabled) (*IUefiVariableStore_getSecureBootEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_setSecureBootEnabled(request *IUefiVariableStore_setSecureBootEnabled) (*IUefiVariableStore_setSecureBootEnabledResponse, error)

	IUefiVariableStore_setSecureBootEnabledContext(ctx context.Context, request *IUefiVariableStore_setSecureBootEnabled) (*IUefiVariableStore_setSecureBootEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_addVariable(request *IUefiVariableStore_addVariable) (*IUefiVariableStore_addVariableResponse, error)

	IUefiVariableStore_addVariableContext(ctx context.Context, request *IUefiVariableStore_addVariable) (*IUefiVariableStore_addVariableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_deleteVariable(request *IUefiVariableStore_deleteVariable) (*IUefiVariableStore_deleteVariableResponse, error)

	IUefiVariableStore_deleteVariableContext(ctx context.Context, request *IUefiVariableStore_deleteVariable) (*IUefiVariableStore_deleteVariableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_changeVariable(request *IUefiVariableStore_changeVariable) (*IUefiVariableStore_changeVariableResponse, error)

	IUefiVariableStore_changeVariableContext(ctx context.Context, request *IUefiVariableStore_changeVariable) (*IUefiVariableStore_changeVariableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_queryVariableByName(request *IUefiVariableStore_queryVariableByName) (*IUefiVariableStore_queryVariableByNameResponse, error)

	IUefiVariableStore_queryVariableByNameContext(ctx context.Context, request *IUefiVariableStore_queryVariableByName) (*IUefiVariableStore_queryVariableByNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_queryVariables(request *IUefiVariableStore_queryVariables) (*IUefiVariableStore_queryVariablesResponse, error)

	IUefiVariableStore_queryVariablesContext(ctx context.Context, request *IUefiVariableStore_queryVariables) (*IUefiVariableStore_queryVariablesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_enrollOraclePlatformKey(request *IUefiVariableStore_enrollOraclePlatformKey) (*IUefiVariableStore_enrollOraclePlatformKeyResponse, error)

	IUefiVariableStore_enrollOraclePlatformKeyContext(ctx context.Context, request *IUefiVariableStore_enrollOraclePlatformKey) (*IUefiVariableStore_enrollOraclePlatformKeyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_enrollPlatformKey(request *IUefiVariableStore_enrollPlatformKey) (*IUefiVariableStore_enrollPlatformKeyResponse, error)

	IUefiVariableStore_enrollPlatformKeyContext(ctx context.Context, request *IUefiVariableStore_enrollPlatformKey) (*IUefiVariableStore_enrollPlatformKeyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_addKek(request *IUefiVariableStore_addKek) (*IUefiVariableStore_addKekResponse, error)

	IUefiVariableStore_addKekContext(ctx context.Context, request *IUefiVariableStore_addKek) (*IUefiVariableStore_addKekResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_addSignatureToDb(request *IUefiVariableStore_addSignatureToDb) (*IUefiVariableStore_addSignatureToDbResponse, error)

	IUefiVariableStore_addSignatureToDbContext(ctx context.Context, request *IUefiVariableStore_addSignatureToDb) (*IUefiVariableStore_addSignatureToDbResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_addSignatureToDbx(request *IUefiVariableStore_addSignatureToDbx) (*IUefiVariableStore_addSignatureToDbxResponse, error)

	IUefiVariableStore_addSignatureToDbxContext(ctx context.Context, request *IUefiVariableStore_addSignatureToDbx) (*IUefiVariableStore_addSignatureToDbxResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_enrollDefaultMsSignatures(request *IUefiVariableStore_enrollDefaultMsSignatures) (*IUefiVariableStore_enrollDefaultMsSignaturesResponse, error)

	IUefiVariableStore_enrollDefaultMsSignaturesContext(ctx context.Context, request *IUefiVariableStore_enrollDefaultMsSignatures) (*IUefiVariableStore_enrollDefaultMsSignaturesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUefiVariableStore_addSignatureToMok(request *IUefiVariableStore_addSignatureToMok) (*IUefiVariableStore_addSignatureToMokResponse, error)

	IUefiVariableStore_addSignatureToMokContext(ctx context.Context, request *IUefiVariableStore_addSignatureToMok) (*IUefiVariableStore_addSignatureToMokResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INvramStore_getNonVolatileStorageFile(request *INvramStore_getNonVolatileStorageFile) (*INvramStore_getNonVolatileStorageFileResponse, error)

	INvramStore_getNonVolatileStorageFileContext(ctx context.Context, request *INvramStore_getNonVolatileStorageFile) (*INvramStore_getNonVolatileStorageFileResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INvramStore_getUefiVariableStore(request *INvramStore_getUefiVariableStore) (*INvramStore_getUefiVariableStoreResponse, error)

	INvramStore_getUefiVariableStoreContext(ctx context.Context, request *INvramStore_getUefiVariableStore) (*INvramStore_getUefiVariableStoreResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INvramStore_getKeyId(request *INvramStore_getKeyId) (*INvramStore_getKeyIdResponse, error)

	INvramStore_getKeyIdContext(ctx context.Context, request *INvramStore_getKeyId) (*INvramStore_getKeyIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INvramStore_getKeyStore(request *INvramStore_getKeyStore) (*INvramStore_getKeyStoreResponse, error)

	INvramStore_getKeyStoreContext(ctx context.Context, request *INvramStore_getKeyStore) (*INvramStore_getKeyStoreResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INvramStore_initUefiVariableStore(request *INvramStore_initUefiVariableStore) (*INvramStore_initUefiVariableStoreResponse, error)

	INvramStore_initUefiVariableStoreContext(ctx context.Context, request *INvramStore_initUefiVariableStore) (*INvramStore_initUefiVariableStoreResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getParent(request *IMachine_getParent) (*IMachine_getParentResponse, error)

	IMachine_getParentContext(ctx context.Context, request *IMachine_getParent) (*IMachine_getParentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getIcon(request *IMachine_getIcon) (*IMachine_getIconResponse, error)

	IMachine_getIconContext(ctx context.Context, request *IMachine_getIcon) (*IMachine_getIconResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setIcon(request *IMachine_setIcon) (*IMachine_setIconResponse, error)

	IMachine_setIconContext(ctx context.Context, request *IMachine_setIcon) (*IMachine_setIconResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getAccessible(request *IMachine_getAccessible) (*IMachine_getAccessibleResponse, error)

	IMachine_getAccessibleContext(ctx context.Context, request *IMachine_getAccessible) (*IMachine_getAccessibleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getAccessError(request *IMachine_getAccessError) (*IMachine_getAccessErrorResponse, error)

	IMachine_getAccessErrorContext(ctx context.Context, request *IMachine_getAccessError) (*IMachine_getAccessErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getName(request *IMachine_getName) (*IMachine_getNameResponse, error)

	IMachine_getNameContext(ctx context.Context, request *IMachine_getName) (*IMachine_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setName(request *IMachine_setName) (*IMachine_setNameResponse, error)

	IMachine_setNameContext(ctx context.Context, request *IMachine_setName) (*IMachine_setNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getDescription(request *IMachine_getDescription) (*IMachine_getDescriptionResponse, error)

	IMachine_getDescriptionContext(ctx context.Context, request *IMachine_getDescription) (*IMachine_getDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setDescription(request *IMachine_setDescription) (*IMachine_setDescriptionResponse, error)

	IMachine_setDescriptionContext(ctx context.Context, request *IMachine_setDescription) (*IMachine_setDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getId(request *IMachine_getId) (*IMachine_getIdResponse, error)

	IMachine_getIdContext(ctx context.Context, request *IMachine_getId) (*IMachine_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getGroups(request *IMachine_getGroups) (*IMachine_getGroupsResponse, error)

	IMachine_getGroupsContext(ctx context.Context, request *IMachine_getGroups) (*IMachine_getGroupsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setGroups(request *IMachine_setGroups) (*IMachine_setGroupsResponse, error)

	IMachine_setGroupsContext(ctx context.Context, request *IMachine_setGroups) (*IMachine_setGroupsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getOSTypeId(request *IMachine_getOSTypeId) (*IMachine_getOSTypeIdResponse, error)

	IMachine_getOSTypeIdContext(ctx context.Context, request *IMachine_getOSTypeId) (*IMachine_getOSTypeIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setOSTypeId(request *IMachine_setOSTypeId) (*IMachine_setOSTypeIdResponse, error)

	IMachine_setOSTypeIdContext(ctx context.Context, request *IMachine_setOSTypeId) (*IMachine_setOSTypeIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getHardwareVersion(request *IMachine_getHardwareVersion) (*IMachine_getHardwareVersionResponse, error)

	IMachine_getHardwareVersionContext(ctx context.Context, request *IMachine_getHardwareVersion) (*IMachine_getHardwareVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setHardwareVersion(request *IMachine_setHardwareVersion) (*IMachine_setHardwareVersionResponse, error)

	IMachine_setHardwareVersionContext(ctx context.Context, request *IMachine_setHardwareVersion) (*IMachine_setHardwareVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getHardwareUUID(request *IMachine_getHardwareUUID) (*IMachine_getHardwareUUIDResponse, error)

	IMachine_getHardwareUUIDContext(ctx context.Context, request *IMachine_getHardwareUUID) (*IMachine_getHardwareUUIDResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setHardwareUUID(request *IMachine_setHardwareUUID) (*IMachine_setHardwareUUIDResponse, error)

	IMachine_setHardwareUUIDContext(ctx context.Context, request *IMachine_setHardwareUUID) (*IMachine_setHardwareUUIDResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getCPUCount(request *IMachine_getCPUCount) (*IMachine_getCPUCountResponse, error)

	IMachine_getCPUCountContext(ctx context.Context, request *IMachine_getCPUCount) (*IMachine_getCPUCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setCPUCount(request *IMachine_setCPUCount) (*IMachine_setCPUCountResponse, error)

	IMachine_setCPUCountContext(ctx context.Context, request *IMachine_setCPUCount) (*IMachine_setCPUCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getCPUHotPlugEnabled(request *IMachine_getCPUHotPlugEnabled) (*IMachine_getCPUHotPlugEnabledResponse, error)

	IMachine_getCPUHotPlugEnabledContext(ctx context.Context, request *IMachine_getCPUHotPlugEnabled) (*IMachine_getCPUHotPlugEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setCPUHotPlugEnabled(request *IMachine_setCPUHotPlugEnabled) (*IMachine_setCPUHotPlugEnabledResponse, error)

	IMachine_setCPUHotPlugEnabledContext(ctx context.Context, request *IMachine_setCPUHotPlugEnabled) (*IMachine_setCPUHotPlugEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getCPUExecutionCap(request *IMachine_getCPUExecutionCap) (*IMachine_getCPUExecutionCapResponse, error)

	IMachine_getCPUExecutionCapContext(ctx context.Context, request *IMachine_getCPUExecutionCap) (*IMachine_getCPUExecutionCapResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setCPUExecutionCap(request *IMachine_setCPUExecutionCap) (*IMachine_setCPUExecutionCapResponse, error)

	IMachine_setCPUExecutionCapContext(ctx context.Context, request *IMachine_setCPUExecutionCap) (*IMachine_setCPUExecutionCapResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getCPUIDPortabilityLevel(request *IMachine_getCPUIDPortabilityLevel) (*IMachine_getCPUIDPortabilityLevelResponse, error)

	IMachine_getCPUIDPortabilityLevelContext(ctx context.Context, request *IMachine_getCPUIDPortabilityLevel) (*IMachine_getCPUIDPortabilityLevelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setCPUIDPortabilityLevel(request *IMachine_setCPUIDPortabilityLevel) (*IMachine_setCPUIDPortabilityLevelResponse, error)

	IMachine_setCPUIDPortabilityLevelContext(ctx context.Context, request *IMachine_setCPUIDPortabilityLevel) (*IMachine_setCPUIDPortabilityLevelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getMemorySize(request *IMachine_getMemorySize) (*IMachine_getMemorySizeResponse, error)

	IMachine_getMemorySizeContext(ctx context.Context, request *IMachine_getMemorySize) (*IMachine_getMemorySizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setMemorySize(request *IMachine_setMemorySize) (*IMachine_setMemorySizeResponse, error)

	IMachine_setMemorySizeContext(ctx context.Context, request *IMachine_setMemorySize) (*IMachine_setMemorySizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getMemoryBalloonSize(request *IMachine_getMemoryBalloonSize) (*IMachine_getMemoryBalloonSizeResponse, error)

	IMachine_getMemoryBalloonSizeContext(ctx context.Context, request *IMachine_getMemoryBalloonSize) (*IMachine_getMemoryBalloonSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setMemoryBalloonSize(request *IMachine_setMemoryBalloonSize) (*IMachine_setMemoryBalloonSizeResponse, error)

	IMachine_setMemoryBalloonSizeContext(ctx context.Context, request *IMachine_setMemoryBalloonSize) (*IMachine_setMemoryBalloonSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getPageFusionEnabled(request *IMachine_getPageFusionEnabled) (*IMachine_getPageFusionEnabledResponse, error)

	IMachine_getPageFusionEnabledContext(ctx context.Context, request *IMachine_getPageFusionEnabled) (*IMachine_getPageFusionEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setPageFusionEnabled(request *IMachine_setPageFusionEnabled) (*IMachine_setPageFusionEnabledResponse, error)

	IMachine_setPageFusionEnabledContext(ctx context.Context, request *IMachine_setPageFusionEnabled) (*IMachine_setPageFusionEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getGraphicsAdapter(request *IMachine_getGraphicsAdapter) (*IMachine_getGraphicsAdapterResponse, error)

	IMachine_getGraphicsAdapterContext(ctx context.Context, request *IMachine_getGraphicsAdapter) (*IMachine_getGraphicsAdapterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getBIOSSettings(request *IMachine_getBIOSSettings) (*IMachine_getBIOSSettingsResponse, error)

	IMachine_getBIOSSettingsContext(ctx context.Context, request *IMachine_getBIOSSettings) (*IMachine_getBIOSSettingsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getTrustedPlatformModule(request *IMachine_getTrustedPlatformModule) (*IMachine_getTrustedPlatformModuleResponse, error)

	IMachine_getTrustedPlatformModuleContext(ctx context.Context, request *IMachine_getTrustedPlatformModule) (*IMachine_getTrustedPlatformModuleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getNonVolatileStore(request *IMachine_getNonVolatileStore) (*IMachine_getNonVolatileStoreResponse, error)

	IMachine_getNonVolatileStoreContext(ctx context.Context, request *IMachine_getNonVolatileStore) (*IMachine_getNonVolatileStoreResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getRecordingSettings(request *IMachine_getRecordingSettings) (*IMachine_getRecordingSettingsResponse, error)

	IMachine_getRecordingSettingsContext(ctx context.Context, request *IMachine_getRecordingSettings) (*IMachine_getRecordingSettingsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getFirmwareType(request *IMachine_getFirmwareType) (*IMachine_getFirmwareTypeResponse, error)

	IMachine_getFirmwareTypeContext(ctx context.Context, request *IMachine_getFirmwareType) (*IMachine_getFirmwareTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setFirmwareType(request *IMachine_setFirmwareType) (*IMachine_setFirmwareTypeResponse, error)

	IMachine_setFirmwareTypeContext(ctx context.Context, request *IMachine_setFirmwareType) (*IMachine_setFirmwareTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getPointingHIDType(request *IMachine_getPointingHIDType) (*IMachine_getPointingHIDTypeResponse, error)

	IMachine_getPointingHIDTypeContext(ctx context.Context, request *IMachine_getPointingHIDType) (*IMachine_getPointingHIDTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setPointingHIDType(request *IMachine_setPointingHIDType) (*IMachine_setPointingHIDTypeResponse, error)

	IMachine_setPointingHIDTypeContext(ctx context.Context, request *IMachine_setPointingHIDType) (*IMachine_setPointingHIDTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getKeyboardHIDType(request *IMachine_getKeyboardHIDType) (*IMachine_getKeyboardHIDTypeResponse, error)

	IMachine_getKeyboardHIDTypeContext(ctx context.Context, request *IMachine_getKeyboardHIDType) (*IMachine_getKeyboardHIDTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setKeyboardHIDType(request *IMachine_setKeyboardHIDType) (*IMachine_setKeyboardHIDTypeResponse, error)

	IMachine_setKeyboardHIDTypeContext(ctx context.Context, request *IMachine_setKeyboardHIDType) (*IMachine_setKeyboardHIDTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getHPETEnabled(request *IMachine_getHPETEnabled) (*IMachine_getHPETEnabledResponse, error)

	IMachine_getHPETEnabledContext(ctx context.Context, request *IMachine_getHPETEnabled) (*IMachine_getHPETEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setHPETEnabled(request *IMachine_setHPETEnabled) (*IMachine_setHPETEnabledResponse, error)

	IMachine_setHPETEnabledContext(ctx context.Context, request *IMachine_setHPETEnabled) (*IMachine_setHPETEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getChipsetType(request *IMachine_getChipsetType) (*IMachine_getChipsetTypeResponse, error)

	IMachine_getChipsetTypeContext(ctx context.Context, request *IMachine_getChipsetType) (*IMachine_getChipsetTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setChipsetType(request *IMachine_setChipsetType) (*IMachine_setChipsetTypeResponse, error)

	IMachine_setChipsetTypeContext(ctx context.Context, request *IMachine_setChipsetType) (*IMachine_setChipsetTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getIommuType(request *IMachine_getIommuType) (*IMachine_getIommuTypeResponse, error)

	IMachine_getIommuTypeContext(ctx context.Context, request *IMachine_getIommuType) (*IMachine_getIommuTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setIommuType(request *IMachine_setIommuType) (*IMachine_setIommuTypeResponse, error)

	IMachine_setIommuTypeContext(ctx context.Context, request *IMachine_setIommuType) (*IMachine_setIommuTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getSnapshotFolder(request *IMachine_getSnapshotFolder) (*IMachine_getSnapshotFolderResponse, error)

	IMachine_getSnapshotFolderContext(ctx context.Context, request *IMachine_getSnapshotFolder) (*IMachine_getSnapshotFolderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setSnapshotFolder(request *IMachine_setSnapshotFolder) (*IMachine_setSnapshotFolderResponse, error)

	IMachine_setSnapshotFolderContext(ctx context.Context, request *IMachine_setSnapshotFolder) (*IMachine_setSnapshotFolderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getVRDEServer(request *IMachine_getVRDEServer) (*IMachine_getVRDEServerResponse, error)

	IMachine_getVRDEServerContext(ctx context.Context, request *IMachine_getVRDEServer) (*IMachine_getVRDEServerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getEmulatedUSBCardReaderEnabled(request *IMachine_getEmulatedUSBCardReaderEnabled) (*IMachine_getEmulatedUSBCardReaderEnabledResponse, error)

	IMachine_getEmulatedUSBCardReaderEnabledContext(ctx context.Context, request *IMachine_getEmulatedUSBCardReaderEnabled) (*IMachine_getEmulatedUSBCardReaderEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setEmulatedUSBCardReaderEnabled(request *IMachine_setEmulatedUSBCardReaderEnabled) (*IMachine_setEmulatedUSBCardReaderEnabledResponse, error)

	IMachine_setEmulatedUSBCardReaderEnabledContext(ctx context.Context, request *IMachine_setEmulatedUSBCardReaderEnabled) (*IMachine_setEmulatedUSBCardReaderEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getMediumAttachments(request *IMachine_getMediumAttachments) (*IMachine_getMediumAttachmentsResponse, error)

	IMachine_getMediumAttachmentsContext(ctx context.Context, request *IMachine_getMediumAttachments) (*IMachine_getMediumAttachmentsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getUSBControllers(request *IMachine_getUSBControllers) (*IMachine_getUSBControllersResponse, error)

	IMachine_getUSBControllersContext(ctx context.Context, request *IMachine_getUSBControllers) (*IMachine_getUSBControllersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getUSBDeviceFilters(request *IMachine_getUSBDeviceFilters) (*IMachine_getUSBDeviceFiltersResponse, error)

	IMachine_getUSBDeviceFiltersContext(ctx context.Context, request *IMachine_getUSBDeviceFilters) (*IMachine_getUSBDeviceFiltersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getAudioSettings(request *IMachine_getAudioSettings) (*IMachine_getAudioSettingsResponse, error)

	IMachine_getAudioSettingsContext(ctx context.Context, request *IMachine_getAudioSettings) (*IMachine_getAudioSettingsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getStorageControllers(request *IMachine_getStorageControllers) (*IMachine_getStorageControllersResponse, error)

	IMachine_getStorageControllersContext(ctx context.Context, request *IMachine_getStorageControllers) (*IMachine_getStorageControllersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getSettingsFilePath(request *IMachine_getSettingsFilePath) (*IMachine_getSettingsFilePathResponse, error)

	IMachine_getSettingsFilePathContext(ctx context.Context, request *IMachine_getSettingsFilePath) (*IMachine_getSettingsFilePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getSettingsAuxFilePath(request *IMachine_getSettingsAuxFilePath) (*IMachine_getSettingsAuxFilePathResponse, error)

	IMachine_getSettingsAuxFilePathContext(ctx context.Context, request *IMachine_getSettingsAuxFilePath) (*IMachine_getSettingsAuxFilePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getSettingsModified(request *IMachine_getSettingsModified) (*IMachine_getSettingsModifiedResponse, error)

	IMachine_getSettingsModifiedContext(ctx context.Context, request *IMachine_getSettingsModified) (*IMachine_getSettingsModifiedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getSessionState(request *IMachine_getSessionState) (*IMachine_getSessionStateResponse, error)

	IMachine_getSessionStateContext(ctx context.Context, request *IMachine_getSessionState) (*IMachine_getSessionStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getSessionName(request *IMachine_getSessionName) (*IMachine_getSessionNameResponse, error)

	IMachine_getSessionNameContext(ctx context.Context, request *IMachine_getSessionName) (*IMachine_getSessionNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getSessionPID(request *IMachine_getSessionPID) (*IMachine_getSessionPIDResponse, error)

	IMachine_getSessionPIDContext(ctx context.Context, request *IMachine_getSessionPID) (*IMachine_getSessionPIDResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getState(request *IMachine_getState) (*IMachine_getStateResponse, error)

	IMachine_getStateContext(ctx context.Context, request *IMachine_getState) (*IMachine_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getLastStateChange(request *IMachine_getLastStateChange) (*IMachine_getLastStateChangeResponse, error)

	IMachine_getLastStateChangeContext(ctx context.Context, request *IMachine_getLastStateChange) (*IMachine_getLastStateChangeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getStateFilePath(request *IMachine_getStateFilePath) (*IMachine_getStateFilePathResponse, error)

	IMachine_getStateFilePathContext(ctx context.Context, request *IMachine_getStateFilePath) (*IMachine_getStateFilePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getLogFolder(request *IMachine_getLogFolder) (*IMachine_getLogFolderResponse, error)

	IMachine_getLogFolderContext(ctx context.Context, request *IMachine_getLogFolder) (*IMachine_getLogFolderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getCurrentSnapshot(request *IMachine_getCurrentSnapshot) (*IMachine_getCurrentSnapshotResponse, error)

	IMachine_getCurrentSnapshotContext(ctx context.Context, request *IMachine_getCurrentSnapshot) (*IMachine_getCurrentSnapshotResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getSnapshotCount(request *IMachine_getSnapshotCount) (*IMachine_getSnapshotCountResponse, error)

	IMachine_getSnapshotCountContext(ctx context.Context, request *IMachine_getSnapshotCount) (*IMachine_getSnapshotCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getCurrentStateModified(request *IMachine_getCurrentStateModified) (*IMachine_getCurrentStateModifiedResponse, error)

	IMachine_getCurrentStateModifiedContext(ctx context.Context, request *IMachine_getCurrentStateModified) (*IMachine_getCurrentStateModifiedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getSharedFolders(request *IMachine_getSharedFolders) (*IMachine_getSharedFoldersResponse, error)

	IMachine_getSharedFoldersContext(ctx context.Context, request *IMachine_getSharedFolders) (*IMachine_getSharedFoldersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getClipboardMode(request *IMachine_getClipboardMode) (*IMachine_getClipboardModeResponse, error)

	IMachine_getClipboardModeContext(ctx context.Context, request *IMachine_getClipboardMode) (*IMachine_getClipboardModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setClipboardMode(request *IMachine_setClipboardMode) (*IMachine_setClipboardModeResponse, error)

	IMachine_setClipboardModeContext(ctx context.Context, request *IMachine_setClipboardMode) (*IMachine_setClipboardModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getClipboardFileTransfersEnabled(request *IMachine_getClipboardFileTransfersEnabled) (*IMachine_getClipboardFileTransfersEnabledResponse, error)

	IMachine_getClipboardFileTransfersEnabledContext(ctx context.Context, request *IMachine_getClipboardFileTransfersEnabled) (*IMachine_getClipboardFileTransfersEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setClipboardFileTransfersEnabled(request *IMachine_setClipboardFileTransfersEnabled) (*IMachine_setClipboardFileTransfersEnabledResponse, error)

	IMachine_setClipboardFileTransfersEnabledContext(ctx context.Context, request *IMachine_setClipboardFileTransfersEnabled) (*IMachine_setClipboardFileTransfersEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getDnDMode(request *IMachine_getDnDMode) (*IMachine_getDnDModeResponse, error)

	IMachine_getDnDModeContext(ctx context.Context, request *IMachine_getDnDMode) (*IMachine_getDnDModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setDnDMode(request *IMachine_setDnDMode) (*IMachine_setDnDModeResponse, error)

	IMachine_setDnDModeContext(ctx context.Context, request *IMachine_setDnDMode) (*IMachine_setDnDModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getTeleporterEnabled(request *IMachine_getTeleporterEnabled) (*IMachine_getTeleporterEnabledResponse, error)

	IMachine_getTeleporterEnabledContext(ctx context.Context, request *IMachine_getTeleporterEnabled) (*IMachine_getTeleporterEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setTeleporterEnabled(request *IMachine_setTeleporterEnabled) (*IMachine_setTeleporterEnabledResponse, error)

	IMachine_setTeleporterEnabledContext(ctx context.Context, request *IMachine_setTeleporterEnabled) (*IMachine_setTeleporterEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getTeleporterPort(request *IMachine_getTeleporterPort) (*IMachine_getTeleporterPortResponse, error)

	IMachine_getTeleporterPortContext(ctx context.Context, request *IMachine_getTeleporterPort) (*IMachine_getTeleporterPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setTeleporterPort(request *IMachine_setTeleporterPort) (*IMachine_setTeleporterPortResponse, error)

	IMachine_setTeleporterPortContext(ctx context.Context, request *IMachine_setTeleporterPort) (*IMachine_setTeleporterPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getTeleporterAddress(request *IMachine_getTeleporterAddress) (*IMachine_getTeleporterAddressResponse, error)

	IMachine_getTeleporterAddressContext(ctx context.Context, request *IMachine_getTeleporterAddress) (*IMachine_getTeleporterAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setTeleporterAddress(request *IMachine_setTeleporterAddress) (*IMachine_setTeleporterAddressResponse, error)

	IMachine_setTeleporterAddressContext(ctx context.Context, request *IMachine_setTeleporterAddress) (*IMachine_setTeleporterAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getTeleporterPassword(request *IMachine_getTeleporterPassword) (*IMachine_getTeleporterPasswordResponse, error)

	IMachine_getTeleporterPasswordContext(ctx context.Context, request *IMachine_getTeleporterPassword) (*IMachine_getTeleporterPasswordResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setTeleporterPassword(request *IMachine_setTeleporterPassword) (*IMachine_setTeleporterPasswordResponse, error)

	IMachine_setTeleporterPasswordContext(ctx context.Context, request *IMachine_setTeleporterPassword) (*IMachine_setTeleporterPasswordResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getParavirtProvider(request *IMachine_getParavirtProvider) (*IMachine_getParavirtProviderResponse, error)

	IMachine_getParavirtProviderContext(ctx context.Context, request *IMachine_getParavirtProvider) (*IMachine_getParavirtProviderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setParavirtProvider(request *IMachine_setParavirtProvider) (*IMachine_setParavirtProviderResponse, error)

	IMachine_setParavirtProviderContext(ctx context.Context, request *IMachine_setParavirtProvider) (*IMachine_setParavirtProviderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getRTCUseUTC(request *IMachine_getRTCUseUTC) (*IMachine_getRTCUseUTCResponse, error)

	IMachine_getRTCUseUTCContext(ctx context.Context, request *IMachine_getRTCUseUTC) (*IMachine_getRTCUseUTCResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setRTCUseUTC(request *IMachine_setRTCUseUTC) (*IMachine_setRTCUseUTCResponse, error)

	IMachine_setRTCUseUTCContext(ctx context.Context, request *IMachine_setRTCUseUTC) (*IMachine_setRTCUseUTCResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getIOCacheEnabled(request *IMachine_getIOCacheEnabled) (*IMachine_getIOCacheEnabledResponse, error)

	IMachine_getIOCacheEnabledContext(ctx context.Context, request *IMachine_getIOCacheEnabled) (*IMachine_getIOCacheEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setIOCacheEnabled(request *IMachine_setIOCacheEnabled) (*IMachine_setIOCacheEnabledResponse, error)

	IMachine_setIOCacheEnabledContext(ctx context.Context, request *IMachine_setIOCacheEnabled) (*IMachine_setIOCacheEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getIOCacheSize(request *IMachine_getIOCacheSize) (*IMachine_getIOCacheSizeResponse, error)

	IMachine_getIOCacheSizeContext(ctx context.Context, request *IMachine_getIOCacheSize) (*IMachine_getIOCacheSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setIOCacheSize(request *IMachine_setIOCacheSize) (*IMachine_setIOCacheSizeResponse, error)

	IMachine_setIOCacheSizeContext(ctx context.Context, request *IMachine_setIOCacheSize) (*IMachine_setIOCacheSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getPCIDeviceAssignments(request *IMachine_getPCIDeviceAssignments) (*IMachine_getPCIDeviceAssignmentsResponse, error)

	IMachine_getPCIDeviceAssignmentsContext(ctx context.Context, request *IMachine_getPCIDeviceAssignments) (*IMachine_getPCIDeviceAssignmentsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getBandwidthControl(request *IMachine_getBandwidthControl) (*IMachine_getBandwidthControlResponse, error)

	IMachine_getBandwidthControlContext(ctx context.Context, request *IMachine_getBandwidthControl) (*IMachine_getBandwidthControlResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getTracingEnabled(request *IMachine_getTracingEnabled) (*IMachine_getTracingEnabledResponse, error)

	IMachine_getTracingEnabledContext(ctx context.Context, request *IMachine_getTracingEnabled) (*IMachine_getTracingEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setTracingEnabled(request *IMachine_setTracingEnabled) (*IMachine_setTracingEnabledResponse, error)

	IMachine_setTracingEnabledContext(ctx context.Context, request *IMachine_setTracingEnabled) (*IMachine_setTracingEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getTracingConfig(request *IMachine_getTracingConfig) (*IMachine_getTracingConfigResponse, error)

	IMachine_getTracingConfigContext(ctx context.Context, request *IMachine_getTracingConfig) (*IMachine_getTracingConfigResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setTracingConfig(request *IMachine_setTracingConfig) (*IMachine_setTracingConfigResponse, error)

	IMachine_setTracingConfigContext(ctx context.Context, request *IMachine_setTracingConfig) (*IMachine_setTracingConfigResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getAllowTracingToAccessVM(request *IMachine_getAllowTracingToAccessVM) (*IMachine_getAllowTracingToAccessVMResponse, error)

	IMachine_getAllowTracingToAccessVMContext(ctx context.Context, request *IMachine_getAllowTracingToAccessVM) (*IMachine_getAllowTracingToAccessVMResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setAllowTracingToAccessVM(request *IMachine_setAllowTracingToAccessVM) (*IMachine_setAllowTracingToAccessVMResponse, error)

	IMachine_setAllowTracingToAccessVMContext(ctx context.Context, request *IMachine_setAllowTracingToAccessVM) (*IMachine_setAllowTracingToAccessVMResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getAutostartEnabled(request *IMachine_getAutostartEnabled) (*IMachine_getAutostartEnabledResponse, error)

	IMachine_getAutostartEnabledContext(ctx context.Context, request *IMachine_getAutostartEnabled) (*IMachine_getAutostartEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setAutostartEnabled(request *IMachine_setAutostartEnabled) (*IMachine_setAutostartEnabledResponse, error)

	IMachine_setAutostartEnabledContext(ctx context.Context, request *IMachine_setAutostartEnabled) (*IMachine_setAutostartEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getAutostartDelay(request *IMachine_getAutostartDelay) (*IMachine_getAutostartDelayResponse, error)

	IMachine_getAutostartDelayContext(ctx context.Context, request *IMachine_getAutostartDelay) (*IMachine_getAutostartDelayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setAutostartDelay(request *IMachine_setAutostartDelay) (*IMachine_setAutostartDelayResponse, error)

	IMachine_setAutostartDelayContext(ctx context.Context, request *IMachine_setAutostartDelay) (*IMachine_setAutostartDelayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getAutostopType(request *IMachine_getAutostopType) (*IMachine_getAutostopTypeResponse, error)

	IMachine_getAutostopTypeContext(ctx context.Context, request *IMachine_getAutostopType) (*IMachine_getAutostopTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setAutostopType(request *IMachine_setAutostopType) (*IMachine_setAutostopTypeResponse, error)

	IMachine_setAutostopTypeContext(ctx context.Context, request *IMachine_setAutostopType) (*IMachine_setAutostopTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getDefaultFrontend(request *IMachine_getDefaultFrontend) (*IMachine_getDefaultFrontendResponse, error)

	IMachine_getDefaultFrontendContext(ctx context.Context, request *IMachine_getDefaultFrontend) (*IMachine_getDefaultFrontendResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setDefaultFrontend(request *IMachine_setDefaultFrontend) (*IMachine_setDefaultFrontendResponse, error)

	IMachine_setDefaultFrontendContext(ctx context.Context, request *IMachine_setDefaultFrontend) (*IMachine_setDefaultFrontendResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getUSBProxyAvailable(request *IMachine_getUSBProxyAvailable) (*IMachine_getUSBProxyAvailableResponse, error)

	IMachine_getUSBProxyAvailableContext(ctx context.Context, request *IMachine_getUSBProxyAvailable) (*IMachine_getUSBProxyAvailableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getVMProcessPriority(request *IMachine_getVMProcessPriority) (*IMachine_getVMProcessPriorityResponse, error)

	IMachine_getVMProcessPriorityContext(ctx context.Context, request *IMachine_getVMProcessPriority) (*IMachine_getVMProcessPriorityResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setVMProcessPriority(request *IMachine_setVMProcessPriority) (*IMachine_setVMProcessPriorityResponse, error)

	IMachine_setVMProcessPriorityContext(ctx context.Context, request *IMachine_setVMProcessPriority) (*IMachine_setVMProcessPriorityResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getParavirtDebug(request *IMachine_getParavirtDebug) (*IMachine_getParavirtDebugResponse, error)

	IMachine_getParavirtDebugContext(ctx context.Context, request *IMachine_getParavirtDebug) (*IMachine_getParavirtDebugResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setParavirtDebug(request *IMachine_setParavirtDebug) (*IMachine_setParavirtDebugResponse, error)

	IMachine_setParavirtDebugContext(ctx context.Context, request *IMachine_setParavirtDebug) (*IMachine_setParavirtDebugResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getCPUProfile(request *IMachine_getCPUProfile) (*IMachine_getCPUProfileResponse, error)

	IMachine_getCPUProfileContext(ctx context.Context, request *IMachine_getCPUProfile) (*IMachine_getCPUProfileResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setCPUProfile(request *IMachine_setCPUProfile) (*IMachine_setCPUProfileResponse, error)

	IMachine_setCPUProfileContext(ctx context.Context, request *IMachine_setCPUProfile) (*IMachine_setCPUProfileResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getStateKeyId(request *IMachine_getStateKeyId) (*IMachine_getStateKeyIdResponse, error)

	IMachine_getStateKeyIdContext(ctx context.Context, request *IMachine_getStateKeyId) (*IMachine_getStateKeyIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getStateKeyStore(request *IMachine_getStateKeyStore) (*IMachine_getStateKeyStoreResponse, error)

	IMachine_getStateKeyStoreContext(ctx context.Context, request *IMachine_getStateKeyStore) (*IMachine_getStateKeyStoreResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getLogKeyId(request *IMachine_getLogKeyId) (*IMachine_getLogKeyIdResponse, error)

	IMachine_getLogKeyIdContext(ctx context.Context, request *IMachine_getLogKeyId) (*IMachine_getLogKeyIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getLogKeyStore(request *IMachine_getLogKeyStore) (*IMachine_getLogKeyStoreResponse, error)

	IMachine_getLogKeyStoreContext(ctx context.Context, request *IMachine_getLogKeyStore) (*IMachine_getLogKeyStoreResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getGuestDebugControl(request *IMachine_getGuestDebugControl) (*IMachine_getGuestDebugControlResponse, error)

	IMachine_getGuestDebugControlContext(ctx context.Context, request *IMachine_getGuestDebugControl) (*IMachine_getGuestDebugControlResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_lockMachine(request *IMachine_lockMachine) (*IMachine_lockMachineResponse, error)

	IMachine_lockMachineContext(ctx context.Context, request *IMachine_lockMachine) (*IMachine_lockMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_launchVMProcess(request *IMachine_launchVMProcess) (*IMachine_launchVMProcessResponse, error)

	IMachine_launchVMProcessContext(ctx context.Context, request *IMachine_launchVMProcess) (*IMachine_launchVMProcessResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setBootOrder(request *IMachine_setBootOrder) (*IMachine_setBootOrderResponse, error)

	IMachine_setBootOrderContext(ctx context.Context, request *IMachine_setBootOrder) (*IMachine_setBootOrderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getBootOrder(request *IMachine_getBootOrder) (*IMachine_getBootOrderResponse, error)

	IMachine_getBootOrderContext(ctx context.Context, request *IMachine_getBootOrder) (*IMachine_getBootOrderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_attachDevice(request *IMachine_attachDevice) (*IMachine_attachDeviceResponse, error)

	IMachine_attachDeviceContext(ctx context.Context, request *IMachine_attachDevice) (*IMachine_attachDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_attachDeviceWithoutMedium(request *IMachine_attachDeviceWithoutMedium) (*IMachine_attachDeviceWithoutMediumResponse, error)

	IMachine_attachDeviceWithoutMediumContext(ctx context.Context, request *IMachine_attachDeviceWithoutMedium) (*IMachine_attachDeviceWithoutMediumResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_detachDevice(request *IMachine_detachDevice) (*IMachine_detachDeviceResponse, error)

	IMachine_detachDeviceContext(ctx context.Context, request *IMachine_detachDevice) (*IMachine_detachDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_passthroughDevice(request *IMachine_passthroughDevice) (*IMachine_passthroughDeviceResponse, error)

	IMachine_passthroughDeviceContext(ctx context.Context, request *IMachine_passthroughDevice) (*IMachine_passthroughDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_temporaryEjectDevice(request *IMachine_temporaryEjectDevice) (*IMachine_temporaryEjectDeviceResponse, error)

	IMachine_temporaryEjectDeviceContext(ctx context.Context, request *IMachine_temporaryEjectDevice) (*IMachine_temporaryEjectDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_nonRotationalDevice(request *IMachine_nonRotationalDevice) (*IMachine_nonRotationalDeviceResponse, error)

	IMachine_nonRotationalDeviceContext(ctx context.Context, request *IMachine_nonRotationalDevice) (*IMachine_nonRotationalDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setAutoDiscardForDevice(request *IMachine_setAutoDiscardForDevice) (*IMachine_setAutoDiscardForDeviceResponse, error)

	IMachine_setAutoDiscardForDeviceContext(ctx context.Context, request *IMachine_setAutoDiscardForDevice) (*IMachine_setAutoDiscardForDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setHotPluggableForDevice(request *IMachine_setHotPluggableForDevice) (*IMachine_setHotPluggableForDeviceResponse, error)

	IMachine_setHotPluggableForDeviceContext(ctx context.Context, request *IMachine_setHotPluggableForDevice) (*IMachine_setHotPluggableForDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setBandwidthGroupForDevice(request *IMachine_setBandwidthGroupForDevice) (*IMachine_setBandwidthGroupForDeviceResponse, error)

	IMachine_setBandwidthGroupForDeviceContext(ctx context.Context, request *IMachine_setBandwidthGroupForDevice) (*IMachine_setBandwidthGroupForDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setNoBandwidthGroupForDevice(request *IMachine_setNoBandwidthGroupForDevice) (*IMachine_setNoBandwidthGroupForDeviceResponse, error)

	IMachine_setNoBandwidthGroupForDeviceContext(ctx context.Context, request *IMachine_setNoBandwidthGroupForDevice) (*IMachine_setNoBandwidthGroupForDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_unmountMedium(request *IMachine_unmountMedium) (*IMachine_unmountMediumResponse, error)

	IMachine_unmountMediumContext(ctx context.Context, request *IMachine_unmountMedium) (*IMachine_unmountMediumResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_mountMedium(request *IMachine_mountMedium) (*IMachine_mountMediumResponse, error)

	IMachine_mountMediumContext(ctx context.Context, request *IMachine_mountMedium) (*IMachine_mountMediumResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getMedium(request *IMachine_getMedium) (*IMachine_getMediumResponse, error)

	IMachine_getMediumContext(ctx context.Context, request *IMachine_getMedium) (*IMachine_getMediumResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getMediumAttachmentsOfController(request *IMachine_getMediumAttachmentsOfController) (*IMachine_getMediumAttachmentsOfControllerResponse, error)

	IMachine_getMediumAttachmentsOfControllerContext(ctx context.Context, request *IMachine_getMediumAttachmentsOfController) (*IMachine_getMediumAttachmentsOfControllerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getMediumAttachment(request *IMachine_getMediumAttachment) (*IMachine_getMediumAttachmentResponse, error)

	IMachine_getMediumAttachmentContext(ctx context.Context, request *IMachine_getMediumAttachment) (*IMachine_getMediumAttachmentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_attachHostPCIDevice(request *IMachine_attachHostPCIDevice) (*IMachine_attachHostPCIDeviceResponse, error)

	IMachine_attachHostPCIDeviceContext(ctx context.Context, request *IMachine_attachHostPCIDevice) (*IMachine_attachHostPCIDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_detachHostPCIDevice(request *IMachine_detachHostPCIDevice) (*IMachine_detachHostPCIDeviceResponse, error)

	IMachine_detachHostPCIDeviceContext(ctx context.Context, request *IMachine_detachHostPCIDevice) (*IMachine_detachHostPCIDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getNetworkAdapter(request *IMachine_getNetworkAdapter) (*IMachine_getNetworkAdapterResponse, error)

	IMachine_getNetworkAdapterContext(ctx context.Context, request *IMachine_getNetworkAdapter) (*IMachine_getNetworkAdapterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_addStorageController(request *IMachine_addStorageController) (*IMachine_addStorageControllerResponse, error)

	IMachine_addStorageControllerContext(ctx context.Context, request *IMachine_addStorageController) (*IMachine_addStorageControllerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getStorageControllerByName(request *IMachine_getStorageControllerByName) (*IMachine_getStorageControllerByNameResponse, error)

	IMachine_getStorageControllerByNameContext(ctx context.Context, request *IMachine_getStorageControllerByName) (*IMachine_getStorageControllerByNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getStorageControllerByInstance(request *IMachine_getStorageControllerByInstance) (*IMachine_getStorageControllerByInstanceResponse, error)

	IMachine_getStorageControllerByInstanceContext(ctx context.Context, request *IMachine_getStorageControllerByInstance) (*IMachine_getStorageControllerByInstanceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_removeStorageController(request *IMachine_removeStorageController) (*IMachine_removeStorageControllerResponse, error)

	IMachine_removeStorageControllerContext(ctx context.Context, request *IMachine_removeStorageController) (*IMachine_removeStorageControllerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setStorageControllerBootable(request *IMachine_setStorageControllerBootable) (*IMachine_setStorageControllerBootableResponse, error)

	IMachine_setStorageControllerBootableContext(ctx context.Context, request *IMachine_setStorageControllerBootable) (*IMachine_setStorageControllerBootableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_addUSBController(request *IMachine_addUSBController) (*IMachine_addUSBControllerResponse, error)

	IMachine_addUSBControllerContext(ctx context.Context, request *IMachine_addUSBController) (*IMachine_addUSBControllerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_removeUSBController(request *IMachine_removeUSBController) (*IMachine_removeUSBControllerResponse, error)

	IMachine_removeUSBControllerContext(ctx context.Context, request *IMachine_removeUSBController) (*IMachine_removeUSBControllerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getUSBControllerByName(request *IMachine_getUSBControllerByName) (*IMachine_getUSBControllerByNameResponse, error)

	IMachine_getUSBControllerByNameContext(ctx context.Context, request *IMachine_getUSBControllerByName) (*IMachine_getUSBControllerByNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getUSBControllerCountByType(request *IMachine_getUSBControllerCountByType) (*IMachine_getUSBControllerCountByTypeResponse, error)

	IMachine_getUSBControllerCountByTypeContext(ctx context.Context, request *IMachine_getUSBControllerCountByType) (*IMachine_getUSBControllerCountByTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getSerialPort(request *IMachine_getSerialPort) (*IMachine_getSerialPortResponse, error)

	IMachine_getSerialPortContext(ctx context.Context, request *IMachine_getSerialPort) (*IMachine_getSerialPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getParallelPort(request *IMachine_getParallelPort) (*IMachine_getParallelPortResponse, error)

	IMachine_getParallelPortContext(ctx context.Context, request *IMachine_getParallelPort) (*IMachine_getParallelPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getExtraDataKeys(request *IMachine_getExtraDataKeys) (*IMachine_getExtraDataKeysResponse, error)

	IMachine_getExtraDataKeysContext(ctx context.Context, request *IMachine_getExtraDataKeys) (*IMachine_getExtraDataKeysResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getExtraData(request *IMachine_getExtraData) (*IMachine_getExtraDataResponse, error)

	IMachine_getExtraDataContext(ctx context.Context, request *IMachine_getExtraData) (*IMachine_getExtraDataResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setExtraData(request *IMachine_setExtraData) (*IMachine_setExtraDataResponse, error)

	IMachine_setExtraDataContext(ctx context.Context, request *IMachine_setExtraData) (*IMachine_setExtraDataResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getCPUProperty(request *IMachine_getCPUProperty) (*IMachine_getCPUPropertyResponse, error)

	IMachine_getCPUPropertyContext(ctx context.Context, request *IMachine_getCPUProperty) (*IMachine_getCPUPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setCPUProperty(request *IMachine_setCPUProperty) (*IMachine_setCPUPropertyResponse, error)

	IMachine_setCPUPropertyContext(ctx context.Context, request *IMachine_setCPUProperty) (*IMachine_setCPUPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getCPUIDLeafByOrdinal(request *IMachine_getCPUIDLeafByOrdinal) (*IMachine_getCPUIDLeafByOrdinalResponse, error)

	IMachine_getCPUIDLeafByOrdinalContext(ctx context.Context, request *IMachine_getCPUIDLeafByOrdinal) (*IMachine_getCPUIDLeafByOrdinalResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getCPUIDLeaf(request *IMachine_getCPUIDLeaf) (*IMachine_getCPUIDLeafResponse, error)

	IMachine_getCPUIDLeafContext(ctx context.Context, request *IMachine_getCPUIDLeaf) (*IMachine_getCPUIDLeafResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setCPUIDLeaf(request *IMachine_setCPUIDLeaf) (*IMachine_setCPUIDLeafResponse, error)

	IMachine_setCPUIDLeafContext(ctx context.Context, request *IMachine_setCPUIDLeaf) (*IMachine_setCPUIDLeafResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_removeCPUIDLeaf(request *IMachine_removeCPUIDLeaf) (*IMachine_removeCPUIDLeafResponse, error)

	IMachine_removeCPUIDLeafContext(ctx context.Context, request *IMachine_removeCPUIDLeaf) (*IMachine_removeCPUIDLeafResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_removeAllCPUIDLeaves(request *IMachine_removeAllCPUIDLeaves) (*IMachine_removeAllCPUIDLeavesResponse, error)

	IMachine_removeAllCPUIDLeavesContext(ctx context.Context, request *IMachine_removeAllCPUIDLeaves) (*IMachine_removeAllCPUIDLeavesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getHWVirtExProperty(request *IMachine_getHWVirtExProperty) (*IMachine_getHWVirtExPropertyResponse, error)

	IMachine_getHWVirtExPropertyContext(ctx context.Context, request *IMachine_getHWVirtExProperty) (*IMachine_getHWVirtExPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setHWVirtExProperty(request *IMachine_setHWVirtExProperty) (*IMachine_setHWVirtExPropertyResponse, error)

	IMachine_setHWVirtExPropertyContext(ctx context.Context, request *IMachine_setHWVirtExProperty) (*IMachine_setHWVirtExPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setSettingsFilePath(request *IMachine_setSettingsFilePath) (*IMachine_setSettingsFilePathResponse, error)

	IMachine_setSettingsFilePathContext(ctx context.Context, request *IMachine_setSettingsFilePath) (*IMachine_setSettingsFilePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_saveSettings(request *IMachine_saveSettings) (*IMachine_saveSettingsResponse, error)

	IMachine_saveSettingsContext(ctx context.Context, request *IMachine_saveSettings) (*IMachine_saveSettingsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_discardSettings(request *IMachine_discardSettings) (*IMachine_discardSettingsResponse, error)

	IMachine_discardSettingsContext(ctx context.Context, request *IMachine_discardSettings) (*IMachine_discardSettingsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_unregister(request *IMachine_unregister) (*IMachine_unregisterResponse, error)

	IMachine_unregisterContext(ctx context.Context, request *IMachine_unregister) (*IMachine_unregisterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_deleteConfig(request *IMachine_deleteConfig) (*IMachine_deleteConfigResponse, error)

	IMachine_deleteConfigContext(ctx context.Context, request *IMachine_deleteConfig) (*IMachine_deleteConfigResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_exportTo(request *IMachine_exportTo) (*IMachine_exportToResponse, error)

	IMachine_exportToContext(ctx context.Context, request *IMachine_exportTo) (*IMachine_exportToResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_findSnapshot(request *IMachine_findSnapshot) (*IMachine_findSnapshotResponse, error)

	IMachine_findSnapshotContext(ctx context.Context, request *IMachine_findSnapshot) (*IMachine_findSnapshotResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_createSharedFolder(request *IMachine_createSharedFolder) (*IMachine_createSharedFolderResponse, error)

	IMachine_createSharedFolderContext(ctx context.Context, request *IMachine_createSharedFolder) (*IMachine_createSharedFolderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_removeSharedFolder(request *IMachine_removeSharedFolder) (*IMachine_removeSharedFolderResponse, error)

	IMachine_removeSharedFolderContext(ctx context.Context, request *IMachine_removeSharedFolder) (*IMachine_removeSharedFolderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_canShowConsoleWindow(request *IMachine_canShowConsoleWindow) (*IMachine_canShowConsoleWindowResponse, error)

	IMachine_canShowConsoleWindowContext(ctx context.Context, request *IMachine_canShowConsoleWindow) (*IMachine_canShowConsoleWindowResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_showConsoleWindow(request *IMachine_showConsoleWindow) (*IMachine_showConsoleWindowResponse, error)

	IMachine_showConsoleWindowContext(ctx context.Context, request *IMachine_showConsoleWindow) (*IMachine_showConsoleWindowResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getGuestProperty(request *IMachine_getGuestProperty) (*IMachine_getGuestPropertyResponse, error)

	IMachine_getGuestPropertyContext(ctx context.Context, request *IMachine_getGuestProperty) (*IMachine_getGuestPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getGuestPropertyValue(request *IMachine_getGuestPropertyValue) (*IMachine_getGuestPropertyValueResponse, error)

	IMachine_getGuestPropertyValueContext(ctx context.Context, request *IMachine_getGuestPropertyValue) (*IMachine_getGuestPropertyValueResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getGuestPropertyTimestamp(request *IMachine_getGuestPropertyTimestamp) (*IMachine_getGuestPropertyTimestampResponse, error)

	IMachine_getGuestPropertyTimestampContext(ctx context.Context, request *IMachine_getGuestPropertyTimestamp) (*IMachine_getGuestPropertyTimestampResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setGuestProperty(request *IMachine_setGuestProperty) (*IMachine_setGuestPropertyResponse, error)

	IMachine_setGuestPropertyContext(ctx context.Context, request *IMachine_setGuestProperty) (*IMachine_setGuestPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_setGuestPropertyValue(request *IMachine_setGuestPropertyValue) (*IMachine_setGuestPropertyValueResponse, error)

	IMachine_setGuestPropertyValueContext(ctx context.Context, request *IMachine_setGuestPropertyValue) (*IMachine_setGuestPropertyValueResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_deleteGuestProperty(request *IMachine_deleteGuestProperty) (*IMachine_deleteGuestPropertyResponse, error)

	IMachine_deleteGuestPropertyContext(ctx context.Context, request *IMachine_deleteGuestProperty) (*IMachine_deleteGuestPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_enumerateGuestProperties(request *IMachine_enumerateGuestProperties) (*IMachine_enumerateGuestPropertiesResponse, error)

	IMachine_enumerateGuestPropertiesContext(ctx context.Context, request *IMachine_enumerateGuestProperties) (*IMachine_enumerateGuestPropertiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_querySavedGuestScreenInfo(request *IMachine_querySavedGuestScreenInfo) (*IMachine_querySavedGuestScreenInfoResponse, error)

	IMachine_querySavedGuestScreenInfoContext(ctx context.Context, request *IMachine_querySavedGuestScreenInfo) (*IMachine_querySavedGuestScreenInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_readSavedThumbnailToArray(request *IMachine_readSavedThumbnailToArray) (*IMachine_readSavedThumbnailToArrayResponse, error)

	IMachine_readSavedThumbnailToArrayContext(ctx context.Context, request *IMachine_readSavedThumbnailToArray) (*IMachine_readSavedThumbnailToArrayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_querySavedScreenshotInfo(request *IMachine_querySavedScreenshotInfo) (*IMachine_querySavedScreenshotInfoResponse, error)

	IMachine_querySavedScreenshotInfoContext(ctx context.Context, request *IMachine_querySavedScreenshotInfo) (*IMachine_querySavedScreenshotInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_readSavedScreenshotToArray(request *IMachine_readSavedScreenshotToArray) (*IMachine_readSavedScreenshotToArrayResponse, error)

	IMachine_readSavedScreenshotToArrayContext(ctx context.Context, request *IMachine_readSavedScreenshotToArray) (*IMachine_readSavedScreenshotToArrayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_hotPlugCPU(request *IMachine_hotPlugCPU) (*IMachine_hotPlugCPUResponse, error)

	IMachine_hotPlugCPUContext(ctx context.Context, request *IMachine_hotPlugCPU) (*IMachine_hotPlugCPUResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_hotUnplugCPU(request *IMachine_hotUnplugCPU) (*IMachine_hotUnplugCPUResponse, error)

	IMachine_hotUnplugCPUContext(ctx context.Context, request *IMachine_hotUnplugCPU) (*IMachine_hotUnplugCPUResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getCPUStatus(request *IMachine_getCPUStatus) (*IMachine_getCPUStatusResponse, error)

	IMachine_getCPUStatusContext(ctx context.Context, request *IMachine_getCPUStatus) (*IMachine_getCPUStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getEffectiveParavirtProvider(request *IMachine_getEffectiveParavirtProvider) (*IMachine_getEffectiveParavirtProviderResponse, error)

	IMachine_getEffectiveParavirtProviderContext(ctx context.Context, request *IMachine_getEffectiveParavirtProvider) (*IMachine_getEffectiveParavirtProviderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_queryLogFilename(request *IMachine_queryLogFilename) (*IMachine_queryLogFilenameResponse, error)

	IMachine_queryLogFilenameContext(ctx context.Context, request *IMachine_queryLogFilename) (*IMachine_queryLogFilenameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_readLog(request *IMachine_readLog) (*IMachine_readLogResponse, error)

	IMachine_readLogContext(ctx context.Context, request *IMachine_readLog) (*IMachine_readLogResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_cloneTo(request *IMachine_cloneTo) (*IMachine_cloneToResponse, error)

	IMachine_cloneToContext(ctx context.Context, request *IMachine_cloneTo) (*IMachine_cloneToResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_moveTo(request *IMachine_moveTo) (*IMachine_moveToResponse, error)

	IMachine_moveToContext(ctx context.Context, request *IMachine_moveTo) (*IMachine_moveToResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_saveState(request *IMachine_saveState) (*IMachine_saveStateResponse, error)

	IMachine_saveStateContext(ctx context.Context, request *IMachine_saveState) (*IMachine_saveStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_adoptSavedState(request *IMachine_adoptSavedState) (*IMachine_adoptSavedStateResponse, error)

	IMachine_adoptSavedStateContext(ctx context.Context, request *IMachine_adoptSavedState) (*IMachine_adoptSavedStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_discardSavedState(request *IMachine_discardSavedState) (*IMachine_discardSavedStateResponse, error)

	IMachine_discardSavedStateContext(ctx context.Context, request *IMachine_discardSavedState) (*IMachine_discardSavedStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_takeSnapshot(request *IMachine_takeSnapshot) (*IMachine_takeSnapshotResponse, error)

	IMachine_takeSnapshotContext(ctx context.Context, request *IMachine_takeSnapshot) (*IMachine_takeSnapshotResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_deleteSnapshot(request *IMachine_deleteSnapshot) (*IMachine_deleteSnapshotResponse, error)

	IMachine_deleteSnapshotContext(ctx context.Context, request *IMachine_deleteSnapshot) (*IMachine_deleteSnapshotResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_deleteSnapshotAndAllChildren(request *IMachine_deleteSnapshotAndAllChildren) (*IMachine_deleteSnapshotAndAllChildrenResponse, error)

	IMachine_deleteSnapshotAndAllChildrenContext(ctx context.Context, request *IMachine_deleteSnapshotAndAllChildren) (*IMachine_deleteSnapshotAndAllChildrenResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_deleteSnapshotRange(request *IMachine_deleteSnapshotRange) (*IMachine_deleteSnapshotRangeResponse, error)

	IMachine_deleteSnapshotRangeContext(ctx context.Context, request *IMachine_deleteSnapshotRange) (*IMachine_deleteSnapshotRangeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_restoreSnapshot(request *IMachine_restoreSnapshot) (*IMachine_restoreSnapshotResponse, error)

	IMachine_restoreSnapshotContext(ctx context.Context, request *IMachine_restoreSnapshot) (*IMachine_restoreSnapshotResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_applyDefaults(request *IMachine_applyDefaults) (*IMachine_applyDefaultsResponse, error)

	IMachine_applyDefaultsContext(ctx context.Context, request *IMachine_applyDefaults) (*IMachine_applyDefaultsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_changeEncryption(request *IMachine_changeEncryption) (*IMachine_changeEncryptionResponse, error)

	IMachine_changeEncryptionContext(ctx context.Context, request *IMachine_changeEncryption) (*IMachine_changeEncryptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_getEncryptionSettings(request *IMachine_getEncryptionSettings) (*IMachine_getEncryptionSettingsResponse, error)

	IMachine_getEncryptionSettingsContext(ctx context.Context, request *IMachine_getEncryptionSettings) (*IMachine_getEncryptionSettingsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_checkEncryptionPassword(request *IMachine_checkEncryptionPassword) (*IMachine_checkEncryptionPasswordResponse, error)

	IMachine_checkEncryptionPasswordContext(ctx context.Context, request *IMachine_checkEncryptionPassword) (*IMachine_checkEncryptionPasswordResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_addEncryptionPassword(request *IMachine_addEncryptionPassword) (*IMachine_addEncryptionPasswordResponse, error)

	IMachine_addEncryptionPasswordContext(ctx context.Context, request *IMachine_addEncryptionPassword) (*IMachine_addEncryptionPasswordResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_addEncryptionPasswords(request *IMachine_addEncryptionPasswords) (*IMachine_addEncryptionPasswordsResponse, error)

	IMachine_addEncryptionPasswordsContext(ctx context.Context, request *IMachine_addEncryptionPasswords) (*IMachine_addEncryptionPasswordsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_removeEncryptionPassword(request *IMachine_removeEncryptionPassword) (*IMachine_removeEncryptionPasswordResponse, error)

	IMachine_removeEncryptionPasswordContext(ctx context.Context, request *IMachine_removeEncryptionPassword) (*IMachine_removeEncryptionPasswordResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachine_clearAllEncryptionPasswords(request *IMachine_clearAllEncryptionPasswords) (*IMachine_clearAllEncryptionPasswordsResponse, error)

	IMachine_clearAllEncryptionPasswordsContext(ctx context.Context, request *IMachine_clearAllEncryptionPasswords) (*IMachine_clearAllEncryptionPasswordsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEmulatedUSB_getWebcams(request *IEmulatedUSB_getWebcams) (*IEmulatedUSB_getWebcamsResponse, error)

	IEmulatedUSB_getWebcamsContext(ctx context.Context, request *IEmulatedUSB_getWebcams) (*IEmulatedUSB_getWebcamsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEmulatedUSB_webcamAttach(request *IEmulatedUSB_webcamAttach) (*IEmulatedUSB_webcamAttachResponse, error)

	IEmulatedUSB_webcamAttachContext(ctx context.Context, request *IEmulatedUSB_webcamAttach) (*IEmulatedUSB_webcamAttachResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEmulatedUSB_webcamDetach(request *IEmulatedUSB_webcamDetach) (*IEmulatedUSB_webcamDetachResponse, error)

	IEmulatedUSB_webcamDetachContext(ctx context.Context, request *IEmulatedUSB_webcamDetach) (*IEmulatedUSB_webcamDetachResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getMachine(request *IConsole_getMachine) (*IConsole_getMachineResponse, error)

	IConsole_getMachineContext(ctx context.Context, request *IConsole_getMachine) (*IConsole_getMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getState(request *IConsole_getState) (*IConsole_getStateResponse, error)

	IConsole_getStateContext(ctx context.Context, request *IConsole_getState) (*IConsole_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getGuest(request *IConsole_getGuest) (*IConsole_getGuestResponse, error)

	IConsole_getGuestContext(ctx context.Context, request *IConsole_getGuest) (*IConsole_getGuestResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getKeyboard(request *IConsole_getKeyboard) (*IConsole_getKeyboardResponse, error)

	IConsole_getKeyboardContext(ctx context.Context, request *IConsole_getKeyboard) (*IConsole_getKeyboardResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getMouse(request *IConsole_getMouse) (*IConsole_getMouseResponse, error)

	IConsole_getMouseContext(ctx context.Context, request *IConsole_getMouse) (*IConsole_getMouseResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getDisplay(request *IConsole_getDisplay) (*IConsole_getDisplayResponse, error)

	IConsole_getDisplayContext(ctx context.Context, request *IConsole_getDisplay) (*IConsole_getDisplayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getDebugger(request *IConsole_getDebugger) (*IConsole_getDebuggerResponse, error)

	IConsole_getDebuggerContext(ctx context.Context, request *IConsole_getDebugger) (*IConsole_getDebuggerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getUSBDevices(request *IConsole_getUSBDevices) (*IConsole_getUSBDevicesResponse, error)

	IConsole_getUSBDevicesContext(ctx context.Context, request *IConsole_getUSBDevices) (*IConsole_getUSBDevicesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getRemoteUSBDevices(request *IConsole_getRemoteUSBDevices) (*IConsole_getRemoteUSBDevicesResponse, error)

	IConsole_getRemoteUSBDevicesContext(ctx context.Context, request *IConsole_getRemoteUSBDevices) (*IConsole_getRemoteUSBDevicesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getSharedFolders(request *IConsole_getSharedFolders) (*IConsole_getSharedFoldersResponse, error)

	IConsole_getSharedFoldersContext(ctx context.Context, request *IConsole_getSharedFolders) (*IConsole_getSharedFoldersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getVRDEServerInfo(request *IConsole_getVRDEServerInfo) (*IConsole_getVRDEServerInfoResponse, error)

	IConsole_getVRDEServerInfoContext(ctx context.Context, request *IConsole_getVRDEServerInfo) (*IConsole_getVRDEServerInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getEventSource(request *IConsole_getEventSource) (*IConsole_getEventSourceResponse, error)

	IConsole_getEventSourceContext(ctx context.Context, request *IConsole_getEventSource) (*IConsole_getEventSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getAttachedPCIDevices(request *IConsole_getAttachedPCIDevices) (*IConsole_getAttachedPCIDevicesResponse, error)

	IConsole_getAttachedPCIDevicesContext(ctx context.Context, request *IConsole_getAttachedPCIDevices) (*IConsole_getAttachedPCIDevicesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getUseHostClipboard(request *IConsole_getUseHostClipboard) (*IConsole_getUseHostClipboardResponse, error)

	IConsole_getUseHostClipboardContext(ctx context.Context, request *IConsole_getUseHostClipboard) (*IConsole_getUseHostClipboardResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_setUseHostClipboard(request *IConsole_setUseHostClipboard) (*IConsole_setUseHostClipboardResponse, error)

	IConsole_setUseHostClipboardContext(ctx context.Context, request *IConsole_setUseHostClipboard) (*IConsole_setUseHostClipboardResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getEmulatedUSB(request *IConsole_getEmulatedUSB) (*IConsole_getEmulatedUSBResponse, error)

	IConsole_getEmulatedUSBContext(ctx context.Context, request *IConsole_getEmulatedUSB) (*IConsole_getEmulatedUSBResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_powerUp(request *IConsole_powerUp) (*IConsole_powerUpResponse, error)

	IConsole_powerUpContext(ctx context.Context, request *IConsole_powerUp) (*IConsole_powerUpResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_powerUpPaused(request *IConsole_powerUpPaused) (*IConsole_powerUpPausedResponse, error)

	IConsole_powerUpPausedContext(ctx context.Context, request *IConsole_powerUpPaused) (*IConsole_powerUpPausedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_powerDown(request *IConsole_powerDown) (*IConsole_powerDownResponse, error)

	IConsole_powerDownContext(ctx context.Context, request *IConsole_powerDown) (*IConsole_powerDownResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_reset(request *IConsole_reset) (*IConsole_resetResponse, error)

	IConsole_resetContext(ctx context.Context, request *IConsole_reset) (*IConsole_resetResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_pause(request *IConsole_pause) (*IConsole_pauseResponse, error)

	IConsole_pauseContext(ctx context.Context, request *IConsole_pause) (*IConsole_pauseResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_resume(request *IConsole_resume) (*IConsole_resumeResponse, error)

	IConsole_resumeContext(ctx context.Context, request *IConsole_resume) (*IConsole_resumeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_powerButton(request *IConsole_powerButton) (*IConsole_powerButtonResponse, error)

	IConsole_powerButtonContext(ctx context.Context, request *IConsole_powerButton) (*IConsole_powerButtonResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_sleepButton(request *IConsole_sleepButton) (*IConsole_sleepButtonResponse, error)

	IConsole_sleepButtonContext(ctx context.Context, request *IConsole_sleepButton) (*IConsole_sleepButtonResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getPowerButtonHandled(request *IConsole_getPowerButtonHandled) (*IConsole_getPowerButtonHandledResponse, error)

	IConsole_getPowerButtonHandledContext(ctx context.Context, request *IConsole_getPowerButtonHandled) (*IConsole_getPowerButtonHandledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getGuestEnteredACPIMode(request *IConsole_getGuestEnteredACPIMode) (*IConsole_getGuestEnteredACPIModeResponse, error)

	IConsole_getGuestEnteredACPIModeContext(ctx context.Context, request *IConsole_getGuestEnteredACPIMode) (*IConsole_getGuestEnteredACPIModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_getDeviceActivity(request *IConsole_getDeviceActivity) (*IConsole_getDeviceActivityResponse, error)

	IConsole_getDeviceActivityContext(ctx context.Context, request *IConsole_getDeviceActivity) (*IConsole_getDeviceActivityResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_attachUSBDevice(request *IConsole_attachUSBDevice) (*IConsole_attachUSBDeviceResponse, error)

	IConsole_attachUSBDeviceContext(ctx context.Context, request *IConsole_attachUSBDevice) (*IConsole_attachUSBDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_detachUSBDevice(request *IConsole_detachUSBDevice) (*IConsole_detachUSBDeviceResponse, error)

	IConsole_detachUSBDeviceContext(ctx context.Context, request *IConsole_detachUSBDevice) (*IConsole_detachUSBDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_findUSBDeviceByAddress(request *IConsole_findUSBDeviceByAddress) (*IConsole_findUSBDeviceByAddressResponse, error)

	IConsole_findUSBDeviceByAddressContext(ctx context.Context, request *IConsole_findUSBDeviceByAddress) (*IConsole_findUSBDeviceByAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_findUSBDeviceById(request *IConsole_findUSBDeviceById) (*IConsole_findUSBDeviceByIdResponse, error)

	IConsole_findUSBDeviceByIdContext(ctx context.Context, request *IConsole_findUSBDeviceById) (*IConsole_findUSBDeviceByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_createSharedFolder(request *IConsole_createSharedFolder) (*IConsole_createSharedFolderResponse, error)

	IConsole_createSharedFolderContext(ctx context.Context, request *IConsole_createSharedFolder) (*IConsole_createSharedFolderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_removeSharedFolder(request *IConsole_removeSharedFolder) (*IConsole_removeSharedFolderResponse, error)

	IConsole_removeSharedFolderContext(ctx context.Context, request *IConsole_removeSharedFolder) (*IConsole_removeSharedFolderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_teleport(request *IConsole_teleport) (*IConsole_teleportResponse, error)

	IConsole_teleportContext(ctx context.Context, request *IConsole_teleport) (*IConsole_teleportResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_addEncryptionPassword(request *IConsole_addEncryptionPassword) (*IConsole_addEncryptionPasswordResponse, error)

	IConsole_addEncryptionPasswordContext(ctx context.Context, request *IConsole_addEncryptionPassword) (*IConsole_addEncryptionPasswordResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_addEncryptionPasswords(request *IConsole_addEncryptionPasswords) (*IConsole_addEncryptionPasswordsResponse, error)

	IConsole_addEncryptionPasswordsContext(ctx context.Context, request *IConsole_addEncryptionPasswords) (*IConsole_addEncryptionPasswordsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_removeEncryptionPassword(request *IConsole_removeEncryptionPassword) (*IConsole_removeEncryptionPasswordResponse, error)

	IConsole_removeEncryptionPasswordContext(ctx context.Context, request *IConsole_removeEncryptionPassword) (*IConsole_removeEncryptionPasswordResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IConsole_clearAllEncryptionPasswords(request *IConsole_clearAllEncryptionPasswords) (*IConsole_clearAllEncryptionPasswordsResponse, error)

	IConsole_clearAllEncryptionPasswordsContext(ctx context.Context, request *IConsole_clearAllEncryptionPasswords) (*IConsole_clearAllEncryptionPasswordsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getName(request *IHostNetworkInterface_getName) (*IHostNetworkInterface_getNameResponse, error)

	IHostNetworkInterface_getNameContext(ctx context.Context, request *IHostNetworkInterface_getName) (*IHostNetworkInterface_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getShortName(request *IHostNetworkInterface_getShortName) (*IHostNetworkInterface_getShortNameResponse, error)

	IHostNetworkInterface_getShortNameContext(ctx context.Context, request *IHostNetworkInterface_getShortName) (*IHostNetworkInterface_getShortNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getId(request *IHostNetworkInterface_getId) (*IHostNetworkInterface_getIdResponse, error)

	IHostNetworkInterface_getIdContext(ctx context.Context, request *IHostNetworkInterface_getId) (*IHostNetworkInterface_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getNetworkName(request *IHostNetworkInterface_getNetworkName) (*IHostNetworkInterface_getNetworkNameResponse, error)

	IHostNetworkInterface_getNetworkNameContext(ctx context.Context, request *IHostNetworkInterface_getNetworkName) (*IHostNetworkInterface_getNetworkNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getDHCPEnabled(request *IHostNetworkInterface_getDHCPEnabled) (*IHostNetworkInterface_getDHCPEnabledResponse, error)

	IHostNetworkInterface_getDHCPEnabledContext(ctx context.Context, request *IHostNetworkInterface_getDHCPEnabled) (*IHostNetworkInterface_getDHCPEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getIPAddress(request *IHostNetworkInterface_getIPAddress) (*IHostNetworkInterface_getIPAddressResponse, error)

	IHostNetworkInterface_getIPAddressContext(ctx context.Context, request *IHostNetworkInterface_getIPAddress) (*IHostNetworkInterface_getIPAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getNetworkMask(request *IHostNetworkInterface_getNetworkMask) (*IHostNetworkInterface_getNetworkMaskResponse, error)

	IHostNetworkInterface_getNetworkMaskContext(ctx context.Context, request *IHostNetworkInterface_getNetworkMask) (*IHostNetworkInterface_getNetworkMaskResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getIPV6Supported(request *IHostNetworkInterface_getIPV6Supported) (*IHostNetworkInterface_getIPV6SupportedResponse, error)

	IHostNetworkInterface_getIPV6SupportedContext(ctx context.Context, request *IHostNetworkInterface_getIPV6Supported) (*IHostNetworkInterface_getIPV6SupportedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getIPV6Address(request *IHostNetworkInterface_getIPV6Address) (*IHostNetworkInterface_getIPV6AddressResponse, error)

	IHostNetworkInterface_getIPV6AddressContext(ctx context.Context, request *IHostNetworkInterface_getIPV6Address) (*IHostNetworkInterface_getIPV6AddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getIPV6NetworkMaskPrefixLength(request *IHostNetworkInterface_getIPV6NetworkMaskPrefixLength) (*IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse, error)

	IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthContext(ctx context.Context, request *IHostNetworkInterface_getIPV6NetworkMaskPrefixLength) (*IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getHardwareAddress(request *IHostNetworkInterface_getHardwareAddress) (*IHostNetworkInterface_getHardwareAddressResponse, error)

	IHostNetworkInterface_getHardwareAddressContext(ctx context.Context, request *IHostNetworkInterface_getHardwareAddress) (*IHostNetworkInterface_getHardwareAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getMediumType(request *IHostNetworkInterface_getMediumType) (*IHostNetworkInterface_getMediumTypeResponse, error)

	IHostNetworkInterface_getMediumTypeContext(ctx context.Context, request *IHostNetworkInterface_getMediumType) (*IHostNetworkInterface_getMediumTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getStatus(request *IHostNetworkInterface_getStatus) (*IHostNetworkInterface_getStatusResponse, error)

	IHostNetworkInterface_getStatusContext(ctx context.Context, request *IHostNetworkInterface_getStatus) (*IHostNetworkInterface_getStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getInterfaceType(request *IHostNetworkInterface_getInterfaceType) (*IHostNetworkInterface_getInterfaceTypeResponse, error)

	IHostNetworkInterface_getInterfaceTypeContext(ctx context.Context, request *IHostNetworkInterface_getInterfaceType) (*IHostNetworkInterface_getInterfaceTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_getWireless(request *IHostNetworkInterface_getWireless) (*IHostNetworkInterface_getWirelessResponse, error)

	IHostNetworkInterface_getWirelessContext(ctx context.Context, request *IHostNetworkInterface_getWireless) (*IHostNetworkInterface_getWirelessResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_enableStaticIPConfig(request *IHostNetworkInterface_enableStaticIPConfig) (*IHostNetworkInterface_enableStaticIPConfigResponse, error)

	IHostNetworkInterface_enableStaticIPConfigContext(ctx context.Context, request *IHostNetworkInterface_enableStaticIPConfig) (*IHostNetworkInterface_enableStaticIPConfigResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_enableStaticIPConfigV6(request *IHostNetworkInterface_enableStaticIPConfigV6) (*IHostNetworkInterface_enableStaticIPConfigV6Response, error)

	IHostNetworkInterface_enableStaticIPConfigV6Context(ctx context.Context, request *IHostNetworkInterface_enableStaticIPConfigV6) (*IHostNetworkInterface_enableStaticIPConfigV6Response, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_enableDynamicIPConfig(request *IHostNetworkInterface_enableDynamicIPConfig) (*IHostNetworkInterface_enableDynamicIPConfigResponse, error)

	IHostNetworkInterface_enableDynamicIPConfigContext(ctx context.Context, request *IHostNetworkInterface_enableDynamicIPConfig) (*IHostNetworkInterface_enableDynamicIPConfigResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNetworkInterface_DHCPRediscover(request *IHostNetworkInterface_DHCPRediscover) (*IHostNetworkInterface_DHCPRediscoverResponse, error)

	IHostNetworkInterface_DHCPRediscoverContext(ctx context.Context, request *IHostNetworkInterface_DHCPRediscover) (*IHostNetworkInterface_DHCPRediscoverResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostVideoInputDevice_getName(request *IHostVideoInputDevice_getName) (*IHostVideoInputDevice_getNameResponse, error)

	IHostVideoInputDevice_getNameContext(ctx context.Context, request *IHostVideoInputDevice_getName) (*IHostVideoInputDevice_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostVideoInputDevice_getPath(request *IHostVideoInputDevice_getPath) (*IHostVideoInputDevice_getPathResponse, error)

	IHostVideoInputDevice_getPathContext(ctx context.Context, request *IHostVideoInputDevice_getPath) (*IHostVideoInputDevice_getPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostVideoInputDevice_getAlias(request *IHostVideoInputDevice_getAlias) (*IHostVideoInputDevice_getAliasResponse, error)

	IHostVideoInputDevice_getAliasContext(ctx context.Context, request *IHostVideoInputDevice_getAlias) (*IHostVideoInputDevice_getAliasResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getName(request *IUpdateAgent_getName) (*IUpdateAgent_getNameResponse, error)

	IUpdateAgent_getNameContext(ctx context.Context, request *IUpdateAgent_getName) (*IUpdateAgent_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getEventSource(request *IUpdateAgent_getEventSource) (*IUpdateAgent_getEventSourceResponse, error)

	IUpdateAgent_getEventSourceContext(ctx context.Context, request *IUpdateAgent_getEventSource) (*IUpdateAgent_getEventSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getOrder(request *IUpdateAgent_getOrder) (*IUpdateAgent_getOrderResponse, error)

	IUpdateAgent_getOrderContext(ctx context.Context, request *IUpdateAgent_getOrder) (*IUpdateAgent_getOrderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getDependsOn(request *IUpdateAgent_getDependsOn) (*IUpdateAgent_getDependsOnResponse, error)

	IUpdateAgent_getDependsOnContext(ctx context.Context, request *IUpdateAgent_getDependsOn) (*IUpdateAgent_getDependsOnResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getVersion(request *IUpdateAgent_getVersion) (*IUpdateAgent_getVersionResponse, error)

	IUpdateAgent_getVersionContext(ctx context.Context, request *IUpdateAgent_getVersion) (*IUpdateAgent_getVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getDownloadUrl(request *IUpdateAgent_getDownloadUrl) (*IUpdateAgent_getDownloadUrlResponse, error)

	IUpdateAgent_getDownloadUrlContext(ctx context.Context, request *IUpdateAgent_getDownloadUrl) (*IUpdateAgent_getDownloadUrlResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getWebUrl(request *IUpdateAgent_getWebUrl) (*IUpdateAgent_getWebUrlResponse, error)

	IUpdateAgent_getWebUrlContext(ctx context.Context, request *IUpdateAgent_getWebUrl) (*IUpdateAgent_getWebUrlResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getReleaseNotes(request *IUpdateAgent_getReleaseNotes) (*IUpdateAgent_getReleaseNotesResponse, error)

	IUpdateAgent_getReleaseNotesContext(ctx context.Context, request *IUpdateAgent_getReleaseNotes) (*IUpdateAgent_getReleaseNotesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getEnabled(request *IUpdateAgent_getEnabled) (*IUpdateAgent_getEnabledResponse, error)

	IUpdateAgent_getEnabledContext(ctx context.Context, request *IUpdateAgent_getEnabled) (*IUpdateAgent_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_setEnabled(request *IUpdateAgent_setEnabled) (*IUpdateAgent_setEnabledResponse, error)

	IUpdateAgent_setEnabledContext(ctx context.Context, request *IUpdateAgent_setEnabled) (*IUpdateAgent_setEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getHidden(request *IUpdateAgent_getHidden) (*IUpdateAgent_getHiddenResponse, error)

	IUpdateAgent_getHiddenContext(ctx context.Context, request *IUpdateAgent_getHidden) (*IUpdateAgent_getHiddenResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getState(request *IUpdateAgent_getState) (*IUpdateAgent_getStateResponse, error)

	IUpdateAgent_getStateContext(ctx context.Context, request *IUpdateAgent_getState) (*IUpdateAgent_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getCheckFrequency(request *IUpdateAgent_getCheckFrequency) (*IUpdateAgent_getCheckFrequencyResponse, error)

	IUpdateAgent_getCheckFrequencyContext(ctx context.Context, request *IUpdateAgent_getCheckFrequency) (*IUpdateAgent_getCheckFrequencyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_setCheckFrequency(request *IUpdateAgent_setCheckFrequency) (*IUpdateAgent_setCheckFrequencyResponse, error)

	IUpdateAgent_setCheckFrequencyContext(ctx context.Context, request *IUpdateAgent_setCheckFrequency) (*IUpdateAgent_setCheckFrequencyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getChannel(request *IUpdateAgent_getChannel) (*IUpdateAgent_getChannelResponse, error)

	IUpdateAgent_getChannelContext(ctx context.Context, request *IUpdateAgent_getChannel) (*IUpdateAgent_getChannelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_setChannel(request *IUpdateAgent_setChannel) (*IUpdateAgent_setChannelResponse, error)

	IUpdateAgent_setChannelContext(ctx context.Context, request *IUpdateAgent_setChannel) (*IUpdateAgent_setChannelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getRepositoryURL(request *IUpdateAgent_getRepositoryURL) (*IUpdateAgent_getRepositoryURLResponse, error)

	IUpdateAgent_getRepositoryURLContext(ctx context.Context, request *IUpdateAgent_getRepositoryURL) (*IUpdateAgent_getRepositoryURLResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_setRepositoryURL(request *IUpdateAgent_setRepositoryURL) (*IUpdateAgent_setRepositoryURLResponse, error)

	IUpdateAgent_setRepositoryURLContext(ctx context.Context, request *IUpdateAgent_setRepositoryURL) (*IUpdateAgent_setRepositoryURLResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getLastCheckDate(request *IUpdateAgent_getLastCheckDate) (*IUpdateAgent_getLastCheckDateResponse, error)

	IUpdateAgent_getLastCheckDateContext(ctx context.Context, request *IUpdateAgent_getLastCheckDate) (*IUpdateAgent_getLastCheckDateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getCheckCount(request *IUpdateAgent_getCheckCount) (*IUpdateAgent_getCheckCountResponse, error)

	IUpdateAgent_getCheckCountContext(ctx context.Context, request *IUpdateAgent_getCheckCount) (*IUpdateAgent_getCheckCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getIsCheckNeeded(request *IUpdateAgent_getIsCheckNeeded) (*IUpdateAgent_getIsCheckNeededResponse, error)

	IUpdateAgent_getIsCheckNeededContext(ctx context.Context, request *IUpdateAgent_getIsCheckNeeded) (*IUpdateAgent_getIsCheckNeededResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_getSupportedChannels(request *IUpdateAgent_getSupportedChannels) (*IUpdateAgent_getSupportedChannelsResponse, error)

	IUpdateAgent_getSupportedChannelsContext(ctx context.Context, request *IUpdateAgent_getSupportedChannels) (*IUpdateAgent_getSupportedChannelsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_checkFor(request *IUpdateAgent_checkFor) (*IUpdateAgent_checkForResponse, error)

	IUpdateAgent_checkForContext(ctx context.Context, request *IUpdateAgent_checkFor) (*IUpdateAgent_checkForResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_download(request *IUpdateAgent_download) (*IUpdateAgent_downloadResponse, error)

	IUpdateAgent_downloadContext(ctx context.Context, request *IUpdateAgent_download) (*IUpdateAgent_downloadResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_install(request *IUpdateAgent_install) (*IUpdateAgent_installResponse, error)

	IUpdateAgent_installContext(ctx context.Context, request *IUpdateAgent_install) (*IUpdateAgent_installResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgent_rollback(request *IUpdateAgent_rollback) (*IUpdateAgent_rollbackResponse, error)

	IUpdateAgent_rollbackContext(ctx context.Context, request *IUpdateAgent_rollback) (*IUpdateAgent_rollbackResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfaces(request *IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfaces) (*IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfaces) (*IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostDrive_getDrivePath(request *IHostDrive_getDrivePath) (*IHostDrive_getDrivePathResponse, error)

	IHostDrive_getDrivePathContext(ctx context.Context, request *IHostDrive_getDrivePath) (*IHostDrive_getDrivePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostDrive_getPartitioningType(request *IHostDrive_getPartitioningType) (*IHostDrive_getPartitioningTypeResponse, error)

	IHostDrive_getPartitioningTypeContext(ctx context.Context, request *IHostDrive_getPartitioningType) (*IHostDrive_getPartitioningTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostDrive_getUuid(request *IHostDrive_getUuid) (*IHostDrive_getUuidResponse, error)

	IHostDrive_getUuidContext(ctx context.Context, request *IHostDrive_getUuid) (*IHostDrive_getUuidResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostDrive_getSectorSize(request *IHostDrive_getSectorSize) (*IHostDrive_getSectorSizeResponse, error)

	IHostDrive_getSectorSizeContext(ctx context.Context, request *IHostDrive_getSectorSize) (*IHostDrive_getSectorSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostDrive_getSize(request *IHostDrive_getSize) (*IHostDrive_getSizeResponse, error)

	IHostDrive_getSizeContext(ctx context.Context, request *IHostDrive_getSize) (*IHostDrive_getSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostDrive_getModel(request *IHostDrive_getModel) (*IHostDrive_getModelResponse, error)

	IHostDrive_getModelContext(ctx context.Context, request *IHostDrive_getModel) (*IHostDrive_getModelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostDrive_getPartitions(request *IHostDrive_getPartitions) (*IHostDrive_getPartitionsResponse, error)

	IHostDrive_getPartitionsContext(ctx context.Context, request *IHostDrive_getPartitions) (*IHostDrive_getPartitionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getDVDDrives(request *IHost_getDVDDrives) (*IHost_getDVDDrivesResponse, error)

	IHost_getDVDDrivesContext(ctx context.Context, request *IHost_getDVDDrives) (*IHost_getDVDDrivesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getFloppyDrives(request *IHost_getFloppyDrives) (*IHost_getFloppyDrivesResponse, error)

	IHost_getFloppyDrivesContext(ctx context.Context, request *IHost_getFloppyDrives) (*IHost_getFloppyDrivesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getAudioDevices(request *IHost_getAudioDevices) (*IHost_getAudioDevicesResponse, error)

	IHost_getAudioDevicesContext(ctx context.Context, request *IHost_getAudioDevices) (*IHost_getAudioDevicesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getUSBDevices(request *IHost_getUSBDevices) (*IHost_getUSBDevicesResponse, error)

	IHost_getUSBDevicesContext(ctx context.Context, request *IHost_getUSBDevices) (*IHost_getUSBDevicesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getUSBDeviceFilters(request *IHost_getUSBDeviceFilters) (*IHost_getUSBDeviceFiltersResponse, error)

	IHost_getUSBDeviceFiltersContext(ctx context.Context, request *IHost_getUSBDeviceFilters) (*IHost_getUSBDeviceFiltersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getNetworkInterfaces(request *IHost_getNetworkInterfaces) (*IHost_getNetworkInterfacesResponse, error)

	IHost_getNetworkInterfacesContext(ctx context.Context, request *IHost_getNetworkInterfaces) (*IHost_getNetworkInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getNameServers(request *IHost_getNameServers) (*IHost_getNameServersResponse, error)

	IHost_getNameServersContext(ctx context.Context, request *IHost_getNameServers) (*IHost_getNameServersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getDomainName(request *IHost_getDomainName) (*IHost_getDomainNameResponse, error)

	IHost_getDomainNameContext(ctx context.Context, request *IHost_getDomainName) (*IHost_getDomainNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getSearchStrings(request *IHost_getSearchStrings) (*IHost_getSearchStringsResponse, error)

	IHost_getSearchStringsContext(ctx context.Context, request *IHost_getSearchStrings) (*IHost_getSearchStringsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getProcessorCount(request *IHost_getProcessorCount) (*IHost_getProcessorCountResponse, error)

	IHost_getProcessorCountContext(ctx context.Context, request *IHost_getProcessorCount) (*IHost_getProcessorCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getProcessorOnlineCount(request *IHost_getProcessorOnlineCount) (*IHost_getProcessorOnlineCountResponse, error)

	IHost_getProcessorOnlineCountContext(ctx context.Context, request *IHost_getProcessorOnlineCount) (*IHost_getProcessorOnlineCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getProcessorCoreCount(request *IHost_getProcessorCoreCount) (*IHost_getProcessorCoreCountResponse, error)

	IHost_getProcessorCoreCountContext(ctx context.Context, request *IHost_getProcessorCoreCount) (*IHost_getProcessorCoreCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getProcessorOnlineCoreCount(request *IHost_getProcessorOnlineCoreCount) (*IHost_getProcessorOnlineCoreCountResponse, error)

	IHost_getProcessorOnlineCoreCountContext(ctx context.Context, request *IHost_getProcessorOnlineCoreCount) (*IHost_getProcessorOnlineCoreCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getHostDrives(request *IHost_getHostDrives) (*IHost_getHostDrivesResponse, error)

	IHost_getHostDrivesContext(ctx context.Context, request *IHost_getHostDrives) (*IHost_getHostDrivesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getMemorySize(request *IHost_getMemorySize) (*IHost_getMemorySizeResponse, error)

	IHost_getMemorySizeContext(ctx context.Context, request *IHost_getMemorySize) (*IHost_getMemorySizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getMemoryAvailable(request *IHost_getMemoryAvailable) (*IHost_getMemoryAvailableResponse, error)

	IHost_getMemoryAvailableContext(ctx context.Context, request *IHost_getMemoryAvailable) (*IHost_getMemoryAvailableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getOperatingSystem(request *IHost_getOperatingSystem) (*IHost_getOperatingSystemResponse, error)

	IHost_getOperatingSystemContext(ctx context.Context, request *IHost_getOperatingSystem) (*IHost_getOperatingSystemResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getOSVersion(request *IHost_getOSVersion) (*IHost_getOSVersionResponse, error)

	IHost_getOSVersionContext(ctx context.Context, request *IHost_getOSVersion) (*IHost_getOSVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getUTCTime(request *IHost_getUTCTime) (*IHost_getUTCTimeResponse, error)

	IHost_getUTCTimeContext(ctx context.Context, request *IHost_getUTCTime) (*IHost_getUTCTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getAcceleration3DAvailable(request *IHost_getAcceleration3DAvailable) (*IHost_getAcceleration3DAvailableResponse, error)

	IHost_getAcceleration3DAvailableContext(ctx context.Context, request *IHost_getAcceleration3DAvailable) (*IHost_getAcceleration3DAvailableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getVideoInputDevices(request *IHost_getVideoInputDevices) (*IHost_getVideoInputDevicesResponse, error)

	IHost_getVideoInputDevicesContext(ctx context.Context, request *IHost_getVideoInputDevices) (*IHost_getVideoInputDevicesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getUpdateHost(request *IHost_getUpdateHost) (*IHost_getUpdateHostResponse, error)

	IHost_getUpdateHostContext(ctx context.Context, request *IHost_getUpdateHost) (*IHost_getUpdateHostResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getUpdateExtPack(request *IHost_getUpdateExtPack) (*IHost_getUpdateExtPackResponse, error)

	IHost_getUpdateExtPackContext(ctx context.Context, request *IHost_getUpdateExtPack) (*IHost_getUpdateExtPackResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getUpdateGuestAdditions(request *IHost_getUpdateGuestAdditions) (*IHost_getUpdateGuestAdditionsResponse, error)

	IHost_getUpdateGuestAdditionsContext(ctx context.Context, request *IHost_getUpdateGuestAdditions) (*IHost_getUpdateGuestAdditionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getProcessorSpeed(request *IHost_getProcessorSpeed) (*IHost_getProcessorSpeedResponse, error)

	IHost_getProcessorSpeedContext(ctx context.Context, request *IHost_getProcessorSpeed) (*IHost_getProcessorSpeedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getProcessorFeature(request *IHost_getProcessorFeature) (*IHost_getProcessorFeatureResponse, error)

	IHost_getProcessorFeatureContext(ctx context.Context, request *IHost_getProcessorFeature) (*IHost_getProcessorFeatureResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getProcessorDescription(request *IHost_getProcessorDescription) (*IHost_getProcessorDescriptionResponse, error)

	IHost_getProcessorDescriptionContext(ctx context.Context, request *IHost_getProcessorDescription) (*IHost_getProcessorDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_getProcessorCPUIDLeaf(request *IHost_getProcessorCPUIDLeaf) (*IHost_getProcessorCPUIDLeafResponse, error)

	IHost_getProcessorCPUIDLeafContext(ctx context.Context, request *IHost_getProcessorCPUIDLeaf) (*IHost_getProcessorCPUIDLeafResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_createHostOnlyNetworkInterface(request *IHost_createHostOnlyNetworkInterface) (*IHost_createHostOnlyNetworkInterfaceResponse, error)

	IHost_createHostOnlyNetworkInterfaceContext(ctx context.Context, request *IHost_createHostOnlyNetworkInterface) (*IHost_createHostOnlyNetworkInterfaceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_removeHostOnlyNetworkInterface(request *IHost_removeHostOnlyNetworkInterface) (*IHost_removeHostOnlyNetworkInterfaceResponse, error)

	IHost_removeHostOnlyNetworkInterfaceContext(ctx context.Context, request *IHost_removeHostOnlyNetworkInterface) (*IHost_removeHostOnlyNetworkInterfaceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_createUSBDeviceFilter(request *IHost_createUSBDeviceFilter) (*IHost_createUSBDeviceFilterResponse, error)

	IHost_createUSBDeviceFilterContext(ctx context.Context, request *IHost_createUSBDeviceFilter) (*IHost_createUSBDeviceFilterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_insertUSBDeviceFilter(request *IHost_insertUSBDeviceFilter) (*IHost_insertUSBDeviceFilterResponse, error)

	IHost_insertUSBDeviceFilterContext(ctx context.Context, request *IHost_insertUSBDeviceFilter) (*IHost_insertUSBDeviceFilterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_removeUSBDeviceFilter(request *IHost_removeUSBDeviceFilter) (*IHost_removeUSBDeviceFilterResponse, error)

	IHost_removeUSBDeviceFilterContext(ctx context.Context, request *IHost_removeUSBDeviceFilter) (*IHost_removeUSBDeviceFilterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_findHostDVDDrive(request *IHost_findHostDVDDrive) (*IHost_findHostDVDDriveResponse, error)

	IHost_findHostDVDDriveContext(ctx context.Context, request *IHost_findHostDVDDrive) (*IHost_findHostDVDDriveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_findHostFloppyDrive(request *IHost_findHostFloppyDrive) (*IHost_findHostFloppyDriveResponse, error)

	IHost_findHostFloppyDriveContext(ctx context.Context, request *IHost_findHostFloppyDrive) (*IHost_findHostFloppyDriveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_findHostNetworkInterfaceByName(request *IHost_findHostNetworkInterfaceByName) (*IHost_findHostNetworkInterfaceByNameResponse, error)

	IHost_findHostNetworkInterfaceByNameContext(ctx context.Context, request *IHost_findHostNetworkInterfaceByName) (*IHost_findHostNetworkInterfaceByNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_findHostNetworkInterfaceById(request *IHost_findHostNetworkInterfaceById) (*IHost_findHostNetworkInterfaceByIdResponse, error)

	IHost_findHostNetworkInterfaceByIdContext(ctx context.Context, request *IHost_findHostNetworkInterfaceById) (*IHost_findHostNetworkInterfaceByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_findHostNetworkInterfacesOfType(request *IHost_findHostNetworkInterfacesOfType) (*IHost_findHostNetworkInterfacesOfTypeResponse, error)

	IHost_findHostNetworkInterfacesOfTypeContext(ctx context.Context, request *IHost_findHostNetworkInterfacesOfType) (*IHost_findHostNetworkInterfacesOfTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_findUSBDeviceById(request *IHost_findUSBDeviceById) (*IHost_findUSBDeviceByIdResponse, error)

	IHost_findUSBDeviceByIdContext(ctx context.Context, request *IHost_findUSBDeviceById) (*IHost_findUSBDeviceByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_findUSBDeviceByAddress(request *IHost_findUSBDeviceByAddress) (*IHost_findUSBDeviceByAddressResponse, error)

	IHost_findUSBDeviceByAddressContext(ctx context.Context, request *IHost_findUSBDeviceByAddress) (*IHost_findUSBDeviceByAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_generateMACAddress(request *IHost_generateMACAddress) (*IHost_generateMACAddressResponse, error)

	IHost_generateMACAddressContext(ctx context.Context, request *IHost_generateMACAddress) (*IHost_generateMACAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_addUSBDeviceSource(request *IHost_addUSBDeviceSource) (*IHost_addUSBDeviceSourceResponse, error)

	IHost_addUSBDeviceSourceContext(ctx context.Context, request *IHost_addUSBDeviceSource) (*IHost_addUSBDeviceSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHost_removeUSBDeviceSource(request *IHost_removeUSBDeviceSource) (*IHost_removeUSBDeviceSourceResponse, error)

	IHost_removeUSBDeviceSourceContext(ctx context.Context, request *IHost_removeUSBDeviceSource) (*IHost_removeUSBDeviceSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICPUProfile_getName(request *ICPUProfile_getName) (*ICPUProfile_getNameResponse, error)

	ICPUProfile_getNameContext(ctx context.Context, request *ICPUProfile_getName) (*ICPUProfile_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICPUProfile_getFullName(request *ICPUProfile_getFullName) (*ICPUProfile_getFullNameResponse, error)

	ICPUProfile_getFullNameContext(ctx context.Context, request *ICPUProfile_getFullName) (*ICPUProfile_getFullNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICPUProfile_getArchitecture(request *ICPUProfile_getArchitecture) (*ICPUProfile_getArchitectureResponse, error)

	ICPUProfile_getArchitectureContext(ctx context.Context, request *ICPUProfile_getArchitecture) (*ICPUProfile_getArchitectureResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMinGuestRAM(request *ISystemProperties_getMinGuestRAM) (*ISystemProperties_getMinGuestRAMResponse, error)

	ISystemProperties_getMinGuestRAMContext(ctx context.Context, request *ISystemProperties_getMinGuestRAM) (*ISystemProperties_getMinGuestRAMResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMaxGuestRAM(request *ISystemProperties_getMaxGuestRAM) (*ISystemProperties_getMaxGuestRAMResponse, error)

	ISystemProperties_getMaxGuestRAMContext(ctx context.Context, request *ISystemProperties_getMaxGuestRAM) (*ISystemProperties_getMaxGuestRAMResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMinGuestVRAM(request *ISystemProperties_getMinGuestVRAM) (*ISystemProperties_getMinGuestVRAMResponse, error)

	ISystemProperties_getMinGuestVRAMContext(ctx context.Context, request *ISystemProperties_getMinGuestVRAM) (*ISystemProperties_getMinGuestVRAMResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMaxGuestVRAM(request *ISystemProperties_getMaxGuestVRAM) (*ISystemProperties_getMaxGuestVRAMResponse, error)

	ISystemProperties_getMaxGuestVRAMContext(ctx context.Context, request *ISystemProperties_getMaxGuestVRAM) (*ISystemProperties_getMaxGuestVRAMResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMinGuestCPUCount(request *ISystemProperties_getMinGuestCPUCount) (*ISystemProperties_getMinGuestCPUCountResponse, error)

	ISystemProperties_getMinGuestCPUCountContext(ctx context.Context, request *ISystemProperties_getMinGuestCPUCount) (*ISystemProperties_getMinGuestCPUCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMaxGuestCPUCount(request *ISystemProperties_getMaxGuestCPUCount) (*ISystemProperties_getMaxGuestCPUCountResponse, error)

	ISystemProperties_getMaxGuestCPUCountContext(ctx context.Context, request *ISystemProperties_getMaxGuestCPUCount) (*ISystemProperties_getMaxGuestCPUCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMaxGuestMonitors(request *ISystemProperties_getMaxGuestMonitors) (*ISystemProperties_getMaxGuestMonitorsResponse, error)

	ISystemProperties_getMaxGuestMonitorsContext(ctx context.Context, request *ISystemProperties_getMaxGuestMonitors) (*ISystemProperties_getMaxGuestMonitorsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getInfoVDSize(request *ISystemProperties_getInfoVDSize) (*ISystemProperties_getInfoVDSizeResponse, error)

	ISystemProperties_getInfoVDSizeContext(ctx context.Context, request *ISystemProperties_getInfoVDSize) (*ISystemProperties_getInfoVDSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSerialPortCount(request *ISystemProperties_getSerialPortCount) (*ISystemProperties_getSerialPortCountResponse, error)

	ISystemProperties_getSerialPortCountContext(ctx context.Context, request *ISystemProperties_getSerialPortCount) (*ISystemProperties_getSerialPortCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getParallelPortCount(request *ISystemProperties_getParallelPortCount) (*ISystemProperties_getParallelPortCountResponse, error)

	ISystemProperties_getParallelPortCountContext(ctx context.Context, request *ISystemProperties_getParallelPortCount) (*ISystemProperties_getParallelPortCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMaxBootPosition(request *ISystemProperties_getMaxBootPosition) (*ISystemProperties_getMaxBootPositionResponse, error)

	ISystemProperties_getMaxBootPositionContext(ctx context.Context, request *ISystemProperties_getMaxBootPosition) (*ISystemProperties_getMaxBootPositionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getRawModeSupported(request *ISystemProperties_getRawModeSupported) (*ISystemProperties_getRawModeSupportedResponse, error)

	ISystemProperties_getRawModeSupportedContext(ctx context.Context, request *ISystemProperties_getRawModeSupported) (*ISystemProperties_getRawModeSupportedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getExclusiveHwVirt(request *ISystemProperties_getExclusiveHwVirt) (*ISystemProperties_getExclusiveHwVirtResponse, error)

	ISystemProperties_getExclusiveHwVirtContext(ctx context.Context, request *ISystemProperties_getExclusiveHwVirt) (*ISystemProperties_getExclusiveHwVirtResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setExclusiveHwVirt(request *ISystemProperties_setExclusiveHwVirt) (*ISystemProperties_setExclusiveHwVirtResponse, error)

	ISystemProperties_setExclusiveHwVirtContext(ctx context.Context, request *ISystemProperties_setExclusiveHwVirt) (*ISystemProperties_setExclusiveHwVirtResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getDefaultMachineFolder(request *ISystemProperties_getDefaultMachineFolder) (*ISystemProperties_getDefaultMachineFolderResponse, error)

	ISystemProperties_getDefaultMachineFolderContext(ctx context.Context, request *ISystemProperties_getDefaultMachineFolder) (*ISystemProperties_getDefaultMachineFolderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setDefaultMachineFolder(request *ISystemProperties_setDefaultMachineFolder) (*ISystemProperties_setDefaultMachineFolderResponse, error)

	ISystemProperties_setDefaultMachineFolderContext(ctx context.Context, request *ISystemProperties_setDefaultMachineFolder) (*ISystemProperties_setDefaultMachineFolderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getLoggingLevel(request *ISystemProperties_getLoggingLevel) (*ISystemProperties_getLoggingLevelResponse, error)

	ISystemProperties_getLoggingLevelContext(ctx context.Context, request *ISystemProperties_getLoggingLevel) (*ISystemProperties_getLoggingLevelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setLoggingLevel(request *ISystemProperties_setLoggingLevel) (*ISystemProperties_setLoggingLevelResponse, error)

	ISystemProperties_setLoggingLevelContext(ctx context.Context, request *ISystemProperties_setLoggingLevel) (*ISystemProperties_setLoggingLevelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMediumFormats(request *ISystemProperties_getMediumFormats) (*ISystemProperties_getMediumFormatsResponse, error)

	ISystemProperties_getMediumFormatsContext(ctx context.Context, request *ISystemProperties_getMediumFormats) (*ISystemProperties_getMediumFormatsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getDefaultHardDiskFormat(request *ISystemProperties_getDefaultHardDiskFormat) (*ISystemProperties_getDefaultHardDiskFormatResponse, error)

	ISystemProperties_getDefaultHardDiskFormatContext(ctx context.Context, request *ISystemProperties_getDefaultHardDiskFormat) (*ISystemProperties_getDefaultHardDiskFormatResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setDefaultHardDiskFormat(request *ISystemProperties_setDefaultHardDiskFormat) (*ISystemProperties_setDefaultHardDiskFormatResponse, error)

	ISystemProperties_setDefaultHardDiskFormatContext(ctx context.Context, request *ISystemProperties_setDefaultHardDiskFormat) (*ISystemProperties_setDefaultHardDiskFormatResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getFreeDiskSpaceWarning(request *ISystemProperties_getFreeDiskSpaceWarning) (*ISystemProperties_getFreeDiskSpaceWarningResponse, error)

	ISystemProperties_getFreeDiskSpaceWarningContext(ctx context.Context, request *ISystemProperties_getFreeDiskSpaceWarning) (*ISystemProperties_getFreeDiskSpaceWarningResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setFreeDiskSpaceWarning(request *ISystemProperties_setFreeDiskSpaceWarning) (*ISystemProperties_setFreeDiskSpaceWarningResponse, error)

	ISystemProperties_setFreeDiskSpaceWarningContext(ctx context.Context, request *ISystemProperties_setFreeDiskSpaceWarning) (*ISystemProperties_setFreeDiskSpaceWarningResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getFreeDiskSpacePercentWarning(request *ISystemProperties_getFreeDiskSpacePercentWarning) (*ISystemProperties_getFreeDiskSpacePercentWarningResponse, error)

	ISystemProperties_getFreeDiskSpacePercentWarningContext(ctx context.Context, request *ISystemProperties_getFreeDiskSpacePercentWarning) (*ISystemProperties_getFreeDiskSpacePercentWarningResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setFreeDiskSpacePercentWarning(request *ISystemProperties_setFreeDiskSpacePercentWarning) (*ISystemProperties_setFreeDiskSpacePercentWarningResponse, error)

	ISystemProperties_setFreeDiskSpacePercentWarningContext(ctx context.Context, request *ISystemProperties_setFreeDiskSpacePercentWarning) (*ISystemProperties_setFreeDiskSpacePercentWarningResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getFreeDiskSpaceError(request *ISystemProperties_getFreeDiskSpaceError) (*ISystemProperties_getFreeDiskSpaceErrorResponse, error)

	ISystemProperties_getFreeDiskSpaceErrorContext(ctx context.Context, request *ISystemProperties_getFreeDiskSpaceError) (*ISystemProperties_getFreeDiskSpaceErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setFreeDiskSpaceError(request *ISystemProperties_setFreeDiskSpaceError) (*ISystemProperties_setFreeDiskSpaceErrorResponse, error)

	ISystemProperties_setFreeDiskSpaceErrorContext(ctx context.Context, request *ISystemProperties_setFreeDiskSpaceError) (*ISystemProperties_setFreeDiskSpaceErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getFreeDiskSpacePercentError(request *ISystemProperties_getFreeDiskSpacePercentError) (*ISystemProperties_getFreeDiskSpacePercentErrorResponse, error)

	ISystemProperties_getFreeDiskSpacePercentErrorContext(ctx context.Context, request *ISystemProperties_getFreeDiskSpacePercentError) (*ISystemProperties_getFreeDiskSpacePercentErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setFreeDiskSpacePercentError(request *ISystemProperties_setFreeDiskSpacePercentError) (*ISystemProperties_setFreeDiskSpacePercentErrorResponse, error)

	ISystemProperties_setFreeDiskSpacePercentErrorContext(ctx context.Context, request *ISystemProperties_setFreeDiskSpacePercentError) (*ISystemProperties_setFreeDiskSpacePercentErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getVRDEAuthLibrary(request *ISystemProperties_getVRDEAuthLibrary) (*ISystemProperties_getVRDEAuthLibraryResponse, error)

	ISystemProperties_getVRDEAuthLibraryContext(ctx context.Context, request *ISystemProperties_getVRDEAuthLibrary) (*ISystemProperties_getVRDEAuthLibraryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setVRDEAuthLibrary(request *ISystemProperties_setVRDEAuthLibrary) (*ISystemProperties_setVRDEAuthLibraryResponse, error)

	ISystemProperties_setVRDEAuthLibraryContext(ctx context.Context, request *ISystemProperties_setVRDEAuthLibrary) (*ISystemProperties_setVRDEAuthLibraryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getWebServiceAuthLibrary(request *ISystemProperties_getWebServiceAuthLibrary) (*ISystemProperties_getWebServiceAuthLibraryResponse, error)

	ISystemProperties_getWebServiceAuthLibraryContext(ctx context.Context, request *ISystemProperties_getWebServiceAuthLibrary) (*ISystemProperties_getWebServiceAuthLibraryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setWebServiceAuthLibrary(request *ISystemProperties_setWebServiceAuthLibrary) (*ISystemProperties_setWebServiceAuthLibraryResponse, error)

	ISystemProperties_setWebServiceAuthLibraryContext(ctx context.Context, request *ISystemProperties_setWebServiceAuthLibrary) (*ISystemProperties_setWebServiceAuthLibraryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getDefaultVRDEExtPack(request *ISystemProperties_getDefaultVRDEExtPack) (*ISystemProperties_getDefaultVRDEExtPackResponse, error)

	ISystemProperties_getDefaultVRDEExtPackContext(ctx context.Context, request *ISystemProperties_getDefaultVRDEExtPack) (*ISystemProperties_getDefaultVRDEExtPackResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setDefaultVRDEExtPack(request *ISystemProperties_setDefaultVRDEExtPack) (*ISystemProperties_setDefaultVRDEExtPackResponse, error)

	ISystemProperties_setDefaultVRDEExtPackContext(ctx context.Context, request *ISystemProperties_setDefaultVRDEExtPack) (*ISystemProperties_setDefaultVRDEExtPackResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getDefaultCryptoExtPack(request *ISystemProperties_getDefaultCryptoExtPack) (*ISystemProperties_getDefaultCryptoExtPackResponse, error)

	ISystemProperties_getDefaultCryptoExtPackContext(ctx context.Context, request *ISystemProperties_getDefaultCryptoExtPack) (*ISystemProperties_getDefaultCryptoExtPackResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setDefaultCryptoExtPack(request *ISystemProperties_setDefaultCryptoExtPack) (*ISystemProperties_setDefaultCryptoExtPackResponse, error)

	ISystemProperties_setDefaultCryptoExtPackContext(ctx context.Context, request *ISystemProperties_setDefaultCryptoExtPack) (*ISystemProperties_setDefaultCryptoExtPackResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getLogHistoryCount(request *ISystemProperties_getLogHistoryCount) (*ISystemProperties_getLogHistoryCountResponse, error)

	ISystemProperties_getLogHistoryCountContext(ctx context.Context, request *ISystemProperties_getLogHistoryCount) (*ISystemProperties_getLogHistoryCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setLogHistoryCount(request *ISystemProperties_setLogHistoryCount) (*ISystemProperties_setLogHistoryCountResponse, error)

	ISystemProperties_setLogHistoryCountContext(ctx context.Context, request *ISystemProperties_setLogHistoryCount) (*ISystemProperties_setLogHistoryCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getDefaultAudioDriver(request *ISystemProperties_getDefaultAudioDriver) (*ISystemProperties_getDefaultAudioDriverResponse, error)

	ISystemProperties_getDefaultAudioDriverContext(ctx context.Context, request *ISystemProperties_getDefaultAudioDriver) (*ISystemProperties_getDefaultAudioDriverResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getAutostartDatabasePath(request *ISystemProperties_getAutostartDatabasePath) (*ISystemProperties_getAutostartDatabasePathResponse, error)

	ISystemProperties_getAutostartDatabasePathContext(ctx context.Context, request *ISystemProperties_getAutostartDatabasePath) (*ISystemProperties_getAutostartDatabasePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setAutostartDatabasePath(request *ISystemProperties_setAutostartDatabasePath) (*ISystemProperties_setAutostartDatabasePathResponse, error)

	ISystemProperties_setAutostartDatabasePathContext(ctx context.Context, request *ISystemProperties_setAutostartDatabasePath) (*ISystemProperties_setAutostartDatabasePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getDefaultAdditionsISO(request *ISystemProperties_getDefaultAdditionsISO) (*ISystemProperties_getDefaultAdditionsISOResponse, error)

	ISystemProperties_getDefaultAdditionsISOContext(ctx context.Context, request *ISystemProperties_getDefaultAdditionsISO) (*ISystemProperties_getDefaultAdditionsISOResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setDefaultAdditionsISO(request *ISystemProperties_setDefaultAdditionsISO) (*ISystemProperties_setDefaultAdditionsISOResponse, error)

	ISystemProperties_setDefaultAdditionsISOContext(ctx context.Context, request *ISystemProperties_setDefaultAdditionsISO) (*ISystemProperties_setDefaultAdditionsISOResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getDefaultFrontend(request *ISystemProperties_getDefaultFrontend) (*ISystemProperties_getDefaultFrontendResponse, error)

	ISystemProperties_getDefaultFrontendContext(ctx context.Context, request *ISystemProperties_getDefaultFrontend) (*ISystemProperties_getDefaultFrontendResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setDefaultFrontend(request *ISystemProperties_setDefaultFrontend) (*ISystemProperties_setDefaultFrontendResponse, error)

	ISystemProperties_setDefaultFrontendContext(ctx context.Context, request *ISystemProperties_setDefaultFrontend) (*ISystemProperties_setDefaultFrontendResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getScreenShotFormats(request *ISystemProperties_getScreenShotFormats) (*ISystemProperties_getScreenShotFormatsResponse, error)

	ISystemProperties_getScreenShotFormatsContext(ctx context.Context, request *ISystemProperties_getScreenShotFormats) (*ISystemProperties_getScreenShotFormatsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getProxyMode(request *ISystemProperties_getProxyMode) (*ISystemProperties_getProxyModeResponse, error)

	ISystemProperties_getProxyModeContext(ctx context.Context, request *ISystemProperties_getProxyMode) (*ISystemProperties_getProxyModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setProxyMode(request *ISystemProperties_setProxyMode) (*ISystemProperties_setProxyModeResponse, error)

	ISystemProperties_setProxyModeContext(ctx context.Context, request *ISystemProperties_setProxyMode) (*ISystemProperties_setProxyModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getProxyURL(request *ISystemProperties_getProxyURL) (*ISystemProperties_getProxyURLResponse, error)

	ISystemProperties_getProxyURLContext(ctx context.Context, request *ISystemProperties_getProxyURL) (*ISystemProperties_getProxyURLResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setProxyURL(request *ISystemProperties_setProxyURL) (*ISystemProperties_setProxyURLResponse, error)

	ISystemProperties_setProxyURLContext(ctx context.Context, request *ISystemProperties_setProxyURL) (*ISystemProperties_setProxyURLResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedParavirtProviders(request *ISystemProperties_getSupportedParavirtProviders) (*ISystemProperties_getSupportedParavirtProvidersResponse, error)

	ISystemProperties_getSupportedParavirtProvidersContext(ctx context.Context, request *ISystemProperties_getSupportedParavirtProviders) (*ISystemProperties_getSupportedParavirtProvidersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedClipboardModes(request *ISystemProperties_getSupportedClipboardModes) (*ISystemProperties_getSupportedClipboardModesResponse, error)

	ISystemProperties_getSupportedClipboardModesContext(ctx context.Context, request *ISystemProperties_getSupportedClipboardModes) (*ISystemProperties_getSupportedClipboardModesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedDnDModes(request *ISystemProperties_getSupportedDnDModes) (*ISystemProperties_getSupportedDnDModesResponse, error)

	ISystemProperties_getSupportedDnDModesContext(ctx context.Context, request *ISystemProperties_getSupportedDnDModes) (*ISystemProperties_getSupportedDnDModesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedFirmwareTypes(request *ISystemProperties_getSupportedFirmwareTypes) (*ISystemProperties_getSupportedFirmwareTypesResponse, error)

	ISystemProperties_getSupportedFirmwareTypesContext(ctx context.Context, request *ISystemProperties_getSupportedFirmwareTypes) (*ISystemProperties_getSupportedFirmwareTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedPointingHIDTypes(request *ISystemProperties_getSupportedPointingHIDTypes) (*ISystemProperties_getSupportedPointingHIDTypesResponse, error)

	ISystemProperties_getSupportedPointingHIDTypesContext(ctx context.Context, request *ISystemProperties_getSupportedPointingHIDTypes) (*ISystemProperties_getSupportedPointingHIDTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedKeyboardHIDTypes(request *ISystemProperties_getSupportedKeyboardHIDTypes) (*ISystemProperties_getSupportedKeyboardHIDTypesResponse, error)

	ISystemProperties_getSupportedKeyboardHIDTypesContext(ctx context.Context, request *ISystemProperties_getSupportedKeyboardHIDTypes) (*ISystemProperties_getSupportedKeyboardHIDTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedVFSTypes(request *ISystemProperties_getSupportedVFSTypes) (*ISystemProperties_getSupportedVFSTypesResponse, error)

	ISystemProperties_getSupportedVFSTypesContext(ctx context.Context, request *ISystemProperties_getSupportedVFSTypes) (*ISystemProperties_getSupportedVFSTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedImportOptions(request *ISystemProperties_getSupportedImportOptions) (*ISystemProperties_getSupportedImportOptionsResponse, error)

	ISystemProperties_getSupportedImportOptionsContext(ctx context.Context, request *ISystemProperties_getSupportedImportOptions) (*ISystemProperties_getSupportedImportOptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedExportOptions(request *ISystemProperties_getSupportedExportOptions) (*ISystemProperties_getSupportedExportOptionsResponse, error)

	ISystemProperties_getSupportedExportOptionsContext(ctx context.Context, request *ISystemProperties_getSupportedExportOptions) (*ISystemProperties_getSupportedExportOptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedRecordingFeatures(request *ISystemProperties_getSupportedRecordingFeatures) (*ISystemProperties_getSupportedRecordingFeaturesResponse, error)

	ISystemProperties_getSupportedRecordingFeaturesContext(ctx context.Context, request *ISystemProperties_getSupportedRecordingFeatures) (*ISystemProperties_getSupportedRecordingFeaturesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedRecordingAudioCodecs(request *ISystemProperties_getSupportedRecordingAudioCodecs) (*ISystemProperties_getSupportedRecordingAudioCodecsResponse, error)

	ISystemProperties_getSupportedRecordingAudioCodecsContext(ctx context.Context, request *ISystemProperties_getSupportedRecordingAudioCodecs) (*ISystemProperties_getSupportedRecordingAudioCodecsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedRecordingVideoCodecs(request *ISystemProperties_getSupportedRecordingVideoCodecs) (*ISystemProperties_getSupportedRecordingVideoCodecsResponse, error)

	ISystemProperties_getSupportedRecordingVideoCodecsContext(ctx context.Context, request *ISystemProperties_getSupportedRecordingVideoCodecs) (*ISystemProperties_getSupportedRecordingVideoCodecsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedRecordingVSModes(request *ISystemProperties_getSupportedRecordingVSModes) (*ISystemProperties_getSupportedRecordingVSModesResponse, error)

	ISystemProperties_getSupportedRecordingVSModesContext(ctx context.Context, request *ISystemProperties_getSupportedRecordingVSModes) (*ISystemProperties_getSupportedRecordingVSModesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedRecordingARCModes(request *ISystemProperties_getSupportedRecordingARCModes) (*ISystemProperties_getSupportedRecordingARCModesResponse, error)

	ISystemProperties_getSupportedRecordingARCModesContext(ctx context.Context, request *ISystemProperties_getSupportedRecordingARCModes) (*ISystemProperties_getSupportedRecordingARCModesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedRecordingVRCModes(request *ISystemProperties_getSupportedRecordingVRCModes) (*ISystemProperties_getSupportedRecordingVRCModesResponse, error)

	ISystemProperties_getSupportedRecordingVRCModesContext(ctx context.Context, request *ISystemProperties_getSupportedRecordingVRCModes) (*ISystemProperties_getSupportedRecordingVRCModesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedGraphicsControllerTypes(request *ISystemProperties_getSupportedGraphicsControllerTypes) (*ISystemProperties_getSupportedGraphicsControllerTypesResponse, error)

	ISystemProperties_getSupportedGraphicsControllerTypesContext(ctx context.Context, request *ISystemProperties_getSupportedGraphicsControllerTypes) (*ISystemProperties_getSupportedGraphicsControllerTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedCloneOptions(request *ISystemProperties_getSupportedCloneOptions) (*ISystemProperties_getSupportedCloneOptionsResponse, error)

	ISystemProperties_getSupportedCloneOptionsContext(ctx context.Context, request *ISystemProperties_getSupportedCloneOptions) (*ISystemProperties_getSupportedCloneOptionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedAutostopTypes(request *ISystemProperties_getSupportedAutostopTypes) (*ISystemProperties_getSupportedAutostopTypesResponse, error)

	ISystemProperties_getSupportedAutostopTypesContext(ctx context.Context, request *ISystemProperties_getSupportedAutostopTypes) (*ISystemProperties_getSupportedAutostopTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedVMProcPriorities(request *ISystemProperties_getSupportedVMProcPriorities) (*ISystemProperties_getSupportedVMProcPrioritiesResponse, error)

	ISystemProperties_getSupportedVMProcPrioritiesContext(ctx context.Context, request *ISystemProperties_getSupportedVMProcPriorities) (*ISystemProperties_getSupportedVMProcPrioritiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedNetworkAttachmentTypes(request *ISystemProperties_getSupportedNetworkAttachmentTypes) (*ISystemProperties_getSupportedNetworkAttachmentTypesResponse, error)

	ISystemProperties_getSupportedNetworkAttachmentTypesContext(ctx context.Context, request *ISystemProperties_getSupportedNetworkAttachmentTypes) (*ISystemProperties_getSupportedNetworkAttachmentTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedNetworkAdapterTypes(request *ISystemProperties_getSupportedNetworkAdapterTypes) (*ISystemProperties_getSupportedNetworkAdapterTypesResponse, error)

	ISystemProperties_getSupportedNetworkAdapterTypesContext(ctx context.Context, request *ISystemProperties_getSupportedNetworkAdapterTypes) (*ISystemProperties_getSupportedNetworkAdapterTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedPortModes(request *ISystemProperties_getSupportedPortModes) (*ISystemProperties_getSupportedPortModesResponse, error)

	ISystemProperties_getSupportedPortModesContext(ctx context.Context, request *ISystemProperties_getSupportedPortModes) (*ISystemProperties_getSupportedPortModesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedUartTypes(request *ISystemProperties_getSupportedUartTypes) (*ISystemProperties_getSupportedUartTypesResponse, error)

	ISystemProperties_getSupportedUartTypesContext(ctx context.Context, request *ISystemProperties_getSupportedUartTypes) (*ISystemProperties_getSupportedUartTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedUSBControllerTypes(request *ISystemProperties_getSupportedUSBControllerTypes) (*ISystemProperties_getSupportedUSBControllerTypesResponse, error)

	ISystemProperties_getSupportedUSBControllerTypesContext(ctx context.Context, request *ISystemProperties_getSupportedUSBControllerTypes) (*ISystemProperties_getSupportedUSBControllerTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedAudioDriverTypes(request *ISystemProperties_getSupportedAudioDriverTypes) (*ISystemProperties_getSupportedAudioDriverTypesResponse, error)

	ISystemProperties_getSupportedAudioDriverTypesContext(ctx context.Context, request *ISystemProperties_getSupportedAudioDriverTypes) (*ISystemProperties_getSupportedAudioDriverTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedAudioControllerTypes(request *ISystemProperties_getSupportedAudioControllerTypes) (*ISystemProperties_getSupportedAudioControllerTypesResponse, error)

	ISystemProperties_getSupportedAudioControllerTypesContext(ctx context.Context, request *ISystemProperties_getSupportedAudioControllerTypes) (*ISystemProperties_getSupportedAudioControllerTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedStorageBuses(request *ISystemProperties_getSupportedStorageBuses) (*ISystemProperties_getSupportedStorageBusesResponse, error)

	ISystemProperties_getSupportedStorageBusesContext(ctx context.Context, request *ISystemProperties_getSupportedStorageBuses) (*ISystemProperties_getSupportedStorageBusesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedStorageControllerTypes(request *ISystemProperties_getSupportedStorageControllerTypes) (*ISystemProperties_getSupportedStorageControllerTypesResponse, error)

	ISystemProperties_getSupportedStorageControllerTypesContext(ctx context.Context, request *ISystemProperties_getSupportedStorageControllerTypes) (*ISystemProperties_getSupportedStorageControllerTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedChipsetTypes(request *ISystemProperties_getSupportedChipsetTypes) (*ISystemProperties_getSupportedChipsetTypesResponse, error)

	ISystemProperties_getSupportedChipsetTypesContext(ctx context.Context, request *ISystemProperties_getSupportedChipsetTypes) (*ISystemProperties_getSupportedChipsetTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedIommuTypes(request *ISystemProperties_getSupportedIommuTypes) (*ISystemProperties_getSupportedIommuTypesResponse, error)

	ISystemProperties_getSupportedIommuTypesContext(ctx context.Context, request *ISystemProperties_getSupportedIommuTypes) (*ISystemProperties_getSupportedIommuTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getSupportedTpmTypes(request *ISystemProperties_getSupportedTpmTypes) (*ISystemProperties_getSupportedTpmTypesResponse, error)

	ISystemProperties_getSupportedTpmTypesContext(ctx context.Context, request *ISystemProperties_getSupportedTpmTypes) (*ISystemProperties_getSupportedTpmTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getLanguageId(request *ISystemProperties_getLanguageId) (*ISystemProperties_getLanguageIdResponse, error)

	ISystemProperties_getLanguageIdContext(ctx context.Context, request *ISystemProperties_getLanguageId) (*ISystemProperties_getLanguageIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_setLanguageId(request *ISystemProperties_setLanguageId) (*ISystemProperties_setLanguageIdResponse, error)

	ISystemProperties_setLanguageIdContext(ctx context.Context, request *ISystemProperties_setLanguageId) (*ISystemProperties_setLanguageIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMaxNetworkAdapters(request *ISystemProperties_getMaxNetworkAdapters) (*ISystemProperties_getMaxNetworkAdaptersResponse, error)

	ISystemProperties_getMaxNetworkAdaptersContext(ctx context.Context, request *ISystemProperties_getMaxNetworkAdapters) (*ISystemProperties_getMaxNetworkAdaptersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMaxNetworkAdaptersOfType(request *ISystemProperties_getMaxNetworkAdaptersOfType) (*ISystemProperties_getMaxNetworkAdaptersOfTypeResponse, error)

	ISystemProperties_getMaxNetworkAdaptersOfTypeContext(ctx context.Context, request *ISystemProperties_getMaxNetworkAdaptersOfType) (*ISystemProperties_getMaxNetworkAdaptersOfTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMaxDevicesPerPortForStorageBus(request *ISystemProperties_getMaxDevicesPerPortForStorageBus) (*ISystemProperties_getMaxDevicesPerPortForStorageBusResponse, error)

	ISystemProperties_getMaxDevicesPerPortForStorageBusContext(ctx context.Context, request *ISystemProperties_getMaxDevicesPerPortForStorageBus) (*ISystemProperties_getMaxDevicesPerPortForStorageBusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMinPortCountForStorageBus(request *ISystemProperties_getMinPortCountForStorageBus) (*ISystemProperties_getMinPortCountForStorageBusResponse, error)

	ISystemProperties_getMinPortCountForStorageBusContext(ctx context.Context, request *ISystemProperties_getMinPortCountForStorageBus) (*ISystemProperties_getMinPortCountForStorageBusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMaxPortCountForStorageBus(request *ISystemProperties_getMaxPortCountForStorageBus) (*ISystemProperties_getMaxPortCountForStorageBusResponse, error)

	ISystemProperties_getMaxPortCountForStorageBusContext(ctx context.Context, request *ISystemProperties_getMaxPortCountForStorageBus) (*ISystemProperties_getMaxPortCountForStorageBusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMaxInstancesOfStorageBus(request *ISystemProperties_getMaxInstancesOfStorageBus) (*ISystemProperties_getMaxInstancesOfStorageBusResponse, error)

	ISystemProperties_getMaxInstancesOfStorageBusContext(ctx context.Context, request *ISystemProperties_getMaxInstancesOfStorageBus) (*ISystemProperties_getMaxInstancesOfStorageBusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getDeviceTypesForStorageBus(request *ISystemProperties_getDeviceTypesForStorageBus) (*ISystemProperties_getDeviceTypesForStorageBusResponse, error)

	ISystemProperties_getDeviceTypesForStorageBusContext(ctx context.Context, request *ISystemProperties_getDeviceTypesForStorageBus) (*ISystemProperties_getDeviceTypesForStorageBusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getStorageBusForStorageControllerType(request *ISystemProperties_getStorageBusForStorageControllerType) (*ISystemProperties_getStorageBusForStorageControllerTypeResponse, error)

	ISystemProperties_getStorageBusForStorageControllerTypeContext(ctx context.Context, request *ISystemProperties_getStorageBusForStorageControllerType) (*ISystemProperties_getStorageBusForStorageControllerTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getStorageControllerTypesForStorageBus(request *ISystemProperties_getStorageControllerTypesForStorageBus) (*ISystemProperties_getStorageControllerTypesForStorageBusResponse, error)

	ISystemProperties_getStorageControllerTypesForStorageBusContext(ctx context.Context, request *ISystemProperties_getStorageControllerTypesForStorageBus) (*ISystemProperties_getStorageControllerTypesForStorageBusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getDefaultIoCacheSettingForStorageController(request *ISystemProperties_getDefaultIoCacheSettingForStorageController) (*ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse, error)

	ISystemProperties_getDefaultIoCacheSettingForStorageControllerContext(ctx context.Context, request *ISystemProperties_getDefaultIoCacheSettingForStorageController) (*ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getStorageControllerHotplugCapable(request *ISystemProperties_getStorageControllerHotplugCapable) (*ISystemProperties_getStorageControllerHotplugCapableResponse, error)

	ISystemProperties_getStorageControllerHotplugCapableContext(ctx context.Context, request *ISystemProperties_getStorageControllerHotplugCapable) (*ISystemProperties_getStorageControllerHotplugCapableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getMaxInstancesOfUSBControllerType(request *ISystemProperties_getMaxInstancesOfUSBControllerType) (*ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse, error)

	ISystemProperties_getMaxInstancesOfUSBControllerTypeContext(ctx context.Context, request *ISystemProperties_getMaxInstancesOfUSBControllerType) (*ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISystemProperties_getCPUProfiles(request *ISystemProperties_getCPUProfiles) (*ISystemProperties_getCPUProfilesResponse, error)

	ISystemProperties_getCPUProfilesContext(ctx context.Context, request *ISystemProperties_getCPUProfiles) (*ISystemProperties_getCPUProfilesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDBase_getFormats(request *IDnDBase_getFormats) (*IDnDBase_getFormatsResponse, error)

	IDnDBase_getFormatsContext(ctx context.Context, request *IDnDBase_getFormats) (*IDnDBase_getFormatsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDBase_isFormatSupported(request *IDnDBase_isFormatSupported) (*IDnDBase_isFormatSupportedResponse, error)

	IDnDBase_isFormatSupportedContext(ctx context.Context, request *IDnDBase_isFormatSupported) (*IDnDBase_isFormatSupportedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDBase_addFormats(request *IDnDBase_addFormats) (*IDnDBase_addFormatsResponse, error)

	IDnDBase_addFormatsContext(ctx context.Context, request *IDnDBase_addFormats) (*IDnDBase_addFormatsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDBase_removeFormats(request *IDnDBase_removeFormats) (*IDnDBase_removeFormatsResponse, error)

	IDnDBase_removeFormatsContext(ctx context.Context, request *IDnDBase_removeFormats) (*IDnDBase_removeFormatsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDSource_dragIsPending(request *IDnDSource_dragIsPending) (*IDnDSource_dragIsPendingResponse, error)

	IDnDSource_dragIsPendingContext(ctx context.Context, request *IDnDSource_dragIsPending) (*IDnDSource_dragIsPendingResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDSource_drop(request *IDnDSource_drop) (*IDnDSource_dropResponse, error)

	IDnDSource_dropContext(ctx context.Context, request *IDnDSource_drop) (*IDnDSource_dropResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDSource_receiveData(request *IDnDSource_receiveData) (*IDnDSource_receiveDataResponse, error)

	IDnDSource_receiveDataContext(ctx context.Context, request *IDnDSource_receiveData) (*IDnDSource_receiveDataResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces(request *IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces) (*IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces) (*IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDTarget_enter(request *IDnDTarget_enter) (*IDnDTarget_enterResponse, error)

	IDnDTarget_enterContext(ctx context.Context, request *IDnDTarget_enter) (*IDnDTarget_enterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDTarget_move(request *IDnDTarget_move) (*IDnDTarget_moveResponse, error)

	IDnDTarget_moveContext(ctx context.Context, request *IDnDTarget_move) (*IDnDTarget_moveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDTarget_leave(request *IDnDTarget_leave) (*IDnDTarget_leaveResponse, error)

	IDnDTarget_leaveContext(ctx context.Context, request *IDnDTarget_leave) (*IDnDTarget_leaveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDTarget_drop(request *IDnDTarget_drop) (*IDnDTarget_dropResponse, error)

	IDnDTarget_dropContext(ctx context.Context, request *IDnDTarget_drop) (*IDnDTarget_dropResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDTarget_sendData(request *IDnDTarget_sendData) (*IDnDTarget_sendDataResponse, error)

	IDnDTarget_sendDataContext(ctx context.Context, request *IDnDTarget_sendData) (*IDnDTarget_sendDataResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDTarget_cancel(request *IDnDTarget_cancel) (*IDnDTarget_cancelResponse, error)

	IDnDTarget_cancelContext(ctx context.Context, request *IDnDTarget_cancel) (*IDnDTarget_cancelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces(request *IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces) (*IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces) (*IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getUser(request *IGuestSession_getUser) (*IGuestSession_getUserResponse, error)

	IGuestSession_getUserContext(ctx context.Context, request *IGuestSession_getUser) (*IGuestSession_getUserResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getDomain(request *IGuestSession_getDomain) (*IGuestSession_getDomainResponse, error)

	IGuestSession_getDomainContext(ctx context.Context, request *IGuestSession_getDomain) (*IGuestSession_getDomainResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getName(request *IGuestSession_getName) (*IGuestSession_getNameResponse, error)

	IGuestSession_getNameContext(ctx context.Context, request *IGuestSession_getName) (*IGuestSession_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getId(request *IGuestSession_getId) (*IGuestSession_getIdResponse, error)

	IGuestSession_getIdContext(ctx context.Context, request *IGuestSession_getId) (*IGuestSession_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getTimeout(request *IGuestSession_getTimeout) (*IGuestSession_getTimeoutResponse, error)

	IGuestSession_getTimeoutContext(ctx context.Context, request *IGuestSession_getTimeout) (*IGuestSession_getTimeoutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_setTimeout(request *IGuestSession_setTimeout) (*IGuestSession_setTimeoutResponse, error)

	IGuestSession_setTimeoutContext(ctx context.Context, request *IGuestSession_setTimeout) (*IGuestSession_setTimeoutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getProtocolVersion(request *IGuestSession_getProtocolVersion) (*IGuestSession_getProtocolVersionResponse, error)

	IGuestSession_getProtocolVersionContext(ctx context.Context, request *IGuestSession_getProtocolVersion) (*IGuestSession_getProtocolVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getStatus(request *IGuestSession_getStatus) (*IGuestSession_getStatusResponse, error)

	IGuestSession_getStatusContext(ctx context.Context, request *IGuestSession_getStatus) (*IGuestSession_getStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getEnvironmentChanges(request *IGuestSession_getEnvironmentChanges) (*IGuestSession_getEnvironmentChangesResponse, error)

	IGuestSession_getEnvironmentChangesContext(ctx context.Context, request *IGuestSession_getEnvironmentChanges) (*IGuestSession_getEnvironmentChangesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_setEnvironmentChanges(request *IGuestSession_setEnvironmentChanges) (*IGuestSession_setEnvironmentChangesResponse, error)

	IGuestSession_setEnvironmentChangesContext(ctx context.Context, request *IGuestSession_setEnvironmentChanges) (*IGuestSession_setEnvironmentChangesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getEnvironmentBase(request *IGuestSession_getEnvironmentBase) (*IGuestSession_getEnvironmentBaseResponse, error)

	IGuestSession_getEnvironmentBaseContext(ctx context.Context, request *IGuestSession_getEnvironmentBase) (*IGuestSession_getEnvironmentBaseResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getProcesses(request *IGuestSession_getProcesses) (*IGuestSession_getProcessesResponse, error)

	IGuestSession_getProcessesContext(ctx context.Context, request *IGuestSession_getProcesses) (*IGuestSession_getProcessesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getPathStyle(request *IGuestSession_getPathStyle) (*IGuestSession_getPathStyleResponse, error)

	IGuestSession_getPathStyleContext(ctx context.Context, request *IGuestSession_getPathStyle) (*IGuestSession_getPathStyleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getCurrentDirectory(request *IGuestSession_getCurrentDirectory) (*IGuestSession_getCurrentDirectoryResponse, error)

	IGuestSession_getCurrentDirectoryContext(ctx context.Context, request *IGuestSession_getCurrentDirectory) (*IGuestSession_getCurrentDirectoryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_setCurrentDirectory(request *IGuestSession_setCurrentDirectory) (*IGuestSession_setCurrentDirectoryResponse, error)

	IGuestSession_setCurrentDirectoryContext(ctx context.Context, request *IGuestSession_setCurrentDirectory) (*IGuestSession_setCurrentDirectoryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getUserHome(request *IGuestSession_getUserHome) (*IGuestSession_getUserHomeResponse, error)

	IGuestSession_getUserHomeContext(ctx context.Context, request *IGuestSession_getUserHome) (*IGuestSession_getUserHomeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getUserDocuments(request *IGuestSession_getUserDocuments) (*IGuestSession_getUserDocumentsResponse, error)

	IGuestSession_getUserDocumentsContext(ctx context.Context, request *IGuestSession_getUserDocuments) (*IGuestSession_getUserDocumentsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getDirectories(request *IGuestSession_getDirectories) (*IGuestSession_getDirectoriesResponse, error)

	IGuestSession_getDirectoriesContext(ctx context.Context, request *IGuestSession_getDirectories) (*IGuestSession_getDirectoriesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getFiles(request *IGuestSession_getFiles) (*IGuestSession_getFilesResponse, error)

	IGuestSession_getFilesContext(ctx context.Context, request *IGuestSession_getFiles) (*IGuestSession_getFilesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_getEventSource(request *IGuestSession_getEventSource) (*IGuestSession_getEventSourceResponse, error)

	IGuestSession_getEventSourceContext(ctx context.Context, request *IGuestSession_getEventSource) (*IGuestSession_getEventSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_close(request *IGuestSession_close) (*IGuestSession_closeResponse, error)

	IGuestSession_closeContext(ctx context.Context, request *IGuestSession_close) (*IGuestSession_closeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_copyFromGuest(request *IGuestSession_copyFromGuest) (*IGuestSession_copyFromGuestResponse, error)

	IGuestSession_copyFromGuestContext(ctx context.Context, request *IGuestSession_copyFromGuest) (*IGuestSession_copyFromGuestResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_copyToGuest(request *IGuestSession_copyToGuest) (*IGuestSession_copyToGuestResponse, error)

	IGuestSession_copyToGuestContext(ctx context.Context, request *IGuestSession_copyToGuest) (*IGuestSession_copyToGuestResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_directoryCopy(request *IGuestSession_directoryCopy) (*IGuestSession_directoryCopyResponse, error)

	IGuestSession_directoryCopyContext(ctx context.Context, request *IGuestSession_directoryCopy) (*IGuestSession_directoryCopyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_directoryCopyFromGuest(request *IGuestSession_directoryCopyFromGuest) (*IGuestSession_directoryCopyFromGuestResponse, error)

	IGuestSession_directoryCopyFromGuestContext(ctx context.Context, request *IGuestSession_directoryCopyFromGuest) (*IGuestSession_directoryCopyFromGuestResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_directoryCopyToGuest(request *IGuestSession_directoryCopyToGuest) (*IGuestSession_directoryCopyToGuestResponse, error)

	IGuestSession_directoryCopyToGuestContext(ctx context.Context, request *IGuestSession_directoryCopyToGuest) (*IGuestSession_directoryCopyToGuestResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_directoryCreate(request *IGuestSession_directoryCreate) (*IGuestSession_directoryCreateResponse, error)

	IGuestSession_directoryCreateContext(ctx context.Context, request *IGuestSession_directoryCreate) (*IGuestSession_directoryCreateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_directoryCreateTemp(request *IGuestSession_directoryCreateTemp) (*IGuestSession_directoryCreateTempResponse, error)

	IGuestSession_directoryCreateTempContext(ctx context.Context, request *IGuestSession_directoryCreateTemp) (*IGuestSession_directoryCreateTempResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_directoryExists(request *IGuestSession_directoryExists) (*IGuestSession_directoryExistsResponse, error)

	IGuestSession_directoryExistsContext(ctx context.Context, request *IGuestSession_directoryExists) (*IGuestSession_directoryExistsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_directoryOpen(request *IGuestSession_directoryOpen) (*IGuestSession_directoryOpenResponse, error)

	IGuestSession_directoryOpenContext(ctx context.Context, request *IGuestSession_directoryOpen) (*IGuestSession_directoryOpenResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_directoryRemove(request *IGuestSession_directoryRemove) (*IGuestSession_directoryRemoveResponse, error)

	IGuestSession_directoryRemoveContext(ctx context.Context, request *IGuestSession_directoryRemove) (*IGuestSession_directoryRemoveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_directoryRemoveRecursive(request *IGuestSession_directoryRemoveRecursive) (*IGuestSession_directoryRemoveRecursiveResponse, error)

	IGuestSession_directoryRemoveRecursiveContext(ctx context.Context, request *IGuestSession_directoryRemoveRecursive) (*IGuestSession_directoryRemoveRecursiveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_environmentScheduleSet(request *IGuestSession_environmentScheduleSet) (*IGuestSession_environmentScheduleSetResponse, error)

	IGuestSession_environmentScheduleSetContext(ctx context.Context, request *IGuestSession_environmentScheduleSet) (*IGuestSession_environmentScheduleSetResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_environmentScheduleUnset(request *IGuestSession_environmentScheduleUnset) (*IGuestSession_environmentScheduleUnsetResponse, error)

	IGuestSession_environmentScheduleUnsetContext(ctx context.Context, request *IGuestSession_environmentScheduleUnset) (*IGuestSession_environmentScheduleUnsetResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_environmentGetBaseVariable(request *IGuestSession_environmentGetBaseVariable) (*IGuestSession_environmentGetBaseVariableResponse, error)

	IGuestSession_environmentGetBaseVariableContext(ctx context.Context, request *IGuestSession_environmentGetBaseVariable) (*IGuestSession_environmentGetBaseVariableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_environmentDoesBaseVariableExist(request *IGuestSession_environmentDoesBaseVariableExist) (*IGuestSession_environmentDoesBaseVariableExistResponse, error)

	IGuestSession_environmentDoesBaseVariableExistContext(ctx context.Context, request *IGuestSession_environmentDoesBaseVariableExist) (*IGuestSession_environmentDoesBaseVariableExistResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fileCopy(request *IGuestSession_fileCopy) (*IGuestSession_fileCopyResponse, error)

	IGuestSession_fileCopyContext(ctx context.Context, request *IGuestSession_fileCopy) (*IGuestSession_fileCopyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fileCopyFromGuest(request *IGuestSession_fileCopyFromGuest) (*IGuestSession_fileCopyFromGuestResponse, error)

	IGuestSession_fileCopyFromGuestContext(ctx context.Context, request *IGuestSession_fileCopyFromGuest) (*IGuestSession_fileCopyFromGuestResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fileCopyToGuest(request *IGuestSession_fileCopyToGuest) (*IGuestSession_fileCopyToGuestResponse, error)

	IGuestSession_fileCopyToGuestContext(ctx context.Context, request *IGuestSession_fileCopyToGuest) (*IGuestSession_fileCopyToGuestResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fileCreateTemp(request *IGuestSession_fileCreateTemp) (*IGuestSession_fileCreateTempResponse, error)

	IGuestSession_fileCreateTempContext(ctx context.Context, request *IGuestSession_fileCreateTemp) (*IGuestSession_fileCreateTempResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fileExists(request *IGuestSession_fileExists) (*IGuestSession_fileExistsResponse, error)

	IGuestSession_fileExistsContext(ctx context.Context, request *IGuestSession_fileExists) (*IGuestSession_fileExistsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fileOpen(request *IGuestSession_fileOpen) (*IGuestSession_fileOpenResponse, error)

	IGuestSession_fileOpenContext(ctx context.Context, request *IGuestSession_fileOpen) (*IGuestSession_fileOpenResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fileOpenEx(request *IGuestSession_fileOpenEx) (*IGuestSession_fileOpenExResponse, error)

	IGuestSession_fileOpenExContext(ctx context.Context, request *IGuestSession_fileOpenEx) (*IGuestSession_fileOpenExResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fileQuerySize(request *IGuestSession_fileQuerySize) (*IGuestSession_fileQuerySizeResponse, error)

	IGuestSession_fileQuerySizeContext(ctx context.Context, request *IGuestSession_fileQuerySize) (*IGuestSession_fileQuerySizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fsObjExists(request *IGuestSession_fsObjExists) (*IGuestSession_fsObjExistsResponse, error)

	IGuestSession_fsObjExistsContext(ctx context.Context, request *IGuestSession_fsObjExists) (*IGuestSession_fsObjExistsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fsObjQueryInfo(request *IGuestSession_fsObjQueryInfo) (*IGuestSession_fsObjQueryInfoResponse, error)

	IGuestSession_fsObjQueryInfoContext(ctx context.Context, request *IGuestSession_fsObjQueryInfo) (*IGuestSession_fsObjQueryInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fsObjRemove(request *IGuestSession_fsObjRemove) (*IGuestSession_fsObjRemoveResponse, error)

	IGuestSession_fsObjRemoveContext(ctx context.Context, request *IGuestSession_fsObjRemove) (*IGuestSession_fsObjRemoveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fsObjRemoveArray(request *IGuestSession_fsObjRemoveArray) (*IGuestSession_fsObjRemoveArrayResponse, error)

	IGuestSession_fsObjRemoveArrayContext(ctx context.Context, request *IGuestSession_fsObjRemoveArray) (*IGuestSession_fsObjRemoveArrayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fsObjRename(request *IGuestSession_fsObjRename) (*IGuestSession_fsObjRenameResponse, error)

	IGuestSession_fsObjRenameContext(ctx context.Context, request *IGuestSession_fsObjRename) (*IGuestSession_fsObjRenameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fsObjMove(request *IGuestSession_fsObjMove) (*IGuestSession_fsObjMoveResponse, error)

	IGuestSession_fsObjMoveContext(ctx context.Context, request *IGuestSession_fsObjMove) (*IGuestSession_fsObjMoveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fsObjMoveArray(request *IGuestSession_fsObjMoveArray) (*IGuestSession_fsObjMoveArrayResponse, error)

	IGuestSession_fsObjMoveArrayContext(ctx context.Context, request *IGuestSession_fsObjMoveArray) (*IGuestSession_fsObjMoveArrayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fsObjCopyArray(request *IGuestSession_fsObjCopyArray) (*IGuestSession_fsObjCopyArrayResponse, error)

	IGuestSession_fsObjCopyArrayContext(ctx context.Context, request *IGuestSession_fsObjCopyArray) (*IGuestSession_fsObjCopyArrayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fsObjSetACL(request *IGuestSession_fsObjSetACL) (*IGuestSession_fsObjSetACLResponse, error)

	IGuestSession_fsObjSetACLContext(ctx context.Context, request *IGuestSession_fsObjSetACL) (*IGuestSession_fsObjSetACLResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fsQueryFreeSpace(request *IGuestSession_fsQueryFreeSpace) (*IGuestSession_fsQueryFreeSpaceResponse, error)

	IGuestSession_fsQueryFreeSpaceContext(ctx context.Context, request *IGuestSession_fsQueryFreeSpace) (*IGuestSession_fsQueryFreeSpaceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_fsQueryInfo(request *IGuestSession_fsQueryInfo) (*IGuestSession_fsQueryInfoResponse, error)

	IGuestSession_fsQueryInfoContext(ctx context.Context, request *IGuestSession_fsQueryInfo) (*IGuestSession_fsQueryInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_processCreate(request *IGuestSession_processCreate) (*IGuestSession_processCreateResponse, error)

	IGuestSession_processCreateContext(ctx context.Context, request *IGuestSession_processCreate) (*IGuestSession_processCreateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_processCreateEx(request *IGuestSession_processCreateEx) (*IGuestSession_processCreateExResponse, error)

	IGuestSession_processCreateExContext(ctx context.Context, request *IGuestSession_processCreateEx) (*IGuestSession_processCreateExResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_processGet(request *IGuestSession_processGet) (*IGuestSession_processGetResponse, error)

	IGuestSession_processGetContext(ctx context.Context, request *IGuestSession_processGet) (*IGuestSession_processGetResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_symlinkCreate(request *IGuestSession_symlinkCreate) (*IGuestSession_symlinkCreateResponse, error)

	IGuestSession_symlinkCreateContext(ctx context.Context, request *IGuestSession_symlinkCreate) (*IGuestSession_symlinkCreateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_symlinkExists(request *IGuestSession_symlinkExists) (*IGuestSession_symlinkExistsResponse, error)

	IGuestSession_symlinkExistsContext(ctx context.Context, request *IGuestSession_symlinkExists) (*IGuestSession_symlinkExistsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_symlinkRead(request *IGuestSession_symlinkRead) (*IGuestSession_symlinkReadResponse, error)

	IGuestSession_symlinkReadContext(ctx context.Context, request *IGuestSession_symlinkRead) (*IGuestSession_symlinkReadResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_waitFor(request *IGuestSession_waitFor) (*IGuestSession_waitForResponse, error)

	IGuestSession_waitForContext(ctx context.Context, request *IGuestSession_waitFor) (*IGuestSession_waitForResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSession_waitForArray(request *IGuestSession_waitForArray) (*IGuestSession_waitForArrayResponse, error)

	IGuestSession_waitForArrayContext(ctx context.Context, request *IGuestSession_waitForArray) (*IGuestSession_waitForArrayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_getArguments(request *IProcess_getArguments) (*IProcess_getArgumentsResponse, error)

	IProcess_getArgumentsContext(ctx context.Context, request *IProcess_getArguments) (*IProcess_getArgumentsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_getEnvironment(request *IProcess_getEnvironment) (*IProcess_getEnvironmentResponse, error)

	IProcess_getEnvironmentContext(ctx context.Context, request *IProcess_getEnvironment) (*IProcess_getEnvironmentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_getEventSource(request *IProcess_getEventSource) (*IProcess_getEventSourceResponse, error)

	IProcess_getEventSourceContext(ctx context.Context, request *IProcess_getEventSource) (*IProcess_getEventSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_getExecutablePath(request *IProcess_getExecutablePath) (*IProcess_getExecutablePathResponse, error)

	IProcess_getExecutablePathContext(ctx context.Context, request *IProcess_getExecutablePath) (*IProcess_getExecutablePathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_getExitCode(request *IProcess_getExitCode) (*IProcess_getExitCodeResponse, error)

	IProcess_getExitCodeContext(ctx context.Context, request *IProcess_getExitCode) (*IProcess_getExitCodeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_getName(request *IProcess_getName) (*IProcess_getNameResponse, error)

	IProcess_getNameContext(ctx context.Context, request *IProcess_getName) (*IProcess_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_getPID(request *IProcess_getPID) (*IProcess_getPIDResponse, error)

	IProcess_getPIDContext(ctx context.Context, request *IProcess_getPID) (*IProcess_getPIDResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_getStatus(request *IProcess_getStatus) (*IProcess_getStatusResponse, error)

	IProcess_getStatusContext(ctx context.Context, request *IProcess_getStatus) (*IProcess_getStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_waitFor(request *IProcess_waitFor) (*IProcess_waitForResponse, error)

	IProcess_waitForContext(ctx context.Context, request *IProcess_waitFor) (*IProcess_waitForResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_waitForArray(request *IProcess_waitForArray) (*IProcess_waitForArrayResponse, error)

	IProcess_waitForArrayContext(ctx context.Context, request *IProcess_waitForArray) (*IProcess_waitForArrayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_read(request *IProcess_read) (*IProcess_readResponse, error)

	IProcess_readContext(ctx context.Context, request *IProcess_read) (*IProcess_readResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_write(request *IProcess_write) (*IProcess_writeResponse, error)

	IProcess_writeContext(ctx context.Context, request *IProcess_write) (*IProcess_writeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_writeArray(request *IProcess_writeArray) (*IProcess_writeArrayResponse, error)

	IProcess_writeArrayContext(ctx context.Context, request *IProcess_writeArray) (*IProcess_writeArrayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProcess_terminate(request *IProcess_terminate) (*IProcess_terminateResponse, error)

	IProcess_terminateContext(ctx context.Context, request *IProcess_terminate) (*IProcess_terminateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestProcess_getMidlDoesNotLikeEmptyInterfaces(request *IGuestProcess_getMidlDoesNotLikeEmptyInterfaces) (*IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IGuestProcess_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestProcess_getMidlDoesNotLikeEmptyInterfaces) (*IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDirectory_getDirectoryName(request *IDirectory_getDirectoryName) (*IDirectory_getDirectoryNameResponse, error)

	IDirectory_getDirectoryNameContext(ctx context.Context, request *IDirectory_getDirectoryName) (*IDirectory_getDirectoryNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDirectory_getFilter(request *IDirectory_getFilter) (*IDirectory_getFilterResponse, error)

	IDirectory_getFilterContext(ctx context.Context, request *IDirectory_getFilter) (*IDirectory_getFilterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDirectory_close(request *IDirectory_close) (*IDirectory_closeResponse, error)

	IDirectory_closeContext(ctx context.Context, request *IDirectory_close) (*IDirectory_closeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDirectory_read(request *IDirectory_read) (*IDirectory_readResponse, error)

	IDirectory_readContext(ctx context.Context, request *IDirectory_read) (*IDirectory_readResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces(request *IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces) (*IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces) (*IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_getEventSource(request *IFile_getEventSource) (*IFile_getEventSourceResponse, error)

	IFile_getEventSourceContext(ctx context.Context, request *IFile_getEventSource) (*IFile_getEventSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_getId(request *IFile_getId) (*IFile_getIdResponse, error)

	IFile_getIdContext(ctx context.Context, request *IFile_getId) (*IFile_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_getInitialSize(request *IFile_getInitialSize) (*IFile_getInitialSizeResponse, error)

	IFile_getInitialSizeContext(ctx context.Context, request *IFile_getInitialSize) (*IFile_getInitialSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_getOffset(request *IFile_getOffset) (*IFile_getOffsetResponse, error)

	IFile_getOffsetContext(ctx context.Context, request *IFile_getOffset) (*IFile_getOffsetResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_getStatus(request *IFile_getStatus) (*IFile_getStatusResponse, error)

	IFile_getStatusContext(ctx context.Context, request *IFile_getStatus) (*IFile_getStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_getFilename(request *IFile_getFilename) (*IFile_getFilenameResponse, error)

	IFile_getFilenameContext(ctx context.Context, request *IFile_getFilename) (*IFile_getFilenameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_getCreationMode(request *IFile_getCreationMode) (*IFile_getCreationModeResponse, error)

	IFile_getCreationModeContext(ctx context.Context, request *IFile_getCreationMode) (*IFile_getCreationModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_getOpenAction(request *IFile_getOpenAction) (*IFile_getOpenActionResponse, error)

	IFile_getOpenActionContext(ctx context.Context, request *IFile_getOpenAction) (*IFile_getOpenActionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_getAccessMode(request *IFile_getAccessMode) (*IFile_getAccessModeResponse, error)

	IFile_getAccessModeContext(ctx context.Context, request *IFile_getAccessMode) (*IFile_getAccessModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_close(request *IFile_close) (*IFile_closeResponse, error)

	IFile_closeContext(ctx context.Context, request *IFile_close) (*IFile_closeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_queryInfo(request *IFile_queryInfo) (*IFile_queryInfoResponse, error)

	IFile_queryInfoContext(ctx context.Context, request *IFile_queryInfo) (*IFile_queryInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_querySize(request *IFile_querySize) (*IFile_querySizeResponse, error)

	IFile_querySizeContext(ctx context.Context, request *IFile_querySize) (*IFile_querySizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_read(request *IFile_read) (*IFile_readResponse, error)

	IFile_readContext(ctx context.Context, request *IFile_read) (*IFile_readResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_readAt(request *IFile_readAt) (*IFile_readAtResponse, error)

	IFile_readAtContext(ctx context.Context, request *IFile_readAt) (*IFile_readAtResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_seek(request *IFile_seek) (*IFile_seekResponse, error)

	IFile_seekContext(ctx context.Context, request *IFile_seek) (*IFile_seekResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_setACL(request *IFile_setACL) (*IFile_setACLResponse, error)

	IFile_setACLContext(ctx context.Context, request *IFile_setACL) (*IFile_setACLResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_setSize(request *IFile_setSize) (*IFile_setSizeResponse, error)

	IFile_setSizeContext(ctx context.Context, request *IFile_setSize) (*IFile_setSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_write(request *IFile_write) (*IFile_writeResponse, error)

	IFile_writeContext(ctx context.Context, request *IFile_write) (*IFile_writeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFile_writeAt(request *IFile_writeAt) (*IFile_writeAtResponse, error)

	IFile_writeAtContext(ctx context.Context, request *IFile_writeAt) (*IFile_writeAtResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFile_getMidlDoesNotLikeEmptyInterfaces(request *IGuestFile_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IGuestFile_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestFile_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getFreeSize(request *IFsInfo_getFreeSize) (*IFsInfo_getFreeSizeResponse, error)

	IFsInfo_getFreeSizeContext(ctx context.Context, request *IFsInfo_getFreeSize) (*IFsInfo_getFreeSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getTotalSize(request *IFsInfo_getTotalSize) (*IFsInfo_getTotalSizeResponse, error)

	IFsInfo_getTotalSizeContext(ctx context.Context, request *IFsInfo_getTotalSize) (*IFsInfo_getTotalSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getBlockSize(request *IFsInfo_getBlockSize) (*IFsInfo_getBlockSizeResponse, error)

	IFsInfo_getBlockSizeContext(ctx context.Context, request *IFsInfo_getBlockSize) (*IFsInfo_getBlockSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getSectorSize(request *IFsInfo_getSectorSize) (*IFsInfo_getSectorSizeResponse, error)

	IFsInfo_getSectorSizeContext(ctx context.Context, request *IFsInfo_getSectorSize) (*IFsInfo_getSectorSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getSerialNumber(request *IFsInfo_getSerialNumber) (*IFsInfo_getSerialNumberResponse, error)

	IFsInfo_getSerialNumberContext(ctx context.Context, request *IFsInfo_getSerialNumber) (*IFsInfo_getSerialNumberResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getIsRemote(request *IFsInfo_getIsRemote) (*IFsInfo_getIsRemoteResponse, error)

	IFsInfo_getIsRemoteContext(ctx context.Context, request *IFsInfo_getIsRemote) (*IFsInfo_getIsRemoteResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getIsCaseSensitive(request *IFsInfo_getIsCaseSensitive) (*IFsInfo_getIsCaseSensitiveResponse, error)

	IFsInfo_getIsCaseSensitiveContext(ctx context.Context, request *IFsInfo_getIsCaseSensitive) (*IFsInfo_getIsCaseSensitiveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getIsReadOnly(request *IFsInfo_getIsReadOnly) (*IFsInfo_getIsReadOnlyResponse, error)

	IFsInfo_getIsReadOnlyContext(ctx context.Context, request *IFsInfo_getIsReadOnly) (*IFsInfo_getIsReadOnlyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getIsCompressed(request *IFsInfo_getIsCompressed) (*IFsInfo_getIsCompressedResponse, error)

	IFsInfo_getIsCompressedContext(ctx context.Context, request *IFsInfo_getIsCompressed) (*IFsInfo_getIsCompressedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getSupportsFileCompression(request *IFsInfo_getSupportsFileCompression) (*IFsInfo_getSupportsFileCompressionResponse, error)

	IFsInfo_getSupportsFileCompressionContext(ctx context.Context, request *IFsInfo_getSupportsFileCompression) (*IFsInfo_getSupportsFileCompressionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getMaxComponent(request *IFsInfo_getMaxComponent) (*IFsInfo_getMaxComponentResponse, error)

	IFsInfo_getMaxComponentContext(ctx context.Context, request *IFsInfo_getMaxComponent) (*IFsInfo_getMaxComponentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getType(request *IFsInfo_getType) (*IFsInfo_getTypeResponse, error)

	IFsInfo_getTypeContext(ctx context.Context, request *IFsInfo_getType) (*IFsInfo_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getLabel(request *IFsInfo_getLabel) (*IFsInfo_getLabelResponse, error)

	IFsInfo_getLabelContext(ctx context.Context, request *IFsInfo_getLabel) (*IFsInfo_getLabelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsInfo_getMountPoint(request *IFsInfo_getMountPoint) (*IFsInfo_getMountPointResponse, error)

	IFsInfo_getMountPointContext(ctx context.Context, request *IFsInfo_getMountPoint) (*IFsInfo_getMountPointResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getName(request *IFsObjInfo_getName) (*IFsObjInfo_getNameResponse, error)

	IFsObjInfo_getNameContext(ctx context.Context, request *IFsObjInfo_getName) (*IFsObjInfo_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getType(request *IFsObjInfo_getType) (*IFsObjInfo_getTypeResponse, error)

	IFsObjInfo_getTypeContext(ctx context.Context, request *IFsObjInfo_getType) (*IFsObjInfo_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getFileAttributes(request *IFsObjInfo_getFileAttributes) (*IFsObjInfo_getFileAttributesResponse, error)

	IFsObjInfo_getFileAttributesContext(ctx context.Context, request *IFsObjInfo_getFileAttributes) (*IFsObjInfo_getFileAttributesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getObjectSize(request *IFsObjInfo_getObjectSize) (*IFsObjInfo_getObjectSizeResponse, error)

	IFsObjInfo_getObjectSizeContext(ctx context.Context, request *IFsObjInfo_getObjectSize) (*IFsObjInfo_getObjectSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getAllocatedSize(request *IFsObjInfo_getAllocatedSize) (*IFsObjInfo_getAllocatedSizeResponse, error)

	IFsObjInfo_getAllocatedSizeContext(ctx context.Context, request *IFsObjInfo_getAllocatedSize) (*IFsObjInfo_getAllocatedSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getAccessTime(request *IFsObjInfo_getAccessTime) (*IFsObjInfo_getAccessTimeResponse, error)

	IFsObjInfo_getAccessTimeContext(ctx context.Context, request *IFsObjInfo_getAccessTime) (*IFsObjInfo_getAccessTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getBirthTime(request *IFsObjInfo_getBirthTime) (*IFsObjInfo_getBirthTimeResponse, error)

	IFsObjInfo_getBirthTimeContext(ctx context.Context, request *IFsObjInfo_getBirthTime) (*IFsObjInfo_getBirthTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getChangeTime(request *IFsObjInfo_getChangeTime) (*IFsObjInfo_getChangeTimeResponse, error)

	IFsObjInfo_getChangeTimeContext(ctx context.Context, request *IFsObjInfo_getChangeTime) (*IFsObjInfo_getChangeTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getModificationTime(request *IFsObjInfo_getModificationTime) (*IFsObjInfo_getModificationTimeResponse, error)

	IFsObjInfo_getModificationTimeContext(ctx context.Context, request *IFsObjInfo_getModificationTime) (*IFsObjInfo_getModificationTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getUID(request *IFsObjInfo_getUID) (*IFsObjInfo_getUIDResponse, error)

	IFsObjInfo_getUIDContext(ctx context.Context, request *IFsObjInfo_getUID) (*IFsObjInfo_getUIDResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getUserName(request *IFsObjInfo_getUserName) (*IFsObjInfo_getUserNameResponse, error)

	IFsObjInfo_getUserNameContext(ctx context.Context, request *IFsObjInfo_getUserName) (*IFsObjInfo_getUserNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getGID(request *IFsObjInfo_getGID) (*IFsObjInfo_getGIDResponse, error)

	IFsObjInfo_getGIDContext(ctx context.Context, request *IFsObjInfo_getGID) (*IFsObjInfo_getGIDResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getGroupName(request *IFsObjInfo_getGroupName) (*IFsObjInfo_getGroupNameResponse, error)

	IFsObjInfo_getGroupNameContext(ctx context.Context, request *IFsObjInfo_getGroupName) (*IFsObjInfo_getGroupNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getNodeId(request *IFsObjInfo_getNodeId) (*IFsObjInfo_getNodeIdResponse, error)

	IFsObjInfo_getNodeIdContext(ctx context.Context, request *IFsObjInfo_getNodeId) (*IFsObjInfo_getNodeIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getNodeIdDevice(request *IFsObjInfo_getNodeIdDevice) (*IFsObjInfo_getNodeIdDeviceResponse, error)

	IFsObjInfo_getNodeIdDeviceContext(ctx context.Context, request *IFsObjInfo_getNodeIdDevice) (*IFsObjInfo_getNodeIdDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getHardLinks(request *IFsObjInfo_getHardLinks) (*IFsObjInfo_getHardLinksResponse, error)

	IFsObjInfo_getHardLinksContext(ctx context.Context, request *IFsObjInfo_getHardLinks) (*IFsObjInfo_getHardLinksResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getDeviceNumber(request *IFsObjInfo_getDeviceNumber) (*IFsObjInfo_getDeviceNumberResponse, error)

	IFsObjInfo_getDeviceNumberContext(ctx context.Context, request *IFsObjInfo_getDeviceNumber) (*IFsObjInfo_getDeviceNumberResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getGenerationId(request *IFsObjInfo_getGenerationId) (*IFsObjInfo_getGenerationIdResponse, error)

	IFsObjInfo_getGenerationIdContext(ctx context.Context, request *IFsObjInfo_getGenerationId) (*IFsObjInfo_getGenerationIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFsObjInfo_getUserFlags(request *IFsObjInfo_getUserFlags) (*IFsObjInfo_getUserFlagsResponse, error)

	IFsObjInfo_getUserFlagsContext(ctx context.Context, request *IFsObjInfo_getUserFlags) (*IFsObjInfo_getUserFlagsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFsInfo_getMidlDoesNotLikeEmptyInterfaces(request *IGuestFsInfo_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFsInfo_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IGuestFsInfo_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestFsInfo_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFsInfo_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces(request *IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getOSTypeId(request *IGuest_getOSTypeId) (*IGuest_getOSTypeIdResponse, error)

	IGuest_getOSTypeIdContext(ctx context.Context, request *IGuest_getOSTypeId) (*IGuest_getOSTypeIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getAdditionsRunLevel(request *IGuest_getAdditionsRunLevel) (*IGuest_getAdditionsRunLevelResponse, error)

	IGuest_getAdditionsRunLevelContext(ctx context.Context, request *IGuest_getAdditionsRunLevel) (*IGuest_getAdditionsRunLevelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getAdditionsVersion(request *IGuest_getAdditionsVersion) (*IGuest_getAdditionsVersionResponse, error)

	IGuest_getAdditionsVersionContext(ctx context.Context, request *IGuest_getAdditionsVersion) (*IGuest_getAdditionsVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getAdditionsRevision(request *IGuest_getAdditionsRevision) (*IGuest_getAdditionsRevisionResponse, error)

	IGuest_getAdditionsRevisionContext(ctx context.Context, request *IGuest_getAdditionsRevision) (*IGuest_getAdditionsRevisionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getDnDSource(request *IGuest_getDnDSource) (*IGuest_getDnDSourceResponse, error)

	IGuest_getDnDSourceContext(ctx context.Context, request *IGuest_getDnDSource) (*IGuest_getDnDSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getDnDTarget(request *IGuest_getDnDTarget) (*IGuest_getDnDTargetResponse, error)

	IGuest_getDnDTargetContext(ctx context.Context, request *IGuest_getDnDTarget) (*IGuest_getDnDTargetResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getEventSource(request *IGuest_getEventSource) (*IGuest_getEventSourceResponse, error)

	IGuest_getEventSourceContext(ctx context.Context, request *IGuest_getEventSource) (*IGuest_getEventSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getFacilities(request *IGuest_getFacilities) (*IGuest_getFacilitiesResponse, error)

	IGuest_getFacilitiesContext(ctx context.Context, request *IGuest_getFacilities) (*IGuest_getFacilitiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getSessions(request *IGuest_getSessions) (*IGuest_getSessionsResponse, error)

	IGuest_getSessionsContext(ctx context.Context, request *IGuest_getSessions) (*IGuest_getSessionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getMemoryBalloonSize(request *IGuest_getMemoryBalloonSize) (*IGuest_getMemoryBalloonSizeResponse, error)

	IGuest_getMemoryBalloonSizeContext(ctx context.Context, request *IGuest_getMemoryBalloonSize) (*IGuest_getMemoryBalloonSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_setMemoryBalloonSize(request *IGuest_setMemoryBalloonSize) (*IGuest_setMemoryBalloonSizeResponse, error)

	IGuest_setMemoryBalloonSizeContext(ctx context.Context, request *IGuest_setMemoryBalloonSize) (*IGuest_setMemoryBalloonSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getStatisticsUpdateInterval(request *IGuest_getStatisticsUpdateInterval) (*IGuest_getStatisticsUpdateIntervalResponse, error)

	IGuest_getStatisticsUpdateIntervalContext(ctx context.Context, request *IGuest_getStatisticsUpdateInterval) (*IGuest_getStatisticsUpdateIntervalResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_setStatisticsUpdateInterval(request *IGuest_setStatisticsUpdateInterval) (*IGuest_setStatisticsUpdateIntervalResponse, error)

	IGuest_setStatisticsUpdateIntervalContext(ctx context.Context, request *IGuest_setStatisticsUpdateInterval) (*IGuest_setStatisticsUpdateIntervalResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_internalGetStatistics(request *IGuest_internalGetStatistics) (*IGuest_internalGetStatisticsResponse, error)

	IGuest_internalGetStatisticsContext(ctx context.Context, request *IGuest_internalGetStatistics) (*IGuest_internalGetStatisticsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getFacilityStatus(request *IGuest_getFacilityStatus) (*IGuest_getFacilityStatusResponse, error)

	IGuest_getFacilityStatusContext(ctx context.Context, request *IGuest_getFacilityStatus) (*IGuest_getFacilityStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_getAdditionsStatus(request *IGuest_getAdditionsStatus) (*IGuest_getAdditionsStatusResponse, error)

	IGuest_getAdditionsStatusContext(ctx context.Context, request *IGuest_getAdditionsStatus) (*IGuest_getAdditionsStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_setCredentials(request *IGuest_setCredentials) (*IGuest_setCredentialsResponse, error)

	IGuest_setCredentialsContext(ctx context.Context, request *IGuest_setCredentials) (*IGuest_setCredentialsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_createSession(request *IGuest_createSession) (*IGuest_createSessionResponse, error)

	IGuest_createSessionContext(ctx context.Context, request *IGuest_createSession) (*IGuest_createSessionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_findSession(request *IGuest_findSession) (*IGuest_findSessionResponse, error)

	IGuest_findSessionContext(ctx context.Context, request *IGuest_findSession) (*IGuest_findSessionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_shutdown(request *IGuest_shutdown) (*IGuest_shutdownResponse, error)

	IGuest_shutdownContext(ctx context.Context, request *IGuest_shutdown) (*IGuest_shutdownResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuest_updateGuestAdditions(request *IGuest_updateGuestAdditions) (*IGuest_updateGuestAdditionsResponse, error)

	IGuest_updateGuestAdditionsContext(ctx context.Context, request *IGuest_updateGuestAdditions) (*IGuest_updateGuestAdditionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getId(request *IProgress_getId) (*IProgress_getIdResponse, error)

	IProgress_getIdContext(ctx context.Context, request *IProgress_getId) (*IProgress_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getDescription(request *IProgress_getDescription) (*IProgress_getDescriptionResponse, error)

	IProgress_getDescriptionContext(ctx context.Context, request *IProgress_getDescription) (*IProgress_getDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getInitiator(request *IProgress_getInitiator) (*IProgress_getInitiatorResponse, error)

	IProgress_getInitiatorContext(ctx context.Context, request *IProgress_getInitiator) (*IProgress_getInitiatorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getCancelable(request *IProgress_getCancelable) (*IProgress_getCancelableResponse, error)

	IProgress_getCancelableContext(ctx context.Context, request *IProgress_getCancelable) (*IProgress_getCancelableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getPercent(request *IProgress_getPercent) (*IProgress_getPercentResponse, error)

	IProgress_getPercentContext(ctx context.Context, request *IProgress_getPercent) (*IProgress_getPercentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getTimeRemaining(request *IProgress_getTimeRemaining) (*IProgress_getTimeRemainingResponse, error)

	IProgress_getTimeRemainingContext(ctx context.Context, request *IProgress_getTimeRemaining) (*IProgress_getTimeRemainingResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getCompleted(request *IProgress_getCompleted) (*IProgress_getCompletedResponse, error)

	IProgress_getCompletedContext(ctx context.Context, request *IProgress_getCompleted) (*IProgress_getCompletedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getCanceled(request *IProgress_getCanceled) (*IProgress_getCanceledResponse, error)

	IProgress_getCanceledContext(ctx context.Context, request *IProgress_getCanceled) (*IProgress_getCanceledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getResultCode(request *IProgress_getResultCode) (*IProgress_getResultCodeResponse, error)

	IProgress_getResultCodeContext(ctx context.Context, request *IProgress_getResultCode) (*IProgress_getResultCodeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getErrorInfo(request *IProgress_getErrorInfo) (*IProgress_getErrorInfoResponse, error)

	IProgress_getErrorInfoContext(ctx context.Context, request *IProgress_getErrorInfo) (*IProgress_getErrorInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getOperationCount(request *IProgress_getOperationCount) (*IProgress_getOperationCountResponse, error)

	IProgress_getOperationCountContext(ctx context.Context, request *IProgress_getOperationCount) (*IProgress_getOperationCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getOperation(request *IProgress_getOperation) (*IProgress_getOperationResponse, error)

	IProgress_getOperationContext(ctx context.Context, request *IProgress_getOperation) (*IProgress_getOperationResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getOperationDescription(request *IProgress_getOperationDescription) (*IProgress_getOperationDescriptionResponse, error)

	IProgress_getOperationDescriptionContext(ctx context.Context, request *IProgress_getOperationDescription) (*IProgress_getOperationDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getOperationPercent(request *IProgress_getOperationPercent) (*IProgress_getOperationPercentResponse, error)

	IProgress_getOperationPercentContext(ctx context.Context, request *IProgress_getOperationPercent) (*IProgress_getOperationPercentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getOperationWeight(request *IProgress_getOperationWeight) (*IProgress_getOperationWeightResponse, error)

	IProgress_getOperationWeightContext(ctx context.Context, request *IProgress_getOperationWeight) (*IProgress_getOperationWeightResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getTimeout(request *IProgress_getTimeout) (*IProgress_getTimeoutResponse, error)

	IProgress_getTimeoutContext(ctx context.Context, request *IProgress_getTimeout) (*IProgress_getTimeoutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_setTimeout(request *IProgress_setTimeout) (*IProgress_setTimeoutResponse, error)

	IProgress_setTimeoutContext(ctx context.Context, request *IProgress_setTimeout) (*IProgress_setTimeoutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_getEventSource(request *IProgress_getEventSource) (*IProgress_getEventSourceResponse, error)

	IProgress_getEventSourceContext(ctx context.Context, request *IProgress_getEventSource) (*IProgress_getEventSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_waitForCompletion(request *IProgress_waitForCompletion) (*IProgress_waitForCompletionResponse, error)

	IProgress_waitForCompletionContext(ctx context.Context, request *IProgress_waitForCompletion) (*IProgress_waitForCompletionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_waitForOperationCompletion(request *IProgress_waitForOperationCompletion) (*IProgress_waitForOperationCompletionResponse, error)

	IProgress_waitForOperationCompletionContext(ctx context.Context, request *IProgress_waitForOperationCompletion) (*IProgress_waitForOperationCompletionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgress_cancel(request *IProgress_cancel) (*IProgress_cancelResponse, error)

	IProgress_cancelContext(ctx context.Context, request *IProgress_cancel) (*IProgress_cancelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshot_getId(request *ISnapshot_getId) (*ISnapshot_getIdResponse, error)

	ISnapshot_getIdContext(ctx context.Context, request *ISnapshot_getId) (*ISnapshot_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshot_getName(request *ISnapshot_getName) (*ISnapshot_getNameResponse, error)

	ISnapshot_getNameContext(ctx context.Context, request *ISnapshot_getName) (*ISnapshot_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshot_setName(request *ISnapshot_setName) (*ISnapshot_setNameResponse, error)

	ISnapshot_setNameContext(ctx context.Context, request *ISnapshot_setName) (*ISnapshot_setNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshot_getDescription(request *ISnapshot_getDescription) (*ISnapshot_getDescriptionResponse, error)

	ISnapshot_getDescriptionContext(ctx context.Context, request *ISnapshot_getDescription) (*ISnapshot_getDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshot_setDescription(request *ISnapshot_setDescription) (*ISnapshot_setDescriptionResponse, error)

	ISnapshot_setDescriptionContext(ctx context.Context, request *ISnapshot_setDescription) (*ISnapshot_setDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshot_getTimeStamp(request *ISnapshot_getTimeStamp) (*ISnapshot_getTimeStampResponse, error)

	ISnapshot_getTimeStampContext(ctx context.Context, request *ISnapshot_getTimeStamp) (*ISnapshot_getTimeStampResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshot_getOnline(request *ISnapshot_getOnline) (*ISnapshot_getOnlineResponse, error)

	ISnapshot_getOnlineContext(ctx context.Context, request *ISnapshot_getOnline) (*ISnapshot_getOnlineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshot_getMachine(request *ISnapshot_getMachine) (*ISnapshot_getMachineResponse, error)

	ISnapshot_getMachineContext(ctx context.Context, request *ISnapshot_getMachine) (*ISnapshot_getMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshot_getParent(request *ISnapshot_getParent) (*ISnapshot_getParentResponse, error)

	ISnapshot_getParentContext(ctx context.Context, request *ISnapshot_getParent) (*ISnapshot_getParentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshot_getChildren(request *ISnapshot_getChildren) (*ISnapshot_getChildrenResponse, error)

	ISnapshot_getChildrenContext(ctx context.Context, request *ISnapshot_getChildren) (*ISnapshot_getChildrenResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshot_getChildrenCount(request *ISnapshot_getChildrenCount) (*ISnapshot_getChildrenCountResponse, error)

	ISnapshot_getChildrenCountContext(ctx context.Context, request *ISnapshot_getChildrenCount) (*ISnapshot_getChildrenCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getId(request *IMedium_getId) (*IMedium_getIdResponse, error)

	IMedium_getIdContext(ctx context.Context, request *IMedium_getId) (*IMedium_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getDescription(request *IMedium_getDescription) (*IMedium_getDescriptionResponse, error)

	IMedium_getDescriptionContext(ctx context.Context, request *IMedium_getDescription) (*IMedium_getDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_setDescription(request *IMedium_setDescription) (*IMedium_setDescriptionResponse, error)

	IMedium_setDescriptionContext(ctx context.Context, request *IMedium_setDescription) (*IMedium_setDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getState(request *IMedium_getState) (*IMedium_getStateResponse, error)

	IMedium_getStateContext(ctx context.Context, request *IMedium_getState) (*IMedium_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getVariant(request *IMedium_getVariant) (*IMedium_getVariantResponse, error)

	IMedium_getVariantContext(ctx context.Context, request *IMedium_getVariant) (*IMedium_getVariantResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getLocation(request *IMedium_getLocation) (*IMedium_getLocationResponse, error)

	IMedium_getLocationContext(ctx context.Context, request *IMedium_getLocation) (*IMedium_getLocationResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_setLocation(request *IMedium_setLocation) (*IMedium_setLocationResponse, error)

	IMedium_setLocationContext(ctx context.Context, request *IMedium_setLocation) (*IMedium_setLocationResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getName(request *IMedium_getName) (*IMedium_getNameResponse, error)

	IMedium_getNameContext(ctx context.Context, request *IMedium_getName) (*IMedium_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getDeviceType(request *IMedium_getDeviceType) (*IMedium_getDeviceTypeResponse, error)

	IMedium_getDeviceTypeContext(ctx context.Context, request *IMedium_getDeviceType) (*IMedium_getDeviceTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getHostDrive(request *IMedium_getHostDrive) (*IMedium_getHostDriveResponse, error)

	IMedium_getHostDriveContext(ctx context.Context, request *IMedium_getHostDrive) (*IMedium_getHostDriveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getSize(request *IMedium_getSize) (*IMedium_getSizeResponse, error)

	IMedium_getSizeContext(ctx context.Context, request *IMedium_getSize) (*IMedium_getSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getFormat(request *IMedium_getFormat) (*IMedium_getFormatResponse, error)

	IMedium_getFormatContext(ctx context.Context, request *IMedium_getFormat) (*IMedium_getFormatResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getMediumFormat(request *IMedium_getMediumFormat) (*IMedium_getMediumFormatResponse, error)

	IMedium_getMediumFormatContext(ctx context.Context, request *IMedium_getMediumFormat) (*IMedium_getMediumFormatResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getType(request *IMedium_getType) (*IMedium_getTypeResponse, error)

	IMedium_getTypeContext(ctx context.Context, request *IMedium_getType) (*IMedium_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_setType(request *IMedium_setType) (*IMedium_setTypeResponse, error)

	IMedium_setTypeContext(ctx context.Context, request *IMedium_setType) (*IMedium_setTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getAllowedTypes(request *IMedium_getAllowedTypes) (*IMedium_getAllowedTypesResponse, error)

	IMedium_getAllowedTypesContext(ctx context.Context, request *IMedium_getAllowedTypes) (*IMedium_getAllowedTypesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getParent(request *IMedium_getParent) (*IMedium_getParentResponse, error)

	IMedium_getParentContext(ctx context.Context, request *IMedium_getParent) (*IMedium_getParentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getChildren(request *IMedium_getChildren) (*IMedium_getChildrenResponse, error)

	IMedium_getChildrenContext(ctx context.Context, request *IMedium_getChildren) (*IMedium_getChildrenResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getBase(request *IMedium_getBase) (*IMedium_getBaseResponse, error)

	IMedium_getBaseContext(ctx context.Context, request *IMedium_getBase) (*IMedium_getBaseResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getReadOnly(request *IMedium_getReadOnly) (*IMedium_getReadOnlyResponse, error)

	IMedium_getReadOnlyContext(ctx context.Context, request *IMedium_getReadOnly) (*IMedium_getReadOnlyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getLogicalSize(request *IMedium_getLogicalSize) (*IMedium_getLogicalSizeResponse, error)

	IMedium_getLogicalSizeContext(ctx context.Context, request *IMedium_getLogicalSize) (*IMedium_getLogicalSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getAutoReset(request *IMedium_getAutoReset) (*IMedium_getAutoResetResponse, error)

	IMedium_getAutoResetContext(ctx context.Context, request *IMedium_getAutoReset) (*IMedium_getAutoResetResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_setAutoReset(request *IMedium_setAutoReset) (*IMedium_setAutoResetResponse, error)

	IMedium_setAutoResetContext(ctx context.Context, request *IMedium_setAutoReset) (*IMedium_setAutoResetResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getLastAccessError(request *IMedium_getLastAccessError) (*IMedium_getLastAccessErrorResponse, error)

	IMedium_getLastAccessErrorContext(ctx context.Context, request *IMedium_getLastAccessError) (*IMedium_getLastAccessErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getMachineIds(request *IMedium_getMachineIds) (*IMedium_getMachineIdsResponse, error)

	IMedium_getMachineIdsContext(ctx context.Context, request *IMedium_getMachineIds) (*IMedium_getMachineIdsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_setIds(request *IMedium_setIds) (*IMedium_setIdsResponse, error)

	IMedium_setIdsContext(ctx context.Context, request *IMedium_setIds) (*IMedium_setIdsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_refreshState(request *IMedium_refreshState) (*IMedium_refreshStateResponse, error)

	IMedium_refreshStateContext(ctx context.Context, request *IMedium_refreshState) (*IMedium_refreshStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getSnapshotIds(request *IMedium_getSnapshotIds) (*IMedium_getSnapshotIdsResponse, error)

	IMedium_getSnapshotIdsContext(ctx context.Context, request *IMedium_getSnapshotIds) (*IMedium_getSnapshotIdsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_lockRead(request *IMedium_lockRead) (*IMedium_lockReadResponse, error)

	IMedium_lockReadContext(ctx context.Context, request *IMedium_lockRead) (*IMedium_lockReadResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_lockWrite(request *IMedium_lockWrite) (*IMedium_lockWriteResponse, error)

	IMedium_lockWriteContext(ctx context.Context, request *IMedium_lockWrite) (*IMedium_lockWriteResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_close(request *IMedium_close) (*IMedium_closeResponse, error)

	IMedium_closeContext(ctx context.Context, request *IMedium_close) (*IMedium_closeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getProperty(request *IMedium_getProperty) (*IMedium_getPropertyResponse, error)

	IMedium_getPropertyContext(ctx context.Context, request *IMedium_getProperty) (*IMedium_getPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_setProperty(request *IMedium_setProperty) (*IMedium_setPropertyResponse, error)

	IMedium_setPropertyContext(ctx context.Context, request *IMedium_setProperty) (*IMedium_setPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getProperties(request *IMedium_getProperties) (*IMedium_getPropertiesResponse, error)

	IMedium_getPropertiesContext(ctx context.Context, request *IMedium_getProperties) (*IMedium_getPropertiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_setProperties(request *IMedium_setProperties) (*IMedium_setPropertiesResponse, error)

	IMedium_setPropertiesContext(ctx context.Context, request *IMedium_setProperties) (*IMedium_setPropertiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_createBaseStorage(request *IMedium_createBaseStorage) (*IMedium_createBaseStorageResponse, error)

	IMedium_createBaseStorageContext(ctx context.Context, request *IMedium_createBaseStorage) (*IMedium_createBaseStorageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_deleteStorage(request *IMedium_deleteStorage) (*IMedium_deleteStorageResponse, error)

	IMedium_deleteStorageContext(ctx context.Context, request *IMedium_deleteStorage) (*IMedium_deleteStorageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_createDiffStorage(request *IMedium_createDiffStorage) (*IMedium_createDiffStorageResponse, error)

	IMedium_createDiffStorageContext(ctx context.Context, request *IMedium_createDiffStorage) (*IMedium_createDiffStorageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_mergeTo(request *IMedium_mergeTo) (*IMedium_mergeToResponse, error)

	IMedium_mergeToContext(ctx context.Context, request *IMedium_mergeTo) (*IMedium_mergeToResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_cloneTo(request *IMedium_cloneTo) (*IMedium_cloneToResponse, error)

	IMedium_cloneToContext(ctx context.Context, request *IMedium_cloneTo) (*IMedium_cloneToResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_cloneToBase(request *IMedium_cloneToBase) (*IMedium_cloneToBaseResponse, error)

	IMedium_cloneToBaseContext(ctx context.Context, request *IMedium_cloneToBase) (*IMedium_cloneToBaseResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_moveTo(request *IMedium_moveTo) (*IMedium_moveToResponse, error)

	IMedium_moveToContext(ctx context.Context, request *IMedium_moveTo) (*IMedium_moveToResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_compact(request *IMedium_compact) (*IMedium_compactResponse, error)

	IMedium_compactContext(ctx context.Context, request *IMedium_compact) (*IMedium_compactResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_resize(request *IMedium_resize) (*IMedium_resizeResponse, error)

	IMedium_resizeContext(ctx context.Context, request *IMedium_resize) (*IMedium_resizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_reset(request *IMedium_reset) (*IMedium_resetResponse, error)

	IMedium_resetContext(ctx context.Context, request *IMedium_reset) (*IMedium_resetResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_changeEncryption(request *IMedium_changeEncryption) (*IMedium_changeEncryptionResponse, error)

	IMedium_changeEncryptionContext(ctx context.Context, request *IMedium_changeEncryption) (*IMedium_changeEncryptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_getEncryptionSettings(request *IMedium_getEncryptionSettings) (*IMedium_getEncryptionSettingsResponse, error)

	IMedium_getEncryptionSettingsContext(ctx context.Context, request *IMedium_getEncryptionSettings) (*IMedium_getEncryptionSettingsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_checkEncryptionPassword(request *IMedium_checkEncryptionPassword) (*IMedium_checkEncryptionPasswordResponse, error)

	IMedium_checkEncryptionPasswordContext(ctx context.Context, request *IMedium_checkEncryptionPassword) (*IMedium_checkEncryptionPasswordResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_openForIO(request *IMedium_openForIO) (*IMedium_openForIOResponse, error)

	IMedium_openForIOContext(ctx context.Context, request *IMedium_openForIO) (*IMedium_openForIOResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMedium_resizeAndCloneTo(request *IMedium_resizeAndCloneTo) (*IMedium_resizeAndCloneToResponse, error)

	IMedium_resizeAndCloneToContext(ctx context.Context, request *IMedium_resizeAndCloneTo) (*IMedium_resizeAndCloneToResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumFormat_getId(request *IMediumFormat_getId) (*IMediumFormat_getIdResponse, error)

	IMediumFormat_getIdContext(ctx context.Context, request *IMediumFormat_getId) (*IMediumFormat_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumFormat_getName(request *IMediumFormat_getName) (*IMediumFormat_getNameResponse, error)

	IMediumFormat_getNameContext(ctx context.Context, request *IMediumFormat_getName) (*IMediumFormat_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumFormat_getCapabilities(request *IMediumFormat_getCapabilities) (*IMediumFormat_getCapabilitiesResponse, error)

	IMediumFormat_getCapabilitiesContext(ctx context.Context, request *IMediumFormat_getCapabilities) (*IMediumFormat_getCapabilitiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumFormat_describeFileExtensions(request *IMediumFormat_describeFileExtensions) (*IMediumFormat_describeFileExtensionsResponse, error)

	IMediumFormat_describeFileExtensionsContext(ctx context.Context, request *IMediumFormat_describeFileExtensions) (*IMediumFormat_describeFileExtensionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumFormat_describeProperties(request *IMediumFormat_describeProperties) (*IMediumFormat_describePropertiesResponse, error)

	IMediumFormat_describePropertiesContext(ctx context.Context, request *IMediumFormat_describeProperties) (*IMediumFormat_describePropertiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDataStream_getReadSize(request *IDataStream_getReadSize) (*IDataStream_getReadSizeResponse, error)

	IDataStream_getReadSizeContext(ctx context.Context, request *IDataStream_getReadSize) (*IDataStream_getReadSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDataStream_read(request *IDataStream_read) (*IDataStream_readResponse, error)

	IDataStream_readContext(ctx context.Context, request *IDataStream_read) (*IDataStream_readResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumIO_getMedium(request *IMediumIO_getMedium) (*IMediumIO_getMediumResponse, error)

	IMediumIO_getMediumContext(ctx context.Context, request *IMediumIO_getMedium) (*IMediumIO_getMediumResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumIO_getWritable(request *IMediumIO_getWritable) (*IMediumIO_getWritableResponse, error)

	IMediumIO_getWritableContext(ctx context.Context, request *IMediumIO_getWritable) (*IMediumIO_getWritableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumIO_getExplorer(request *IMediumIO_getExplorer) (*IMediumIO_getExplorerResponse, error)

	IMediumIO_getExplorerContext(ctx context.Context, request *IMediumIO_getExplorer) (*IMediumIO_getExplorerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumIO_read(request *IMediumIO_read) (*IMediumIO_readResponse, error)

	IMediumIO_readContext(ctx context.Context, request *IMediumIO_read) (*IMediumIO_readResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumIO_write(request *IMediumIO_write) (*IMediumIO_writeResponse, error)

	IMediumIO_writeContext(ctx context.Context, request *IMediumIO_write) (*IMediumIO_writeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumIO_formatFAT(request *IMediumIO_formatFAT) (*IMediumIO_formatFATResponse, error)

	IMediumIO_formatFATContext(ctx context.Context, request *IMediumIO_formatFAT) (*IMediumIO_formatFATResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumIO_initializePartitionTable(request *IMediumIO_initializePartitionTable) (*IMediumIO_initializePartitionTableResponse, error)

	IMediumIO_initializePartitionTableContext(ctx context.Context, request *IMediumIO_initializePartitionTable) (*IMediumIO_initializePartitionTableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumIO_convertToStream(request *IMediumIO_convertToStream) (*IMediumIO_convertToStreamResponse, error)

	IMediumIO_convertToStreamContext(ctx context.Context, request *IMediumIO_convertToStream) (*IMediumIO_convertToStreamResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumIO_close(request *IMediumIO_close) (*IMediumIO_closeResponse, error)

	IMediumIO_closeContext(ctx context.Context, request *IMediumIO_close) (*IMediumIO_closeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IToken_abandon(request *IToken_abandon) (*IToken_abandonResponse, error)

	IToken_abandonContext(ctx context.Context, request *IToken_abandon) (*IToken_abandonResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IToken_dummy(request *IToken_dummy) (*IToken_dummyResponse, error)

	IToken_dummyContext(ctx context.Context, request *IToken_dummy) (*IToken_dummyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IKeyboard_getKeyboardLEDs(request *IKeyboard_getKeyboardLEDs) (*IKeyboard_getKeyboardLEDsResponse, error)

	IKeyboard_getKeyboardLEDsContext(ctx context.Context, request *IKeyboard_getKeyboardLEDs) (*IKeyboard_getKeyboardLEDsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IKeyboard_getEventSource(request *IKeyboard_getEventSource) (*IKeyboard_getEventSourceResponse, error)

	IKeyboard_getEventSourceContext(ctx context.Context, request *IKeyboard_getEventSource) (*IKeyboard_getEventSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IKeyboard_putScancode(request *IKeyboard_putScancode) (*IKeyboard_putScancodeResponse, error)

	IKeyboard_putScancodeContext(ctx context.Context, request *IKeyboard_putScancode) (*IKeyboard_putScancodeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IKeyboard_putScancodes(request *IKeyboard_putScancodes) (*IKeyboard_putScancodesResponse, error)

	IKeyboard_putScancodesContext(ctx context.Context, request *IKeyboard_putScancodes) (*IKeyboard_putScancodesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IKeyboard_putCAD(request *IKeyboard_putCAD) (*IKeyboard_putCADResponse, error)

	IKeyboard_putCADContext(ctx context.Context, request *IKeyboard_putCAD) (*IKeyboard_putCADResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IKeyboard_releaseKeys(request *IKeyboard_releaseKeys) (*IKeyboard_releaseKeysResponse, error)

	IKeyboard_releaseKeysContext(ctx context.Context, request *IKeyboard_releaseKeys) (*IKeyboard_releaseKeysResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IKeyboard_putUsageCode(request *IKeyboard_putUsageCode) (*IKeyboard_putUsageCodeResponse, error)

	IKeyboard_putUsageCodeContext(ctx context.Context, request *IKeyboard_putUsageCode) (*IKeyboard_putUsageCodeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShape_getVisible(request *IMousePointerShape_getVisible) (*IMousePointerShape_getVisibleResponse, error)

	IMousePointerShape_getVisibleContext(ctx context.Context, request *IMousePointerShape_getVisible) (*IMousePointerShape_getVisibleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShape_getAlpha(request *IMousePointerShape_getAlpha) (*IMousePointerShape_getAlphaResponse, error)

	IMousePointerShape_getAlphaContext(ctx context.Context, request *IMousePointerShape_getAlpha) (*IMousePointerShape_getAlphaResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShape_getHotX(request *IMousePointerShape_getHotX) (*IMousePointerShape_getHotXResponse, error)

	IMousePointerShape_getHotXContext(ctx context.Context, request *IMousePointerShape_getHotX) (*IMousePointerShape_getHotXResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShape_getHotY(request *IMousePointerShape_getHotY) (*IMousePointerShape_getHotYResponse, error)

	IMousePointerShape_getHotYContext(ctx context.Context, request *IMousePointerShape_getHotY) (*IMousePointerShape_getHotYResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShape_getWidth(request *IMousePointerShape_getWidth) (*IMousePointerShape_getWidthResponse, error)

	IMousePointerShape_getWidthContext(ctx context.Context, request *IMousePointerShape_getWidth) (*IMousePointerShape_getWidthResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShape_getHeight(request *IMousePointerShape_getHeight) (*IMousePointerShape_getHeightResponse, error)

	IMousePointerShape_getHeightContext(ctx context.Context, request *IMousePointerShape_getHeight) (*IMousePointerShape_getHeightResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShape_getShape(request *IMousePointerShape_getShape) (*IMousePointerShape_getShapeResponse, error)

	IMousePointerShape_getShapeContext(ctx context.Context, request *IMousePointerShape_getShape) (*IMousePointerShape_getShapeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouse_getAbsoluteSupported(request *IMouse_getAbsoluteSupported) (*IMouse_getAbsoluteSupportedResponse, error)

	IMouse_getAbsoluteSupportedContext(ctx context.Context, request *IMouse_getAbsoluteSupported) (*IMouse_getAbsoluteSupportedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouse_getRelativeSupported(request *IMouse_getRelativeSupported) (*IMouse_getRelativeSupportedResponse, error)

	IMouse_getRelativeSupportedContext(ctx context.Context, request *IMouse_getRelativeSupported) (*IMouse_getRelativeSupportedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouse_getTouchScreenSupported(request *IMouse_getTouchScreenSupported) (*IMouse_getTouchScreenSupportedResponse, error)

	IMouse_getTouchScreenSupportedContext(ctx context.Context, request *IMouse_getTouchScreenSupported) (*IMouse_getTouchScreenSupportedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouse_getTouchPadSupported(request *IMouse_getTouchPadSupported) (*IMouse_getTouchPadSupportedResponse, error)

	IMouse_getTouchPadSupportedContext(ctx context.Context, request *IMouse_getTouchPadSupported) (*IMouse_getTouchPadSupportedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouse_getNeedsHostCursor(request *IMouse_getNeedsHostCursor) (*IMouse_getNeedsHostCursorResponse, error)

	IMouse_getNeedsHostCursorContext(ctx context.Context, request *IMouse_getNeedsHostCursor) (*IMouse_getNeedsHostCursorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouse_getPointerShape(request *IMouse_getPointerShape) (*IMouse_getPointerShapeResponse, error)

	IMouse_getPointerShapeContext(ctx context.Context, request *IMouse_getPointerShape) (*IMouse_getPointerShapeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouse_getEventSource(request *IMouse_getEventSource) (*IMouse_getEventSourceResponse, error)

	IMouse_getEventSourceContext(ctx context.Context, request *IMouse_getEventSource) (*IMouse_getEventSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouse_putMouseEvent(request *IMouse_putMouseEvent) (*IMouse_putMouseEventResponse, error)

	IMouse_putMouseEventContext(ctx context.Context, request *IMouse_putMouseEvent) (*IMouse_putMouseEventResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouse_putMouseEventAbsolute(request *IMouse_putMouseEventAbsolute) (*IMouse_putMouseEventAbsoluteResponse, error)

	IMouse_putMouseEventAbsoluteContext(ctx context.Context, request *IMouse_putMouseEventAbsolute) (*IMouse_putMouseEventAbsoluteResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouse_putEventMultiTouch(request *IMouse_putEventMultiTouch) (*IMouse_putEventMultiTouchResponse, error)

	IMouse_putEventMultiTouchContext(ctx context.Context, request *IMouse_putEventMultiTouch) (*IMouse_putEventMultiTouchResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouse_putEventMultiTouchString(request *IMouse_putEventMultiTouchString) (*IMouse_putEventMultiTouchStringResponse, error)

	IMouse_putEventMultiTouchStringContext(ctx context.Context, request *IMouse_putEventMultiTouchString) (*IMouse_putEventMultiTouchStringResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_getWidth(request *IFramebuffer_getWidth) (*IFramebuffer_getWidthResponse, error)

	IFramebuffer_getWidthContext(ctx context.Context, request *IFramebuffer_getWidth) (*IFramebuffer_getWidthResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_getHeight(request *IFramebuffer_getHeight) (*IFramebuffer_getHeightResponse, error)

	IFramebuffer_getHeightContext(ctx context.Context, request *IFramebuffer_getHeight) (*IFramebuffer_getHeightResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_getBitsPerPixel(request *IFramebuffer_getBitsPerPixel) (*IFramebuffer_getBitsPerPixelResponse, error)

	IFramebuffer_getBitsPerPixelContext(ctx context.Context, request *IFramebuffer_getBitsPerPixel) (*IFramebuffer_getBitsPerPixelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_getBytesPerLine(request *IFramebuffer_getBytesPerLine) (*IFramebuffer_getBytesPerLineResponse, error)

	IFramebuffer_getBytesPerLineContext(ctx context.Context, request *IFramebuffer_getBytesPerLine) (*IFramebuffer_getBytesPerLineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_getPixelFormat(request *IFramebuffer_getPixelFormat) (*IFramebuffer_getPixelFormatResponse, error)

	IFramebuffer_getPixelFormatContext(ctx context.Context, request *IFramebuffer_getPixelFormat) (*IFramebuffer_getPixelFormatResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_getHeightReduction(request *IFramebuffer_getHeightReduction) (*IFramebuffer_getHeightReductionResponse, error)

	IFramebuffer_getHeightReductionContext(ctx context.Context, request *IFramebuffer_getHeightReduction) (*IFramebuffer_getHeightReductionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_getOverlay(request *IFramebuffer_getOverlay) (*IFramebuffer_getOverlayResponse, error)

	IFramebuffer_getOverlayContext(ctx context.Context, request *IFramebuffer_getOverlay) (*IFramebuffer_getOverlayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_getCapabilities(request *IFramebuffer_getCapabilities) (*IFramebuffer_getCapabilitiesResponse, error)

	IFramebuffer_getCapabilitiesContext(ctx context.Context, request *IFramebuffer_getCapabilities) (*IFramebuffer_getCapabilitiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_notifyUpdate(request *IFramebuffer_notifyUpdate) (*IFramebuffer_notifyUpdateResponse, error)

	IFramebuffer_notifyUpdateContext(ctx context.Context, request *IFramebuffer_notifyUpdate) (*IFramebuffer_notifyUpdateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_notifyUpdateImage(request *IFramebuffer_notifyUpdateImage) (*IFramebuffer_notifyUpdateImageResponse, error)

	IFramebuffer_notifyUpdateImageContext(ctx context.Context, request *IFramebuffer_notifyUpdateImage) (*IFramebuffer_notifyUpdateImageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_notifyChange(request *IFramebuffer_notifyChange) (*IFramebuffer_notifyChangeResponse, error)

	IFramebuffer_notifyChangeContext(ctx context.Context, request *IFramebuffer_notifyChange) (*IFramebuffer_notifyChangeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_videoModeSupported(request *IFramebuffer_videoModeSupported) (*IFramebuffer_videoModeSupportedResponse, error)

	IFramebuffer_videoModeSupportedContext(ctx context.Context, request *IFramebuffer_videoModeSupported) (*IFramebuffer_videoModeSupportedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebuffer_notify3DEvent(request *IFramebuffer_notify3DEvent) (*IFramebuffer_notify3DEventResponse, error)

	IFramebuffer_notify3DEventContext(ctx context.Context, request *IFramebuffer_notify3DEvent) (*IFramebuffer_notify3DEventResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebufferOverlay_getX(request *IFramebufferOverlay_getX) (*IFramebufferOverlay_getXResponse, error)

	IFramebufferOverlay_getXContext(ctx context.Context, request *IFramebufferOverlay_getX) (*IFramebufferOverlay_getXResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebufferOverlay_getY(request *IFramebufferOverlay_getY) (*IFramebufferOverlay_getYResponse, error)

	IFramebufferOverlay_getYContext(ctx context.Context, request *IFramebufferOverlay_getY) (*IFramebufferOverlay_getYResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebufferOverlay_getVisible(request *IFramebufferOverlay_getVisible) (*IFramebufferOverlay_getVisibleResponse, error)

	IFramebufferOverlay_getVisibleContext(ctx context.Context, request *IFramebufferOverlay_getVisible) (*IFramebufferOverlay_getVisibleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebufferOverlay_setVisible(request *IFramebufferOverlay_setVisible) (*IFramebufferOverlay_setVisibleResponse, error)

	IFramebufferOverlay_setVisibleContext(ctx context.Context, request *IFramebufferOverlay_setVisible) (*IFramebufferOverlay_setVisibleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebufferOverlay_getAlpha(request *IFramebufferOverlay_getAlpha) (*IFramebufferOverlay_getAlphaResponse, error)

	IFramebufferOverlay_getAlphaContext(ctx context.Context, request *IFramebufferOverlay_getAlpha) (*IFramebufferOverlay_getAlphaResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebufferOverlay_setAlpha(request *IFramebufferOverlay_setAlpha) (*IFramebufferOverlay_setAlphaResponse, error)

	IFramebufferOverlay_setAlphaContext(ctx context.Context, request *IFramebufferOverlay_setAlpha) (*IFramebufferOverlay_setAlphaResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFramebufferOverlay_move(request *IFramebufferOverlay_move) (*IFramebufferOverlay_moveResponse, error)

	IFramebufferOverlay_moveContext(ctx context.Context, request *IFramebufferOverlay_move) (*IFramebufferOverlay_moveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestScreenInfo_getScreenId(request *IGuestScreenInfo_getScreenId) (*IGuestScreenInfo_getScreenIdResponse, error)

	IGuestScreenInfo_getScreenIdContext(ctx context.Context, request *IGuestScreenInfo_getScreenId) (*IGuestScreenInfo_getScreenIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestScreenInfo_getGuestMonitorStatus(request *IGuestScreenInfo_getGuestMonitorStatus) (*IGuestScreenInfo_getGuestMonitorStatusResponse, error)

	IGuestScreenInfo_getGuestMonitorStatusContext(ctx context.Context, request *IGuestScreenInfo_getGuestMonitorStatus) (*IGuestScreenInfo_getGuestMonitorStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestScreenInfo_getPrimary(request *IGuestScreenInfo_getPrimary) (*IGuestScreenInfo_getPrimaryResponse, error)

	IGuestScreenInfo_getPrimaryContext(ctx context.Context, request *IGuestScreenInfo_getPrimary) (*IGuestScreenInfo_getPrimaryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestScreenInfo_getOrigin(request *IGuestScreenInfo_getOrigin) (*IGuestScreenInfo_getOriginResponse, error)

	IGuestScreenInfo_getOriginContext(ctx context.Context, request *IGuestScreenInfo_getOrigin) (*IGuestScreenInfo_getOriginResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestScreenInfo_getOriginX(request *IGuestScreenInfo_getOriginX) (*IGuestScreenInfo_getOriginXResponse, error)

	IGuestScreenInfo_getOriginXContext(ctx context.Context, request *IGuestScreenInfo_getOriginX) (*IGuestScreenInfo_getOriginXResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestScreenInfo_getOriginY(request *IGuestScreenInfo_getOriginY) (*IGuestScreenInfo_getOriginYResponse, error)

	IGuestScreenInfo_getOriginYContext(ctx context.Context, request *IGuestScreenInfo_getOriginY) (*IGuestScreenInfo_getOriginYResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestScreenInfo_getWidth(request *IGuestScreenInfo_getWidth) (*IGuestScreenInfo_getWidthResponse, error)

	IGuestScreenInfo_getWidthContext(ctx context.Context, request *IGuestScreenInfo_getWidth) (*IGuestScreenInfo_getWidthResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestScreenInfo_getHeight(request *IGuestScreenInfo_getHeight) (*IGuestScreenInfo_getHeightResponse, error)

	IGuestScreenInfo_getHeightContext(ctx context.Context, request *IGuestScreenInfo_getHeight) (*IGuestScreenInfo_getHeightResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestScreenInfo_getBitsPerPixel(request *IGuestScreenInfo_getBitsPerPixel) (*IGuestScreenInfo_getBitsPerPixelResponse, error)

	IGuestScreenInfo_getBitsPerPixelContext(ctx context.Context, request *IGuestScreenInfo_getBitsPerPixel) (*IGuestScreenInfo_getBitsPerPixelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestScreenInfo_getExtendedInfo(request *IGuestScreenInfo_getExtendedInfo) (*IGuestScreenInfo_getExtendedInfoResponse, error)

	IGuestScreenInfo_getExtendedInfoContext(ctx context.Context, request *IGuestScreenInfo_getExtendedInfo) (*IGuestScreenInfo_getExtendedInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_getGuestScreenLayout(request *IDisplay_getGuestScreenLayout) (*IDisplay_getGuestScreenLayoutResponse, error)

	IDisplay_getGuestScreenLayoutContext(ctx context.Context, request *IDisplay_getGuestScreenLayout) (*IDisplay_getGuestScreenLayoutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_getScreenResolution(request *IDisplay_getScreenResolution) (*IDisplay_getScreenResolutionResponse, error)

	IDisplay_getScreenResolutionContext(ctx context.Context, request *IDisplay_getScreenResolution) (*IDisplay_getScreenResolutionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_attachFramebuffer(request *IDisplay_attachFramebuffer) (*IDisplay_attachFramebufferResponse, error)

	IDisplay_attachFramebufferContext(ctx context.Context, request *IDisplay_attachFramebuffer) (*IDisplay_attachFramebufferResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_detachFramebuffer(request *IDisplay_detachFramebuffer) (*IDisplay_detachFramebufferResponse, error)

	IDisplay_detachFramebufferContext(ctx context.Context, request *IDisplay_detachFramebuffer) (*IDisplay_detachFramebufferResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_queryFramebuffer(request *IDisplay_queryFramebuffer) (*IDisplay_queryFramebufferResponse, error)

	IDisplay_queryFramebufferContext(ctx context.Context, request *IDisplay_queryFramebuffer) (*IDisplay_queryFramebufferResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_setVideoModeHint(request *IDisplay_setVideoModeHint) (*IDisplay_setVideoModeHintResponse, error)

	IDisplay_setVideoModeHintContext(ctx context.Context, request *IDisplay_setVideoModeHint) (*IDisplay_setVideoModeHintResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_getVideoModeHint(request *IDisplay_getVideoModeHint) (*IDisplay_getVideoModeHintResponse, error)

	IDisplay_getVideoModeHintContext(ctx context.Context, request *IDisplay_getVideoModeHint) (*IDisplay_getVideoModeHintResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_setSeamlessMode(request *IDisplay_setSeamlessMode) (*IDisplay_setSeamlessModeResponse, error)

	IDisplay_setSeamlessModeContext(ctx context.Context, request *IDisplay_setSeamlessMode) (*IDisplay_setSeamlessModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_takeScreenShotToArray(request *IDisplay_takeScreenShotToArray) (*IDisplay_takeScreenShotToArrayResponse, error)

	IDisplay_takeScreenShotToArrayContext(ctx context.Context, request *IDisplay_takeScreenShotToArray) (*IDisplay_takeScreenShotToArrayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_invalidateAndUpdate(request *IDisplay_invalidateAndUpdate) (*IDisplay_invalidateAndUpdateResponse, error)

	IDisplay_invalidateAndUpdateContext(ctx context.Context, request *IDisplay_invalidateAndUpdate) (*IDisplay_invalidateAndUpdateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_invalidateAndUpdateScreen(request *IDisplay_invalidateAndUpdateScreen) (*IDisplay_invalidateAndUpdateScreenResponse, error)

	IDisplay_invalidateAndUpdateScreenContext(ctx context.Context, request *IDisplay_invalidateAndUpdateScreen) (*IDisplay_invalidateAndUpdateScreenResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_viewportChanged(request *IDisplay_viewportChanged) (*IDisplay_viewportChangedResponse, error)

	IDisplay_viewportChangedContext(ctx context.Context, request *IDisplay_viewportChanged) (*IDisplay_viewportChangedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_notifyScaleFactorChange(request *IDisplay_notifyScaleFactorChange) (*IDisplay_notifyScaleFactorChangeResponse, error)

	IDisplay_notifyScaleFactorChangeContext(ctx context.Context, request *IDisplay_notifyScaleFactorChange) (*IDisplay_notifyScaleFactorChangeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_notifyHiDPIOutputPolicyChange(request *IDisplay_notifyHiDPIOutputPolicyChange) (*IDisplay_notifyHiDPIOutputPolicyChangeResponse, error)

	IDisplay_notifyHiDPIOutputPolicyChangeContext(ctx context.Context, request *IDisplay_notifyHiDPIOutputPolicyChange) (*IDisplay_notifyHiDPIOutputPolicyChangeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_setScreenLayout(request *IDisplay_setScreenLayout) (*IDisplay_setScreenLayoutResponse, error)

	IDisplay_setScreenLayoutContext(ctx context.Context, request *IDisplay_setScreenLayout) (*IDisplay_setScreenLayoutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_detachScreens(request *IDisplay_detachScreens) (*IDisplay_detachScreensResponse, error)

	IDisplay_detachScreensContext(ctx context.Context, request *IDisplay_detachScreens) (*IDisplay_detachScreensResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDisplay_createGuestScreenInfo(request *IDisplay_createGuestScreenInfo) (*IDisplay_createGuestScreenInfoResponse, error)

	IDisplay_createGuestScreenInfoContext(ctx context.Context, request *IDisplay_createGuestScreenInfo) (*IDisplay_createGuestScreenInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getAdapterType(request *INetworkAdapter_getAdapterType) (*INetworkAdapter_getAdapterTypeResponse, error)

	INetworkAdapter_getAdapterTypeContext(ctx context.Context, request *INetworkAdapter_getAdapterType) (*INetworkAdapter_getAdapterTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setAdapterType(request *INetworkAdapter_setAdapterType) (*INetworkAdapter_setAdapterTypeResponse, error)

	INetworkAdapter_setAdapterTypeContext(ctx context.Context, request *INetworkAdapter_setAdapterType) (*INetworkAdapter_setAdapterTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getSlot(request *INetworkAdapter_getSlot) (*INetworkAdapter_getSlotResponse, error)

	INetworkAdapter_getSlotContext(ctx context.Context, request *INetworkAdapter_getSlot) (*INetworkAdapter_getSlotResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getEnabled(request *INetworkAdapter_getEnabled) (*INetworkAdapter_getEnabledResponse, error)

	INetworkAdapter_getEnabledContext(ctx context.Context, request *INetworkAdapter_getEnabled) (*INetworkAdapter_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setEnabled(request *INetworkAdapter_setEnabled) (*INetworkAdapter_setEnabledResponse, error)

	INetworkAdapter_setEnabledContext(ctx context.Context, request *INetworkAdapter_setEnabled) (*INetworkAdapter_setEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getMACAddress(request *INetworkAdapter_getMACAddress) (*INetworkAdapter_getMACAddressResponse, error)

	INetworkAdapter_getMACAddressContext(ctx context.Context, request *INetworkAdapter_getMACAddress) (*INetworkAdapter_getMACAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setMACAddress(request *INetworkAdapter_setMACAddress) (*INetworkAdapter_setMACAddressResponse, error)

	INetworkAdapter_setMACAddressContext(ctx context.Context, request *INetworkAdapter_setMACAddress) (*INetworkAdapter_setMACAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getAttachmentType(request *INetworkAdapter_getAttachmentType) (*INetworkAdapter_getAttachmentTypeResponse, error)

	INetworkAdapter_getAttachmentTypeContext(ctx context.Context, request *INetworkAdapter_getAttachmentType) (*INetworkAdapter_getAttachmentTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setAttachmentType(request *INetworkAdapter_setAttachmentType) (*INetworkAdapter_setAttachmentTypeResponse, error)

	INetworkAdapter_setAttachmentTypeContext(ctx context.Context, request *INetworkAdapter_setAttachmentType) (*INetworkAdapter_setAttachmentTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getBridgedInterface(request *INetworkAdapter_getBridgedInterface) (*INetworkAdapter_getBridgedInterfaceResponse, error)

	INetworkAdapter_getBridgedInterfaceContext(ctx context.Context, request *INetworkAdapter_getBridgedInterface) (*INetworkAdapter_getBridgedInterfaceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setBridgedInterface(request *INetworkAdapter_setBridgedInterface) (*INetworkAdapter_setBridgedInterfaceResponse, error)

	INetworkAdapter_setBridgedInterfaceContext(ctx context.Context, request *INetworkAdapter_setBridgedInterface) (*INetworkAdapter_setBridgedInterfaceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getHostOnlyInterface(request *INetworkAdapter_getHostOnlyInterface) (*INetworkAdapter_getHostOnlyInterfaceResponse, error)

	INetworkAdapter_getHostOnlyInterfaceContext(ctx context.Context, request *INetworkAdapter_getHostOnlyInterface) (*INetworkAdapter_getHostOnlyInterfaceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setHostOnlyInterface(request *INetworkAdapter_setHostOnlyInterface) (*INetworkAdapter_setHostOnlyInterfaceResponse, error)

	INetworkAdapter_setHostOnlyInterfaceContext(ctx context.Context, request *INetworkAdapter_setHostOnlyInterface) (*INetworkAdapter_setHostOnlyInterfaceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getHostOnlyNetwork(request *INetworkAdapter_getHostOnlyNetwork) (*INetworkAdapter_getHostOnlyNetworkResponse, error)

	INetworkAdapter_getHostOnlyNetworkContext(ctx context.Context, request *INetworkAdapter_getHostOnlyNetwork) (*INetworkAdapter_getHostOnlyNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setHostOnlyNetwork(request *INetworkAdapter_setHostOnlyNetwork) (*INetworkAdapter_setHostOnlyNetworkResponse, error)

	INetworkAdapter_setHostOnlyNetworkContext(ctx context.Context, request *INetworkAdapter_setHostOnlyNetwork) (*INetworkAdapter_setHostOnlyNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getInternalNetwork(request *INetworkAdapter_getInternalNetwork) (*INetworkAdapter_getInternalNetworkResponse, error)

	INetworkAdapter_getInternalNetworkContext(ctx context.Context, request *INetworkAdapter_getInternalNetwork) (*INetworkAdapter_getInternalNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setInternalNetwork(request *INetworkAdapter_setInternalNetwork) (*INetworkAdapter_setInternalNetworkResponse, error)

	INetworkAdapter_setInternalNetworkContext(ctx context.Context, request *INetworkAdapter_setInternalNetwork) (*INetworkAdapter_setInternalNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getNATNetwork(request *INetworkAdapter_getNATNetwork) (*INetworkAdapter_getNATNetworkResponse, error)

	INetworkAdapter_getNATNetworkContext(ctx context.Context, request *INetworkAdapter_getNATNetwork) (*INetworkAdapter_getNATNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setNATNetwork(request *INetworkAdapter_setNATNetwork) (*INetworkAdapter_setNATNetworkResponse, error)

	INetworkAdapter_setNATNetworkContext(ctx context.Context, request *INetworkAdapter_setNATNetwork) (*INetworkAdapter_setNATNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getGenericDriver(request *INetworkAdapter_getGenericDriver) (*INetworkAdapter_getGenericDriverResponse, error)

	INetworkAdapter_getGenericDriverContext(ctx context.Context, request *INetworkAdapter_getGenericDriver) (*INetworkAdapter_getGenericDriverResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setGenericDriver(request *INetworkAdapter_setGenericDriver) (*INetworkAdapter_setGenericDriverResponse, error)

	INetworkAdapter_setGenericDriverContext(ctx context.Context, request *INetworkAdapter_setGenericDriver) (*INetworkAdapter_setGenericDriverResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getCloudNetwork(request *INetworkAdapter_getCloudNetwork) (*INetworkAdapter_getCloudNetworkResponse, error)

	INetworkAdapter_getCloudNetworkContext(ctx context.Context, request *INetworkAdapter_getCloudNetwork) (*INetworkAdapter_getCloudNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setCloudNetwork(request *INetworkAdapter_setCloudNetwork) (*INetworkAdapter_setCloudNetworkResponse, error)

	INetworkAdapter_setCloudNetworkContext(ctx context.Context, request *INetworkAdapter_setCloudNetwork) (*INetworkAdapter_setCloudNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getCableConnected(request *INetworkAdapter_getCableConnected) (*INetworkAdapter_getCableConnectedResponse, error)

	INetworkAdapter_getCableConnectedContext(ctx context.Context, request *INetworkAdapter_getCableConnected) (*INetworkAdapter_getCableConnectedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setCableConnected(request *INetworkAdapter_setCableConnected) (*INetworkAdapter_setCableConnectedResponse, error)

	INetworkAdapter_setCableConnectedContext(ctx context.Context, request *INetworkAdapter_setCableConnected) (*INetworkAdapter_setCableConnectedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getLineSpeed(request *INetworkAdapter_getLineSpeed) (*INetworkAdapter_getLineSpeedResponse, error)

	INetworkAdapter_getLineSpeedContext(ctx context.Context, request *INetworkAdapter_getLineSpeed) (*INetworkAdapter_getLineSpeedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setLineSpeed(request *INetworkAdapter_setLineSpeed) (*INetworkAdapter_setLineSpeedResponse, error)

	INetworkAdapter_setLineSpeedContext(ctx context.Context, request *INetworkAdapter_setLineSpeed) (*INetworkAdapter_setLineSpeedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getPromiscModePolicy(request *INetworkAdapter_getPromiscModePolicy) (*INetworkAdapter_getPromiscModePolicyResponse, error)

	INetworkAdapter_getPromiscModePolicyContext(ctx context.Context, request *INetworkAdapter_getPromiscModePolicy) (*INetworkAdapter_getPromiscModePolicyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setPromiscModePolicy(request *INetworkAdapter_setPromiscModePolicy) (*INetworkAdapter_setPromiscModePolicyResponse, error)

	INetworkAdapter_setPromiscModePolicyContext(ctx context.Context, request *INetworkAdapter_setPromiscModePolicy) (*INetworkAdapter_setPromiscModePolicyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getTraceEnabled(request *INetworkAdapter_getTraceEnabled) (*INetworkAdapter_getTraceEnabledResponse, error)

	INetworkAdapter_getTraceEnabledContext(ctx context.Context, request *INetworkAdapter_getTraceEnabled) (*INetworkAdapter_getTraceEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setTraceEnabled(request *INetworkAdapter_setTraceEnabled) (*INetworkAdapter_setTraceEnabledResponse, error)

	INetworkAdapter_setTraceEnabledContext(ctx context.Context, request *INetworkAdapter_setTraceEnabled) (*INetworkAdapter_setTraceEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getTraceFile(request *INetworkAdapter_getTraceFile) (*INetworkAdapter_getTraceFileResponse, error)

	INetworkAdapter_getTraceFileContext(ctx context.Context, request *INetworkAdapter_getTraceFile) (*INetworkAdapter_getTraceFileResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setTraceFile(request *INetworkAdapter_setTraceFile) (*INetworkAdapter_setTraceFileResponse, error)

	INetworkAdapter_setTraceFileContext(ctx context.Context, request *INetworkAdapter_setTraceFile) (*INetworkAdapter_setTraceFileResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getNATEngine(request *INetworkAdapter_getNATEngine) (*INetworkAdapter_getNATEngineResponse, error)

	INetworkAdapter_getNATEngineContext(ctx context.Context, request *INetworkAdapter_getNATEngine) (*INetworkAdapter_getNATEngineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getBootPriority(request *INetworkAdapter_getBootPriority) (*INetworkAdapter_getBootPriorityResponse, error)

	INetworkAdapter_getBootPriorityContext(ctx context.Context, request *INetworkAdapter_getBootPriority) (*INetworkAdapter_getBootPriorityResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setBootPriority(request *INetworkAdapter_setBootPriority) (*INetworkAdapter_setBootPriorityResponse, error)

	INetworkAdapter_setBootPriorityContext(ctx context.Context, request *INetworkAdapter_setBootPriority) (*INetworkAdapter_setBootPriorityResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getBandwidthGroup(request *INetworkAdapter_getBandwidthGroup) (*INetworkAdapter_getBandwidthGroupResponse, error)

	INetworkAdapter_getBandwidthGroupContext(ctx context.Context, request *INetworkAdapter_getBandwidthGroup) (*INetworkAdapter_getBandwidthGroupResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setBandwidthGroup(request *INetworkAdapter_setBandwidthGroup) (*INetworkAdapter_setBandwidthGroupResponse, error)

	INetworkAdapter_setBandwidthGroupContext(ctx context.Context, request *INetworkAdapter_setBandwidthGroup) (*INetworkAdapter_setBandwidthGroupResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getProperty(request *INetworkAdapter_getProperty) (*INetworkAdapter_getPropertyResponse, error)

	INetworkAdapter_getPropertyContext(ctx context.Context, request *INetworkAdapter_getProperty) (*INetworkAdapter_getPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_setProperty(request *INetworkAdapter_setProperty) (*INetworkAdapter_setPropertyResponse, error)

	INetworkAdapter_setPropertyContext(ctx context.Context, request *INetworkAdapter_setProperty) (*INetworkAdapter_setPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapter_getProperties(request *INetworkAdapter_getProperties) (*INetworkAdapter_getPropertiesResponse, error)

	INetworkAdapter_getPropertiesContext(ctx context.Context, request *INetworkAdapter_getProperties) (*INetworkAdapter_getPropertiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_getSlot(request *ISerialPort_getSlot) (*ISerialPort_getSlotResponse, error)

	ISerialPort_getSlotContext(ctx context.Context, request *ISerialPort_getSlot) (*ISerialPort_getSlotResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_getEnabled(request *ISerialPort_getEnabled) (*ISerialPort_getEnabledResponse, error)

	ISerialPort_getEnabledContext(ctx context.Context, request *ISerialPort_getEnabled) (*ISerialPort_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_setEnabled(request *ISerialPort_setEnabled) (*ISerialPort_setEnabledResponse, error)

	ISerialPort_setEnabledContext(ctx context.Context, request *ISerialPort_setEnabled) (*ISerialPort_setEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_getIOBase(request *ISerialPort_getIOBase) (*ISerialPort_getIOBaseResponse, error)

	ISerialPort_getIOBaseContext(ctx context.Context, request *ISerialPort_getIOBase) (*ISerialPort_getIOBaseResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_setIOBase(request *ISerialPort_setIOBase) (*ISerialPort_setIOBaseResponse, error)

	ISerialPort_setIOBaseContext(ctx context.Context, request *ISerialPort_setIOBase) (*ISerialPort_setIOBaseResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_getIRQ(request *ISerialPort_getIRQ) (*ISerialPort_getIRQResponse, error)

	ISerialPort_getIRQContext(ctx context.Context, request *ISerialPort_getIRQ) (*ISerialPort_getIRQResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_setIRQ(request *ISerialPort_setIRQ) (*ISerialPort_setIRQResponse, error)

	ISerialPort_setIRQContext(ctx context.Context, request *ISerialPort_setIRQ) (*ISerialPort_setIRQResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_getHostMode(request *ISerialPort_getHostMode) (*ISerialPort_getHostModeResponse, error)

	ISerialPort_getHostModeContext(ctx context.Context, request *ISerialPort_getHostMode) (*ISerialPort_getHostModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_setHostMode(request *ISerialPort_setHostMode) (*ISerialPort_setHostModeResponse, error)

	ISerialPort_setHostModeContext(ctx context.Context, request *ISerialPort_setHostMode) (*ISerialPort_setHostModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_getServer(request *ISerialPort_getServer) (*ISerialPort_getServerResponse, error)

	ISerialPort_getServerContext(ctx context.Context, request *ISerialPort_getServer) (*ISerialPort_getServerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_setServer(request *ISerialPort_setServer) (*ISerialPort_setServerResponse, error)

	ISerialPort_setServerContext(ctx context.Context, request *ISerialPort_setServer) (*ISerialPort_setServerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_getPath(request *ISerialPort_getPath) (*ISerialPort_getPathResponse, error)

	ISerialPort_getPathContext(ctx context.Context, request *ISerialPort_getPath) (*ISerialPort_getPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_setPath(request *ISerialPort_setPath) (*ISerialPort_setPathResponse, error)

	ISerialPort_setPathContext(ctx context.Context, request *ISerialPort_setPath) (*ISerialPort_setPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_getUartType(request *ISerialPort_getUartType) (*ISerialPort_getUartTypeResponse, error)

	ISerialPort_getUartTypeContext(ctx context.Context, request *ISerialPort_getUartType) (*ISerialPort_getUartTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPort_setUartType(request *ISerialPort_setUartType) (*ISerialPort_setUartTypeResponse, error)

	ISerialPort_setUartTypeContext(ctx context.Context, request *ISerialPort_setUartType) (*ISerialPort_setUartTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IParallelPort_getSlot(request *IParallelPort_getSlot) (*IParallelPort_getSlotResponse, error)

	IParallelPort_getSlotContext(ctx context.Context, request *IParallelPort_getSlot) (*IParallelPort_getSlotResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IParallelPort_getEnabled(request *IParallelPort_getEnabled) (*IParallelPort_getEnabledResponse, error)

	IParallelPort_getEnabledContext(ctx context.Context, request *IParallelPort_getEnabled) (*IParallelPort_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IParallelPort_setEnabled(request *IParallelPort_setEnabled) (*IParallelPort_setEnabledResponse, error)

	IParallelPort_setEnabledContext(ctx context.Context, request *IParallelPort_setEnabled) (*IParallelPort_setEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IParallelPort_getIOBase(request *IParallelPort_getIOBase) (*IParallelPort_getIOBaseResponse, error)

	IParallelPort_getIOBaseContext(ctx context.Context, request *IParallelPort_getIOBase) (*IParallelPort_getIOBaseResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IParallelPort_setIOBase(request *IParallelPort_setIOBase) (*IParallelPort_setIOBaseResponse, error)

	IParallelPort_setIOBaseContext(ctx context.Context, request *IParallelPort_setIOBase) (*IParallelPort_setIOBaseResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IParallelPort_getIRQ(request *IParallelPort_getIRQ) (*IParallelPort_getIRQResponse, error)

	IParallelPort_getIRQContext(ctx context.Context, request *IParallelPort_getIRQ) (*IParallelPort_getIRQResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IParallelPort_setIRQ(request *IParallelPort_setIRQ) (*IParallelPort_setIRQResponse, error)

	IParallelPort_setIRQContext(ctx context.Context, request *IParallelPort_setIRQ) (*IParallelPort_setIRQResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IParallelPort_getPath(request *IParallelPort_getPath) (*IParallelPort_getPathResponse, error)

	IParallelPort_getPathContext(ctx context.Context, request *IParallelPort_getPath) (*IParallelPort_getPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IParallelPort_setPath(request *IParallelPort_setPath) (*IParallelPort_setPathResponse, error)

	IParallelPort_setPathContext(ctx context.Context, request *IParallelPort_setPath) (*IParallelPort_setPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getSingleStep(request *IMachineDebugger_getSingleStep) (*IMachineDebugger_getSingleStepResponse, error)

	IMachineDebugger_getSingleStepContext(ctx context.Context, request *IMachineDebugger_getSingleStep) (*IMachineDebugger_getSingleStepResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_setSingleStep(request *IMachineDebugger_setSingleStep) (*IMachineDebugger_setSingleStepResponse, error)

	IMachineDebugger_setSingleStepContext(ctx context.Context, request *IMachineDebugger_setSingleStep) (*IMachineDebugger_setSingleStepResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getExecuteAllInIEM(request *IMachineDebugger_getExecuteAllInIEM) (*IMachineDebugger_getExecuteAllInIEMResponse, error)

	IMachineDebugger_getExecuteAllInIEMContext(ctx context.Context, request *IMachineDebugger_getExecuteAllInIEM) (*IMachineDebugger_getExecuteAllInIEMResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_setExecuteAllInIEM(request *IMachineDebugger_setExecuteAllInIEM) (*IMachineDebugger_setExecuteAllInIEMResponse, error)

	IMachineDebugger_setExecuteAllInIEMContext(ctx context.Context, request *IMachineDebugger_setExecuteAllInIEM) (*IMachineDebugger_setExecuteAllInIEMResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getLogEnabled(request *IMachineDebugger_getLogEnabled) (*IMachineDebugger_getLogEnabledResponse, error)

	IMachineDebugger_getLogEnabledContext(ctx context.Context, request *IMachineDebugger_getLogEnabled) (*IMachineDebugger_getLogEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_setLogEnabled(request *IMachineDebugger_setLogEnabled) (*IMachineDebugger_setLogEnabledResponse, error)

	IMachineDebugger_setLogEnabledContext(ctx context.Context, request *IMachineDebugger_setLogEnabled) (*IMachineDebugger_setLogEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getLogDbgFlags(request *IMachineDebugger_getLogDbgFlags) (*IMachineDebugger_getLogDbgFlagsResponse, error)

	IMachineDebugger_getLogDbgFlagsContext(ctx context.Context, request *IMachineDebugger_getLogDbgFlags) (*IMachineDebugger_getLogDbgFlagsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getLogDbgGroups(request *IMachineDebugger_getLogDbgGroups) (*IMachineDebugger_getLogDbgGroupsResponse, error)

	IMachineDebugger_getLogDbgGroupsContext(ctx context.Context, request *IMachineDebugger_getLogDbgGroups) (*IMachineDebugger_getLogDbgGroupsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getLogDbgDestinations(request *IMachineDebugger_getLogDbgDestinations) (*IMachineDebugger_getLogDbgDestinationsResponse, error)

	IMachineDebugger_getLogDbgDestinationsContext(ctx context.Context, request *IMachineDebugger_getLogDbgDestinations) (*IMachineDebugger_getLogDbgDestinationsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getLogRelFlags(request *IMachineDebugger_getLogRelFlags) (*IMachineDebugger_getLogRelFlagsResponse, error)

	IMachineDebugger_getLogRelFlagsContext(ctx context.Context, request *IMachineDebugger_getLogRelFlags) (*IMachineDebugger_getLogRelFlagsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getLogRelGroups(request *IMachineDebugger_getLogRelGroups) (*IMachineDebugger_getLogRelGroupsResponse, error)

	IMachineDebugger_getLogRelGroupsContext(ctx context.Context, request *IMachineDebugger_getLogRelGroups) (*IMachineDebugger_getLogRelGroupsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getLogRelDestinations(request *IMachineDebugger_getLogRelDestinations) (*IMachineDebugger_getLogRelDestinationsResponse, error)

	IMachineDebugger_getLogRelDestinationsContext(ctx context.Context, request *IMachineDebugger_getLogRelDestinations) (*IMachineDebugger_getLogRelDestinationsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getExecutionEngine(request *IMachineDebugger_getExecutionEngine) (*IMachineDebugger_getExecutionEngineResponse, error)

	IMachineDebugger_getExecutionEngineContext(ctx context.Context, request *IMachineDebugger_getExecutionEngine) (*IMachineDebugger_getExecutionEngineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getHWVirtExNestedPagingEnabled(request *IMachineDebugger_getHWVirtExNestedPagingEnabled) (*IMachineDebugger_getHWVirtExNestedPagingEnabledResponse, error)

	IMachineDebugger_getHWVirtExNestedPagingEnabledContext(ctx context.Context, request *IMachineDebugger_getHWVirtExNestedPagingEnabled) (*IMachineDebugger_getHWVirtExNestedPagingEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getHWVirtExVPIDEnabled(request *IMachineDebugger_getHWVirtExVPIDEnabled) (*IMachineDebugger_getHWVirtExVPIDEnabledResponse, error)

	IMachineDebugger_getHWVirtExVPIDEnabledContext(ctx context.Context, request *IMachineDebugger_getHWVirtExVPIDEnabled) (*IMachineDebugger_getHWVirtExVPIDEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getHWVirtExUXEnabled(request *IMachineDebugger_getHWVirtExUXEnabled) (*IMachineDebugger_getHWVirtExUXEnabledResponse, error)

	IMachineDebugger_getHWVirtExUXEnabledContext(ctx context.Context, request *IMachineDebugger_getHWVirtExUXEnabled) (*IMachineDebugger_getHWVirtExUXEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getOSName(request *IMachineDebugger_getOSName) (*IMachineDebugger_getOSNameResponse, error)

	IMachineDebugger_getOSNameContext(ctx context.Context, request *IMachineDebugger_getOSName) (*IMachineDebugger_getOSNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getOSVersion(request *IMachineDebugger_getOSVersion) (*IMachineDebugger_getOSVersionResponse, error)

	IMachineDebugger_getOSVersionContext(ctx context.Context, request *IMachineDebugger_getOSVersion) (*IMachineDebugger_getOSVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getPAEEnabled(request *IMachineDebugger_getPAEEnabled) (*IMachineDebugger_getPAEEnabledResponse, error)

	IMachineDebugger_getPAEEnabledContext(ctx context.Context, request *IMachineDebugger_getPAEEnabled) (*IMachineDebugger_getPAEEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getVirtualTimeRate(request *IMachineDebugger_getVirtualTimeRate) (*IMachineDebugger_getVirtualTimeRateResponse, error)

	IMachineDebugger_getVirtualTimeRateContext(ctx context.Context, request *IMachineDebugger_getVirtualTimeRate) (*IMachineDebugger_getVirtualTimeRateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_setVirtualTimeRate(request *IMachineDebugger_setVirtualTimeRate) (*IMachineDebugger_setVirtualTimeRateResponse, error)

	IMachineDebugger_setVirtualTimeRateContext(ctx context.Context, request *IMachineDebugger_setVirtualTimeRate) (*IMachineDebugger_setVirtualTimeRateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getUptime(request *IMachineDebugger_getUptime) (*IMachineDebugger_getUptimeResponse, error)

	IMachineDebugger_getUptimeContext(ctx context.Context, request *IMachineDebugger_getUptime) (*IMachineDebugger_getUptimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_dumpGuestCore(request *IMachineDebugger_dumpGuestCore) (*IMachineDebugger_dumpGuestCoreResponse, error)

	IMachineDebugger_dumpGuestCoreContext(ctx context.Context, request *IMachineDebugger_dumpGuestCore) (*IMachineDebugger_dumpGuestCoreResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_dumpHostProcessCore(request *IMachineDebugger_dumpHostProcessCore) (*IMachineDebugger_dumpHostProcessCoreResponse, error)

	IMachineDebugger_dumpHostProcessCoreContext(ctx context.Context, request *IMachineDebugger_dumpHostProcessCore) (*IMachineDebugger_dumpHostProcessCoreResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_info(request *IMachineDebugger_info) (*IMachineDebugger_infoResponse, error)

	IMachineDebugger_infoContext(ctx context.Context, request *IMachineDebugger_info) (*IMachineDebugger_infoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_injectNMI(request *IMachineDebugger_injectNMI) (*IMachineDebugger_injectNMIResponse, error)

	IMachineDebugger_injectNMIContext(ctx context.Context, request *IMachineDebugger_injectNMI) (*IMachineDebugger_injectNMIResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_modifyLogGroups(request *IMachineDebugger_modifyLogGroups) (*IMachineDebugger_modifyLogGroupsResponse, error)

	IMachineDebugger_modifyLogGroupsContext(ctx context.Context, request *IMachineDebugger_modifyLogGroups) (*IMachineDebugger_modifyLogGroupsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_modifyLogFlags(request *IMachineDebugger_modifyLogFlags) (*IMachineDebugger_modifyLogFlagsResponse, error)

	IMachineDebugger_modifyLogFlagsContext(ctx context.Context, request *IMachineDebugger_modifyLogFlags) (*IMachineDebugger_modifyLogFlagsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_modifyLogDestinations(request *IMachineDebugger_modifyLogDestinations) (*IMachineDebugger_modifyLogDestinationsResponse, error)

	IMachineDebugger_modifyLogDestinationsContext(ctx context.Context, request *IMachineDebugger_modifyLogDestinations) (*IMachineDebugger_modifyLogDestinationsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_readPhysicalMemory(request *IMachineDebugger_readPhysicalMemory) (*IMachineDebugger_readPhysicalMemoryResponse, error)

	IMachineDebugger_readPhysicalMemoryContext(ctx context.Context, request *IMachineDebugger_readPhysicalMemory) (*IMachineDebugger_readPhysicalMemoryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_writePhysicalMemory(request *IMachineDebugger_writePhysicalMemory) (*IMachineDebugger_writePhysicalMemoryResponse, error)

	IMachineDebugger_writePhysicalMemoryContext(ctx context.Context, request *IMachineDebugger_writePhysicalMemory) (*IMachineDebugger_writePhysicalMemoryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_readVirtualMemory(request *IMachineDebugger_readVirtualMemory) (*IMachineDebugger_readVirtualMemoryResponse, error)

	IMachineDebugger_readVirtualMemoryContext(ctx context.Context, request *IMachineDebugger_readVirtualMemory) (*IMachineDebugger_readVirtualMemoryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_writeVirtualMemory(request *IMachineDebugger_writeVirtualMemory) (*IMachineDebugger_writeVirtualMemoryResponse, error)

	IMachineDebugger_writeVirtualMemoryContext(ctx context.Context, request *IMachineDebugger_writeVirtualMemory) (*IMachineDebugger_writeVirtualMemoryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_loadPlugIn(request *IMachineDebugger_loadPlugIn) (*IMachineDebugger_loadPlugInResponse, error)

	IMachineDebugger_loadPlugInContext(ctx context.Context, request *IMachineDebugger_loadPlugIn) (*IMachineDebugger_loadPlugInResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_unloadPlugIn(request *IMachineDebugger_unloadPlugIn) (*IMachineDebugger_unloadPlugInResponse, error)

	IMachineDebugger_unloadPlugInContext(ctx context.Context, request *IMachineDebugger_unloadPlugIn) (*IMachineDebugger_unloadPlugInResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_detectOS(request *IMachineDebugger_detectOS) (*IMachineDebugger_detectOSResponse, error)

	IMachineDebugger_detectOSContext(ctx context.Context, request *IMachineDebugger_detectOS) (*IMachineDebugger_detectOSResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_queryOSKernelLog(request *IMachineDebugger_queryOSKernelLog) (*IMachineDebugger_queryOSKernelLogResponse, error)

	IMachineDebugger_queryOSKernelLogContext(ctx context.Context, request *IMachineDebugger_queryOSKernelLog) (*IMachineDebugger_queryOSKernelLogResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getRegister(request *IMachineDebugger_getRegister) (*IMachineDebugger_getRegisterResponse, error)

	IMachineDebugger_getRegisterContext(ctx context.Context, request *IMachineDebugger_getRegister) (*IMachineDebugger_getRegisterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getRegisters(request *IMachineDebugger_getRegisters) (*IMachineDebugger_getRegistersResponse, error)

	IMachineDebugger_getRegistersContext(ctx context.Context, request *IMachineDebugger_getRegisters) (*IMachineDebugger_getRegistersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_setRegister(request *IMachineDebugger_setRegister) (*IMachineDebugger_setRegisterResponse, error)

	IMachineDebugger_setRegisterContext(ctx context.Context, request *IMachineDebugger_setRegister) (*IMachineDebugger_setRegisterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_setRegisters(request *IMachineDebugger_setRegisters) (*IMachineDebugger_setRegistersResponse, error)

	IMachineDebugger_setRegistersContext(ctx context.Context, request *IMachineDebugger_setRegisters) (*IMachineDebugger_setRegistersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_dumpGuestStack(request *IMachineDebugger_dumpGuestStack) (*IMachineDebugger_dumpGuestStackResponse, error)

	IMachineDebugger_dumpGuestStackContext(ctx context.Context, request *IMachineDebugger_dumpGuestStack) (*IMachineDebugger_dumpGuestStackResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_resetStats(request *IMachineDebugger_resetStats) (*IMachineDebugger_resetStatsResponse, error)

	IMachineDebugger_resetStatsContext(ctx context.Context, request *IMachineDebugger_resetStats) (*IMachineDebugger_resetStatsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_dumpStats(request *IMachineDebugger_dumpStats) (*IMachineDebugger_dumpStatsResponse, error)

	IMachineDebugger_dumpStatsContext(ctx context.Context, request *IMachineDebugger_dumpStats) (*IMachineDebugger_dumpStatsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getStats(request *IMachineDebugger_getStats) (*IMachineDebugger_getStatsResponse, error)

	IMachineDebugger_getStatsContext(ctx context.Context, request *IMachineDebugger_getStats) (*IMachineDebugger_getStatsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_getCPULoad(request *IMachineDebugger_getCPULoad) (*IMachineDebugger_getCPULoadResponse, error)

	IMachineDebugger_getCPULoadContext(ctx context.Context, request *IMachineDebugger_getCPULoad) (*IMachineDebugger_getCPULoadResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDebugger_takeGuestSample(request *IMachineDebugger_takeGuestSample) (*IMachineDebugger_takeGuestSampleResponse, error)

	IMachineDebugger_takeGuestSampleContext(ctx context.Context, request *IMachineDebugger_takeGuestSample) (*IMachineDebugger_takeGuestSampleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilters_getDeviceFilters(request *IUSBDeviceFilters_getDeviceFilters) (*IUSBDeviceFilters_getDeviceFiltersResponse, error)

	IUSBDeviceFilters_getDeviceFiltersContext(ctx context.Context, request *IUSBDeviceFilters_getDeviceFilters) (*IUSBDeviceFilters_getDeviceFiltersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilters_createDeviceFilter(request *IUSBDeviceFilters_createDeviceFilter) (*IUSBDeviceFilters_createDeviceFilterResponse, error)

	IUSBDeviceFilters_createDeviceFilterContext(ctx context.Context, request *IUSBDeviceFilters_createDeviceFilter) (*IUSBDeviceFilters_createDeviceFilterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilters_insertDeviceFilter(request *IUSBDeviceFilters_insertDeviceFilter) (*IUSBDeviceFilters_insertDeviceFilterResponse, error)

	IUSBDeviceFilters_insertDeviceFilterContext(ctx context.Context, request *IUSBDeviceFilters_insertDeviceFilter) (*IUSBDeviceFilters_insertDeviceFilterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilters_removeDeviceFilter(request *IUSBDeviceFilters_removeDeviceFilter) (*IUSBDeviceFilters_removeDeviceFilterResponse, error)

	IUSBDeviceFilters_removeDeviceFilterContext(ctx context.Context, request *IUSBDeviceFilters_removeDeviceFilter) (*IUSBDeviceFilters_removeDeviceFilterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBController_getName(request *IUSBController_getName) (*IUSBController_getNameResponse, error)

	IUSBController_getNameContext(ctx context.Context, request *IUSBController_getName) (*IUSBController_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBController_setName(request *IUSBController_setName) (*IUSBController_setNameResponse, error)

	IUSBController_setNameContext(ctx context.Context, request *IUSBController_setName) (*IUSBController_setNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBController_getType(request *IUSBController_getType) (*IUSBController_getTypeResponse, error)

	IUSBController_getTypeContext(ctx context.Context, request *IUSBController_getType) (*IUSBController_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBController_setType(request *IUSBController_setType) (*IUSBController_setTypeResponse, error)

	IUSBController_setTypeContext(ctx context.Context, request *IUSBController_setType) (*IUSBController_setTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBController_getUSBStandard(request *IUSBController_getUSBStandard) (*IUSBController_getUSBStandardResponse, error)

	IUSBController_getUSBStandardContext(ctx context.Context, request *IUSBController_getUSBStandard) (*IUSBController_getUSBStandardResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getId(request *IUSBDevice_getId) (*IUSBDevice_getIdResponse, error)

	IUSBDevice_getIdContext(ctx context.Context, request *IUSBDevice_getId) (*IUSBDevice_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getVendorId(request *IUSBDevice_getVendorId) (*IUSBDevice_getVendorIdResponse, error)

	IUSBDevice_getVendorIdContext(ctx context.Context, request *IUSBDevice_getVendorId) (*IUSBDevice_getVendorIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getProductId(request *IUSBDevice_getProductId) (*IUSBDevice_getProductIdResponse, error)

	IUSBDevice_getProductIdContext(ctx context.Context, request *IUSBDevice_getProductId) (*IUSBDevice_getProductIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getRevision(request *IUSBDevice_getRevision) (*IUSBDevice_getRevisionResponse, error)

	IUSBDevice_getRevisionContext(ctx context.Context, request *IUSBDevice_getRevision) (*IUSBDevice_getRevisionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getManufacturer(request *IUSBDevice_getManufacturer) (*IUSBDevice_getManufacturerResponse, error)

	IUSBDevice_getManufacturerContext(ctx context.Context, request *IUSBDevice_getManufacturer) (*IUSBDevice_getManufacturerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getProduct(request *IUSBDevice_getProduct) (*IUSBDevice_getProductResponse, error)

	IUSBDevice_getProductContext(ctx context.Context, request *IUSBDevice_getProduct) (*IUSBDevice_getProductResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getSerialNumber(request *IUSBDevice_getSerialNumber) (*IUSBDevice_getSerialNumberResponse, error)

	IUSBDevice_getSerialNumberContext(ctx context.Context, request *IUSBDevice_getSerialNumber) (*IUSBDevice_getSerialNumberResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getAddress(request *IUSBDevice_getAddress) (*IUSBDevice_getAddressResponse, error)

	IUSBDevice_getAddressContext(ctx context.Context, request *IUSBDevice_getAddress) (*IUSBDevice_getAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getPort(request *IUSBDevice_getPort) (*IUSBDevice_getPortResponse, error)

	IUSBDevice_getPortContext(ctx context.Context, request *IUSBDevice_getPort) (*IUSBDevice_getPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getPortPath(request *IUSBDevice_getPortPath) (*IUSBDevice_getPortPathResponse, error)

	IUSBDevice_getPortPathContext(ctx context.Context, request *IUSBDevice_getPortPath) (*IUSBDevice_getPortPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getVersion(request *IUSBDevice_getVersion) (*IUSBDevice_getVersionResponse, error)

	IUSBDevice_getVersionContext(ctx context.Context, request *IUSBDevice_getVersion) (*IUSBDevice_getVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getSpeed(request *IUSBDevice_getSpeed) (*IUSBDevice_getSpeedResponse, error)

	IUSBDevice_getSpeedContext(ctx context.Context, request *IUSBDevice_getSpeed) (*IUSBDevice_getSpeedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getRemote(request *IUSBDevice_getRemote) (*IUSBDevice_getRemoteResponse, error)

	IUSBDevice_getRemoteContext(ctx context.Context, request *IUSBDevice_getRemote) (*IUSBDevice_getRemoteResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getDeviceInfo(request *IUSBDevice_getDeviceInfo) (*IUSBDevice_getDeviceInfoResponse, error)

	IUSBDevice_getDeviceInfoContext(ctx context.Context, request *IUSBDevice_getDeviceInfo) (*IUSBDevice_getDeviceInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDevice_getBackend(request *IUSBDevice_getBackend) (*IUSBDevice_getBackendResponse, error)

	IUSBDevice_getBackendContext(ctx context.Context, request *IUSBDevice_getBackend) (*IUSBDevice_getBackendResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_getName(request *IUSBDeviceFilter_getName) (*IUSBDeviceFilter_getNameResponse, error)

	IUSBDeviceFilter_getNameContext(ctx context.Context, request *IUSBDeviceFilter_getName) (*IUSBDeviceFilter_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_setName(request *IUSBDeviceFilter_setName) (*IUSBDeviceFilter_setNameResponse, error)

	IUSBDeviceFilter_setNameContext(ctx context.Context, request *IUSBDeviceFilter_setName) (*IUSBDeviceFilter_setNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_getActive(request *IUSBDeviceFilter_getActive) (*IUSBDeviceFilter_getActiveResponse, error)

	IUSBDeviceFilter_getActiveContext(ctx context.Context, request *IUSBDeviceFilter_getActive) (*IUSBDeviceFilter_getActiveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_setActive(request *IUSBDeviceFilter_setActive) (*IUSBDeviceFilter_setActiveResponse, error)

	IUSBDeviceFilter_setActiveContext(ctx context.Context, request *IUSBDeviceFilter_setActive) (*IUSBDeviceFilter_setActiveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_getVendorId(request *IUSBDeviceFilter_getVendorId) (*IUSBDeviceFilter_getVendorIdResponse, error)

	IUSBDeviceFilter_getVendorIdContext(ctx context.Context, request *IUSBDeviceFilter_getVendorId) (*IUSBDeviceFilter_getVendorIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_setVendorId(request *IUSBDeviceFilter_setVendorId) (*IUSBDeviceFilter_setVendorIdResponse, error)

	IUSBDeviceFilter_setVendorIdContext(ctx context.Context, request *IUSBDeviceFilter_setVendorId) (*IUSBDeviceFilter_setVendorIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_getProductId(request *IUSBDeviceFilter_getProductId) (*IUSBDeviceFilter_getProductIdResponse, error)

	IUSBDeviceFilter_getProductIdContext(ctx context.Context, request *IUSBDeviceFilter_getProductId) (*IUSBDeviceFilter_getProductIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_setProductId(request *IUSBDeviceFilter_setProductId) (*IUSBDeviceFilter_setProductIdResponse, error)

	IUSBDeviceFilter_setProductIdContext(ctx context.Context, request *IUSBDeviceFilter_setProductId) (*IUSBDeviceFilter_setProductIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_getRevision(request *IUSBDeviceFilter_getRevision) (*IUSBDeviceFilter_getRevisionResponse, error)

	IUSBDeviceFilter_getRevisionContext(ctx context.Context, request *IUSBDeviceFilter_getRevision) (*IUSBDeviceFilter_getRevisionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_setRevision(request *IUSBDeviceFilter_setRevision) (*IUSBDeviceFilter_setRevisionResponse, error)

	IUSBDeviceFilter_setRevisionContext(ctx context.Context, request *IUSBDeviceFilter_setRevision) (*IUSBDeviceFilter_setRevisionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_getManufacturer(request *IUSBDeviceFilter_getManufacturer) (*IUSBDeviceFilter_getManufacturerResponse, error)

	IUSBDeviceFilter_getManufacturerContext(ctx context.Context, request *IUSBDeviceFilter_getManufacturer) (*IUSBDeviceFilter_getManufacturerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_setManufacturer(request *IUSBDeviceFilter_setManufacturer) (*IUSBDeviceFilter_setManufacturerResponse, error)

	IUSBDeviceFilter_setManufacturerContext(ctx context.Context, request *IUSBDeviceFilter_setManufacturer) (*IUSBDeviceFilter_setManufacturerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_getProduct(request *IUSBDeviceFilter_getProduct) (*IUSBDeviceFilter_getProductResponse, error)

	IUSBDeviceFilter_getProductContext(ctx context.Context, request *IUSBDeviceFilter_getProduct) (*IUSBDeviceFilter_getProductResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_setProduct(request *IUSBDeviceFilter_setProduct) (*IUSBDeviceFilter_setProductResponse, error)

	IUSBDeviceFilter_setProductContext(ctx context.Context, request *IUSBDeviceFilter_setProduct) (*IUSBDeviceFilter_setProductResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_getSerialNumber(request *IUSBDeviceFilter_getSerialNumber) (*IUSBDeviceFilter_getSerialNumberResponse, error)

	IUSBDeviceFilter_getSerialNumberContext(ctx context.Context, request *IUSBDeviceFilter_getSerialNumber) (*IUSBDeviceFilter_getSerialNumberResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_setSerialNumber(request *IUSBDeviceFilter_setSerialNumber) (*IUSBDeviceFilter_setSerialNumberResponse, error)

	IUSBDeviceFilter_setSerialNumberContext(ctx context.Context, request *IUSBDeviceFilter_setSerialNumber) (*IUSBDeviceFilter_setSerialNumberResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_getPort(request *IUSBDeviceFilter_getPort) (*IUSBDeviceFilter_getPortResponse, error)

	IUSBDeviceFilter_getPortContext(ctx context.Context, request *IUSBDeviceFilter_getPort) (*IUSBDeviceFilter_getPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_setPort(request *IUSBDeviceFilter_setPort) (*IUSBDeviceFilter_setPortResponse, error)

	IUSBDeviceFilter_setPortContext(ctx context.Context, request *IUSBDeviceFilter_setPort) (*IUSBDeviceFilter_setPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_getRemote(request *IUSBDeviceFilter_getRemote) (*IUSBDeviceFilter_getRemoteResponse, error)

	IUSBDeviceFilter_getRemoteContext(ctx context.Context, request *IUSBDeviceFilter_getRemote) (*IUSBDeviceFilter_getRemoteResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_setRemote(request *IUSBDeviceFilter_setRemote) (*IUSBDeviceFilter_setRemoteResponse, error)

	IUSBDeviceFilter_setRemoteContext(ctx context.Context, request *IUSBDeviceFilter_setRemote) (*IUSBDeviceFilter_setRemoteResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_getMaskedInterfaces(request *IUSBDeviceFilter_getMaskedInterfaces) (*IUSBDeviceFilter_getMaskedInterfacesResponse, error)

	IUSBDeviceFilter_getMaskedInterfacesContext(ctx context.Context, request *IUSBDeviceFilter_getMaskedInterfaces) (*IUSBDeviceFilter_getMaskedInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceFilter_setMaskedInterfaces(request *IUSBDeviceFilter_setMaskedInterfaces) (*IUSBDeviceFilter_setMaskedInterfacesResponse, error)

	IUSBDeviceFilter_setMaskedInterfacesContext(ctx context.Context, request *IUSBDeviceFilter_setMaskedInterfaces) (*IUSBDeviceFilter_setMaskedInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostUSBDevice_getState(request *IHostUSBDevice_getState) (*IHostUSBDevice_getStateResponse, error)

	IHostUSBDevice_getStateContext(ctx context.Context, request *IHostUSBDevice_getState) (*IHostUSBDevice_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostUSBDeviceFilter_getAction(request *IHostUSBDeviceFilter_getAction) (*IHostUSBDeviceFilter_getActionResponse, error)

	IHostUSBDeviceFilter_getActionContext(ctx context.Context, request *IHostUSBDeviceFilter_getAction) (*IHostUSBDeviceFilter_getActionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostUSBDeviceFilter_setAction(request *IHostUSBDeviceFilter_setAction) (*IHostUSBDeviceFilter_setActionResponse, error)

	IHostUSBDeviceFilter_setActionContext(ctx context.Context, request *IHostUSBDeviceFilter_setAction) (*IHostUSBDeviceFilter_setActionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBProxyBackend_getName(request *IUSBProxyBackend_getName) (*IUSBProxyBackend_getNameResponse, error)

	IUSBProxyBackend_getNameContext(ctx context.Context, request *IUSBProxyBackend_getName) (*IUSBProxyBackend_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBProxyBackend_getType(request *IUSBProxyBackend_getType) (*IUSBProxyBackend_getTypeResponse, error)

	IUSBProxyBackend_getTypeContext(ctx context.Context, request *IUSBProxyBackend_getType) (*IUSBProxyBackend_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_getEnabled(request *IAudioAdapter_getEnabled) (*IAudioAdapter_getEnabledResponse, error)

	IAudioAdapter_getEnabledContext(ctx context.Context, request *IAudioAdapter_getEnabled) (*IAudioAdapter_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_setEnabled(request *IAudioAdapter_setEnabled) (*IAudioAdapter_setEnabledResponse, error)

	IAudioAdapter_setEnabledContext(ctx context.Context, request *IAudioAdapter_setEnabled) (*IAudioAdapter_setEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_getEnabledIn(request *IAudioAdapter_getEnabledIn) (*IAudioAdapter_getEnabledInResponse, error)

	IAudioAdapter_getEnabledInContext(ctx context.Context, request *IAudioAdapter_getEnabledIn) (*IAudioAdapter_getEnabledInResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_setEnabledIn(request *IAudioAdapter_setEnabledIn) (*IAudioAdapter_setEnabledInResponse, error)

	IAudioAdapter_setEnabledInContext(ctx context.Context, request *IAudioAdapter_setEnabledIn) (*IAudioAdapter_setEnabledInResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_getEnabledOut(request *IAudioAdapter_getEnabledOut) (*IAudioAdapter_getEnabledOutResponse, error)

	IAudioAdapter_getEnabledOutContext(ctx context.Context, request *IAudioAdapter_getEnabledOut) (*IAudioAdapter_getEnabledOutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_setEnabledOut(request *IAudioAdapter_setEnabledOut) (*IAudioAdapter_setEnabledOutResponse, error)

	IAudioAdapter_setEnabledOutContext(ctx context.Context, request *IAudioAdapter_setEnabledOut) (*IAudioAdapter_setEnabledOutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_getAudioController(request *IAudioAdapter_getAudioController) (*IAudioAdapter_getAudioControllerResponse, error)

	IAudioAdapter_getAudioControllerContext(ctx context.Context, request *IAudioAdapter_getAudioController) (*IAudioAdapter_getAudioControllerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_setAudioController(request *IAudioAdapter_setAudioController) (*IAudioAdapter_setAudioControllerResponse, error)

	IAudioAdapter_setAudioControllerContext(ctx context.Context, request *IAudioAdapter_setAudioController) (*IAudioAdapter_setAudioControllerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_getAudioCodec(request *IAudioAdapter_getAudioCodec) (*IAudioAdapter_getAudioCodecResponse, error)

	IAudioAdapter_getAudioCodecContext(ctx context.Context, request *IAudioAdapter_getAudioCodec) (*IAudioAdapter_getAudioCodecResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_setAudioCodec(request *IAudioAdapter_setAudioCodec) (*IAudioAdapter_setAudioCodecResponse, error)

	IAudioAdapter_setAudioCodecContext(ctx context.Context, request *IAudioAdapter_setAudioCodec) (*IAudioAdapter_setAudioCodecResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_getAudioDriver(request *IAudioAdapter_getAudioDriver) (*IAudioAdapter_getAudioDriverResponse, error)

	IAudioAdapter_getAudioDriverContext(ctx context.Context, request *IAudioAdapter_getAudioDriver) (*IAudioAdapter_getAudioDriverResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_setAudioDriver(request *IAudioAdapter_setAudioDriver) (*IAudioAdapter_setAudioDriverResponse, error)

	IAudioAdapter_setAudioDriverContext(ctx context.Context, request *IAudioAdapter_setAudioDriver) (*IAudioAdapter_setAudioDriverResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_getPropertiesList(request *IAudioAdapter_getPropertiesList) (*IAudioAdapter_getPropertiesListResponse, error)

	IAudioAdapter_getPropertiesListContext(ctx context.Context, request *IAudioAdapter_getPropertiesList) (*IAudioAdapter_getPropertiesListResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_setProperty(request *IAudioAdapter_setProperty) (*IAudioAdapter_setPropertyResponse, error)

	IAudioAdapter_setPropertyContext(ctx context.Context, request *IAudioAdapter_setProperty) (*IAudioAdapter_setPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapter_getProperty(request *IAudioAdapter_getProperty) (*IAudioAdapter_getPropertyResponse, error)

	IAudioAdapter_getPropertyContext(ctx context.Context, request *IAudioAdapter_getProperty) (*IAudioAdapter_getPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_getId(request *IHostAudioDevice_getId) (*IHostAudioDevice_getIdResponse, error)

	IHostAudioDevice_getIdContext(ctx context.Context, request *IHostAudioDevice_getId) (*IHostAudioDevice_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_getName(request *IHostAudioDevice_getName) (*IHostAudioDevice_getNameResponse, error)

	IHostAudioDevice_getNameContext(ctx context.Context, request *IHostAudioDevice_getName) (*IHostAudioDevice_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_setName(request *IHostAudioDevice_setName) (*IHostAudioDevice_setNameResponse, error)

	IHostAudioDevice_setNameContext(ctx context.Context, request *IHostAudioDevice_setName) (*IHostAudioDevice_setNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_getType(request *IHostAudioDevice_getType) (*IHostAudioDevice_getTypeResponse, error)

	IHostAudioDevice_getTypeContext(ctx context.Context, request *IHostAudioDevice_getType) (*IHostAudioDevice_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_setType(request *IHostAudioDevice_setType) (*IHostAudioDevice_setTypeResponse, error)

	IHostAudioDevice_setTypeContext(ctx context.Context, request *IHostAudioDevice_setType) (*IHostAudioDevice_setTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_getUsage(request *IHostAudioDevice_getUsage) (*IHostAudioDevice_getUsageResponse, error)

	IHostAudioDevice_getUsageContext(ctx context.Context, request *IHostAudioDevice_getUsage) (*IHostAudioDevice_getUsageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_setUsage(request *IHostAudioDevice_setUsage) (*IHostAudioDevice_setUsageResponse, error)

	IHostAudioDevice_setUsageContext(ctx context.Context, request *IHostAudioDevice_setUsage) (*IHostAudioDevice_setUsageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_getDefaultIn(request *IHostAudioDevice_getDefaultIn) (*IHostAudioDevice_getDefaultInResponse, error)

	IHostAudioDevice_getDefaultInContext(ctx context.Context, request *IHostAudioDevice_getDefaultIn) (*IHostAudioDevice_getDefaultInResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_setDefaultIn(request *IHostAudioDevice_setDefaultIn) (*IHostAudioDevice_setDefaultInResponse, error)

	IHostAudioDevice_setDefaultInContext(ctx context.Context, request *IHostAudioDevice_setDefaultIn) (*IHostAudioDevice_setDefaultInResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_getDefaultOut(request *IHostAudioDevice_getDefaultOut) (*IHostAudioDevice_getDefaultOutResponse, error)

	IHostAudioDevice_getDefaultOutContext(ctx context.Context, request *IHostAudioDevice_getDefaultOut) (*IHostAudioDevice_getDefaultOutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_setDefaultOut(request *IHostAudioDevice_setDefaultOut) (*IHostAudioDevice_setDefaultOutResponse, error)

	IHostAudioDevice_setDefaultOutContext(ctx context.Context, request *IHostAudioDevice_setDefaultOut) (*IHostAudioDevice_setDefaultOutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_getIsHotPlug(request *IHostAudioDevice_getIsHotPlug) (*IHostAudioDevice_getIsHotPlugResponse, error)

	IHostAudioDevice_getIsHotPlugContext(ctx context.Context, request *IHostAudioDevice_getIsHotPlug) (*IHostAudioDevice_getIsHotPlugResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_setIsHotPlug(request *IHostAudioDevice_setIsHotPlug) (*IHostAudioDevice_setIsHotPlugResponse, error)

	IHostAudioDevice_setIsHotPlugContext(ctx context.Context, request *IHostAudioDevice_setIsHotPlug) (*IHostAudioDevice_setIsHotPlugResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_getState(request *IHostAudioDevice_getState) (*IHostAudioDevice_getStateResponse, error)

	IHostAudioDevice_getStateContext(ctx context.Context, request *IHostAudioDevice_getState) (*IHostAudioDevice_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_setState(request *IHostAudioDevice_setState) (*IHostAudioDevice_setStateResponse, error)

	IHostAudioDevice_setStateContext(ctx context.Context, request *IHostAudioDevice_setState) (*IHostAudioDevice_setStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDevice_getProperty(request *IHostAudioDevice_getProperty) (*IHostAudioDevice_getPropertyResponse, error)

	IHostAudioDevice_getPropertyContext(ctx context.Context, request *IHostAudioDevice_getProperty) (*IHostAudioDevice_getPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioSettings_getAdapter(request *IAudioSettings_getAdapter) (*IAudioSettings_getAdapterResponse, error)

	IAudioSettings_getAdapterContext(ctx context.Context, request *IAudioSettings_getAdapter) (*IAudioSettings_getAdapterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioSettings_getHostAudioDevice(request *IAudioSettings_getHostAudioDevice) (*IAudioSettings_getHostAudioDeviceResponse, error)

	IAudioSettings_getHostAudioDeviceContext(ctx context.Context, request *IAudioSettings_getHostAudioDevice) (*IAudioSettings_getHostAudioDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioSettings_setHostAudioDevice(request *IAudioSettings_setHostAudioDevice) (*IAudioSettings_setHostAudioDeviceResponse, error)

	IAudioSettings_setHostAudioDeviceContext(ctx context.Context, request *IAudioSettings_setHostAudioDevice) (*IAudioSettings_setHostAudioDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_getEnabled(request *IVRDEServer_getEnabled) (*IVRDEServer_getEnabledResponse, error)

	IVRDEServer_getEnabledContext(ctx context.Context, request *IVRDEServer_getEnabled) (*IVRDEServer_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_setEnabled(request *IVRDEServer_setEnabled) (*IVRDEServer_setEnabledResponse, error)

	IVRDEServer_setEnabledContext(ctx context.Context, request *IVRDEServer_setEnabled) (*IVRDEServer_setEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_getAuthType(request *IVRDEServer_getAuthType) (*IVRDEServer_getAuthTypeResponse, error)

	IVRDEServer_getAuthTypeContext(ctx context.Context, request *IVRDEServer_getAuthType) (*IVRDEServer_getAuthTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_setAuthType(request *IVRDEServer_setAuthType) (*IVRDEServer_setAuthTypeResponse, error)

	IVRDEServer_setAuthTypeContext(ctx context.Context, request *IVRDEServer_setAuthType) (*IVRDEServer_setAuthTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_getAuthTimeout(request *IVRDEServer_getAuthTimeout) (*IVRDEServer_getAuthTimeoutResponse, error)

	IVRDEServer_getAuthTimeoutContext(ctx context.Context, request *IVRDEServer_getAuthTimeout) (*IVRDEServer_getAuthTimeoutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_setAuthTimeout(request *IVRDEServer_setAuthTimeout) (*IVRDEServer_setAuthTimeoutResponse, error)

	IVRDEServer_setAuthTimeoutContext(ctx context.Context, request *IVRDEServer_setAuthTimeout) (*IVRDEServer_setAuthTimeoutResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_getAllowMultiConnection(request *IVRDEServer_getAllowMultiConnection) (*IVRDEServer_getAllowMultiConnectionResponse, error)

	IVRDEServer_getAllowMultiConnectionContext(ctx context.Context, request *IVRDEServer_getAllowMultiConnection) (*IVRDEServer_getAllowMultiConnectionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_setAllowMultiConnection(request *IVRDEServer_setAllowMultiConnection) (*IVRDEServer_setAllowMultiConnectionResponse, error)

	IVRDEServer_setAllowMultiConnectionContext(ctx context.Context, request *IVRDEServer_setAllowMultiConnection) (*IVRDEServer_setAllowMultiConnectionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_getReuseSingleConnection(request *IVRDEServer_getReuseSingleConnection) (*IVRDEServer_getReuseSingleConnectionResponse, error)

	IVRDEServer_getReuseSingleConnectionContext(ctx context.Context, request *IVRDEServer_getReuseSingleConnection) (*IVRDEServer_getReuseSingleConnectionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_setReuseSingleConnection(request *IVRDEServer_setReuseSingleConnection) (*IVRDEServer_setReuseSingleConnectionResponse, error)

	IVRDEServer_setReuseSingleConnectionContext(ctx context.Context, request *IVRDEServer_setReuseSingleConnection) (*IVRDEServer_setReuseSingleConnectionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_getVRDEExtPack(request *IVRDEServer_getVRDEExtPack) (*IVRDEServer_getVRDEExtPackResponse, error)

	IVRDEServer_getVRDEExtPackContext(ctx context.Context, request *IVRDEServer_getVRDEExtPack) (*IVRDEServer_getVRDEExtPackResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_setVRDEExtPack(request *IVRDEServer_setVRDEExtPack) (*IVRDEServer_setVRDEExtPackResponse, error)

	IVRDEServer_setVRDEExtPackContext(ctx context.Context, request *IVRDEServer_setVRDEExtPack) (*IVRDEServer_setVRDEExtPackResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_getAuthLibrary(request *IVRDEServer_getAuthLibrary) (*IVRDEServer_getAuthLibraryResponse, error)

	IVRDEServer_getAuthLibraryContext(ctx context.Context, request *IVRDEServer_getAuthLibrary) (*IVRDEServer_getAuthLibraryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_setAuthLibrary(request *IVRDEServer_setAuthLibrary) (*IVRDEServer_setAuthLibraryResponse, error)

	IVRDEServer_setAuthLibraryContext(ctx context.Context, request *IVRDEServer_setAuthLibrary) (*IVRDEServer_setAuthLibraryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_getVRDEProperties(request *IVRDEServer_getVRDEProperties) (*IVRDEServer_getVRDEPropertiesResponse, error)

	IVRDEServer_getVRDEPropertiesContext(ctx context.Context, request *IVRDEServer_getVRDEProperties) (*IVRDEServer_getVRDEPropertiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_setVRDEProperty(request *IVRDEServer_setVRDEProperty) (*IVRDEServer_setVRDEPropertyResponse, error)

	IVRDEServer_setVRDEPropertyContext(ctx context.Context, request *IVRDEServer_setVRDEProperty) (*IVRDEServer_setVRDEPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServer_getVRDEProperty(request *IVRDEServer_getVRDEProperty) (*IVRDEServer_getVRDEPropertyResponse, error)

	IVRDEServer_getVRDEPropertyContext(ctx context.Context, request *IVRDEServer_getVRDEProperty) (*IVRDEServer_getVRDEPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISharedFolder_getName(request *ISharedFolder_getName) (*ISharedFolder_getNameResponse, error)

	ISharedFolder_getNameContext(ctx context.Context, request *ISharedFolder_getName) (*ISharedFolder_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISharedFolder_getHostPath(request *ISharedFolder_getHostPath) (*ISharedFolder_getHostPathResponse, error)

	ISharedFolder_getHostPathContext(ctx context.Context, request *ISharedFolder_getHostPath) (*ISharedFolder_getHostPathResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISharedFolder_getAccessible(request *ISharedFolder_getAccessible) (*ISharedFolder_getAccessibleResponse, error)

	ISharedFolder_getAccessibleContext(ctx context.Context, request *ISharedFolder_getAccessible) (*ISharedFolder_getAccessibleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISharedFolder_getWritable(request *ISharedFolder_getWritable) (*ISharedFolder_getWritableResponse, error)

	ISharedFolder_getWritableContext(ctx context.Context, request *ISharedFolder_getWritable) (*ISharedFolder_getWritableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISharedFolder_setWritable(request *ISharedFolder_setWritable) (*ISharedFolder_setWritableResponse, error)

	ISharedFolder_setWritableContext(ctx context.Context, request *ISharedFolder_setWritable) (*ISharedFolder_setWritableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISharedFolder_getAutoMount(request *ISharedFolder_getAutoMount) (*ISharedFolder_getAutoMountResponse, error)

	ISharedFolder_getAutoMountContext(ctx context.Context, request *ISharedFolder_getAutoMount) (*ISharedFolder_getAutoMountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISharedFolder_setAutoMount(request *ISharedFolder_setAutoMount) (*ISharedFolder_setAutoMountResponse, error)

	ISharedFolder_setAutoMountContext(ctx context.Context, request *ISharedFolder_setAutoMount) (*ISharedFolder_setAutoMountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISharedFolder_getAutoMountPoint(request *ISharedFolder_getAutoMountPoint) (*ISharedFolder_getAutoMountPointResponse, error)

	ISharedFolder_getAutoMountPointContext(ctx context.Context, request *ISharedFolder_getAutoMountPoint) (*ISharedFolder_getAutoMountPointResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISharedFolder_setAutoMountPoint(request *ISharedFolder_setAutoMountPoint) (*ISharedFolder_setAutoMountPointResponse, error)

	ISharedFolder_setAutoMountPointContext(ctx context.Context, request *ISharedFolder_setAutoMountPoint) (*ISharedFolder_setAutoMountPointResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISharedFolder_getLastAccessError(request *ISharedFolder_getLastAccessError) (*ISharedFolder_getLastAccessErrorResponse, error)

	ISharedFolder_getLastAccessErrorContext(ctx context.Context, request *ISharedFolder_getLastAccessError) (*ISharedFolder_getLastAccessErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISession_getState(request *ISession_getState) (*ISession_getStateResponse, error)

	ISession_getStateContext(ctx context.Context, request *ISession_getState) (*ISession_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISession_getType(request *ISession_getType) (*ISession_getTypeResponse, error)

	ISession_getTypeContext(ctx context.Context, request *ISession_getType) (*ISession_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISession_getName(request *ISession_getName) (*ISession_getNameResponse, error)

	ISession_getNameContext(ctx context.Context, request *ISession_getName) (*ISession_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISession_setName(request *ISession_setName) (*ISession_setNameResponse, error)

	ISession_setNameContext(ctx context.Context, request *ISession_setName) (*ISession_setNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISession_getMachine(request *ISession_getMachine) (*ISession_getMachineResponse, error)

	ISession_getMachineContext(ctx context.Context, request *ISession_getMachine) (*ISession_getMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISession_getConsole(request *ISession_getConsole) (*ISession_getConsoleResponse, error)

	ISession_getConsoleContext(ctx context.Context, request *ISession_getConsole) (*ISession_getConsoleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISession_unlockMachine(request *ISession_unlockMachine) (*ISession_unlockMachineResponse, error)

	ISession_unlockMachineContext(ctx context.Context, request *ISession_unlockMachine) (*ISession_unlockMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_getName(request *IStorageController_getName) (*IStorageController_getNameResponse, error)

	IStorageController_getNameContext(ctx context.Context, request *IStorageController_getName) (*IStorageController_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_setName(request *IStorageController_setName) (*IStorageController_setNameResponse, error)

	IStorageController_setNameContext(ctx context.Context, request *IStorageController_setName) (*IStorageController_setNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_getMaxDevicesPerPortCount(request *IStorageController_getMaxDevicesPerPortCount) (*IStorageController_getMaxDevicesPerPortCountResponse, error)

	IStorageController_getMaxDevicesPerPortCountContext(ctx context.Context, request *IStorageController_getMaxDevicesPerPortCount) (*IStorageController_getMaxDevicesPerPortCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_getMinPortCount(request *IStorageController_getMinPortCount) (*IStorageController_getMinPortCountResponse, error)

	IStorageController_getMinPortCountContext(ctx context.Context, request *IStorageController_getMinPortCount) (*IStorageController_getMinPortCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_getMaxPortCount(request *IStorageController_getMaxPortCount) (*IStorageController_getMaxPortCountResponse, error)

	IStorageController_getMaxPortCountContext(ctx context.Context, request *IStorageController_getMaxPortCount) (*IStorageController_getMaxPortCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_getInstance(request *IStorageController_getInstance) (*IStorageController_getInstanceResponse, error)

	IStorageController_getInstanceContext(ctx context.Context, request *IStorageController_getInstance) (*IStorageController_getInstanceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_setInstance(request *IStorageController_setInstance) (*IStorageController_setInstanceResponse, error)

	IStorageController_setInstanceContext(ctx context.Context, request *IStorageController_setInstance) (*IStorageController_setInstanceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_getPortCount(request *IStorageController_getPortCount) (*IStorageController_getPortCountResponse, error)

	IStorageController_getPortCountContext(ctx context.Context, request *IStorageController_getPortCount) (*IStorageController_getPortCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_setPortCount(request *IStorageController_setPortCount) (*IStorageController_setPortCountResponse, error)

	IStorageController_setPortCountContext(ctx context.Context, request *IStorageController_setPortCount) (*IStorageController_setPortCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_getBus(request *IStorageController_getBus) (*IStorageController_getBusResponse, error)

	IStorageController_getBusContext(ctx context.Context, request *IStorageController_getBus) (*IStorageController_getBusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_getControllerType(request *IStorageController_getControllerType) (*IStorageController_getControllerTypeResponse, error)

	IStorageController_getControllerTypeContext(ctx context.Context, request *IStorageController_getControllerType) (*IStorageController_getControllerTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_setControllerType(request *IStorageController_setControllerType) (*IStorageController_setControllerTypeResponse, error)

	IStorageController_setControllerTypeContext(ctx context.Context, request *IStorageController_setControllerType) (*IStorageController_setControllerTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_getUseHostIOCache(request *IStorageController_getUseHostIOCache) (*IStorageController_getUseHostIOCacheResponse, error)

	IStorageController_getUseHostIOCacheContext(ctx context.Context, request *IStorageController_getUseHostIOCache) (*IStorageController_getUseHostIOCacheResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_setUseHostIOCache(request *IStorageController_setUseHostIOCache) (*IStorageController_setUseHostIOCacheResponse, error)

	IStorageController_setUseHostIOCacheContext(ctx context.Context, request *IStorageController_setUseHostIOCache) (*IStorageController_setUseHostIOCacheResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageController_getBootable(request *IStorageController_getBootable) (*IStorageController_getBootableResponse, error)

	IStorageController_getBootableContext(ctx context.Context, request *IStorageController_getBootable) (*IStorageController_getBootableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IManagedObjectRef_getInterfaceName(request *IManagedObjectRef_getInterfaceName) (*IManagedObjectRef_getInterfaceNameResponse, error)

	IManagedObjectRef_getInterfaceNameContext(ctx context.Context, request *IManagedObjectRef_getInterfaceName) (*IManagedObjectRef_getInterfaceNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IManagedObjectRef_release(request *IManagedObjectRef_release) (*IManagedObjectRef_releaseResponse, error)

	IManagedObjectRef_releaseContext(ctx context.Context, request *IManagedObjectRef_release) (*IManagedObjectRef_releaseResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IWebsessionManager_logon(request *IWebsessionManager_logon) (*IWebsessionManager_logonResponse, error)

	IWebsessionManager_logonContext(ctx context.Context, request *IWebsessionManager_logon) (*IWebsessionManager_logonResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IWebsessionManager_getSessionObject(request *IWebsessionManager_getSessionObject) (*IWebsessionManager_getSessionObjectResponse, error)

	IWebsessionManager_getSessionObjectContext(ctx context.Context, request *IWebsessionManager_getSessionObject) (*IWebsessionManager_getSessionObjectResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IWebsessionManager_logoff(request *IWebsessionManager_logoff) (*IWebsessionManager_logoffResponse, error)

	IWebsessionManager_logoffContext(ctx context.Context, request *IWebsessionManager_logoff) (*IWebsessionManager_logoffResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceMetric_getMetricName(request *IPerformanceMetric_getMetricName) (*IPerformanceMetric_getMetricNameResponse, error)

	IPerformanceMetric_getMetricNameContext(ctx context.Context, request *IPerformanceMetric_getMetricName) (*IPerformanceMetric_getMetricNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceMetric_getObject(request *IPerformanceMetric_getObject) (*IPerformanceMetric_getObjectResponse, error)

	IPerformanceMetric_getObjectContext(ctx context.Context, request *IPerformanceMetric_getObject) (*IPerformanceMetric_getObjectResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceMetric_getDescription(request *IPerformanceMetric_getDescription) (*IPerformanceMetric_getDescriptionResponse, error)

	IPerformanceMetric_getDescriptionContext(ctx context.Context, request *IPerformanceMetric_getDescription) (*IPerformanceMetric_getDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceMetric_getPeriod(request *IPerformanceMetric_getPeriod) (*IPerformanceMetric_getPeriodResponse, error)

	IPerformanceMetric_getPeriodContext(ctx context.Context, request *IPerformanceMetric_getPeriod) (*IPerformanceMetric_getPeriodResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceMetric_getCount(request *IPerformanceMetric_getCount) (*IPerformanceMetric_getCountResponse, error)

	IPerformanceMetric_getCountContext(ctx context.Context, request *IPerformanceMetric_getCount) (*IPerformanceMetric_getCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceMetric_getUnit(request *IPerformanceMetric_getUnit) (*IPerformanceMetric_getUnitResponse, error)

	IPerformanceMetric_getUnitContext(ctx context.Context, request *IPerformanceMetric_getUnit) (*IPerformanceMetric_getUnitResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceMetric_getMinimumValue(request *IPerformanceMetric_getMinimumValue) (*IPerformanceMetric_getMinimumValueResponse, error)

	IPerformanceMetric_getMinimumValueContext(ctx context.Context, request *IPerformanceMetric_getMinimumValue) (*IPerformanceMetric_getMinimumValueResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceMetric_getMaximumValue(request *IPerformanceMetric_getMaximumValue) (*IPerformanceMetric_getMaximumValueResponse, error)

	IPerformanceMetric_getMaximumValueContext(ctx context.Context, request *IPerformanceMetric_getMaximumValue) (*IPerformanceMetric_getMaximumValueResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceCollector_getMetricNames(request *IPerformanceCollector_getMetricNames) (*IPerformanceCollector_getMetricNamesResponse, error)

	IPerformanceCollector_getMetricNamesContext(ctx context.Context, request *IPerformanceCollector_getMetricNames) (*IPerformanceCollector_getMetricNamesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceCollector_getMetrics(request *IPerformanceCollector_getMetrics) (*IPerformanceCollector_getMetricsResponse, error)

	IPerformanceCollector_getMetricsContext(ctx context.Context, request *IPerformanceCollector_getMetrics) (*IPerformanceCollector_getMetricsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceCollector_setupMetrics(request *IPerformanceCollector_setupMetrics) (*IPerformanceCollector_setupMetricsResponse, error)

	IPerformanceCollector_setupMetricsContext(ctx context.Context, request *IPerformanceCollector_setupMetrics) (*IPerformanceCollector_setupMetricsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceCollector_enableMetrics(request *IPerformanceCollector_enableMetrics) (*IPerformanceCollector_enableMetricsResponse, error)

	IPerformanceCollector_enableMetricsContext(ctx context.Context, request *IPerformanceCollector_enableMetrics) (*IPerformanceCollector_enableMetricsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceCollector_disableMetrics(request *IPerformanceCollector_disableMetrics) (*IPerformanceCollector_disableMetricsResponse, error)

	IPerformanceCollector_disableMetricsContext(ctx context.Context, request *IPerformanceCollector_disableMetrics) (*IPerformanceCollector_disableMetricsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IPerformanceCollector_queryMetricsData(request *IPerformanceCollector_queryMetricsData) (*IPerformanceCollector_queryMetricsDataResponse, error)

	IPerformanceCollector_queryMetricsDataContext(ctx context.Context, request *IPerformanceCollector_queryMetricsData) (*IPerformanceCollector_queryMetricsDataResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_getNetwork(request *INATEngine_getNetwork) (*INATEngine_getNetworkResponse, error)

	INATEngine_getNetworkContext(ctx context.Context, request *INATEngine_getNetwork) (*INATEngine_getNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_setNetwork(request *INATEngine_setNetwork) (*INATEngine_setNetworkResponse, error)

	INATEngine_setNetworkContext(ctx context.Context, request *INATEngine_setNetwork) (*INATEngine_setNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_getHostIP(request *INATEngine_getHostIP) (*INATEngine_getHostIPResponse, error)

	INATEngine_getHostIPContext(ctx context.Context, request *INATEngine_getHostIP) (*INATEngine_getHostIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_setHostIP(request *INATEngine_setHostIP) (*INATEngine_setHostIPResponse, error)

	INATEngine_setHostIPContext(ctx context.Context, request *INATEngine_setHostIP) (*INATEngine_setHostIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_getTFTPPrefix(request *INATEngine_getTFTPPrefix) (*INATEngine_getTFTPPrefixResponse, error)

	INATEngine_getTFTPPrefixContext(ctx context.Context, request *INATEngine_getTFTPPrefix) (*INATEngine_getTFTPPrefixResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_setTFTPPrefix(request *INATEngine_setTFTPPrefix) (*INATEngine_setTFTPPrefixResponse, error)

	INATEngine_setTFTPPrefixContext(ctx context.Context, request *INATEngine_setTFTPPrefix) (*INATEngine_setTFTPPrefixResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_getTFTPBootFile(request *INATEngine_getTFTPBootFile) (*INATEngine_getTFTPBootFileResponse, error)

	INATEngine_getTFTPBootFileContext(ctx context.Context, request *INATEngine_getTFTPBootFile) (*INATEngine_getTFTPBootFileResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_setTFTPBootFile(request *INATEngine_setTFTPBootFile) (*INATEngine_setTFTPBootFileResponse, error)

	INATEngine_setTFTPBootFileContext(ctx context.Context, request *INATEngine_setTFTPBootFile) (*INATEngine_setTFTPBootFileResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_getTFTPNextServer(request *INATEngine_getTFTPNextServer) (*INATEngine_getTFTPNextServerResponse, error)

	INATEngine_getTFTPNextServerContext(ctx context.Context, request *INATEngine_getTFTPNextServer) (*INATEngine_getTFTPNextServerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_setTFTPNextServer(request *INATEngine_setTFTPNextServer) (*INATEngine_setTFTPNextServerResponse, error)

	INATEngine_setTFTPNextServerContext(ctx context.Context, request *INATEngine_setTFTPNextServer) (*INATEngine_setTFTPNextServerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_getAliasMode(request *INATEngine_getAliasMode) (*INATEngine_getAliasModeResponse, error)

	INATEngine_getAliasModeContext(ctx context.Context, request *INATEngine_getAliasMode) (*INATEngine_getAliasModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_setAliasMode(request *INATEngine_setAliasMode) (*INATEngine_setAliasModeResponse, error)

	INATEngine_setAliasModeContext(ctx context.Context, request *INATEngine_setAliasMode) (*INATEngine_setAliasModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_getDNSPassDomain(request *INATEngine_getDNSPassDomain) (*INATEngine_getDNSPassDomainResponse, error)

	INATEngine_getDNSPassDomainContext(ctx context.Context, request *INATEngine_getDNSPassDomain) (*INATEngine_getDNSPassDomainResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_setDNSPassDomain(request *INATEngine_setDNSPassDomain) (*INATEngine_setDNSPassDomainResponse, error)

	INATEngine_setDNSPassDomainContext(ctx context.Context, request *INATEngine_setDNSPassDomain) (*INATEngine_setDNSPassDomainResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_getDNSProxy(request *INATEngine_getDNSProxy) (*INATEngine_getDNSProxyResponse, error)

	INATEngine_getDNSProxyContext(ctx context.Context, request *INATEngine_getDNSProxy) (*INATEngine_getDNSProxyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_setDNSProxy(request *INATEngine_setDNSProxy) (*INATEngine_setDNSProxyResponse, error)

	INATEngine_setDNSProxyContext(ctx context.Context, request *INATEngine_setDNSProxy) (*INATEngine_setDNSProxyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_getDNSUseHostResolver(request *INATEngine_getDNSUseHostResolver) (*INATEngine_getDNSUseHostResolverResponse, error)

	INATEngine_getDNSUseHostResolverContext(ctx context.Context, request *INATEngine_getDNSUseHostResolver) (*INATEngine_getDNSUseHostResolverResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_setDNSUseHostResolver(request *INATEngine_setDNSUseHostResolver) (*INATEngine_setDNSUseHostResolverResponse, error)

	INATEngine_setDNSUseHostResolverContext(ctx context.Context, request *INATEngine_setDNSUseHostResolver) (*INATEngine_setDNSUseHostResolverResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_getRedirects(request *INATEngine_getRedirects) (*INATEngine_getRedirectsResponse, error)

	INATEngine_getRedirectsContext(ctx context.Context, request *INATEngine_getRedirects) (*INATEngine_getRedirectsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_getLocalhostReachable(request *INATEngine_getLocalhostReachable) (*INATEngine_getLocalhostReachableResponse, error)

	INATEngine_getLocalhostReachableContext(ctx context.Context, request *INATEngine_getLocalhostReachable) (*INATEngine_getLocalhostReachableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_setLocalhostReachable(request *INATEngine_setLocalhostReachable) (*INATEngine_setLocalhostReachableResponse, error)

	INATEngine_setLocalhostReachableContext(ctx context.Context, request *INATEngine_setLocalhostReachable) (*INATEngine_setLocalhostReachableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_setNetworkSettings(request *INATEngine_setNetworkSettings) (*INATEngine_setNetworkSettingsResponse, error)

	INATEngine_setNetworkSettingsContext(ctx context.Context, request *INATEngine_setNetworkSettings) (*INATEngine_setNetworkSettingsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_getNetworkSettings(request *INATEngine_getNetworkSettings) (*INATEngine_getNetworkSettingsResponse, error)

	INATEngine_getNetworkSettingsContext(ctx context.Context, request *INATEngine_getNetworkSettings) (*INATEngine_getNetworkSettingsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_addRedirect(request *INATEngine_addRedirect) (*INATEngine_addRedirectResponse, error)

	INATEngine_addRedirectContext(ctx context.Context, request *INATEngine_addRedirect) (*INATEngine_addRedirectResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATEngine_removeRedirect(request *INATEngine_removeRedirect) (*INATEngine_removeRedirectResponse, error)

	INATEngine_removeRedirectContext(ctx context.Context, request *INATEngine_removeRedirect) (*INATEngine_removeRedirectResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBandwidthGroup_getName(request *IBandwidthGroup_getName) (*IBandwidthGroup_getNameResponse, error)

	IBandwidthGroup_getNameContext(ctx context.Context, request *IBandwidthGroup_getName) (*IBandwidthGroup_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBandwidthGroup_getType(request *IBandwidthGroup_getType) (*IBandwidthGroup_getTypeResponse, error)

	IBandwidthGroup_getTypeContext(ctx context.Context, request *IBandwidthGroup_getType) (*IBandwidthGroup_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBandwidthGroup_getReference(request *IBandwidthGroup_getReference) (*IBandwidthGroup_getReferenceResponse, error)

	IBandwidthGroup_getReferenceContext(ctx context.Context, request *IBandwidthGroup_getReference) (*IBandwidthGroup_getReferenceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBandwidthGroup_getMaxBytesPerSec(request *IBandwidthGroup_getMaxBytesPerSec) (*IBandwidthGroup_getMaxBytesPerSecResponse, error)

	IBandwidthGroup_getMaxBytesPerSecContext(ctx context.Context, request *IBandwidthGroup_getMaxBytesPerSec) (*IBandwidthGroup_getMaxBytesPerSecResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBandwidthGroup_setMaxBytesPerSec(request *IBandwidthGroup_setMaxBytesPerSec) (*IBandwidthGroup_setMaxBytesPerSecResponse, error)

	IBandwidthGroup_setMaxBytesPerSecContext(ctx context.Context, request *IBandwidthGroup_setMaxBytesPerSec) (*IBandwidthGroup_setMaxBytesPerSecResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBandwidthControl_getNumGroups(request *IBandwidthControl_getNumGroups) (*IBandwidthControl_getNumGroupsResponse, error)

	IBandwidthControl_getNumGroupsContext(ctx context.Context, request *IBandwidthControl_getNumGroups) (*IBandwidthControl_getNumGroupsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBandwidthControl_createBandwidthGroup(request *IBandwidthControl_createBandwidthGroup) (*IBandwidthControl_createBandwidthGroupResponse, error)

	IBandwidthControl_createBandwidthGroupContext(ctx context.Context, request *IBandwidthControl_createBandwidthGroup) (*IBandwidthControl_createBandwidthGroupResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBandwidthControl_deleteBandwidthGroup(request *IBandwidthControl_deleteBandwidthGroup) (*IBandwidthControl_deleteBandwidthGroupResponse, error)

	IBandwidthControl_deleteBandwidthGroupContext(ctx context.Context, request *IBandwidthControl_deleteBandwidthGroup) (*IBandwidthControl_deleteBandwidthGroupResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBandwidthControl_getBandwidthGroup(request *IBandwidthControl_getBandwidthGroup) (*IBandwidthControl_getBandwidthGroupResponse, error)

	IBandwidthControl_getBandwidthGroupContext(ctx context.Context, request *IBandwidthControl_getBandwidthGroup) (*IBandwidthControl_getBandwidthGroupResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBandwidthControl_getAllBandwidthGroups(request *IBandwidthControl_getAllBandwidthGroups) (*IBandwidthControl_getAllBandwidthGroupsResponse, error)

	IBandwidthControl_getAllBandwidthGroupsContext(ctx context.Context, request *IBandwidthControl_getAllBandwidthGroups) (*IBandwidthControl_getAllBandwidthGroupsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestDebugControl_getDebugProvider(request *IGuestDebugControl_getDebugProvider) (*IGuestDebugControl_getDebugProviderResponse, error)

	IGuestDebugControl_getDebugProviderContext(ctx context.Context, request *IGuestDebugControl_getDebugProvider) (*IGuestDebugControl_getDebugProviderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestDebugControl_setDebugProvider(request *IGuestDebugControl_setDebugProvider) (*IGuestDebugControl_setDebugProviderResponse, error)

	IGuestDebugControl_setDebugProviderContext(ctx context.Context, request *IGuestDebugControl_setDebugProvider) (*IGuestDebugControl_setDebugProviderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestDebugControl_getDebugIoProvider(request *IGuestDebugControl_getDebugIoProvider) (*IGuestDebugControl_getDebugIoProviderResponse, error)

	IGuestDebugControl_getDebugIoProviderContext(ctx context.Context, request *IGuestDebugControl_getDebugIoProvider) (*IGuestDebugControl_getDebugIoProviderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestDebugControl_setDebugIoProvider(request *IGuestDebugControl_setDebugIoProvider) (*IGuestDebugControl_setDebugIoProviderResponse, error)

	IGuestDebugControl_setDebugIoProviderContext(ctx context.Context, request *IGuestDebugControl_setDebugIoProvider) (*IGuestDebugControl_setDebugIoProviderResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestDebugControl_getDebugAddress(request *IGuestDebugControl_getDebugAddress) (*IGuestDebugControl_getDebugAddressResponse, error)

	IGuestDebugControl_getDebugAddressContext(ctx context.Context, request *IGuestDebugControl_getDebugAddress) (*IGuestDebugControl_getDebugAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestDebugControl_setDebugAddress(request *IGuestDebugControl_setDebugAddress) (*IGuestDebugControl_setDebugAddressResponse, error)

	IGuestDebugControl_setDebugAddressContext(ctx context.Context, request *IGuestDebugControl_setDebugAddress) (*IGuestDebugControl_setDebugAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestDebugControl_getDebugPort(request *IGuestDebugControl_getDebugPort) (*IGuestDebugControl_getDebugPortResponse, error)

	IGuestDebugControl_getDebugPortContext(ctx context.Context, request *IGuestDebugControl_getDebugPort) (*IGuestDebugControl_getDebugPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestDebugControl_setDebugPort(request *IGuestDebugControl_setDebugPort) (*IGuestDebugControl_setDebugPortResponse, error)

	IGuestDebugControl_setDebugPortContext(ctx context.Context, request *IGuestDebugControl_setDebugPort) (*IGuestDebugControl_setDebugPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEventSource_createListener(request *IEventSource_createListener) (*IEventSource_createListenerResponse, error)

	IEventSource_createListenerContext(ctx context.Context, request *IEventSource_createListener) (*IEventSource_createListenerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEventSource_createAggregator(request *IEventSource_createAggregator) (*IEventSource_createAggregatorResponse, error)

	IEventSource_createAggregatorContext(ctx context.Context, request *IEventSource_createAggregator) (*IEventSource_createAggregatorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEventSource_registerListener(request *IEventSource_registerListener) (*IEventSource_registerListenerResponse, error)

	IEventSource_registerListenerContext(ctx context.Context, request *IEventSource_registerListener) (*IEventSource_registerListenerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEventSource_unregisterListener(request *IEventSource_unregisterListener) (*IEventSource_unregisterListenerResponse, error)

	IEventSource_unregisterListenerContext(ctx context.Context, request *IEventSource_unregisterListener) (*IEventSource_unregisterListenerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEventSource_fireEvent(request *IEventSource_fireEvent) (*IEventSource_fireEventResponse, error)

	IEventSource_fireEventContext(ctx context.Context, request *IEventSource_fireEvent) (*IEventSource_fireEventResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEventSource_getEvent(request *IEventSource_getEvent) (*IEventSource_getEventResponse, error)

	IEventSource_getEventContext(ctx context.Context, request *IEventSource_getEvent) (*IEventSource_getEventResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEventSource_eventProcessed(request *IEventSource_eventProcessed) (*IEventSource_eventProcessedResponse, error)

	IEventSource_eventProcessedContext(ctx context.Context, request *IEventSource_eventProcessed) (*IEventSource_eventProcessedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEventListener_handleEvent(request *IEventListener_handleEvent) (*IEventListener_handleEventResponse, error)

	IEventListener_handleEventContext(ctx context.Context, request *IEventListener_handleEvent) (*IEventListener_handleEventResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEvent_getType(request *IEvent_getType) (*IEvent_getTypeResponse, error)

	IEvent_getTypeContext(ctx context.Context, request *IEvent_getType) (*IEvent_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEvent_getSource(request *IEvent_getSource) (*IEvent_getSourceResponse, error)

	IEvent_getSourceContext(ctx context.Context, request *IEvent_getSource) (*IEvent_getSourceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEvent_getWaitable(request *IEvent_getWaitable) (*IEvent_getWaitableResponse, error)

	IEvent_getWaitableContext(ctx context.Context, request *IEvent_getWaitable) (*IEvent_getWaitableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEvent_setProcessed(request *IEvent_setProcessed) (*IEvent_setProcessedResponse, error)

	IEvent_setProcessedContext(ctx context.Context, request *IEvent_setProcessed) (*IEvent_setProcessedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEvent_waitProcessed(request *IEvent_waitProcessed) (*IEvent_waitProcessedResponse, error)

	IEvent_waitProcessedContext(ctx context.Context, request *IEvent_waitProcessed) (*IEvent_waitProcessedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IReusableEvent_getGeneration(request *IReusableEvent_getGeneration) (*IReusableEvent_getGenerationResponse, error)

	IReusableEvent_getGenerationContext(ctx context.Context, request *IReusableEvent_getGeneration) (*IReusableEvent_getGenerationResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IReusableEvent_reuse(request *IReusableEvent_reuse) (*IReusableEvent_reuseResponse, error)

	IReusableEvent_reuseContext(ctx context.Context, request *IReusableEvent_reuse) (*IReusableEvent_reuseResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineEvent_getMachineId(request *IMachineEvent_getMachineId) (*IMachineEvent_getMachineIdResponse, error)

	IMachineEvent_getMachineIdContext(ctx context.Context, request *IMachineEvent_getMachineId) (*IMachineEvent_getMachineIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineStateChangedEvent_getState(request *IMachineStateChangedEvent_getState) (*IMachineStateChangedEvent_getStateResponse, error)

	IMachineStateChangedEvent_getStateContext(ctx context.Context, request *IMachineStateChangedEvent_getState) (*IMachineStateChangedEvent_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineDataChangedEvent_getTemporary(request *IMachineDataChangedEvent_getTemporary) (*IMachineDataChangedEvent_getTemporaryResponse, error)

	IMachineDataChangedEvent_getTemporaryContext(ctx context.Context, request *IMachineDataChangedEvent_getTemporary) (*IMachineDataChangedEvent_getTemporaryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumRegisteredEvent_getMediumId(request *IMediumRegisteredEvent_getMediumId) (*IMediumRegisteredEvent_getMediumIdResponse, error)

	IMediumRegisteredEvent_getMediumIdContext(ctx context.Context, request *IMediumRegisteredEvent_getMediumId) (*IMediumRegisteredEvent_getMediumIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumRegisteredEvent_getMediumType(request *IMediumRegisteredEvent_getMediumType) (*IMediumRegisteredEvent_getMediumTypeResponse, error)

	IMediumRegisteredEvent_getMediumTypeContext(ctx context.Context, request *IMediumRegisteredEvent_getMediumType) (*IMediumRegisteredEvent_getMediumTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumRegisteredEvent_getRegistered(request *IMediumRegisteredEvent_getRegistered) (*IMediumRegisteredEvent_getRegisteredResponse, error)

	IMediumRegisteredEvent_getRegisteredContext(ctx context.Context, request *IMediumRegisteredEvent_getRegistered) (*IMediumRegisteredEvent_getRegisteredResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumConfigChangedEvent_getMedium(request *IMediumConfigChangedEvent_getMedium) (*IMediumConfigChangedEvent_getMediumResponse, error)

	IMediumConfigChangedEvent_getMediumContext(ctx context.Context, request *IMediumConfigChangedEvent_getMedium) (*IMediumConfigChangedEvent_getMediumResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineRegisteredEvent_getRegistered(request *IMachineRegisteredEvent_getRegistered) (*IMachineRegisteredEvent_getRegisteredResponse, error)

	IMachineRegisteredEvent_getRegisteredContext(ctx context.Context, request *IMachineRegisteredEvent_getRegistered) (*IMachineRegisteredEvent_getRegisteredResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISessionStateChangedEvent_getState(request *ISessionStateChangedEvent_getState) (*ISessionStateChangedEvent_getStateResponse, error)

	ISessionStateChangedEvent_getStateContext(ctx context.Context, request *ISessionStateChangedEvent_getState) (*ISessionStateChangedEvent_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestPropertyChangedEvent_getName(request *IGuestPropertyChangedEvent_getName) (*IGuestPropertyChangedEvent_getNameResponse, error)

	IGuestPropertyChangedEvent_getNameContext(ctx context.Context, request *IGuestPropertyChangedEvent_getName) (*IGuestPropertyChangedEvent_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestPropertyChangedEvent_getValue(request *IGuestPropertyChangedEvent_getValue) (*IGuestPropertyChangedEvent_getValueResponse, error)

	IGuestPropertyChangedEvent_getValueContext(ctx context.Context, request *IGuestPropertyChangedEvent_getValue) (*IGuestPropertyChangedEvent_getValueResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestPropertyChangedEvent_getFlags(request *IGuestPropertyChangedEvent_getFlags) (*IGuestPropertyChangedEvent_getFlagsResponse, error)

	IGuestPropertyChangedEvent_getFlagsContext(ctx context.Context, request *IGuestPropertyChangedEvent_getFlags) (*IGuestPropertyChangedEvent_getFlagsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestPropertyChangedEvent_getFWasDeleted(request *IGuestPropertyChangedEvent_getFWasDeleted) (*IGuestPropertyChangedEvent_getFWasDeletedResponse, error)

	IGuestPropertyChangedEvent_getFWasDeletedContext(ctx context.Context, request *IGuestPropertyChangedEvent_getFWasDeleted) (*IGuestPropertyChangedEvent_getFWasDeletedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshotEvent_getSnapshotId(request *ISnapshotEvent_getSnapshotId) (*ISnapshotEvent_getSnapshotIdResponse, error)

	ISnapshotEvent_getSnapshotIdContext(ctx context.Context, request *ISnapshotEvent_getSnapshotId) (*ISnapshotEvent_getSnapshotIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces(request *ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces(request *ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces(request *ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShapeChangedEvent_getVisible(request *IMousePointerShapeChangedEvent_getVisible) (*IMousePointerShapeChangedEvent_getVisibleResponse, error)

	IMousePointerShapeChangedEvent_getVisibleContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getVisible) (*IMousePointerShapeChangedEvent_getVisibleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShapeChangedEvent_getAlpha(request *IMousePointerShapeChangedEvent_getAlpha) (*IMousePointerShapeChangedEvent_getAlphaResponse, error)

	IMousePointerShapeChangedEvent_getAlphaContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getAlpha) (*IMousePointerShapeChangedEvent_getAlphaResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShapeChangedEvent_getXhot(request *IMousePointerShapeChangedEvent_getXhot) (*IMousePointerShapeChangedEvent_getXhotResponse, error)

	IMousePointerShapeChangedEvent_getXhotContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getXhot) (*IMousePointerShapeChangedEvent_getXhotResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShapeChangedEvent_getYhot(request *IMousePointerShapeChangedEvent_getYhot) (*IMousePointerShapeChangedEvent_getYhotResponse, error)

	IMousePointerShapeChangedEvent_getYhotContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getYhot) (*IMousePointerShapeChangedEvent_getYhotResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShapeChangedEvent_getWidth(request *IMousePointerShapeChangedEvent_getWidth) (*IMousePointerShapeChangedEvent_getWidthResponse, error)

	IMousePointerShapeChangedEvent_getWidthContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getWidth) (*IMousePointerShapeChangedEvent_getWidthResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShapeChangedEvent_getHeight(request *IMousePointerShapeChangedEvent_getHeight) (*IMousePointerShapeChangedEvent_getHeightResponse, error)

	IMousePointerShapeChangedEvent_getHeightContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getHeight) (*IMousePointerShapeChangedEvent_getHeightResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMousePointerShapeChangedEvent_getShape(request *IMousePointerShapeChangedEvent_getShape) (*IMousePointerShapeChangedEvent_getShapeResponse, error)

	IMousePointerShapeChangedEvent_getShapeContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getShape) (*IMousePointerShapeChangedEvent_getShapeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouseCapabilityChangedEvent_getSupportsAbsolute(request *IMouseCapabilityChangedEvent_getSupportsAbsolute) (*IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse, error)

	IMouseCapabilityChangedEvent_getSupportsAbsoluteContext(ctx context.Context, request *IMouseCapabilityChangedEvent_getSupportsAbsolute) (*IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouseCapabilityChangedEvent_getSupportsRelative(request *IMouseCapabilityChangedEvent_getSupportsRelative) (*IMouseCapabilityChangedEvent_getSupportsRelativeResponse, error)

	IMouseCapabilityChangedEvent_getSupportsRelativeContext(ctx context.Context, request *IMouseCapabilityChangedEvent_getSupportsRelative) (*IMouseCapabilityChangedEvent_getSupportsRelativeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouseCapabilityChangedEvent_getSupportsTouchScreen(request *IMouseCapabilityChangedEvent_getSupportsTouchScreen) (*IMouseCapabilityChangedEvent_getSupportsTouchScreenResponse, error)

	IMouseCapabilityChangedEvent_getSupportsTouchScreenContext(ctx context.Context, request *IMouseCapabilityChangedEvent_getSupportsTouchScreen) (*IMouseCapabilityChangedEvent_getSupportsTouchScreenResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouseCapabilityChangedEvent_getSupportsTouchPad(request *IMouseCapabilityChangedEvent_getSupportsTouchPad) (*IMouseCapabilityChangedEvent_getSupportsTouchPadResponse, error)

	IMouseCapabilityChangedEvent_getSupportsTouchPadContext(ctx context.Context, request *IMouseCapabilityChangedEvent_getSupportsTouchPad) (*IMouseCapabilityChangedEvent_getSupportsTouchPadResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMouseCapabilityChangedEvent_getNeedsHostCursor(request *IMouseCapabilityChangedEvent_getNeedsHostCursor) (*IMouseCapabilityChangedEvent_getNeedsHostCursorResponse, error)

	IMouseCapabilityChangedEvent_getNeedsHostCursorContext(ctx context.Context, request *IMouseCapabilityChangedEvent_getNeedsHostCursor) (*IMouseCapabilityChangedEvent_getNeedsHostCursorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IKeyboardLedsChangedEvent_getNumLock(request *IKeyboardLedsChangedEvent_getNumLock) (*IKeyboardLedsChangedEvent_getNumLockResponse, error)

	IKeyboardLedsChangedEvent_getNumLockContext(ctx context.Context, request *IKeyboardLedsChangedEvent_getNumLock) (*IKeyboardLedsChangedEvent_getNumLockResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IKeyboardLedsChangedEvent_getCapsLock(request *IKeyboardLedsChangedEvent_getCapsLock) (*IKeyboardLedsChangedEvent_getCapsLockResponse, error)

	IKeyboardLedsChangedEvent_getCapsLockContext(ctx context.Context, request *IKeyboardLedsChangedEvent_getCapsLock) (*IKeyboardLedsChangedEvent_getCapsLockResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IKeyboardLedsChangedEvent_getScrollLock(request *IKeyboardLedsChangedEvent_getScrollLock) (*IKeyboardLedsChangedEvent_getScrollLockResponse, error)

	IKeyboardLedsChangedEvent_getScrollLockContext(ctx context.Context, request *IKeyboardLedsChangedEvent_getScrollLock) (*IKeyboardLedsChangedEvent_getScrollLockResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStateChangedEvent_getState(request *IStateChangedEvent_getState) (*IStateChangedEvent_getStateResponse, error)

	IStateChangedEvent_getStateContext(ctx context.Context, request *IStateChangedEvent_getState) (*IStateChangedEvent_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INetworkAdapterChangedEvent_getNetworkAdapter(request *INetworkAdapterChangedEvent_getNetworkAdapter) (*INetworkAdapterChangedEvent_getNetworkAdapterResponse, error)

	INetworkAdapterChangedEvent_getNetworkAdapterContext(ctx context.Context, request *INetworkAdapterChangedEvent_getNetworkAdapter) (*INetworkAdapterChangedEvent_getNetworkAdapterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IAudioAdapterChangedEvent_getAudioAdapter(request *IAudioAdapterChangedEvent_getAudioAdapter) (*IAudioAdapterChangedEvent_getAudioAdapterResponse, error)

	IAudioAdapterChangedEvent_getAudioAdapterContext(ctx context.Context, request *IAudioAdapterChangedEvent_getAudioAdapter) (*IAudioAdapterChangedEvent_getAudioAdapterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISerialPortChangedEvent_getSerialPort(request *ISerialPortChangedEvent_getSerialPort) (*ISerialPortChangedEvent_getSerialPortResponse, error)

	ISerialPortChangedEvent_getSerialPortContext(ctx context.Context, request *ISerialPortChangedEvent_getSerialPort) (*ISerialPortChangedEvent_getSerialPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IParallelPortChangedEvent_getParallelPort(request *IParallelPortChangedEvent_getParallelPort) (*IParallelPortChangedEvent_getParallelPortResponse, error)

	IParallelPortChangedEvent_getParallelPortContext(ctx context.Context, request *IParallelPortChangedEvent_getParallelPort) (*IParallelPortChangedEvent_getParallelPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageControllerChangedEvent_getMachinId(request *IStorageControllerChangedEvent_getMachinId) (*IStorageControllerChangedEvent_getMachinIdResponse, error)

	IStorageControllerChangedEvent_getMachinIdContext(ctx context.Context, request *IStorageControllerChangedEvent_getMachinId) (*IStorageControllerChangedEvent_getMachinIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageControllerChangedEvent_getControllerName(request *IStorageControllerChangedEvent_getControllerName) (*IStorageControllerChangedEvent_getControllerNameResponse, error)

	IStorageControllerChangedEvent_getControllerNameContext(ctx context.Context, request *IStorageControllerChangedEvent_getControllerName) (*IStorageControllerChangedEvent_getControllerNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMediumChangedEvent_getMediumAttachment(request *IMediumChangedEvent_getMediumAttachment) (*IMediumChangedEvent_getMediumAttachmentResponse, error)

	IMediumChangedEvent_getMediumAttachmentContext(ctx context.Context, request *IMediumChangedEvent_getMediumAttachment) (*IMediumChangedEvent_getMediumAttachmentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IClipboardModeChangedEvent_getClipboardMode(request *IClipboardModeChangedEvent_getClipboardMode) (*IClipboardModeChangedEvent_getClipboardModeResponse, error)

	IClipboardModeChangedEvent_getClipboardModeContext(ctx context.Context, request *IClipboardModeChangedEvent_getClipboardMode) (*IClipboardModeChangedEvent_getClipboardModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IClipboardFileTransferModeChangedEvent_getEnabled(request *IClipboardFileTransferModeChangedEvent_getEnabled) (*IClipboardFileTransferModeChangedEvent_getEnabledResponse, error)

	IClipboardFileTransferModeChangedEvent_getEnabledContext(ctx context.Context, request *IClipboardFileTransferModeChangedEvent_getEnabled) (*IClipboardFileTransferModeChangedEvent_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IDnDModeChangedEvent_getDndMode(request *IDnDModeChangedEvent_getDndMode) (*IDnDModeChangedEvent_getDndModeResponse, error)

	IDnDModeChangedEvent_getDndModeContext(ctx context.Context, request *IDnDModeChangedEvent_getDndMode) (*IDnDModeChangedEvent_getDndModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICPUChangedEvent_getCPU(request *ICPUChangedEvent_getCPU) (*ICPUChangedEvent_getCPUResponse, error)

	ICPUChangedEvent_getCPUContext(ctx context.Context, request *ICPUChangedEvent_getCPU) (*ICPUChangedEvent_getCPUResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICPUChangedEvent_getAdd(request *ICPUChangedEvent_getAdd) (*ICPUChangedEvent_getAddResponse, error)

	ICPUChangedEvent_getAddContext(ctx context.Context, request *ICPUChangedEvent_getAdd) (*ICPUChangedEvent_getAddResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICPUExecutionCapChangedEvent_getExecutionCap(request *ICPUExecutionCapChangedEvent_getExecutionCap) (*ICPUExecutionCapChangedEvent_getExecutionCapResponse, error)

	ICPUExecutionCapChangedEvent_getExecutionCapContext(ctx context.Context, request *ICPUExecutionCapChangedEvent_getExecutionCap) (*ICPUExecutionCapChangedEvent_getExecutionCapResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestKeyboardEvent_getScancodes(request *IGuestKeyboardEvent_getScancodes) (*IGuestKeyboardEvent_getScancodesResponse, error)

	IGuestKeyboardEvent_getScancodesContext(ctx context.Context, request *IGuestKeyboardEvent_getScancodes) (*IGuestKeyboardEvent_getScancodesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMouseEvent_getMode(request *IGuestMouseEvent_getMode) (*IGuestMouseEvent_getModeResponse, error)

	IGuestMouseEvent_getModeContext(ctx context.Context, request *IGuestMouseEvent_getMode) (*IGuestMouseEvent_getModeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMouseEvent_getX(request *IGuestMouseEvent_getX) (*IGuestMouseEvent_getXResponse, error)

	IGuestMouseEvent_getXContext(ctx context.Context, request *IGuestMouseEvent_getX) (*IGuestMouseEvent_getXResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMouseEvent_getY(request *IGuestMouseEvent_getY) (*IGuestMouseEvent_getYResponse, error)

	IGuestMouseEvent_getYContext(ctx context.Context, request *IGuestMouseEvent_getY) (*IGuestMouseEvent_getYResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMouseEvent_getZ(request *IGuestMouseEvent_getZ) (*IGuestMouseEvent_getZResponse, error)

	IGuestMouseEvent_getZContext(ctx context.Context, request *IGuestMouseEvent_getZ) (*IGuestMouseEvent_getZResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMouseEvent_getW(request *IGuestMouseEvent_getW) (*IGuestMouseEvent_getWResponse, error)

	IGuestMouseEvent_getWContext(ctx context.Context, request *IGuestMouseEvent_getW) (*IGuestMouseEvent_getWResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMouseEvent_getButtons(request *IGuestMouseEvent_getButtons) (*IGuestMouseEvent_getButtonsResponse, error)

	IGuestMouseEvent_getButtonsContext(ctx context.Context, request *IGuestMouseEvent_getButtons) (*IGuestMouseEvent_getButtonsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMultiTouchEvent_getContactCount(request *IGuestMultiTouchEvent_getContactCount) (*IGuestMultiTouchEvent_getContactCountResponse, error)

	IGuestMultiTouchEvent_getContactCountContext(ctx context.Context, request *IGuestMultiTouchEvent_getContactCount) (*IGuestMultiTouchEvent_getContactCountResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMultiTouchEvent_getXPositions(request *IGuestMultiTouchEvent_getXPositions) (*IGuestMultiTouchEvent_getXPositionsResponse, error)

	IGuestMultiTouchEvent_getXPositionsContext(ctx context.Context, request *IGuestMultiTouchEvent_getXPositions) (*IGuestMultiTouchEvent_getXPositionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMultiTouchEvent_getYPositions(request *IGuestMultiTouchEvent_getYPositions) (*IGuestMultiTouchEvent_getYPositionsResponse, error)

	IGuestMultiTouchEvent_getYPositionsContext(ctx context.Context, request *IGuestMultiTouchEvent_getYPositions) (*IGuestMultiTouchEvent_getYPositionsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMultiTouchEvent_getContactIds(request *IGuestMultiTouchEvent_getContactIds) (*IGuestMultiTouchEvent_getContactIdsResponse, error)

	IGuestMultiTouchEvent_getContactIdsContext(ctx context.Context, request *IGuestMultiTouchEvent_getContactIds) (*IGuestMultiTouchEvent_getContactIdsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMultiTouchEvent_getContactFlags(request *IGuestMultiTouchEvent_getContactFlags) (*IGuestMultiTouchEvent_getContactFlagsResponse, error)

	IGuestMultiTouchEvent_getContactFlagsContext(ctx context.Context, request *IGuestMultiTouchEvent_getContactFlags) (*IGuestMultiTouchEvent_getContactFlagsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMultiTouchEvent_getIsTouchScreen(request *IGuestMultiTouchEvent_getIsTouchScreen) (*IGuestMultiTouchEvent_getIsTouchScreenResponse, error)

	IGuestMultiTouchEvent_getIsTouchScreenContext(ctx context.Context, request *IGuestMultiTouchEvent_getIsTouchScreen) (*IGuestMultiTouchEvent_getIsTouchScreenResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMultiTouchEvent_getScanTime(request *IGuestMultiTouchEvent_getScanTime) (*IGuestMultiTouchEvent_getScanTimeResponse, error)

	IGuestMultiTouchEvent_getScanTimeContext(ctx context.Context, request *IGuestMultiTouchEvent_getScanTime) (*IGuestMultiTouchEvent_getScanTimeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSessionEvent_getSession(request *IGuestSessionEvent_getSession) (*IGuestSessionEvent_getSessionResponse, error)

	IGuestSessionEvent_getSessionContext(ctx context.Context, request *IGuestSessionEvent_getSession) (*IGuestSessionEvent_getSessionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSessionStateChangedEvent_getId(request *IGuestSessionStateChangedEvent_getId) (*IGuestSessionStateChangedEvent_getIdResponse, error)

	IGuestSessionStateChangedEvent_getIdContext(ctx context.Context, request *IGuestSessionStateChangedEvent_getId) (*IGuestSessionStateChangedEvent_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSessionStateChangedEvent_getStatus(request *IGuestSessionStateChangedEvent_getStatus) (*IGuestSessionStateChangedEvent_getStatusResponse, error)

	IGuestSessionStateChangedEvent_getStatusContext(ctx context.Context, request *IGuestSessionStateChangedEvent_getStatus) (*IGuestSessionStateChangedEvent_getStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSessionStateChangedEvent_getError(request *IGuestSessionStateChangedEvent_getError) (*IGuestSessionStateChangedEvent_getErrorResponse, error)

	IGuestSessionStateChangedEvent_getErrorContext(ctx context.Context, request *IGuestSessionStateChangedEvent_getError) (*IGuestSessionStateChangedEvent_getErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestSessionRegisteredEvent_getRegistered(request *IGuestSessionRegisteredEvent_getRegistered) (*IGuestSessionRegisteredEvent_getRegisteredResponse, error)

	IGuestSessionRegisteredEvent_getRegisteredContext(ctx context.Context, request *IGuestSessionRegisteredEvent_getRegistered) (*IGuestSessionRegisteredEvent_getRegisteredResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestProcessEvent_getProcess(request *IGuestProcessEvent_getProcess) (*IGuestProcessEvent_getProcessResponse, error)

	IGuestProcessEvent_getProcessContext(ctx context.Context, request *IGuestProcessEvent_getProcess) (*IGuestProcessEvent_getProcessResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestProcessEvent_getPid(request *IGuestProcessEvent_getPid) (*IGuestProcessEvent_getPidResponse, error)

	IGuestProcessEvent_getPidContext(ctx context.Context, request *IGuestProcessEvent_getPid) (*IGuestProcessEvent_getPidResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestProcessRegisteredEvent_getRegistered(request *IGuestProcessRegisteredEvent_getRegistered) (*IGuestProcessRegisteredEvent_getRegisteredResponse, error)

	IGuestProcessRegisteredEvent_getRegisteredContext(ctx context.Context, request *IGuestProcessRegisteredEvent_getRegistered) (*IGuestProcessRegisteredEvent_getRegisteredResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestProcessStateChangedEvent_getStatus(request *IGuestProcessStateChangedEvent_getStatus) (*IGuestProcessStateChangedEvent_getStatusResponse, error)

	IGuestProcessStateChangedEvent_getStatusContext(ctx context.Context, request *IGuestProcessStateChangedEvent_getStatus) (*IGuestProcessStateChangedEvent_getStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestProcessStateChangedEvent_getError(request *IGuestProcessStateChangedEvent_getError) (*IGuestProcessStateChangedEvent_getErrorResponse, error)

	IGuestProcessStateChangedEvent_getErrorContext(ctx context.Context, request *IGuestProcessStateChangedEvent_getError) (*IGuestProcessStateChangedEvent_getErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestProcessIOEvent_getHandle(request *IGuestProcessIOEvent_getHandle) (*IGuestProcessIOEvent_getHandleResponse, error)

	IGuestProcessIOEvent_getHandleContext(ctx context.Context, request *IGuestProcessIOEvent_getHandle) (*IGuestProcessIOEvent_getHandleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestProcessIOEvent_getProcessed(request *IGuestProcessIOEvent_getProcessed) (*IGuestProcessIOEvent_getProcessedResponse, error)

	IGuestProcessIOEvent_getProcessedContext(ctx context.Context, request *IGuestProcessIOEvent_getProcessed) (*IGuestProcessIOEvent_getProcessedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestProcessInputNotifyEvent_getStatus(request *IGuestProcessInputNotifyEvent_getStatus) (*IGuestProcessInputNotifyEvent_getStatusResponse, error)

	IGuestProcessInputNotifyEvent_getStatusContext(ctx context.Context, request *IGuestProcessInputNotifyEvent_getStatus) (*IGuestProcessInputNotifyEvent_getStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestProcessOutputEvent_getData(request *IGuestProcessOutputEvent_getData) (*IGuestProcessOutputEvent_getDataResponse, error)

	IGuestProcessOutputEvent_getDataContext(ctx context.Context, request *IGuestProcessOutputEvent_getData) (*IGuestProcessOutputEvent_getDataResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFileEvent_getFile(request *IGuestFileEvent_getFile) (*IGuestFileEvent_getFileResponse, error)

	IGuestFileEvent_getFileContext(ctx context.Context, request *IGuestFileEvent_getFile) (*IGuestFileEvent_getFileResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFileRegisteredEvent_getRegistered(request *IGuestFileRegisteredEvent_getRegistered) (*IGuestFileRegisteredEvent_getRegisteredResponse, error)

	IGuestFileRegisteredEvent_getRegisteredContext(ctx context.Context, request *IGuestFileRegisteredEvent_getRegistered) (*IGuestFileRegisteredEvent_getRegisteredResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFileStateChangedEvent_getStatus(request *IGuestFileStateChangedEvent_getStatus) (*IGuestFileStateChangedEvent_getStatusResponse, error)

	IGuestFileStateChangedEvent_getStatusContext(ctx context.Context, request *IGuestFileStateChangedEvent_getStatus) (*IGuestFileStateChangedEvent_getStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFileStateChangedEvent_getError(request *IGuestFileStateChangedEvent_getError) (*IGuestFileStateChangedEvent_getErrorResponse, error)

	IGuestFileStateChangedEvent_getErrorContext(ctx context.Context, request *IGuestFileStateChangedEvent_getError) (*IGuestFileStateChangedEvent_getErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFileIOEvent_getOffset(request *IGuestFileIOEvent_getOffset) (*IGuestFileIOEvent_getOffsetResponse, error)

	IGuestFileIOEvent_getOffsetContext(ctx context.Context, request *IGuestFileIOEvent_getOffset) (*IGuestFileIOEvent_getOffsetResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFileIOEvent_getProcessed(request *IGuestFileIOEvent_getProcessed) (*IGuestFileIOEvent_getProcessedResponse, error)

	IGuestFileIOEvent_getProcessedContext(ctx context.Context, request *IGuestFileIOEvent_getProcessed) (*IGuestFileIOEvent_getProcessedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFileSizeChangedEvent_getNewSize(request *IGuestFileSizeChangedEvent_getNewSize) (*IGuestFileSizeChangedEvent_getNewSizeResponse, error)

	IGuestFileSizeChangedEvent_getNewSizeContext(ctx context.Context, request *IGuestFileSizeChangedEvent_getNewSize) (*IGuestFileSizeChangedEvent_getNewSizeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFileReadEvent_getData(request *IGuestFileReadEvent_getData) (*IGuestFileReadEvent_getDataResponse, error)

	IGuestFileReadEvent_getDataContext(ctx context.Context, request *IGuestFileReadEvent_getData) (*IGuestFileReadEvent_getDataResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces(request *IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceStateChangedEvent_getDevice(request *IUSBDeviceStateChangedEvent_getDevice) (*IUSBDeviceStateChangedEvent_getDeviceResponse, error)

	IUSBDeviceStateChangedEvent_getDeviceContext(ctx context.Context, request *IUSBDeviceStateChangedEvent_getDevice) (*IUSBDeviceStateChangedEvent_getDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceStateChangedEvent_getAttached(request *IUSBDeviceStateChangedEvent_getAttached) (*IUSBDeviceStateChangedEvent_getAttachedResponse, error)

	IUSBDeviceStateChangedEvent_getAttachedContext(ctx context.Context, request *IUSBDeviceStateChangedEvent_getAttached) (*IUSBDeviceStateChangedEvent_getAttachedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUSBDeviceStateChangedEvent_getError(request *IUSBDeviceStateChangedEvent_getError) (*IUSBDeviceStateChangedEvent_getErrorResponse, error)

	IUSBDeviceStateChangedEvent_getErrorContext(ctx context.Context, request *IUSBDeviceStateChangedEvent_getError) (*IUSBDeviceStateChangedEvent_getErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ISharedFolderChangedEvent_getScope(request *ISharedFolderChangedEvent_getScope) (*ISharedFolderChangedEvent_getScopeResponse, error)

	ISharedFolderChangedEvent_getScopeContext(ctx context.Context, request *ISharedFolderChangedEvent_getScope) (*ISharedFolderChangedEvent_getScopeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRuntimeErrorEvent_getFatal(request *IRuntimeErrorEvent_getFatal) (*IRuntimeErrorEvent_getFatalResponse, error)

	IRuntimeErrorEvent_getFatalContext(ctx context.Context, request *IRuntimeErrorEvent_getFatal) (*IRuntimeErrorEvent_getFatalResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRuntimeErrorEvent_getId(request *IRuntimeErrorEvent_getId) (*IRuntimeErrorEvent_getIdResponse, error)

	IRuntimeErrorEvent_getIdContext(ctx context.Context, request *IRuntimeErrorEvent_getId) (*IRuntimeErrorEvent_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRuntimeErrorEvent_getMessage(request *IRuntimeErrorEvent_getMessage) (*IRuntimeErrorEvent_getMessageResponse, error)

	IRuntimeErrorEvent_getMessageContext(ctx context.Context, request *IRuntimeErrorEvent_getMessage) (*IRuntimeErrorEvent_getMessageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEventSourceChangedEvent_getListener(request *IEventSourceChangedEvent_getListener) (*IEventSourceChangedEvent_getListenerResponse, error)

	IEventSourceChangedEvent_getListenerContext(ctx context.Context, request *IEventSourceChangedEvent_getListener) (*IEventSourceChangedEvent_getListenerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IEventSourceChangedEvent_getAdd(request *IEventSourceChangedEvent_getAdd) (*IEventSourceChangedEvent_getAddResponse, error)

	IEventSourceChangedEvent_getAddContext(ctx context.Context, request *IEventSourceChangedEvent_getAdd) (*IEventSourceChangedEvent_getAddResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IExtraDataChangedEvent_getMachineId(request *IExtraDataChangedEvent_getMachineId) (*IExtraDataChangedEvent_getMachineIdResponse, error)

	IExtraDataChangedEvent_getMachineIdContext(ctx context.Context, request *IExtraDataChangedEvent_getMachineId) (*IExtraDataChangedEvent_getMachineIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IExtraDataChangedEvent_getKey(request *IExtraDataChangedEvent_getKey) (*IExtraDataChangedEvent_getKeyResponse, error)

	IExtraDataChangedEvent_getKeyContext(ctx context.Context, request *IExtraDataChangedEvent_getKey) (*IExtraDataChangedEvent_getKeyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IExtraDataChangedEvent_getValue(request *IExtraDataChangedEvent_getValue) (*IExtraDataChangedEvent_getValueResponse, error)

	IExtraDataChangedEvent_getValueContext(ctx context.Context, request *IExtraDataChangedEvent_getValue) (*IExtraDataChangedEvent_getValueResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVetoEvent_addVeto(request *IVetoEvent_addVeto) (*IVetoEvent_addVetoResponse, error)

	IVetoEvent_addVetoContext(ctx context.Context, request *IVetoEvent_addVeto) (*IVetoEvent_addVetoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVetoEvent_isVetoed(request *IVetoEvent_isVetoed) (*IVetoEvent_isVetoedResponse, error)

	IVetoEvent_isVetoedContext(ctx context.Context, request *IVetoEvent_isVetoed) (*IVetoEvent_isVetoedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVetoEvent_getVetos(request *IVetoEvent_getVetos) (*IVetoEvent_getVetosResponse, error)

	IVetoEvent_getVetosContext(ctx context.Context, request *IVetoEvent_getVetos) (*IVetoEvent_getVetosResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVetoEvent_addApproval(request *IVetoEvent_addApproval) (*IVetoEvent_addApprovalResponse, error)

	IVetoEvent_addApprovalContext(ctx context.Context, request *IVetoEvent_addApproval) (*IVetoEvent_addApprovalResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVetoEvent_isApproved(request *IVetoEvent_isApproved) (*IVetoEvent_isApprovedResponse, error)

	IVetoEvent_isApprovedContext(ctx context.Context, request *IVetoEvent_isApproved) (*IVetoEvent_isApprovedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVetoEvent_getApprovals(request *IVetoEvent_getApprovals) (*IVetoEvent_getApprovalsResponse, error)

	IVetoEvent_getApprovalsContext(ctx context.Context, request *IVetoEvent_getApprovals) (*IVetoEvent_getApprovalsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IExtraDataCanChangeEvent_getMachineId(request *IExtraDataCanChangeEvent_getMachineId) (*IExtraDataCanChangeEvent_getMachineIdResponse, error)

	IExtraDataCanChangeEvent_getMachineIdContext(ctx context.Context, request *IExtraDataCanChangeEvent_getMachineId) (*IExtraDataCanChangeEvent_getMachineIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IExtraDataCanChangeEvent_getKey(request *IExtraDataCanChangeEvent_getKey) (*IExtraDataCanChangeEvent_getKeyResponse, error)

	IExtraDataCanChangeEvent_getKeyContext(ctx context.Context, request *IExtraDataCanChangeEvent_getKey) (*IExtraDataCanChangeEvent_getKeyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IExtraDataCanChangeEvent_getValue(request *IExtraDataCanChangeEvent_getValue) (*IExtraDataCanChangeEvent_getValueResponse, error)

	IExtraDataCanChangeEvent_getValueContext(ctx context.Context, request *IExtraDataCanChangeEvent_getValue) (*IExtraDataCanChangeEvent_getValueResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces(request *ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces) (*ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces) (*ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IShowWindowEvent_getWinId(request *IShowWindowEvent_getWinId) (*IShowWindowEvent_getWinIdResponse, error)

	IShowWindowEvent_getWinIdContext(ctx context.Context, request *IShowWindowEvent_getWinId) (*IShowWindowEvent_getWinIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IShowWindowEvent_setWinId(request *IShowWindowEvent_setWinId) (*IShowWindowEvent_setWinIdResponse, error)

	IShowWindowEvent_setWinIdContext(ctx context.Context, request *IShowWindowEvent_setWinId) (*IShowWindowEvent_setWinIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATRedirectEvent_getSlot(request *INATRedirectEvent_getSlot) (*INATRedirectEvent_getSlotResponse, error)

	INATRedirectEvent_getSlotContext(ctx context.Context, request *INATRedirectEvent_getSlot) (*INATRedirectEvent_getSlotResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATRedirectEvent_getRemove(request *INATRedirectEvent_getRemove) (*INATRedirectEvent_getRemoveResponse, error)

	INATRedirectEvent_getRemoveContext(ctx context.Context, request *INATRedirectEvent_getRemove) (*INATRedirectEvent_getRemoveResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATRedirectEvent_getName(request *INATRedirectEvent_getName) (*INATRedirectEvent_getNameResponse, error)

	INATRedirectEvent_getNameContext(ctx context.Context, request *INATRedirectEvent_getName) (*INATRedirectEvent_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATRedirectEvent_getProto(request *INATRedirectEvent_getProto) (*INATRedirectEvent_getProtoResponse, error)

	INATRedirectEvent_getProtoContext(ctx context.Context, request *INATRedirectEvent_getProto) (*INATRedirectEvent_getProtoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATRedirectEvent_getHostIP(request *INATRedirectEvent_getHostIP) (*INATRedirectEvent_getHostIPResponse, error)

	INATRedirectEvent_getHostIPContext(ctx context.Context, request *INATRedirectEvent_getHostIP) (*INATRedirectEvent_getHostIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATRedirectEvent_getHostPort(request *INATRedirectEvent_getHostPort) (*INATRedirectEvent_getHostPortResponse, error)

	INATRedirectEvent_getHostPortContext(ctx context.Context, request *INATRedirectEvent_getHostPort) (*INATRedirectEvent_getHostPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATRedirectEvent_getGuestIP(request *INATRedirectEvent_getGuestIP) (*INATRedirectEvent_getGuestIPResponse, error)

	INATRedirectEvent_getGuestIPContext(ctx context.Context, request *INATRedirectEvent_getGuestIP) (*INATRedirectEvent_getGuestIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATRedirectEvent_getGuestPort(request *INATRedirectEvent_getGuestPort) (*INATRedirectEvent_getGuestPortResponse, error)

	INATRedirectEvent_getGuestPortContext(ctx context.Context, request *INATRedirectEvent_getGuestPort) (*INATRedirectEvent_getGuestPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDeviceChangedEvent_getDevice(request *IHostAudioDeviceChangedEvent_getDevice) (*IHostAudioDeviceChangedEvent_getDeviceResponse, error)

	IHostAudioDeviceChangedEvent_getDeviceContext(ctx context.Context, request *IHostAudioDeviceChangedEvent_getDevice) (*IHostAudioDeviceChangedEvent_getDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDeviceChangedEvent_getNew(request *IHostAudioDeviceChangedEvent_getNew) (*IHostAudioDeviceChangedEvent_getNewResponse, error)

	IHostAudioDeviceChangedEvent_getNewContext(ctx context.Context, request *IHostAudioDeviceChangedEvent_getNew) (*IHostAudioDeviceChangedEvent_getNewResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDeviceChangedEvent_getState(request *IHostAudioDeviceChangedEvent_getState) (*IHostAudioDeviceChangedEvent_getStateResponse, error)

	IHostAudioDeviceChangedEvent_getStateContext(ctx context.Context, request *IHostAudioDeviceChangedEvent_getState) (*IHostAudioDeviceChangedEvent_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostAudioDeviceChangedEvent_getError(request *IHostAudioDeviceChangedEvent_getError) (*IHostAudioDeviceChangedEvent_getErrorResponse, error)

	IHostAudioDeviceChangedEvent_getErrorContext(ctx context.Context, request *IHostAudioDeviceChangedEvent_getError) (*IHostAudioDeviceChangedEvent_getErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostPCIDevicePlugEvent_getPlugged(request *IHostPCIDevicePlugEvent_getPlugged) (*IHostPCIDevicePlugEvent_getPluggedResponse, error)

	IHostPCIDevicePlugEvent_getPluggedContext(ctx context.Context, request *IHostPCIDevicePlugEvent_getPlugged) (*IHostPCIDevicePlugEvent_getPluggedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostPCIDevicePlugEvent_getSuccess(request *IHostPCIDevicePlugEvent_getSuccess) (*IHostPCIDevicePlugEvent_getSuccessResponse, error)

	IHostPCIDevicePlugEvent_getSuccessContext(ctx context.Context, request *IHostPCIDevicePlugEvent_getSuccess) (*IHostPCIDevicePlugEvent_getSuccessResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostPCIDevicePlugEvent_getAttachment(request *IHostPCIDevicePlugEvent_getAttachment) (*IHostPCIDevicePlugEvent_getAttachmentResponse, error)

	IHostPCIDevicePlugEvent_getAttachmentContext(ctx context.Context, request *IHostPCIDevicePlugEvent_getAttachment) (*IHostPCIDevicePlugEvent_getAttachmentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostPCIDevicePlugEvent_getMessage(request *IHostPCIDevicePlugEvent_getMessage) (*IHostPCIDevicePlugEvent_getMessageResponse, error)

	IHostPCIDevicePlugEvent_getMessageContext(ctx context.Context, request *IHostPCIDevicePlugEvent_getMessage) (*IHostPCIDevicePlugEvent_getMessageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVBoxSVCAvailabilityChangedEvent_getAvailable(request *IVBoxSVCAvailabilityChangedEvent_getAvailable) (*IVBoxSVCAvailabilityChangedEvent_getAvailableResponse, error)

	IVBoxSVCAvailabilityChangedEvent_getAvailableContext(ctx context.Context, request *IVBoxSVCAvailabilityChangedEvent_getAvailable) (*IVBoxSVCAvailabilityChangedEvent_getAvailableResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBandwidthGroupChangedEvent_getBandwidthGroup(request *IBandwidthGroupChangedEvent_getBandwidthGroup) (*IBandwidthGroupChangedEvent_getBandwidthGroupResponse, error)

	IBandwidthGroupChangedEvent_getBandwidthGroupContext(ctx context.Context, request *IBandwidthGroupChangedEvent_getBandwidthGroup) (*IBandwidthGroupChangedEvent_getBandwidthGroupResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMonitorChangedEvent_getChangeType(request *IGuestMonitorChangedEvent_getChangeType) (*IGuestMonitorChangedEvent_getChangeTypeResponse, error)

	IGuestMonitorChangedEvent_getChangeTypeContext(ctx context.Context, request *IGuestMonitorChangedEvent_getChangeType) (*IGuestMonitorChangedEvent_getChangeTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMonitorChangedEvent_getScreenId(request *IGuestMonitorChangedEvent_getScreenId) (*IGuestMonitorChangedEvent_getScreenIdResponse, error)

	IGuestMonitorChangedEvent_getScreenIdContext(ctx context.Context, request *IGuestMonitorChangedEvent_getScreenId) (*IGuestMonitorChangedEvent_getScreenIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMonitorChangedEvent_getOriginX(request *IGuestMonitorChangedEvent_getOriginX) (*IGuestMonitorChangedEvent_getOriginXResponse, error)

	IGuestMonitorChangedEvent_getOriginXContext(ctx context.Context, request *IGuestMonitorChangedEvent_getOriginX) (*IGuestMonitorChangedEvent_getOriginXResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMonitorChangedEvent_getOriginY(request *IGuestMonitorChangedEvent_getOriginY) (*IGuestMonitorChangedEvent_getOriginYResponse, error)

	IGuestMonitorChangedEvent_getOriginYContext(ctx context.Context, request *IGuestMonitorChangedEvent_getOriginY) (*IGuestMonitorChangedEvent_getOriginYResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMonitorChangedEvent_getWidth(request *IGuestMonitorChangedEvent_getWidth) (*IGuestMonitorChangedEvent_getWidthResponse, error)

	IGuestMonitorChangedEvent_getWidthContext(ctx context.Context, request *IGuestMonitorChangedEvent_getWidth) (*IGuestMonitorChangedEvent_getWidthResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMonitorChangedEvent_getHeight(request *IGuestMonitorChangedEvent_getHeight) (*IGuestMonitorChangedEvent_getHeightResponse, error)

	IGuestMonitorChangedEvent_getHeightContext(ctx context.Context, request *IGuestMonitorChangedEvent_getHeight) (*IGuestMonitorChangedEvent_getHeightResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestUserStateChangedEvent_getName(request *IGuestUserStateChangedEvent_getName) (*IGuestUserStateChangedEvent_getNameResponse, error)

	IGuestUserStateChangedEvent_getNameContext(ctx context.Context, request *IGuestUserStateChangedEvent_getName) (*IGuestUserStateChangedEvent_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestUserStateChangedEvent_getDomain(request *IGuestUserStateChangedEvent_getDomain) (*IGuestUserStateChangedEvent_getDomainResponse, error)

	IGuestUserStateChangedEvent_getDomainContext(ctx context.Context, request *IGuestUserStateChangedEvent_getDomain) (*IGuestUserStateChangedEvent_getDomainResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestUserStateChangedEvent_getState(request *IGuestUserStateChangedEvent_getState) (*IGuestUserStateChangedEvent_getStateResponse, error)

	IGuestUserStateChangedEvent_getStateContext(ctx context.Context, request *IGuestUserStateChangedEvent_getState) (*IGuestUserStateChangedEvent_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestUserStateChangedEvent_getStateDetails(request *IGuestUserStateChangedEvent_getStateDetails) (*IGuestUserStateChangedEvent_getStateDetailsResponse, error)

	IGuestUserStateChangedEvent_getStateDetailsContext(ctx context.Context, request *IGuestUserStateChangedEvent_getStateDetails) (*IGuestUserStateChangedEvent_getStateDetailsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageDeviceChangedEvent_getStorageDevice(request *IStorageDeviceChangedEvent_getStorageDevice) (*IStorageDeviceChangedEvent_getStorageDeviceResponse, error)

	IStorageDeviceChangedEvent_getStorageDeviceContext(ctx context.Context, request *IStorageDeviceChangedEvent_getStorageDevice) (*IStorageDeviceChangedEvent_getStorageDeviceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageDeviceChangedEvent_getRemoved(request *IStorageDeviceChangedEvent_getRemoved) (*IStorageDeviceChangedEvent_getRemovedResponse, error)

	IStorageDeviceChangedEvent_getRemovedContext(ctx context.Context, request *IStorageDeviceChangedEvent_getRemoved) (*IStorageDeviceChangedEvent_getRemovedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStorageDeviceChangedEvent_getSilent(request *IStorageDeviceChangedEvent_getSilent) (*IStorageDeviceChangedEvent_getSilentResponse, error)

	IStorageDeviceChangedEvent_getSilentContext(ctx context.Context, request *IStorageDeviceChangedEvent_getSilent) (*IStorageDeviceChangedEvent_getSilentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkChangedEvent_getNetworkName(request *INATNetworkChangedEvent_getNetworkName) (*INATNetworkChangedEvent_getNetworkNameResponse, error)

	INATNetworkChangedEvent_getNetworkNameContext(ctx context.Context, request *INATNetworkChangedEvent_getNetworkName) (*INATNetworkChangedEvent_getNetworkNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkStartStopEvent_getStartEvent(request *INATNetworkStartStopEvent_getStartEvent) (*INATNetworkStartStopEvent_getStartEventResponse, error)

	INATNetworkStartStopEvent_getStartEventContext(ctx context.Context, request *INATNetworkStartStopEvent_getStartEvent) (*INATNetworkStartStopEvent_getStartEventResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces(request *INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces) (*INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces) (*INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkCreationDeletionEvent_getCreationEvent(request *INATNetworkCreationDeletionEvent_getCreationEvent) (*INATNetworkCreationDeletionEvent_getCreationEventResponse, error)

	INATNetworkCreationDeletionEvent_getCreationEventContext(ctx context.Context, request *INATNetworkCreationDeletionEvent_getCreationEvent) (*INATNetworkCreationDeletionEvent_getCreationEventResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkSettingEvent_getEnabled(request *INATNetworkSettingEvent_getEnabled) (*INATNetworkSettingEvent_getEnabledResponse, error)

	INATNetworkSettingEvent_getEnabledContext(ctx context.Context, request *INATNetworkSettingEvent_getEnabled) (*INATNetworkSettingEvent_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkSettingEvent_getNetwork(request *INATNetworkSettingEvent_getNetwork) (*INATNetworkSettingEvent_getNetworkResponse, error)

	INATNetworkSettingEvent_getNetworkContext(ctx context.Context, request *INATNetworkSettingEvent_getNetwork) (*INATNetworkSettingEvent_getNetworkResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkSettingEvent_getGateway(request *INATNetworkSettingEvent_getGateway) (*INATNetworkSettingEvent_getGatewayResponse, error)

	INATNetworkSettingEvent_getGatewayContext(ctx context.Context, request *INATNetworkSettingEvent_getGateway) (*INATNetworkSettingEvent_getGatewayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled(request *INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled) (*INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse, error)

	INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledContext(ctx context.Context, request *INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled) (*INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkSettingEvent_getNeedDhcpServer(request *INATNetworkSettingEvent_getNeedDhcpServer) (*INATNetworkSettingEvent_getNeedDhcpServerResponse, error)

	INATNetworkSettingEvent_getNeedDhcpServerContext(ctx context.Context, request *INATNetworkSettingEvent_getNeedDhcpServer) (*INATNetworkSettingEvent_getNeedDhcpServerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkPortForwardEvent_getCreate(request *INATNetworkPortForwardEvent_getCreate) (*INATNetworkPortForwardEvent_getCreateResponse, error)

	INATNetworkPortForwardEvent_getCreateContext(ctx context.Context, request *INATNetworkPortForwardEvent_getCreate) (*INATNetworkPortForwardEvent_getCreateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkPortForwardEvent_getIpv6(request *INATNetworkPortForwardEvent_getIpv6) (*INATNetworkPortForwardEvent_getIpv6Response, error)

	INATNetworkPortForwardEvent_getIpv6Context(ctx context.Context, request *INATNetworkPortForwardEvent_getIpv6) (*INATNetworkPortForwardEvent_getIpv6Response, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkPortForwardEvent_getName(request *INATNetworkPortForwardEvent_getName) (*INATNetworkPortForwardEvent_getNameResponse, error)

	INATNetworkPortForwardEvent_getNameContext(ctx context.Context, request *INATNetworkPortForwardEvent_getName) (*INATNetworkPortForwardEvent_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkPortForwardEvent_getProto(request *INATNetworkPortForwardEvent_getProto) (*INATNetworkPortForwardEvent_getProtoResponse, error)

	INATNetworkPortForwardEvent_getProtoContext(ctx context.Context, request *INATNetworkPortForwardEvent_getProto) (*INATNetworkPortForwardEvent_getProtoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkPortForwardEvent_getHostIp(request *INATNetworkPortForwardEvent_getHostIp) (*INATNetworkPortForwardEvent_getHostIpResponse, error)

	INATNetworkPortForwardEvent_getHostIpContext(ctx context.Context, request *INATNetworkPortForwardEvent_getHostIp) (*INATNetworkPortForwardEvent_getHostIpResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkPortForwardEvent_getHostPort(request *INATNetworkPortForwardEvent_getHostPort) (*INATNetworkPortForwardEvent_getHostPortResponse, error)

	INATNetworkPortForwardEvent_getHostPortContext(ctx context.Context, request *INATNetworkPortForwardEvent_getHostPort) (*INATNetworkPortForwardEvent_getHostPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkPortForwardEvent_getGuestIp(request *INATNetworkPortForwardEvent_getGuestIp) (*INATNetworkPortForwardEvent_getGuestIpResponse, error)

	INATNetworkPortForwardEvent_getGuestIpContext(ctx context.Context, request *INATNetworkPortForwardEvent_getGuestIp) (*INATNetworkPortForwardEvent_getGuestIpResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	INATNetworkPortForwardEvent_getGuestPort(request *INATNetworkPortForwardEvent_getGuestPort) (*INATNetworkPortForwardEvent_getGuestPortResponse, error)

	INATNetworkPortForwardEvent_getGuestPortContext(ctx context.Context, request *INATNetworkPortForwardEvent_getGuestPort) (*INATNetworkPortForwardEvent_getGuestPortResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces(request *IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces) (*IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces) (*IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgressEvent_getProgressId(request *IProgressEvent_getProgressId) (*IProgressEvent_getProgressIdResponse, error)

	IProgressEvent_getProgressIdContext(ctx context.Context, request *IProgressEvent_getProgressId) (*IProgressEvent_getProgressIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgressCreatedEvent_getCreate(request *IProgressCreatedEvent_getCreate) (*IProgressCreatedEvent_getCreateResponse, error)

	IProgressCreatedEvent_getCreateContext(ctx context.Context, request *IProgressCreatedEvent_getCreate) (*IProgressCreatedEvent_getCreateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgressPercentageChangedEvent_getPercent(request *IProgressPercentageChangedEvent_getPercent) (*IProgressPercentageChangedEvent_getPercentResponse, error)

	IProgressPercentageChangedEvent_getPercentContext(ctx context.Context, request *IProgressPercentageChangedEvent_getPercent) (*IProgressPercentageChangedEvent_getPercentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICursorPositionChangedEvent_getHasData(request *ICursorPositionChangedEvent_getHasData) (*ICursorPositionChangedEvent_getHasDataResponse, error)

	ICursorPositionChangedEvent_getHasDataContext(ctx context.Context, request *ICursorPositionChangedEvent_getHasData) (*ICursorPositionChangedEvent_getHasDataResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICursorPositionChangedEvent_getX(request *ICursorPositionChangedEvent_getX) (*ICursorPositionChangedEvent_getXResponse, error)

	ICursorPositionChangedEvent_getXContext(ctx context.Context, request *ICursorPositionChangedEvent_getX) (*ICursorPositionChangedEvent_getXResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICursorPositionChangedEvent_getY(request *ICursorPositionChangedEvent_getY) (*ICursorPositionChangedEvent_getYResponse, error)

	ICursorPositionChangedEvent_getYContext(ctx context.Context, request *ICursorPositionChangedEvent_getY) (*ICursorPositionChangedEvent_getYResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestAdditionsStatusChangedEvent_getFacility(request *IGuestAdditionsStatusChangedEvent_getFacility) (*IGuestAdditionsStatusChangedEvent_getFacilityResponse, error)

	IGuestAdditionsStatusChangedEvent_getFacilityContext(ctx context.Context, request *IGuestAdditionsStatusChangedEvent_getFacility) (*IGuestAdditionsStatusChangedEvent_getFacilityResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestAdditionsStatusChangedEvent_getStatus(request *IGuestAdditionsStatusChangedEvent_getStatus) (*IGuestAdditionsStatusChangedEvent_getStatusResponse, error)

	IGuestAdditionsStatusChangedEvent_getStatusContext(ctx context.Context, request *IGuestAdditionsStatusChangedEvent_getStatus) (*IGuestAdditionsStatusChangedEvent_getStatusResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestAdditionsStatusChangedEvent_getRunLevel(request *IGuestAdditionsStatusChangedEvent_getRunLevel) (*IGuestAdditionsStatusChangedEvent_getRunLevelResponse, error)

	IGuestAdditionsStatusChangedEvent_getRunLevelContext(ctx context.Context, request *IGuestAdditionsStatusChangedEvent_getRunLevel) (*IGuestAdditionsStatusChangedEvent_getRunLevelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestAdditionsStatusChangedEvent_getTimestamp(request *IGuestAdditionsStatusChangedEvent_getTimestamp) (*IGuestAdditionsStatusChangedEvent_getTimestampResponse, error)

	IGuestAdditionsStatusChangedEvent_getTimestampContext(ctx context.Context, request *IGuestAdditionsStatusChangedEvent_getTimestamp) (*IGuestAdditionsStatusChangedEvent_getTimestampResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestMonitorInfoChangedEvent_getOutput(request *IGuestMonitorInfoChangedEvent_getOutput) (*IGuestMonitorInfoChangedEvent_getOutputResponse, error)

	IGuestMonitorInfoChangedEvent_getOutputContext(ctx context.Context, request *IGuestMonitorInfoChangedEvent_getOutput) (*IGuestMonitorInfoChangedEvent_getOutputResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgentEvent_getAgent(request *IUpdateAgentEvent_getAgent) (*IUpdateAgentEvent_getAgentResponse, error)

	IUpdateAgentEvent_getAgentContext(ctx context.Context, request *IUpdateAgentEvent_getAgent) (*IUpdateAgentEvent_getAgentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgentSettingsChangedEvent_getAttributeHint(request *IUpdateAgentSettingsChangedEvent_getAttributeHint) (*IUpdateAgentSettingsChangedEvent_getAttributeHintResponse, error)

	IUpdateAgentSettingsChangedEvent_getAttributeHintContext(ctx context.Context, request *IUpdateAgentSettingsChangedEvent_getAttributeHint) (*IUpdateAgentSettingsChangedEvent_getAttributeHintResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgentErrorEvent_getMsg(request *IUpdateAgentErrorEvent_getMsg) (*IUpdateAgentErrorEvent_getMsgResponse, error)

	IUpdateAgentErrorEvent_getMsgContext(ctx context.Context, request *IUpdateAgentErrorEvent_getMsg) (*IUpdateAgentErrorEvent_getMsgResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgentErrorEvent_getRcError(request *IUpdateAgentErrorEvent_getRcError) (*IUpdateAgentErrorEvent_getRcErrorResponse, error)

	IUpdateAgentErrorEvent_getRcErrorContext(ctx context.Context, request *IUpdateAgentErrorEvent_getRcError) (*IUpdateAgentErrorEvent_getRcErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgentAvailableEvent_getVersion(request *IUpdateAgentAvailableEvent_getVersion) (*IUpdateAgentAvailableEvent_getVersionResponse, error)

	IUpdateAgentAvailableEvent_getVersionContext(ctx context.Context, request *IUpdateAgentAvailableEvent_getVersion) (*IUpdateAgentAvailableEvent_getVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgentAvailableEvent_getChannel(request *IUpdateAgentAvailableEvent_getChannel) (*IUpdateAgentAvailableEvent_getChannelResponse, error)

	IUpdateAgentAvailableEvent_getChannelContext(ctx context.Context, request *IUpdateAgentAvailableEvent_getChannel) (*IUpdateAgentAvailableEvent_getChannelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgentAvailableEvent_getSeverity(request *IUpdateAgentAvailableEvent_getSeverity) (*IUpdateAgentAvailableEvent_getSeverityResponse, error)

	IUpdateAgentAvailableEvent_getSeverityContext(ctx context.Context, request *IUpdateAgentAvailableEvent_getSeverity) (*IUpdateAgentAvailableEvent_getSeverityResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgentAvailableEvent_getDownloadURL(request *IUpdateAgentAvailableEvent_getDownloadURL) (*IUpdateAgentAvailableEvent_getDownloadURLResponse, error)

	IUpdateAgentAvailableEvent_getDownloadURLContext(ctx context.Context, request *IUpdateAgentAvailableEvent_getDownloadURL) (*IUpdateAgentAvailableEvent_getDownloadURLResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgentAvailableEvent_getWebURL(request *IUpdateAgentAvailableEvent_getWebURL) (*IUpdateAgentAvailableEvent_getWebURLResponse, error)

	IUpdateAgentAvailableEvent_getWebURLContext(ctx context.Context, request *IUpdateAgentAvailableEvent_getWebURL) (*IUpdateAgentAvailableEvent_getWebURLResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgentAvailableEvent_getReleaseNotes(request *IUpdateAgentAvailableEvent_getReleaseNotes) (*IUpdateAgentAvailableEvent_getReleaseNotesResponse, error)

	IUpdateAgentAvailableEvent_getReleaseNotesContext(ctx context.Context, request *IUpdateAgentAvailableEvent_getReleaseNotes) (*IUpdateAgentAvailableEvent_getReleaseNotesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IUpdateAgentStateChangedEvent_getState(request *IUpdateAgentStateChangedEvent_getState) (*IUpdateAgentStateChangedEvent_getStateResponse, error)

	IUpdateAgentStateChangedEvent_getStateContext(ctx context.Context, request *IUpdateAgentStateChangedEvent_getState) (*IUpdateAgentStateChangedEvent_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IGuestDebugControlChangedEvent_getGuestDebugControl(request *IGuestDebugControlChangedEvent_getGuestDebugControl) (*IGuestDebugControlChangedEvent_getGuestDebugControlResponse, error)

	IGuestDebugControlChangedEvent_getGuestDebugControlContext(ctx context.Context, request *IGuestDebugControlChangedEvent_getGuestDebugControl) (*IGuestDebugControlChangedEvent_getGuestDebugControlResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IMachineGroupsChangedEvent_getDummy(request *IMachineGroupsChangedEvent_getDummy) (*IMachineGroupsChangedEvent_getDummyResponse, error)

	IMachineGroupsChangedEvent_getDummyContext(ctx context.Context, request *IMachineGroupsChangedEvent_getDummy) (*IMachineGroupsChangedEvent_getDummyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStringArray_getValues(request *IStringArray_getValues) (*IStringArray_getValuesResponse, error)

	IStringArray_getValuesContext(ctx context.Context, request *IStringArray_getValues) (*IStringArray_getValuesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFormValue_getType(request *IFormValue_getType) (*IFormValue_getTypeResponse, error)

	IFormValue_getTypeContext(ctx context.Context, request *IFormValue_getType) (*IFormValue_getTypeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFormValue_getGeneration(request *IFormValue_getGeneration) (*IFormValue_getGenerationResponse, error)

	IFormValue_getGenerationContext(ctx context.Context, request *IFormValue_getGeneration) (*IFormValue_getGenerationResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFormValue_getEnabled(request *IFormValue_getEnabled) (*IFormValue_getEnabledResponse, error)

	IFormValue_getEnabledContext(ctx context.Context, request *IFormValue_getEnabled) (*IFormValue_getEnabledResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFormValue_getVisible(request *IFormValue_getVisible) (*IFormValue_getVisibleResponse, error)

	IFormValue_getVisibleContext(ctx context.Context, request *IFormValue_getVisible) (*IFormValue_getVisibleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFormValue_getLabel(request *IFormValue_getLabel) (*IFormValue_getLabelResponse, error)

	IFormValue_getLabelContext(ctx context.Context, request *IFormValue_getLabel) (*IFormValue_getLabelResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFormValue_getDescription(request *IFormValue_getDescription) (*IFormValue_getDescriptionResponse, error)

	IFormValue_getDescriptionContext(ctx context.Context, request *IFormValue_getDescription) (*IFormValue_getDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IFormValue_getHelp(request *IFormValue_getHelp) (*IFormValue_getHelpResponse, error)

	IFormValue_getHelpContext(ctx context.Context, request *IFormValue_getHelp) (*IFormValue_getHelpResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBooleanFormValue_getSelected(request *IBooleanFormValue_getSelected) (*IBooleanFormValue_getSelectedResponse, error)

	IBooleanFormValue_getSelectedContext(ctx context.Context, request *IBooleanFormValue_getSelected) (*IBooleanFormValue_getSelectedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IBooleanFormValue_setSelected(request *IBooleanFormValue_setSelected) (*IBooleanFormValue_setSelectedResponse, error)

	IBooleanFormValue_setSelectedContext(ctx context.Context, request *IBooleanFormValue_setSelected) (*IBooleanFormValue_setSelectedResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRangedIntegerFormValue_getSuffix(request *IRangedIntegerFormValue_getSuffix) (*IRangedIntegerFormValue_getSuffixResponse, error)

	IRangedIntegerFormValue_getSuffixContext(ctx context.Context, request *IRangedIntegerFormValue_getSuffix) (*IRangedIntegerFormValue_getSuffixResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRangedIntegerFormValue_getMinimum(request *IRangedIntegerFormValue_getMinimum) (*IRangedIntegerFormValue_getMinimumResponse, error)

	IRangedIntegerFormValue_getMinimumContext(ctx context.Context, request *IRangedIntegerFormValue_getMinimum) (*IRangedIntegerFormValue_getMinimumResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRangedIntegerFormValue_getMaximum(request *IRangedIntegerFormValue_getMaximum) (*IRangedIntegerFormValue_getMaximumResponse, error)

	IRangedIntegerFormValue_getMaximumContext(ctx context.Context, request *IRangedIntegerFormValue_getMaximum) (*IRangedIntegerFormValue_getMaximumResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRangedIntegerFormValue_getInteger(request *IRangedIntegerFormValue_getInteger) (*IRangedIntegerFormValue_getIntegerResponse, error)

	IRangedIntegerFormValue_getIntegerContext(ctx context.Context, request *IRangedIntegerFormValue_getInteger) (*IRangedIntegerFormValue_getIntegerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IRangedIntegerFormValue_setInteger(request *IRangedIntegerFormValue_setInteger) (*IRangedIntegerFormValue_setIntegerResponse, error)

	IRangedIntegerFormValue_setIntegerContext(ctx context.Context, request *IRangedIntegerFormValue_setInteger) (*IRangedIntegerFormValue_setIntegerResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStringFormValue_getMultiline(request *IStringFormValue_getMultiline) (*IStringFormValue_getMultilineResponse, error)

	IStringFormValue_getMultilineContext(ctx context.Context, request *IStringFormValue_getMultiline) (*IStringFormValue_getMultilineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStringFormValue_getClipboardString(request *IStringFormValue_getClipboardString) (*IStringFormValue_getClipboardStringResponse, error)

	IStringFormValue_getClipboardStringContext(ctx context.Context, request *IStringFormValue_getClipboardString) (*IStringFormValue_getClipboardStringResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStringFormValue_getString(request *IStringFormValue_getString) (*IStringFormValue_getStringResponse, error)

	IStringFormValue_getStringContext(ctx context.Context, request *IStringFormValue_getString) (*IStringFormValue_getStringResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IStringFormValue_setString(request *IStringFormValue_setString) (*IStringFormValue_setStringResponse, error)

	IStringFormValue_setStringContext(ctx context.Context, request *IStringFormValue_setString) (*IStringFormValue_setStringResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IChoiceFormValue_getValues(request *IChoiceFormValue_getValues) (*IChoiceFormValue_getValuesResponse, error)

	IChoiceFormValue_getValuesContext(ctx context.Context, request *IChoiceFormValue_getValues) (*IChoiceFormValue_getValuesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IChoiceFormValue_getSelectedIndex(request *IChoiceFormValue_getSelectedIndex) (*IChoiceFormValue_getSelectedIndexResponse, error)

	IChoiceFormValue_getSelectedIndexContext(ctx context.Context, request *IChoiceFormValue_getSelectedIndex) (*IChoiceFormValue_getSelectedIndexResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IChoiceFormValue_setSelectedIndex(request *IChoiceFormValue_setSelectedIndex) (*IChoiceFormValue_setSelectedIndexResponse, error)

	IChoiceFormValue_setSelectedIndexContext(ctx context.Context, request *IChoiceFormValue_setSelectedIndex) (*IChoiceFormValue_setSelectedIndexResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IForm_getValues(request *IForm_getValues) (*IForm_getValuesResponse, error)

	IForm_getValuesContext(ctx context.Context, request *IForm_getValues) (*IForm_getValuesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IForm_getFieldGroup(request *IForm_getFieldGroup) (*IForm_getFieldGroupResponse, error)

	IForm_getFieldGroupContext(ctx context.Context, request *IForm_getFieldGroup) (*IForm_getFieldGroupResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IForm_apply(request *IForm_apply) (*IForm_applyResponse, error)

	IForm_applyContext(ctx context.Context, request *IForm_apply) (*IForm_applyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	IVirtualSystemDescriptionForm_getVirtualSystemDescription(request *IVirtualSystemDescriptionForm_getVirtualSystemDescription) (*IVirtualSystemDescriptionForm_getVirtualSystemDescriptionResponse, error)

	IVirtualSystemDescriptionForm_getVirtualSystemDescriptionContext(ctx context.Context, request *IVirtualSystemDescriptionForm_getVirtualSystemDescription) (*IVirtualSystemDescriptionForm_getVirtualSystemDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetworkGatewayInfo_getPublicIP(request *ICloudNetworkGatewayInfo_getPublicIP) (*ICloudNetworkGatewayInfo_getPublicIPResponse, error)

	ICloudNetworkGatewayInfo_getPublicIPContext(ctx context.Context, request *ICloudNetworkGatewayInfo_getPublicIP) (*ICloudNetworkGatewayInfo_getPublicIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetworkGatewayInfo_getSecondaryPublicIP(request *ICloudNetworkGatewayInfo_getSecondaryPublicIP) (*ICloudNetworkGatewayInfo_getSecondaryPublicIPResponse, error)

	ICloudNetworkGatewayInfo_getSecondaryPublicIPContext(ctx context.Context, request *ICloudNetworkGatewayInfo_getSecondaryPublicIP) (*ICloudNetworkGatewayInfo_getSecondaryPublicIPResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetworkGatewayInfo_getMacAddress(request *ICloudNetworkGatewayInfo_getMacAddress) (*ICloudNetworkGatewayInfo_getMacAddressResponse, error)

	ICloudNetworkGatewayInfo_getMacAddressContext(ctx context.Context, request *ICloudNetworkGatewayInfo_getMacAddress) (*ICloudNetworkGatewayInfo_getMacAddressResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetworkGatewayInfo_getInstanceId(request *ICloudNetworkGatewayInfo_getInstanceId) (*ICloudNetworkGatewayInfo_getInstanceIdResponse, error)

	ICloudNetworkGatewayInfo_getInstanceIdContext(ctx context.Context, request *ICloudNetworkGatewayInfo_getInstanceId) (*ICloudNetworkGatewayInfo_getInstanceIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudNetworkEnvironmentInfo_getTunnelNetworkId(request *ICloudNetworkEnvironmentInfo_getTunnelNetworkId) (*ICloudNetworkEnvironmentInfo_getTunnelNetworkIdResponse, error)

	ICloudNetworkEnvironmentInfo_getTunnelNetworkIdContext(ctx context.Context, request *ICloudNetworkEnvironmentInfo_getTunnelNetworkId) (*ICloudNetworkEnvironmentInfo_getTunnelNetworkIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getId(request *ICloudMachine_getId) (*ICloudMachine_getIdResponse, error)

	ICloudMachine_getIdContext(ctx context.Context, request *ICloudMachine_getId) (*ICloudMachine_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getAccessible(request *ICloudMachine_getAccessible) (*ICloudMachine_getAccessibleResponse, error)

	ICloudMachine_getAccessibleContext(ctx context.Context, request *ICloudMachine_getAccessible) (*ICloudMachine_getAccessibleResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getAccessError(request *ICloudMachine_getAccessError) (*ICloudMachine_getAccessErrorResponse, error)

	ICloudMachine_getAccessErrorContext(ctx context.Context, request *ICloudMachine_getAccessError) (*ICloudMachine_getAccessErrorResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getName(request *ICloudMachine_getName) (*ICloudMachine_getNameResponse, error)

	ICloudMachine_getNameContext(ctx context.Context, request *ICloudMachine_getName) (*ICloudMachine_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getOSTypeId(request *ICloudMachine_getOSTypeId) (*ICloudMachine_getOSTypeIdResponse, error)

	ICloudMachine_getOSTypeIdContext(ctx context.Context, request *ICloudMachine_getOSTypeId) (*ICloudMachine_getOSTypeIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getState(request *ICloudMachine_getState) (*ICloudMachine_getStateResponse, error)

	ICloudMachine_getStateContext(ctx context.Context, request *ICloudMachine_getState) (*ICloudMachine_getStateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getConsoleConnectionFingerprint(request *ICloudMachine_getConsoleConnectionFingerprint) (*ICloudMachine_getConsoleConnectionFingerprintResponse, error)

	ICloudMachine_getConsoleConnectionFingerprintContext(ctx context.Context, request *ICloudMachine_getConsoleConnectionFingerprint) (*ICloudMachine_getConsoleConnectionFingerprintResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getSerialConsoleCommand(request *ICloudMachine_getSerialConsoleCommand) (*ICloudMachine_getSerialConsoleCommandResponse, error)

	ICloudMachine_getSerialConsoleCommandContext(ctx context.Context, request *ICloudMachine_getSerialConsoleCommand) (*ICloudMachine_getSerialConsoleCommandResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getSerialConsoleCommandWindows(request *ICloudMachine_getSerialConsoleCommandWindows) (*ICloudMachine_getSerialConsoleCommandWindowsResponse, error)

	ICloudMachine_getSerialConsoleCommandWindowsContext(ctx context.Context, request *ICloudMachine_getSerialConsoleCommandWindows) (*ICloudMachine_getSerialConsoleCommandWindowsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getVNCConsoleCommand(request *ICloudMachine_getVNCConsoleCommand) (*ICloudMachine_getVNCConsoleCommandResponse, error)

	ICloudMachine_getVNCConsoleCommandContext(ctx context.Context, request *ICloudMachine_getVNCConsoleCommand) (*ICloudMachine_getVNCConsoleCommandResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getVNCConsoleCommandWindows(request *ICloudMachine_getVNCConsoleCommandWindows) (*ICloudMachine_getVNCConsoleCommandWindowsResponse, error)

	ICloudMachine_getVNCConsoleCommandWindowsContext(ctx context.Context, request *ICloudMachine_getVNCConsoleCommandWindows) (*ICloudMachine_getVNCConsoleCommandWindowsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_refresh(request *ICloudMachine_refresh) (*ICloudMachine_refreshResponse, error)

	ICloudMachine_refreshContext(ctx context.Context, request *ICloudMachine_refresh) (*ICloudMachine_refreshResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getDetailsForm(request *ICloudMachine_getDetailsForm) (*ICloudMachine_getDetailsFormResponse, error)

	ICloudMachine_getDetailsFormContext(ctx context.Context, request *ICloudMachine_getDetailsForm) (*ICloudMachine_getDetailsFormResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getSettingsForm(request *ICloudMachine_getSettingsForm) (*ICloudMachine_getSettingsFormResponse, error)

	ICloudMachine_getSettingsFormContext(ctx context.Context, request *ICloudMachine_getSettingsForm) (*ICloudMachine_getSettingsFormResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_powerUp(request *ICloudMachine_powerUp) (*ICloudMachine_powerUpResponse, error)

	ICloudMachine_powerUpContext(ctx context.Context, request *ICloudMachine_powerUp) (*ICloudMachine_powerUpResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_reboot(request *ICloudMachine_reboot) (*ICloudMachine_rebootResponse, error)

	ICloudMachine_rebootContext(ctx context.Context, request *ICloudMachine_reboot) (*ICloudMachine_rebootResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_shutdown(request *ICloudMachine_shutdown) (*ICloudMachine_shutdownResponse, error)

	ICloudMachine_shutdownContext(ctx context.Context, request *ICloudMachine_shutdown) (*ICloudMachine_shutdownResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_powerDown(request *ICloudMachine_powerDown) (*ICloudMachine_powerDownResponse, error)

	ICloudMachine_powerDownContext(ctx context.Context, request *ICloudMachine_powerDown) (*ICloudMachine_powerDownResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_terminate(request *ICloudMachine_terminate) (*ICloudMachine_terminateResponse, error)

	ICloudMachine_terminateContext(ctx context.Context, request *ICloudMachine_terminate) (*ICloudMachine_terminateResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_unregister(request *ICloudMachine_unregister) (*ICloudMachine_unregisterResponse, error)

	ICloudMachine_unregisterContext(ctx context.Context, request *ICloudMachine_unregister) (*ICloudMachine_unregisterResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_remove(request *ICloudMachine_remove) (*ICloudMachine_removeResponse, error)

	ICloudMachine_removeContext(ctx context.Context, request *ICloudMachine_remove) (*ICloudMachine_removeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_getConsoleHistory(request *ICloudMachine_getConsoleHistory) (*ICloudMachine_getConsoleHistoryResponse, error)

	ICloudMachine_getConsoleHistoryContext(ctx context.Context, request *ICloudMachine_getConsoleHistory) (*ICloudMachine_getConsoleHistoryResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_createConsoleConnection(request *ICloudMachine_createConsoleConnection) (*ICloudMachine_createConsoleConnectionResponse, error)

	ICloudMachine_createConsoleConnectionContext(ctx context.Context, request *ICloudMachine_createConsoleConnection) (*ICloudMachine_createConsoleConnectionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudMachine_deleteConsoleConnection(request *ICloudMachine_deleteConsoleConnection) (*ICloudMachine_deleteConsoleConnectionResponse, error)

	ICloudMachine_deleteConsoleConnectionContext(ctx context.Context, request *ICloudMachine_deleteConsoleConnection) (*ICloudMachine_deleteConsoleConnectionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_getCloudMachineList(request *ICloudClient_getCloudMachineList) (*ICloudClient_getCloudMachineListResponse, error)

	ICloudClient_getCloudMachineListContext(ctx context.Context, request *ICloudClient_getCloudMachineList) (*ICloudClient_getCloudMachineListResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_getCloudMachineStubList(request *ICloudClient_getCloudMachineStubList) (*ICloudClient_getCloudMachineStubListResponse, error)

	ICloudClient_getCloudMachineStubListContext(ctx context.Context, request *ICloudClient_getCloudMachineStubList) (*ICloudClient_getCloudMachineStubListResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_getExportDescriptionForm(request *ICloudClient_getExportDescriptionForm) (*ICloudClient_getExportDescriptionFormResponse, error)

	ICloudClient_getExportDescriptionFormContext(ctx context.Context, request *ICloudClient_getExportDescriptionForm) (*ICloudClient_getExportDescriptionFormResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_exportVM(request *ICloudClient_exportVM) (*ICloudClient_exportVMResponse, error)

	ICloudClient_exportVMContext(ctx context.Context, request *ICloudClient_exportVM) (*ICloudClient_exportVMResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_getLaunchDescriptionForm(request *ICloudClient_getLaunchDescriptionForm) (*ICloudClient_getLaunchDescriptionFormResponse, error)

	ICloudClient_getLaunchDescriptionFormContext(ctx context.Context, request *ICloudClient_getLaunchDescriptionForm) (*ICloudClient_getLaunchDescriptionFormResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_launchVM(request *ICloudClient_launchVM) (*ICloudClient_launchVMResponse, error)

	ICloudClient_launchVMContext(ctx context.Context, request *ICloudClient_launchVM) (*ICloudClient_launchVMResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_getImportDescriptionForm(request *ICloudClient_getImportDescriptionForm) (*ICloudClient_getImportDescriptionFormResponse, error)

	ICloudClient_getImportDescriptionFormContext(ctx context.Context, request *ICloudClient_getImportDescriptionForm) (*ICloudClient_getImportDescriptionFormResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_importInstance(request *ICloudClient_importInstance) (*ICloudClient_importInstanceResponse, error)

	ICloudClient_importInstanceContext(ctx context.Context, request *ICloudClient_importInstance) (*ICloudClient_importInstanceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_getCloudMachine(request *ICloudClient_getCloudMachine) (*ICloudClient_getCloudMachineResponse, error)

	ICloudClient_getCloudMachineContext(ctx context.Context, request *ICloudClient_getCloudMachine) (*ICloudClient_getCloudMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_readCloudMachineList(request *ICloudClient_readCloudMachineList) (*ICloudClient_readCloudMachineListResponse, error)

	ICloudClient_readCloudMachineListContext(ctx context.Context, request *ICloudClient_readCloudMachineList) (*ICloudClient_readCloudMachineListResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_readCloudMachineStubList(request *ICloudClient_readCloudMachineStubList) (*ICloudClient_readCloudMachineStubListResponse, error)

	ICloudClient_readCloudMachineStubListContext(ctx context.Context, request *ICloudClient_readCloudMachineStubList) (*ICloudClient_readCloudMachineStubListResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_addCloudMachine(request *ICloudClient_addCloudMachine) (*ICloudClient_addCloudMachineResponse, error)

	ICloudClient_addCloudMachineContext(ctx context.Context, request *ICloudClient_addCloudMachine) (*ICloudClient_addCloudMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_createCloudMachine(request *ICloudClient_createCloudMachine) (*ICloudClient_createCloudMachineResponse, error)

	ICloudClient_createCloudMachineContext(ctx context.Context, request *ICloudClient_createCloudMachine) (*ICloudClient_createCloudMachineResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_listInstances(request *ICloudClient_listInstances) (*ICloudClient_listInstancesResponse, error)

	ICloudClient_listInstancesContext(ctx context.Context, request *ICloudClient_listInstances) (*ICloudClient_listInstancesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_listSourceInstances(request *ICloudClient_listSourceInstances) (*ICloudClient_listSourceInstancesResponse, error)

	ICloudClient_listSourceInstancesContext(ctx context.Context, request *ICloudClient_listSourceInstances) (*ICloudClient_listSourceInstancesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_listImages(request *ICloudClient_listImages) (*ICloudClient_listImagesResponse, error)

	ICloudClient_listImagesContext(ctx context.Context, request *ICloudClient_listImages) (*ICloudClient_listImagesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_listBootVolumes(request *ICloudClient_listBootVolumes) (*ICloudClient_listBootVolumesResponse, error)

	ICloudClient_listBootVolumesContext(ctx context.Context, request *ICloudClient_listBootVolumes) (*ICloudClient_listBootVolumesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_listSourceBootVolumes(request *ICloudClient_listSourceBootVolumes) (*ICloudClient_listSourceBootVolumesResponse, error)

	ICloudClient_listSourceBootVolumesContext(ctx context.Context, request *ICloudClient_listSourceBootVolumes) (*ICloudClient_listSourceBootVolumesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_listVnicAttachments(request *ICloudClient_listVnicAttachments) (*ICloudClient_listVnicAttachmentsResponse, error)

	ICloudClient_listVnicAttachmentsContext(ctx context.Context, request *ICloudClient_listVnicAttachments) (*ICloudClient_listVnicAttachmentsResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_getInstanceInfo(request *ICloudClient_getInstanceInfo) (*ICloudClient_getInstanceInfoResponse, error)

	ICloudClient_getInstanceInfoContext(ctx context.Context, request *ICloudClient_getInstanceInfo) (*ICloudClient_getInstanceInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_startInstance(request *ICloudClient_startInstance) (*ICloudClient_startInstanceResponse, error)

	ICloudClient_startInstanceContext(ctx context.Context, request *ICloudClient_startInstance) (*ICloudClient_startInstanceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_pauseInstance(request *ICloudClient_pauseInstance) (*ICloudClient_pauseInstanceResponse, error)

	ICloudClient_pauseInstanceContext(ctx context.Context, request *ICloudClient_pauseInstance) (*ICloudClient_pauseInstanceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_terminateInstance(request *ICloudClient_terminateInstance) (*ICloudClient_terminateInstanceResponse, error)

	ICloudClient_terminateInstanceContext(ctx context.Context, request *ICloudClient_terminateInstance) (*ICloudClient_terminateInstanceResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_createImage(request *ICloudClient_createImage) (*ICloudClient_createImageResponse, error)

	ICloudClient_createImageContext(ctx context.Context, request *ICloudClient_createImage) (*ICloudClient_createImageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_exportImage(request *ICloudClient_exportImage) (*ICloudClient_exportImageResponse, error)

	ICloudClient_exportImageContext(ctx context.Context, request *ICloudClient_exportImage) (*ICloudClient_exportImageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_importImage(request *ICloudClient_importImage) (*ICloudClient_importImageResponse, error)

	ICloudClient_importImageContext(ctx context.Context, request *ICloudClient_importImage) (*ICloudClient_importImageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_deleteImage(request *ICloudClient_deleteImage) (*ICloudClient_deleteImageResponse, error)

	ICloudClient_deleteImageContext(ctx context.Context, request *ICloudClient_deleteImage) (*ICloudClient_deleteImageResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_getImageInfo(request *ICloudClient_getImageInfo) (*ICloudClient_getImageInfoResponse, error)

	ICloudClient_getImageInfoContext(ctx context.Context, request *ICloudClient_getImageInfo) (*ICloudClient_getImageInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_startCloudNetworkGateway(request *ICloudClient_startCloudNetworkGateway) (*ICloudClient_startCloudNetworkGatewayResponse, error)

	ICloudClient_startCloudNetworkGatewayContext(ctx context.Context, request *ICloudClient_startCloudNetworkGateway) (*ICloudClient_startCloudNetworkGatewayResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_setupCloudNetworkEnvironment(request *ICloudClient_setupCloudNetworkEnvironment) (*ICloudClient_setupCloudNetworkEnvironmentResponse, error)

	ICloudClient_setupCloudNetworkEnvironmentContext(ctx context.Context, request *ICloudClient_setupCloudNetworkEnvironment) (*ICloudClient_setupCloudNetworkEnvironmentResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_getVnicInfo(request *ICloudClient_getVnicInfo) (*ICloudClient_getVnicInfoResponse, error)

	ICloudClient_getVnicInfoContext(ctx context.Context, request *ICloudClient_getVnicInfo) (*ICloudClient_getVnicInfoResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudClient_getSubnetSelectionForm(request *ICloudClient_getSubnetSelectionForm) (*ICloudClient_getSubnetSelectionFormResponse, error)

	ICloudClient_getSubnetSelectionFormContext(ctx context.Context, request *ICloudClient_getSubnetSelectionForm) (*ICloudClient_getSubnetSelectionFormResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfile_getName(request *ICloudProfile_getName) (*ICloudProfile_getNameResponse, error)

	ICloudProfile_getNameContext(ctx context.Context, request *ICloudProfile_getName) (*ICloudProfile_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfile_setName(request *ICloudProfile_setName) (*ICloudProfile_setNameResponse, error)

	ICloudProfile_setNameContext(ctx context.Context, request *ICloudProfile_setName) (*ICloudProfile_setNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfile_getProviderId(request *ICloudProfile_getProviderId) (*ICloudProfile_getProviderIdResponse, error)

	ICloudProfile_getProviderIdContext(ctx context.Context, request *ICloudProfile_getProviderId) (*ICloudProfile_getProviderIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfile_getProperty(request *ICloudProfile_getProperty) (*ICloudProfile_getPropertyResponse, error)

	ICloudProfile_getPropertyContext(ctx context.Context, request *ICloudProfile_getProperty) (*ICloudProfile_getPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfile_setProperty(request *ICloudProfile_setProperty) (*ICloudProfile_setPropertyResponse, error)

	ICloudProfile_setPropertyContext(ctx context.Context, request *ICloudProfile_setProperty) (*ICloudProfile_setPropertyResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfile_getProperties(request *ICloudProfile_getProperties) (*ICloudProfile_getPropertiesResponse, error)

	ICloudProfile_getPropertiesContext(ctx context.Context, request *ICloudProfile_getProperties) (*ICloudProfile_getPropertiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfile_setProperties(request *ICloudProfile_setProperties) (*ICloudProfile_setPropertiesResponse, error)

	ICloudProfile_setPropertiesContext(ctx context.Context, request *ICloudProfile_setProperties) (*ICloudProfile_setPropertiesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfile_remove(request *ICloudProfile_remove) (*ICloudProfile_removeResponse, error)

	ICloudProfile_removeContext(ctx context.Context, request *ICloudProfile_remove) (*ICloudProfile_removeResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfile_createCloudClient(request *ICloudProfile_createCloudClient) (*ICloudProfile_createCloudClientResponse, error)

	ICloudProfile_createCloudClientContext(ctx context.Context, request *ICloudProfile_createCloudClient) (*ICloudProfile_createCloudClientResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_getName(request *ICloudProvider_getName) (*ICloudProvider_getNameResponse, error)

	ICloudProvider_getNameContext(ctx context.Context, request *ICloudProvider_getName) (*ICloudProvider_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_getShortName(request *ICloudProvider_getShortName) (*ICloudProvider_getShortNameResponse, error)

	ICloudProvider_getShortNameContext(ctx context.Context, request *ICloudProvider_getShortName) (*ICloudProvider_getShortNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_getId(request *ICloudProvider_getId) (*ICloudProvider_getIdResponse, error)

	ICloudProvider_getIdContext(ctx context.Context, request *ICloudProvider_getId) (*ICloudProvider_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_getProfiles(request *ICloudProvider_getProfiles) (*ICloudProvider_getProfilesResponse, error)

	ICloudProvider_getProfilesContext(ctx context.Context, request *ICloudProvider_getProfiles) (*ICloudProvider_getProfilesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_getProfileNames(request *ICloudProvider_getProfileNames) (*ICloudProvider_getProfileNamesResponse, error)

	ICloudProvider_getProfileNamesContext(ctx context.Context, request *ICloudProvider_getProfileNames) (*ICloudProvider_getProfileNamesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_getSupportedPropertyNames(request *ICloudProvider_getSupportedPropertyNames) (*ICloudProvider_getSupportedPropertyNamesResponse, error)

	ICloudProvider_getSupportedPropertyNamesContext(ctx context.Context, request *ICloudProvider_getSupportedPropertyNames) (*ICloudProvider_getSupportedPropertyNamesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_getPropertyDescription(request *ICloudProvider_getPropertyDescription) (*ICloudProvider_getPropertyDescriptionResponse, error)

	ICloudProvider_getPropertyDescriptionContext(ctx context.Context, request *ICloudProvider_getPropertyDescription) (*ICloudProvider_getPropertyDescriptionResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_createProfile(request *ICloudProvider_createProfile) (*ICloudProvider_createProfileResponse, error)

	ICloudProvider_createProfileContext(ctx context.Context, request *ICloudProvider_createProfile) (*ICloudProvider_createProfileResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_importProfiles(request *ICloudProvider_importProfiles) (*ICloudProvider_importProfilesResponse, error)

	ICloudProvider_importProfilesContext(ctx context.Context, request *ICloudProvider_importProfiles) (*ICloudProvider_importProfilesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_restoreProfiles(request *ICloudProvider_restoreProfiles) (*ICloudProvider_restoreProfilesResponse, error)

	ICloudProvider_restoreProfilesContext(ctx context.Context, request *ICloudProvider_restoreProfiles) (*ICloudProvider_restoreProfilesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_saveProfiles(request *ICloudProvider_saveProfiles) (*ICloudProvider_saveProfilesResponse, error)

	ICloudProvider_saveProfilesContext(ctx context.Context, request *ICloudProvider_saveProfiles) (*ICloudProvider_saveProfilesResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_getProfileByName(request *ICloudProvider_getProfileByName) (*ICloudProvider_getProfileByNameResponse, error)

	ICloudProvider_getProfileByNameContext(ctx context.Context, request *ICloudProvider_getProfileByName) (*ICloudProvider_getProfileByNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProvider_prepareUninstall(request *ICloudProvider_prepareUninstall) (*ICloudProvider_prepareUninstallResponse, error)

	ICloudProvider_prepareUninstallContext(ctx context.Context, request *ICloudProvider_prepareUninstall) (*ICloudProvider_prepareUninstallResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProviderManager_getProviders(request *ICloudProviderManager_getProviders) (*ICloudProviderManager_getProvidersResponse, error)

	ICloudProviderManager_getProvidersContext(ctx context.Context, request *ICloudProviderManager_getProviders) (*ICloudProviderManager_getProvidersResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProviderManager_getProviderById(request *ICloudProviderManager_getProviderById) (*ICloudProviderManager_getProviderByIdResponse, error)

	ICloudProviderManager_getProviderByIdContext(ctx context.Context, request *ICloudProviderManager_getProviderById) (*ICloudProviderManager_getProviderByIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProviderManager_getProviderByShortName(request *ICloudProviderManager_getProviderByShortName) (*ICloudProviderManager_getProviderByShortNameResponse, error)

	ICloudProviderManager_getProviderByShortNameContext(ctx context.Context, request *ICloudProviderManager_getProviderByShortName) (*ICloudProviderManager_getProviderByShortNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProviderManager_getProviderByName(request *ICloudProviderManager_getProviderByName) (*ICloudProviderManager_getProviderByNameResponse, error)

	ICloudProviderManager_getProviderByNameContext(ctx context.Context, request *ICloudProviderManager_getProviderByName) (*ICloudProviderManager_getProviderByNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProviderListChangedEvent_getRegistered(request *ICloudProviderListChangedEvent_getRegistered) (*ICloudProviderListChangedEvent_getRegisteredResponse, error)

	ICloudProviderListChangedEvent_getRegisteredContext(ctx context.Context, request *ICloudProviderListChangedEvent_getRegistered) (*ICloudProviderListChangedEvent_getRegisteredResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProviderRegisteredEvent_getId(request *ICloudProviderRegisteredEvent_getId) (*ICloudProviderRegisteredEvent_getIdResponse, error)

	ICloudProviderRegisteredEvent_getIdContext(ctx context.Context, request *ICloudProviderRegisteredEvent_getId) (*ICloudProviderRegisteredEvent_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProviderRegisteredEvent_getRegistered(request *ICloudProviderRegisteredEvent_getRegistered) (*ICloudProviderRegisteredEvent_getRegisteredResponse, error)

	ICloudProviderRegisteredEvent_getRegisteredContext(ctx context.Context, request *ICloudProviderRegisteredEvent_getRegistered) (*ICloudProviderRegisteredEvent_getRegisteredResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProviderUninstallEvent_getId(request *ICloudProviderUninstallEvent_getId) (*ICloudProviderUninstallEvent_getIdResponse, error)

	ICloudProviderUninstallEvent_getIdContext(ctx context.Context, request *ICloudProviderUninstallEvent_getId) (*ICloudProviderUninstallEvent_getIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfileRegisteredEvent_getProviderId(request *ICloudProfileRegisteredEvent_getProviderId) (*ICloudProfileRegisteredEvent_getProviderIdResponse, error)

	ICloudProfileRegisteredEvent_getProviderIdContext(ctx context.Context, request *ICloudProfileRegisteredEvent_getProviderId) (*ICloudProfileRegisteredEvent_getProviderIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfileRegisteredEvent_getName(request *ICloudProfileRegisteredEvent_getName) (*ICloudProfileRegisteredEvent_getNameResponse, error)

	ICloudProfileRegisteredEvent_getNameContext(ctx context.Context, request *ICloudProfileRegisteredEvent_getName) (*ICloudProfileRegisteredEvent_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfileRegisteredEvent_getRegistered(request *ICloudProfileRegisteredEvent_getRegistered) (*ICloudProfileRegisteredEvent_getRegisteredResponse, error)

	ICloudProfileRegisteredEvent_getRegisteredContext(ctx context.Context, request *ICloudProfileRegisteredEvent_getRegistered) (*ICloudProfileRegisteredEvent_getRegisteredResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfileChangedEvent_getProviderId(request *ICloudProfileChangedEvent_getProviderId) (*ICloudProfileChangedEvent_getProviderIdResponse, error)

	ICloudProfileChangedEvent_getProviderIdContext(ctx context.Context, request *ICloudProfileChangedEvent_getProviderId) (*ICloudProfileChangedEvent_getProviderIdResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ICloudProfileChangedEvent_getName(request *ICloudProfileChangedEvent_getName) (*ICloudProfileChangedEvent_getNameResponse, error)

	ICloudProfileChangedEvent_getNameContext(ctx context.Context, request *ICloudProfileChangedEvent_getName) (*ICloudProfileChangedEvent_getNameResponse, error)

	// Error can be either of the following types:
	//
	//   - InvalidObjectFault
	//   - RuntimeFault
	ILanguageChangedEvent_getLanguageId(request *ILanguageChangedEvent_getLanguageId) (*ILanguageChangedEvent_getLanguageIdResponse, error)

	ILanguageChangedEvent_getLanguageIdContext(ctx context.Context, request *ILanguageChangedEvent_getLanguageId) (*ILanguageChangedEvent_getLanguageIdResponse, error)
}

type vboxPortType struct {
	client *soap.Client
}

func NewVboxPortType(client *soap.Client) VboxPortType {
	return &vboxPortType{
		client: client,
	}
}

func (service *vboxPortType) IVirtualBoxErrorInfo_getResultCodeContext(ctx context.Context, request *IVirtualBoxErrorInfo_getResultCode) (*IVirtualBoxErrorInfo_getResultCodeResponse, error) {
	response := new(IVirtualBoxErrorInfo_getResultCodeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBoxErrorInfo_getResultCode(request *IVirtualBoxErrorInfo_getResultCode) (*IVirtualBoxErrorInfo_getResultCodeResponse, error) {
	return service.IVirtualBoxErrorInfo_getResultCodeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBoxErrorInfo_getResultDetailContext(ctx context.Context, request *IVirtualBoxErrorInfo_getResultDetail) (*IVirtualBoxErrorInfo_getResultDetailResponse, error) {
	response := new(IVirtualBoxErrorInfo_getResultDetailResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBoxErrorInfo_getResultDetail(request *IVirtualBoxErrorInfo_getResultDetail) (*IVirtualBoxErrorInfo_getResultDetailResponse, error) {
	return service.IVirtualBoxErrorInfo_getResultDetailContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBoxErrorInfo_getInterfaceIDContext(ctx context.Context, request *IVirtualBoxErrorInfo_getInterfaceID) (*IVirtualBoxErrorInfo_getInterfaceIDResponse, error) {
	response := new(IVirtualBoxErrorInfo_getInterfaceIDResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBoxErrorInfo_getInterfaceID(request *IVirtualBoxErrorInfo_getInterfaceID) (*IVirtualBoxErrorInfo_getInterfaceIDResponse, error) {
	return service.IVirtualBoxErrorInfo_getInterfaceIDContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBoxErrorInfo_getComponentContext(ctx context.Context, request *IVirtualBoxErrorInfo_getComponent) (*IVirtualBoxErrorInfo_getComponentResponse, error) {
	response := new(IVirtualBoxErrorInfo_getComponentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBoxErrorInfo_getComponent(request *IVirtualBoxErrorInfo_getComponent) (*IVirtualBoxErrorInfo_getComponentResponse, error) {
	return service.IVirtualBoxErrorInfo_getComponentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBoxErrorInfo_getTextContext(ctx context.Context, request *IVirtualBoxErrorInfo_getText) (*IVirtualBoxErrorInfo_getTextResponse, error) {
	response := new(IVirtualBoxErrorInfo_getTextResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBoxErrorInfo_getText(request *IVirtualBoxErrorInfo_getText) (*IVirtualBoxErrorInfo_getTextResponse, error) {
	return service.IVirtualBoxErrorInfo_getTextContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBoxErrorInfo_getNextContext(ctx context.Context, request *IVirtualBoxErrorInfo_getNext) (*IVirtualBoxErrorInfo_getNextResponse, error) {
	response := new(IVirtualBoxErrorInfo_getNextResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBoxErrorInfo_getNext(request *IVirtualBoxErrorInfo_getNext) (*IVirtualBoxErrorInfo_getNextResponse, error) {
	return service.IVirtualBoxErrorInfo_getNextContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getNetworkNameContext(ctx context.Context, request *INATNetwork_getNetworkName) (*INATNetwork_getNetworkNameResponse, error) {
	response := new(INATNetwork_getNetworkNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getNetworkName(request *INATNetwork_getNetworkName) (*INATNetwork_getNetworkNameResponse, error) {
	return service.INATNetwork_getNetworkNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_setNetworkNameContext(ctx context.Context, request *INATNetwork_setNetworkName) (*INATNetwork_setNetworkNameResponse, error) {
	response := new(INATNetwork_setNetworkNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_setNetworkName(request *INATNetwork_setNetworkName) (*INATNetwork_setNetworkNameResponse, error) {
	return service.INATNetwork_setNetworkNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getEnabledContext(ctx context.Context, request *INATNetwork_getEnabled) (*INATNetwork_getEnabledResponse, error) {
	response := new(INATNetwork_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getEnabled(request *INATNetwork_getEnabled) (*INATNetwork_getEnabledResponse, error) {
	return service.INATNetwork_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_setEnabledContext(ctx context.Context, request *INATNetwork_setEnabled) (*INATNetwork_setEnabledResponse, error) {
	response := new(INATNetwork_setEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_setEnabled(request *INATNetwork_setEnabled) (*INATNetwork_setEnabledResponse, error) {
	return service.INATNetwork_setEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getNetworkContext(ctx context.Context, request *INATNetwork_getNetwork) (*INATNetwork_getNetworkResponse, error) {
	response := new(INATNetwork_getNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getNetwork(request *INATNetwork_getNetwork) (*INATNetwork_getNetworkResponse, error) {
	return service.INATNetwork_getNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_setNetworkContext(ctx context.Context, request *INATNetwork_setNetwork) (*INATNetwork_setNetworkResponse, error) {
	response := new(INATNetwork_setNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_setNetwork(request *INATNetwork_setNetwork) (*INATNetwork_setNetworkResponse, error) {
	return service.INATNetwork_setNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getGatewayContext(ctx context.Context, request *INATNetwork_getGateway) (*INATNetwork_getGatewayResponse, error) {
	response := new(INATNetwork_getGatewayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getGateway(request *INATNetwork_getGateway) (*INATNetwork_getGatewayResponse, error) {
	return service.INATNetwork_getGatewayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getIPv6EnabledContext(ctx context.Context, request *INATNetwork_getIPv6Enabled) (*INATNetwork_getIPv6EnabledResponse, error) {
	response := new(INATNetwork_getIPv6EnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getIPv6Enabled(request *INATNetwork_getIPv6Enabled) (*INATNetwork_getIPv6EnabledResponse, error) {
	return service.INATNetwork_getIPv6EnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_setIPv6EnabledContext(ctx context.Context, request *INATNetwork_setIPv6Enabled) (*INATNetwork_setIPv6EnabledResponse, error) {
	response := new(INATNetwork_setIPv6EnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_setIPv6Enabled(request *INATNetwork_setIPv6Enabled) (*INATNetwork_setIPv6EnabledResponse, error) {
	return service.INATNetwork_setIPv6EnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getIPv6PrefixContext(ctx context.Context, request *INATNetwork_getIPv6Prefix) (*INATNetwork_getIPv6PrefixResponse, error) {
	response := new(INATNetwork_getIPv6PrefixResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getIPv6Prefix(request *INATNetwork_getIPv6Prefix) (*INATNetwork_getIPv6PrefixResponse, error) {
	return service.INATNetwork_getIPv6PrefixContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_setIPv6PrefixContext(ctx context.Context, request *INATNetwork_setIPv6Prefix) (*INATNetwork_setIPv6PrefixResponse, error) {
	response := new(INATNetwork_setIPv6PrefixResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_setIPv6Prefix(request *INATNetwork_setIPv6Prefix) (*INATNetwork_setIPv6PrefixResponse, error) {
	return service.INATNetwork_setIPv6PrefixContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getAdvertiseDefaultIPv6RouteEnabledContext(ctx context.Context, request *INATNetwork_getAdvertiseDefaultIPv6RouteEnabled) (*INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse, error) {
	response := new(INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getAdvertiseDefaultIPv6RouteEnabled(request *INATNetwork_getAdvertiseDefaultIPv6RouteEnabled) (*INATNetwork_getAdvertiseDefaultIPv6RouteEnabledResponse, error) {
	return service.INATNetwork_getAdvertiseDefaultIPv6RouteEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_setAdvertiseDefaultIPv6RouteEnabledContext(ctx context.Context, request *INATNetwork_setAdvertiseDefaultIPv6RouteEnabled) (*INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse, error) {
	response := new(INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_setAdvertiseDefaultIPv6RouteEnabled(request *INATNetwork_setAdvertiseDefaultIPv6RouteEnabled) (*INATNetwork_setAdvertiseDefaultIPv6RouteEnabledResponse, error) {
	return service.INATNetwork_setAdvertiseDefaultIPv6RouteEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getNeedDhcpServerContext(ctx context.Context, request *INATNetwork_getNeedDhcpServer) (*INATNetwork_getNeedDhcpServerResponse, error) {
	response := new(INATNetwork_getNeedDhcpServerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getNeedDhcpServer(request *INATNetwork_getNeedDhcpServer) (*INATNetwork_getNeedDhcpServerResponse, error) {
	return service.INATNetwork_getNeedDhcpServerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_setNeedDhcpServerContext(ctx context.Context, request *INATNetwork_setNeedDhcpServer) (*INATNetwork_setNeedDhcpServerResponse, error) {
	response := new(INATNetwork_setNeedDhcpServerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_setNeedDhcpServer(request *INATNetwork_setNeedDhcpServer) (*INATNetwork_setNeedDhcpServerResponse, error) {
	return service.INATNetwork_setNeedDhcpServerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getEventSourceContext(ctx context.Context, request *INATNetwork_getEventSource) (*INATNetwork_getEventSourceResponse, error) {
	response := new(INATNetwork_getEventSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getEventSource(request *INATNetwork_getEventSource) (*INATNetwork_getEventSourceResponse, error) {
	return service.INATNetwork_getEventSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getPortForwardRules4Context(ctx context.Context, request *INATNetwork_getPortForwardRules4) (*INATNetwork_getPortForwardRules4Response, error) {
	response := new(INATNetwork_getPortForwardRules4Response)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getPortForwardRules4(request *INATNetwork_getPortForwardRules4) (*INATNetwork_getPortForwardRules4Response, error) {
	return service.INATNetwork_getPortForwardRules4Context(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getLocalMappingsContext(ctx context.Context, request *INATNetwork_getLocalMappings) (*INATNetwork_getLocalMappingsResponse, error) {
	response := new(INATNetwork_getLocalMappingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getLocalMappings(request *INATNetwork_getLocalMappings) (*INATNetwork_getLocalMappingsResponse, error) {
	return service.INATNetwork_getLocalMappingsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getLoopbackIp6Context(ctx context.Context, request *INATNetwork_getLoopbackIp6) (*INATNetwork_getLoopbackIp6Response, error) {
	response := new(INATNetwork_getLoopbackIp6Response)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getLoopbackIp6(request *INATNetwork_getLoopbackIp6) (*INATNetwork_getLoopbackIp6Response, error) {
	return service.INATNetwork_getLoopbackIp6Context(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_setLoopbackIp6Context(ctx context.Context, request *INATNetwork_setLoopbackIp6) (*INATNetwork_setLoopbackIp6Response, error) {
	response := new(INATNetwork_setLoopbackIp6Response)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_setLoopbackIp6(request *INATNetwork_setLoopbackIp6) (*INATNetwork_setLoopbackIp6Response, error) {
	return service.INATNetwork_setLoopbackIp6Context(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_getPortForwardRules6Context(ctx context.Context, request *INATNetwork_getPortForwardRules6) (*INATNetwork_getPortForwardRules6Response, error) {
	response := new(INATNetwork_getPortForwardRules6Response)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_getPortForwardRules6(request *INATNetwork_getPortForwardRules6) (*INATNetwork_getPortForwardRules6Response, error) {
	return service.INATNetwork_getPortForwardRules6Context(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_addLocalMappingContext(ctx context.Context, request *INATNetwork_addLocalMapping) (*INATNetwork_addLocalMappingResponse, error) {
	response := new(INATNetwork_addLocalMappingResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_addLocalMapping(request *INATNetwork_addLocalMapping) (*INATNetwork_addLocalMappingResponse, error) {
	return service.INATNetwork_addLocalMappingContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_addPortForwardRuleContext(ctx context.Context, request *INATNetwork_addPortForwardRule) (*INATNetwork_addPortForwardRuleResponse, error) {
	response := new(INATNetwork_addPortForwardRuleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_addPortForwardRule(request *INATNetwork_addPortForwardRule) (*INATNetwork_addPortForwardRuleResponse, error) {
	return service.INATNetwork_addPortForwardRuleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_removePortForwardRuleContext(ctx context.Context, request *INATNetwork_removePortForwardRule) (*INATNetwork_removePortForwardRuleResponse, error) {
	response := new(INATNetwork_removePortForwardRuleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_removePortForwardRule(request *INATNetwork_removePortForwardRule) (*INATNetwork_removePortForwardRuleResponse, error) {
	return service.INATNetwork_removePortForwardRuleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_startContext(ctx context.Context, request *INATNetwork_start) (*INATNetwork_startResponse, error) {
	response := new(INATNetwork_startResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_start(request *INATNetwork_start) (*INATNetwork_startResponse, error) {
	return service.INATNetwork_startContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetwork_stopContext(ctx context.Context, request *INATNetwork_stop) (*INATNetwork_stopResponse, error) {
	response := new(INATNetwork_stopResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetwork_stop(request *INATNetwork_stop) (*INATNetwork_stopResponse, error) {
	return service.INATNetwork_stopContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetwork_getNetworkNameContext(ctx context.Context, request *ICloudNetwork_getNetworkName) (*ICloudNetwork_getNetworkNameResponse, error) {
	response := new(ICloudNetwork_getNetworkNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetwork_getNetworkName(request *ICloudNetwork_getNetworkName) (*ICloudNetwork_getNetworkNameResponse, error) {
	return service.ICloudNetwork_getNetworkNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetwork_setNetworkNameContext(ctx context.Context, request *ICloudNetwork_setNetworkName) (*ICloudNetwork_setNetworkNameResponse, error) {
	response := new(ICloudNetwork_setNetworkNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetwork_setNetworkName(request *ICloudNetwork_setNetworkName) (*ICloudNetwork_setNetworkNameResponse, error) {
	return service.ICloudNetwork_setNetworkNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetwork_getEnabledContext(ctx context.Context, request *ICloudNetwork_getEnabled) (*ICloudNetwork_getEnabledResponse, error) {
	response := new(ICloudNetwork_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetwork_getEnabled(request *ICloudNetwork_getEnabled) (*ICloudNetwork_getEnabledResponse, error) {
	return service.ICloudNetwork_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetwork_setEnabledContext(ctx context.Context, request *ICloudNetwork_setEnabled) (*ICloudNetwork_setEnabledResponse, error) {
	response := new(ICloudNetwork_setEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetwork_setEnabled(request *ICloudNetwork_setEnabled) (*ICloudNetwork_setEnabledResponse, error) {
	return service.ICloudNetwork_setEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetwork_getProviderContext(ctx context.Context, request *ICloudNetwork_getProvider) (*ICloudNetwork_getProviderResponse, error) {
	response := new(ICloudNetwork_getProviderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetwork_getProvider(request *ICloudNetwork_getProvider) (*ICloudNetwork_getProviderResponse, error) {
	return service.ICloudNetwork_getProviderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetwork_setProviderContext(ctx context.Context, request *ICloudNetwork_setProvider) (*ICloudNetwork_setProviderResponse, error) {
	response := new(ICloudNetwork_setProviderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetwork_setProvider(request *ICloudNetwork_setProvider) (*ICloudNetwork_setProviderResponse, error) {
	return service.ICloudNetwork_setProviderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetwork_getProfileContext(ctx context.Context, request *ICloudNetwork_getProfile) (*ICloudNetwork_getProfileResponse, error) {
	response := new(ICloudNetwork_getProfileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetwork_getProfile(request *ICloudNetwork_getProfile) (*ICloudNetwork_getProfileResponse, error) {
	return service.ICloudNetwork_getProfileContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetwork_setProfileContext(ctx context.Context, request *ICloudNetwork_setProfile) (*ICloudNetwork_setProfileResponse, error) {
	response := new(ICloudNetwork_setProfileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetwork_setProfile(request *ICloudNetwork_setProfile) (*ICloudNetwork_setProfileResponse, error) {
	return service.ICloudNetwork_setProfileContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetwork_getNetworkIdContext(ctx context.Context, request *ICloudNetwork_getNetworkId) (*ICloudNetwork_getNetworkIdResponse, error) {
	response := new(ICloudNetwork_getNetworkIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetwork_getNetworkId(request *ICloudNetwork_getNetworkId) (*ICloudNetwork_getNetworkIdResponse, error) {
	return service.ICloudNetwork_getNetworkIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetwork_setNetworkIdContext(ctx context.Context, request *ICloudNetwork_setNetworkId) (*ICloudNetwork_setNetworkIdResponse, error) {
	response := new(ICloudNetwork_setNetworkIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetwork_setNetworkId(request *ICloudNetwork_setNetworkId) (*ICloudNetwork_setNetworkIdResponse, error) {
	return service.ICloudNetwork_setNetworkIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_getNetworkNameContext(ctx context.Context, request *IHostOnlyNetwork_getNetworkName) (*IHostOnlyNetwork_getNetworkNameResponse, error) {
	response := new(IHostOnlyNetwork_getNetworkNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_getNetworkName(request *IHostOnlyNetwork_getNetworkName) (*IHostOnlyNetwork_getNetworkNameResponse, error) {
	return service.IHostOnlyNetwork_getNetworkNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_setNetworkNameContext(ctx context.Context, request *IHostOnlyNetwork_setNetworkName) (*IHostOnlyNetwork_setNetworkNameResponse, error) {
	response := new(IHostOnlyNetwork_setNetworkNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_setNetworkName(request *IHostOnlyNetwork_setNetworkName) (*IHostOnlyNetwork_setNetworkNameResponse, error) {
	return service.IHostOnlyNetwork_setNetworkNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_getEnabledContext(ctx context.Context, request *IHostOnlyNetwork_getEnabled) (*IHostOnlyNetwork_getEnabledResponse, error) {
	response := new(IHostOnlyNetwork_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_getEnabled(request *IHostOnlyNetwork_getEnabled) (*IHostOnlyNetwork_getEnabledResponse, error) {
	return service.IHostOnlyNetwork_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_setEnabledContext(ctx context.Context, request *IHostOnlyNetwork_setEnabled) (*IHostOnlyNetwork_setEnabledResponse, error) {
	response := new(IHostOnlyNetwork_setEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_setEnabled(request *IHostOnlyNetwork_setEnabled) (*IHostOnlyNetwork_setEnabledResponse, error) {
	return service.IHostOnlyNetwork_setEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_getNetworkMaskContext(ctx context.Context, request *IHostOnlyNetwork_getNetworkMask) (*IHostOnlyNetwork_getNetworkMaskResponse, error) {
	response := new(IHostOnlyNetwork_getNetworkMaskResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_getNetworkMask(request *IHostOnlyNetwork_getNetworkMask) (*IHostOnlyNetwork_getNetworkMaskResponse, error) {
	return service.IHostOnlyNetwork_getNetworkMaskContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_setNetworkMaskContext(ctx context.Context, request *IHostOnlyNetwork_setNetworkMask) (*IHostOnlyNetwork_setNetworkMaskResponse, error) {
	response := new(IHostOnlyNetwork_setNetworkMaskResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_setNetworkMask(request *IHostOnlyNetwork_setNetworkMask) (*IHostOnlyNetwork_setNetworkMaskResponse, error) {
	return service.IHostOnlyNetwork_setNetworkMaskContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_getHostIPContext(ctx context.Context, request *IHostOnlyNetwork_getHostIP) (*IHostOnlyNetwork_getHostIPResponse, error) {
	response := new(IHostOnlyNetwork_getHostIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_getHostIP(request *IHostOnlyNetwork_getHostIP) (*IHostOnlyNetwork_getHostIPResponse, error) {
	return service.IHostOnlyNetwork_getHostIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_getLowerIPContext(ctx context.Context, request *IHostOnlyNetwork_getLowerIP) (*IHostOnlyNetwork_getLowerIPResponse, error) {
	response := new(IHostOnlyNetwork_getLowerIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_getLowerIP(request *IHostOnlyNetwork_getLowerIP) (*IHostOnlyNetwork_getLowerIPResponse, error) {
	return service.IHostOnlyNetwork_getLowerIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_setLowerIPContext(ctx context.Context, request *IHostOnlyNetwork_setLowerIP) (*IHostOnlyNetwork_setLowerIPResponse, error) {
	response := new(IHostOnlyNetwork_setLowerIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_setLowerIP(request *IHostOnlyNetwork_setLowerIP) (*IHostOnlyNetwork_setLowerIPResponse, error) {
	return service.IHostOnlyNetwork_setLowerIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_getUpperIPContext(ctx context.Context, request *IHostOnlyNetwork_getUpperIP) (*IHostOnlyNetwork_getUpperIPResponse, error) {
	response := new(IHostOnlyNetwork_getUpperIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_getUpperIP(request *IHostOnlyNetwork_getUpperIP) (*IHostOnlyNetwork_getUpperIPResponse, error) {
	return service.IHostOnlyNetwork_getUpperIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_setUpperIPContext(ctx context.Context, request *IHostOnlyNetwork_setUpperIP) (*IHostOnlyNetwork_setUpperIPResponse, error) {
	response := new(IHostOnlyNetwork_setUpperIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_setUpperIP(request *IHostOnlyNetwork_setUpperIP) (*IHostOnlyNetwork_setUpperIPResponse, error) {
	return service.IHostOnlyNetwork_setUpperIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_getIdContext(ctx context.Context, request *IHostOnlyNetwork_getId) (*IHostOnlyNetwork_getIdResponse, error) {
	response := new(IHostOnlyNetwork_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_getId(request *IHostOnlyNetwork_getId) (*IHostOnlyNetwork_getIdResponse, error) {
	return service.IHostOnlyNetwork_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostOnlyNetwork_setIdContext(ctx context.Context, request *IHostOnlyNetwork_setId) (*IHostOnlyNetwork_setIdResponse, error) {
	response := new(IHostOnlyNetwork_setIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostOnlyNetwork_setId(request *IHostOnlyNetwork_setId) (*IHostOnlyNetwork_setIdResponse, error) {
	return service.IHostOnlyNetwork_setIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_getEventSourceContext(ctx context.Context, request *IDHCPServer_getEventSource) (*IDHCPServer_getEventSourceResponse, error) {
	response := new(IDHCPServer_getEventSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_getEventSource(request *IDHCPServer_getEventSource) (*IDHCPServer_getEventSourceResponse, error) {
	return service.IDHCPServer_getEventSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_getEnabledContext(ctx context.Context, request *IDHCPServer_getEnabled) (*IDHCPServer_getEnabledResponse, error) {
	response := new(IDHCPServer_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_getEnabled(request *IDHCPServer_getEnabled) (*IDHCPServer_getEnabledResponse, error) {
	return service.IDHCPServer_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_setEnabledContext(ctx context.Context, request *IDHCPServer_setEnabled) (*IDHCPServer_setEnabledResponse, error) {
	response := new(IDHCPServer_setEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_setEnabled(request *IDHCPServer_setEnabled) (*IDHCPServer_setEnabledResponse, error) {
	return service.IDHCPServer_setEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_getIPAddressContext(ctx context.Context, request *IDHCPServer_getIPAddress) (*IDHCPServer_getIPAddressResponse, error) {
	response := new(IDHCPServer_getIPAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_getIPAddress(request *IDHCPServer_getIPAddress) (*IDHCPServer_getIPAddressResponse, error) {
	return service.IDHCPServer_getIPAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_getNetworkMaskContext(ctx context.Context, request *IDHCPServer_getNetworkMask) (*IDHCPServer_getNetworkMaskResponse, error) {
	response := new(IDHCPServer_getNetworkMaskResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_getNetworkMask(request *IDHCPServer_getNetworkMask) (*IDHCPServer_getNetworkMaskResponse, error) {
	return service.IDHCPServer_getNetworkMaskContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_getNetworkNameContext(ctx context.Context, request *IDHCPServer_getNetworkName) (*IDHCPServer_getNetworkNameResponse, error) {
	response := new(IDHCPServer_getNetworkNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_getNetworkName(request *IDHCPServer_getNetworkName) (*IDHCPServer_getNetworkNameResponse, error) {
	return service.IDHCPServer_getNetworkNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_getLowerIPContext(ctx context.Context, request *IDHCPServer_getLowerIP) (*IDHCPServer_getLowerIPResponse, error) {
	response := new(IDHCPServer_getLowerIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_getLowerIP(request *IDHCPServer_getLowerIP) (*IDHCPServer_getLowerIPResponse, error) {
	return service.IDHCPServer_getLowerIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_getUpperIPContext(ctx context.Context, request *IDHCPServer_getUpperIP) (*IDHCPServer_getUpperIPResponse, error) {
	response := new(IDHCPServer_getUpperIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_getUpperIP(request *IDHCPServer_getUpperIP) (*IDHCPServer_getUpperIPResponse, error) {
	return service.IDHCPServer_getUpperIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_getGlobalConfigContext(ctx context.Context, request *IDHCPServer_getGlobalConfig) (*IDHCPServer_getGlobalConfigResponse, error) {
	response := new(IDHCPServer_getGlobalConfigResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_getGlobalConfig(request *IDHCPServer_getGlobalConfig) (*IDHCPServer_getGlobalConfigResponse, error) {
	return service.IDHCPServer_getGlobalConfigContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_getGroupConfigsContext(ctx context.Context, request *IDHCPServer_getGroupConfigs) (*IDHCPServer_getGroupConfigsResponse, error) {
	response := new(IDHCPServer_getGroupConfigsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_getGroupConfigs(request *IDHCPServer_getGroupConfigs) (*IDHCPServer_getGroupConfigsResponse, error) {
	return service.IDHCPServer_getGroupConfigsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_getIndividualConfigsContext(ctx context.Context, request *IDHCPServer_getIndividualConfigs) (*IDHCPServer_getIndividualConfigsResponse, error) {
	response := new(IDHCPServer_getIndividualConfigsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_getIndividualConfigs(request *IDHCPServer_getIndividualConfigs) (*IDHCPServer_getIndividualConfigsResponse, error) {
	return service.IDHCPServer_getIndividualConfigsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_setConfigurationContext(ctx context.Context, request *IDHCPServer_setConfiguration) (*IDHCPServer_setConfigurationResponse, error) {
	response := new(IDHCPServer_setConfigurationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_setConfiguration(request *IDHCPServer_setConfiguration) (*IDHCPServer_setConfigurationResponse, error) {
	return service.IDHCPServer_setConfigurationContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_startContext(ctx context.Context, request *IDHCPServer_start) (*IDHCPServer_startResponse, error) {
	response := new(IDHCPServer_startResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_start(request *IDHCPServer_start) (*IDHCPServer_startResponse, error) {
	return service.IDHCPServer_startContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_stopContext(ctx context.Context, request *IDHCPServer_stop) (*IDHCPServer_stopResponse, error) {
	response := new(IDHCPServer_stopResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_stop(request *IDHCPServer_stop) (*IDHCPServer_stopResponse, error) {
	return service.IDHCPServer_stopContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_restartContext(ctx context.Context, request *IDHCPServer_restart) (*IDHCPServer_restartResponse, error) {
	response := new(IDHCPServer_restartResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_restart(request *IDHCPServer_restart) (*IDHCPServer_restartResponse, error) {
	return service.IDHCPServer_restartContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_findLeaseByMACContext(ctx context.Context, request *IDHCPServer_findLeaseByMAC) (*IDHCPServer_findLeaseByMACResponse, error) {
	response := new(IDHCPServer_findLeaseByMACResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_findLeaseByMAC(request *IDHCPServer_findLeaseByMAC) (*IDHCPServer_findLeaseByMACResponse, error) {
	return service.IDHCPServer_findLeaseByMACContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPServer_getConfigContext(ctx context.Context, request *IDHCPServer_getConfig) (*IDHCPServer_getConfigResponse, error) {
	response := new(IDHCPServer_getConfigResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPServer_getConfig(request *IDHCPServer_getConfig) (*IDHCPServer_getConfigResponse, error) {
	return service.IDHCPServer_getConfigContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_getScopeContext(ctx context.Context, request *IDHCPConfig_getScope) (*IDHCPConfig_getScopeResponse, error) {
	response := new(IDHCPConfig_getScopeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_getScope(request *IDHCPConfig_getScope) (*IDHCPConfig_getScopeResponse, error) {
	return service.IDHCPConfig_getScopeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_getMinLeaseTimeContext(ctx context.Context, request *IDHCPConfig_getMinLeaseTime) (*IDHCPConfig_getMinLeaseTimeResponse, error) {
	response := new(IDHCPConfig_getMinLeaseTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_getMinLeaseTime(request *IDHCPConfig_getMinLeaseTime) (*IDHCPConfig_getMinLeaseTimeResponse, error) {
	return service.IDHCPConfig_getMinLeaseTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_setMinLeaseTimeContext(ctx context.Context, request *IDHCPConfig_setMinLeaseTime) (*IDHCPConfig_setMinLeaseTimeResponse, error) {
	response := new(IDHCPConfig_setMinLeaseTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_setMinLeaseTime(request *IDHCPConfig_setMinLeaseTime) (*IDHCPConfig_setMinLeaseTimeResponse, error) {
	return service.IDHCPConfig_setMinLeaseTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_getDefaultLeaseTimeContext(ctx context.Context, request *IDHCPConfig_getDefaultLeaseTime) (*IDHCPConfig_getDefaultLeaseTimeResponse, error) {
	response := new(IDHCPConfig_getDefaultLeaseTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_getDefaultLeaseTime(request *IDHCPConfig_getDefaultLeaseTime) (*IDHCPConfig_getDefaultLeaseTimeResponse, error) {
	return service.IDHCPConfig_getDefaultLeaseTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_setDefaultLeaseTimeContext(ctx context.Context, request *IDHCPConfig_setDefaultLeaseTime) (*IDHCPConfig_setDefaultLeaseTimeResponse, error) {
	response := new(IDHCPConfig_setDefaultLeaseTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_setDefaultLeaseTime(request *IDHCPConfig_setDefaultLeaseTime) (*IDHCPConfig_setDefaultLeaseTimeResponse, error) {
	return service.IDHCPConfig_setDefaultLeaseTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_getMaxLeaseTimeContext(ctx context.Context, request *IDHCPConfig_getMaxLeaseTime) (*IDHCPConfig_getMaxLeaseTimeResponse, error) {
	response := new(IDHCPConfig_getMaxLeaseTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_getMaxLeaseTime(request *IDHCPConfig_getMaxLeaseTime) (*IDHCPConfig_getMaxLeaseTimeResponse, error) {
	return service.IDHCPConfig_getMaxLeaseTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_setMaxLeaseTimeContext(ctx context.Context, request *IDHCPConfig_setMaxLeaseTime) (*IDHCPConfig_setMaxLeaseTimeResponse, error) {
	response := new(IDHCPConfig_setMaxLeaseTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_setMaxLeaseTime(request *IDHCPConfig_setMaxLeaseTime) (*IDHCPConfig_setMaxLeaseTimeResponse, error) {
	return service.IDHCPConfig_setMaxLeaseTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_getForcedOptionsContext(ctx context.Context, request *IDHCPConfig_getForcedOptions) (*IDHCPConfig_getForcedOptionsResponse, error) {
	response := new(IDHCPConfig_getForcedOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_getForcedOptions(request *IDHCPConfig_getForcedOptions) (*IDHCPConfig_getForcedOptionsResponse, error) {
	return service.IDHCPConfig_getForcedOptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_setForcedOptionsContext(ctx context.Context, request *IDHCPConfig_setForcedOptions) (*IDHCPConfig_setForcedOptionsResponse, error) {
	response := new(IDHCPConfig_setForcedOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_setForcedOptions(request *IDHCPConfig_setForcedOptions) (*IDHCPConfig_setForcedOptionsResponse, error) {
	return service.IDHCPConfig_setForcedOptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_getSuppressedOptionsContext(ctx context.Context, request *IDHCPConfig_getSuppressedOptions) (*IDHCPConfig_getSuppressedOptionsResponse, error) {
	response := new(IDHCPConfig_getSuppressedOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_getSuppressedOptions(request *IDHCPConfig_getSuppressedOptions) (*IDHCPConfig_getSuppressedOptionsResponse, error) {
	return service.IDHCPConfig_getSuppressedOptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_setSuppressedOptionsContext(ctx context.Context, request *IDHCPConfig_setSuppressedOptions) (*IDHCPConfig_setSuppressedOptionsResponse, error) {
	response := new(IDHCPConfig_setSuppressedOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_setSuppressedOptions(request *IDHCPConfig_setSuppressedOptions) (*IDHCPConfig_setSuppressedOptionsResponse, error) {
	return service.IDHCPConfig_setSuppressedOptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_setOptionContext(ctx context.Context, request *IDHCPConfig_setOption) (*IDHCPConfig_setOptionResponse, error) {
	response := new(IDHCPConfig_setOptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_setOption(request *IDHCPConfig_setOption) (*IDHCPConfig_setOptionResponse, error) {
	return service.IDHCPConfig_setOptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_removeOptionContext(ctx context.Context, request *IDHCPConfig_removeOption) (*IDHCPConfig_removeOptionResponse, error) {
	response := new(IDHCPConfig_removeOptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_removeOption(request *IDHCPConfig_removeOption) (*IDHCPConfig_removeOptionResponse, error) {
	return service.IDHCPConfig_removeOptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_removeAllOptionsContext(ctx context.Context, request *IDHCPConfig_removeAllOptions) (*IDHCPConfig_removeAllOptionsResponse, error) {
	response := new(IDHCPConfig_removeAllOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_removeAllOptions(request *IDHCPConfig_removeAllOptions) (*IDHCPConfig_removeAllOptionsResponse, error) {
	return service.IDHCPConfig_removeAllOptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_getOptionContext(ctx context.Context, request *IDHCPConfig_getOption) (*IDHCPConfig_getOptionResponse, error) {
	response := new(IDHCPConfig_getOptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_getOption(request *IDHCPConfig_getOption) (*IDHCPConfig_getOptionResponse, error) {
	return service.IDHCPConfig_getOptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_getAllOptionsContext(ctx context.Context, request *IDHCPConfig_getAllOptions) (*IDHCPConfig_getAllOptionsResponse, error) {
	response := new(IDHCPConfig_getAllOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_getAllOptions(request *IDHCPConfig_getAllOptions) (*IDHCPConfig_getAllOptionsResponse, error) {
	return service.IDHCPConfig_getAllOptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPConfig_removeContext(ctx context.Context, request *IDHCPConfig_remove) (*IDHCPConfig_removeResponse, error) {
	response := new(IDHCPConfig_removeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPConfig_remove(request *IDHCPConfig_remove) (*IDHCPConfig_removeResponse, error) {
	return service.IDHCPConfig_removeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPGroupCondition_getInclusiveContext(ctx context.Context, request *IDHCPGroupCondition_getInclusive) (*IDHCPGroupCondition_getInclusiveResponse, error) {
	response := new(IDHCPGroupCondition_getInclusiveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPGroupCondition_getInclusive(request *IDHCPGroupCondition_getInclusive) (*IDHCPGroupCondition_getInclusiveResponse, error) {
	return service.IDHCPGroupCondition_getInclusiveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPGroupCondition_setInclusiveContext(ctx context.Context, request *IDHCPGroupCondition_setInclusive) (*IDHCPGroupCondition_setInclusiveResponse, error) {
	response := new(IDHCPGroupCondition_setInclusiveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPGroupCondition_setInclusive(request *IDHCPGroupCondition_setInclusive) (*IDHCPGroupCondition_setInclusiveResponse, error) {
	return service.IDHCPGroupCondition_setInclusiveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPGroupCondition_getTypeContext(ctx context.Context, request *IDHCPGroupCondition_getType) (*IDHCPGroupCondition_getTypeResponse, error) {
	response := new(IDHCPGroupCondition_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPGroupCondition_getType(request *IDHCPGroupCondition_getType) (*IDHCPGroupCondition_getTypeResponse, error) {
	return service.IDHCPGroupCondition_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPGroupCondition_setTypeContext(ctx context.Context, request *IDHCPGroupCondition_setType) (*IDHCPGroupCondition_setTypeResponse, error) {
	response := new(IDHCPGroupCondition_setTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPGroupCondition_setType(request *IDHCPGroupCondition_setType) (*IDHCPGroupCondition_setTypeResponse, error) {
	return service.IDHCPGroupCondition_setTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPGroupCondition_getValueContext(ctx context.Context, request *IDHCPGroupCondition_getValue) (*IDHCPGroupCondition_getValueResponse, error) {
	response := new(IDHCPGroupCondition_getValueResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPGroupCondition_getValue(request *IDHCPGroupCondition_getValue) (*IDHCPGroupCondition_getValueResponse, error) {
	return service.IDHCPGroupCondition_getValueContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPGroupCondition_setValueContext(ctx context.Context, request *IDHCPGroupCondition_setValue) (*IDHCPGroupCondition_setValueResponse, error) {
	response := new(IDHCPGroupCondition_setValueResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPGroupCondition_setValue(request *IDHCPGroupCondition_setValue) (*IDHCPGroupCondition_setValueResponse, error) {
	return service.IDHCPGroupCondition_setValueContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPGroupCondition_removeContext(ctx context.Context, request *IDHCPGroupCondition_remove) (*IDHCPGroupCondition_removeResponse, error) {
	response := new(IDHCPGroupCondition_removeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPGroupCondition_remove(request *IDHCPGroupCondition_remove) (*IDHCPGroupCondition_removeResponse, error) {
	return service.IDHCPGroupCondition_removeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPGroupConfig_getNameContext(ctx context.Context, request *IDHCPGroupConfig_getName) (*IDHCPGroupConfig_getNameResponse, error) {
	response := new(IDHCPGroupConfig_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPGroupConfig_getName(request *IDHCPGroupConfig_getName) (*IDHCPGroupConfig_getNameResponse, error) {
	return service.IDHCPGroupConfig_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPGroupConfig_setNameContext(ctx context.Context, request *IDHCPGroupConfig_setName) (*IDHCPGroupConfig_setNameResponse, error) {
	response := new(IDHCPGroupConfig_setNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPGroupConfig_setName(request *IDHCPGroupConfig_setName) (*IDHCPGroupConfig_setNameResponse, error) {
	return service.IDHCPGroupConfig_setNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPGroupConfig_getConditionsContext(ctx context.Context, request *IDHCPGroupConfig_getConditions) (*IDHCPGroupConfig_getConditionsResponse, error) {
	response := new(IDHCPGroupConfig_getConditionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPGroupConfig_getConditions(request *IDHCPGroupConfig_getConditions) (*IDHCPGroupConfig_getConditionsResponse, error) {
	return service.IDHCPGroupConfig_getConditionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPGroupConfig_addConditionContext(ctx context.Context, request *IDHCPGroupConfig_addCondition) (*IDHCPGroupConfig_addConditionResponse, error) {
	response := new(IDHCPGroupConfig_addConditionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPGroupConfig_addCondition(request *IDHCPGroupConfig_addCondition) (*IDHCPGroupConfig_addConditionResponse, error) {
	return service.IDHCPGroupConfig_addConditionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPGroupConfig_removeAllConditionsContext(ctx context.Context, request *IDHCPGroupConfig_removeAllConditions) (*IDHCPGroupConfig_removeAllConditionsResponse, error) {
	response := new(IDHCPGroupConfig_removeAllConditionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPGroupConfig_removeAllConditions(request *IDHCPGroupConfig_removeAllConditions) (*IDHCPGroupConfig_removeAllConditionsResponse, error) {
	return service.IDHCPGroupConfig_removeAllConditionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPIndividualConfig_getMACAddressContext(ctx context.Context, request *IDHCPIndividualConfig_getMACAddress) (*IDHCPIndividualConfig_getMACAddressResponse, error) {
	response := new(IDHCPIndividualConfig_getMACAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPIndividualConfig_getMACAddress(request *IDHCPIndividualConfig_getMACAddress) (*IDHCPIndividualConfig_getMACAddressResponse, error) {
	return service.IDHCPIndividualConfig_getMACAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPIndividualConfig_getMachineIdContext(ctx context.Context, request *IDHCPIndividualConfig_getMachineId) (*IDHCPIndividualConfig_getMachineIdResponse, error) {
	response := new(IDHCPIndividualConfig_getMachineIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPIndividualConfig_getMachineId(request *IDHCPIndividualConfig_getMachineId) (*IDHCPIndividualConfig_getMachineIdResponse, error) {
	return service.IDHCPIndividualConfig_getMachineIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPIndividualConfig_getSlotContext(ctx context.Context, request *IDHCPIndividualConfig_getSlot) (*IDHCPIndividualConfig_getSlotResponse, error) {
	response := new(IDHCPIndividualConfig_getSlotResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPIndividualConfig_getSlot(request *IDHCPIndividualConfig_getSlot) (*IDHCPIndividualConfig_getSlotResponse, error) {
	return service.IDHCPIndividualConfig_getSlotContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPIndividualConfig_getFixedAddressContext(ctx context.Context, request *IDHCPIndividualConfig_getFixedAddress) (*IDHCPIndividualConfig_getFixedAddressResponse, error) {
	response := new(IDHCPIndividualConfig_getFixedAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPIndividualConfig_getFixedAddress(request *IDHCPIndividualConfig_getFixedAddress) (*IDHCPIndividualConfig_getFixedAddressResponse, error) {
	return service.IDHCPIndividualConfig_getFixedAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDHCPIndividualConfig_setFixedAddressContext(ctx context.Context, request *IDHCPIndividualConfig_setFixedAddress) (*IDHCPIndividualConfig_setFixedAddressResponse, error) {
	response := new(IDHCPIndividualConfig_setFixedAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDHCPIndividualConfig_setFixedAddress(request *IDHCPIndividualConfig_setFixedAddress) (*IDHCPIndividualConfig_setFixedAddressResponse, error) {
	return service.IDHCPIndividualConfig_setFixedAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getVersionContext(ctx context.Context, request *IVirtualBox_getVersion) (*IVirtualBox_getVersionResponse, error) {
	response := new(IVirtualBox_getVersionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getVersion(request *IVirtualBox_getVersion) (*IVirtualBox_getVersionResponse, error) {
	return service.IVirtualBox_getVersionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getVersionNormalizedContext(ctx context.Context, request *IVirtualBox_getVersionNormalized) (*IVirtualBox_getVersionNormalizedResponse, error) {
	response := new(IVirtualBox_getVersionNormalizedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getVersionNormalized(request *IVirtualBox_getVersionNormalized) (*IVirtualBox_getVersionNormalizedResponse, error) {
	return service.IVirtualBox_getVersionNormalizedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getRevisionContext(ctx context.Context, request *IVirtualBox_getRevision) (*IVirtualBox_getRevisionResponse, error) {
	response := new(IVirtualBox_getRevisionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getRevision(request *IVirtualBox_getRevision) (*IVirtualBox_getRevisionResponse, error) {
	return service.IVirtualBox_getRevisionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getPackageTypeContext(ctx context.Context, request *IVirtualBox_getPackageType) (*IVirtualBox_getPackageTypeResponse, error) {
	response := new(IVirtualBox_getPackageTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getPackageType(request *IVirtualBox_getPackageType) (*IVirtualBox_getPackageTypeResponse, error) {
	return service.IVirtualBox_getPackageTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getAPIVersionContext(ctx context.Context, request *IVirtualBox_getAPIVersion) (*IVirtualBox_getAPIVersionResponse, error) {
	response := new(IVirtualBox_getAPIVersionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getAPIVersion(request *IVirtualBox_getAPIVersion) (*IVirtualBox_getAPIVersionResponse, error) {
	return service.IVirtualBox_getAPIVersionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getAPIRevisionContext(ctx context.Context, request *IVirtualBox_getAPIRevision) (*IVirtualBox_getAPIRevisionResponse, error) {
	response := new(IVirtualBox_getAPIRevisionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getAPIRevision(request *IVirtualBox_getAPIRevision) (*IVirtualBox_getAPIRevisionResponse, error) {
	return service.IVirtualBox_getAPIRevisionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getHomeFolderContext(ctx context.Context, request *IVirtualBox_getHomeFolder) (*IVirtualBox_getHomeFolderResponse, error) {
	response := new(IVirtualBox_getHomeFolderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getHomeFolder(request *IVirtualBox_getHomeFolder) (*IVirtualBox_getHomeFolderResponse, error) {
	return service.IVirtualBox_getHomeFolderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getSettingsFilePathContext(ctx context.Context, request *IVirtualBox_getSettingsFilePath) (*IVirtualBox_getSettingsFilePathResponse, error) {
	response := new(IVirtualBox_getSettingsFilePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getSettingsFilePath(request *IVirtualBox_getSettingsFilePath) (*IVirtualBox_getSettingsFilePathResponse, error) {
	return service.IVirtualBox_getSettingsFilePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getHostContext(ctx context.Context, request *IVirtualBox_getHost) (*IVirtualBox_getHostResponse, error) {
	response := new(IVirtualBox_getHostResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getHost(request *IVirtualBox_getHost) (*IVirtualBox_getHostResponse, error) {
	return service.IVirtualBox_getHostContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getSystemPropertiesContext(ctx context.Context, request *IVirtualBox_getSystemProperties) (*IVirtualBox_getSystemPropertiesResponse, error) {
	response := new(IVirtualBox_getSystemPropertiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getSystemProperties(request *IVirtualBox_getSystemProperties) (*IVirtualBox_getSystemPropertiesResponse, error) {
	return service.IVirtualBox_getSystemPropertiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getMachinesContext(ctx context.Context, request *IVirtualBox_getMachines) (*IVirtualBox_getMachinesResponse, error) {
	response := new(IVirtualBox_getMachinesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getMachines(request *IVirtualBox_getMachines) (*IVirtualBox_getMachinesResponse, error) {
	return service.IVirtualBox_getMachinesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getMachineGroupsContext(ctx context.Context, request *IVirtualBox_getMachineGroups) (*IVirtualBox_getMachineGroupsResponse, error) {
	response := new(IVirtualBox_getMachineGroupsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getMachineGroups(request *IVirtualBox_getMachineGroups) (*IVirtualBox_getMachineGroupsResponse, error) {
	return service.IVirtualBox_getMachineGroupsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getHardDisksContext(ctx context.Context, request *IVirtualBox_getHardDisks) (*IVirtualBox_getHardDisksResponse, error) {
	response := new(IVirtualBox_getHardDisksResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getHardDisks(request *IVirtualBox_getHardDisks) (*IVirtualBox_getHardDisksResponse, error) {
	return service.IVirtualBox_getHardDisksContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getDVDImagesContext(ctx context.Context, request *IVirtualBox_getDVDImages) (*IVirtualBox_getDVDImagesResponse, error) {
	response := new(IVirtualBox_getDVDImagesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getDVDImages(request *IVirtualBox_getDVDImages) (*IVirtualBox_getDVDImagesResponse, error) {
	return service.IVirtualBox_getDVDImagesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getFloppyImagesContext(ctx context.Context, request *IVirtualBox_getFloppyImages) (*IVirtualBox_getFloppyImagesResponse, error) {
	response := new(IVirtualBox_getFloppyImagesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getFloppyImages(request *IVirtualBox_getFloppyImages) (*IVirtualBox_getFloppyImagesResponse, error) {
	return service.IVirtualBox_getFloppyImagesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getProgressOperationsContext(ctx context.Context, request *IVirtualBox_getProgressOperations) (*IVirtualBox_getProgressOperationsResponse, error) {
	response := new(IVirtualBox_getProgressOperationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getProgressOperations(request *IVirtualBox_getProgressOperations) (*IVirtualBox_getProgressOperationsResponse, error) {
	return service.IVirtualBox_getProgressOperationsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getGuestOSTypesContext(ctx context.Context, request *IVirtualBox_getGuestOSTypes) (*IVirtualBox_getGuestOSTypesResponse, error) {
	response := new(IVirtualBox_getGuestOSTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getGuestOSTypes(request *IVirtualBox_getGuestOSTypes) (*IVirtualBox_getGuestOSTypesResponse, error) {
	return service.IVirtualBox_getGuestOSTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getSharedFoldersContext(ctx context.Context, request *IVirtualBox_getSharedFolders) (*IVirtualBox_getSharedFoldersResponse, error) {
	response := new(IVirtualBox_getSharedFoldersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getSharedFolders(request *IVirtualBox_getSharedFolders) (*IVirtualBox_getSharedFoldersResponse, error) {
	return service.IVirtualBox_getSharedFoldersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getPerformanceCollectorContext(ctx context.Context, request *IVirtualBox_getPerformanceCollector) (*IVirtualBox_getPerformanceCollectorResponse, error) {
	response := new(IVirtualBox_getPerformanceCollectorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getPerformanceCollector(request *IVirtualBox_getPerformanceCollector) (*IVirtualBox_getPerformanceCollectorResponse, error) {
	return service.IVirtualBox_getPerformanceCollectorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getDHCPServersContext(ctx context.Context, request *IVirtualBox_getDHCPServers) (*IVirtualBox_getDHCPServersResponse, error) {
	response := new(IVirtualBox_getDHCPServersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getDHCPServers(request *IVirtualBox_getDHCPServers) (*IVirtualBox_getDHCPServersResponse, error) {
	return service.IVirtualBox_getDHCPServersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getNATNetworksContext(ctx context.Context, request *IVirtualBox_getNATNetworks) (*IVirtualBox_getNATNetworksResponse, error) {
	response := new(IVirtualBox_getNATNetworksResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getNATNetworks(request *IVirtualBox_getNATNetworks) (*IVirtualBox_getNATNetworksResponse, error) {
	return service.IVirtualBox_getNATNetworksContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getEventSourceContext(ctx context.Context, request *IVirtualBox_getEventSource) (*IVirtualBox_getEventSourceResponse, error) {
	response := new(IVirtualBox_getEventSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getEventSource(request *IVirtualBox_getEventSource) (*IVirtualBox_getEventSourceResponse, error) {
	return service.IVirtualBox_getEventSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getInternalNetworksContext(ctx context.Context, request *IVirtualBox_getInternalNetworks) (*IVirtualBox_getInternalNetworksResponse, error) {
	response := new(IVirtualBox_getInternalNetworksResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getInternalNetworks(request *IVirtualBox_getInternalNetworks) (*IVirtualBox_getInternalNetworksResponse, error) {
	return service.IVirtualBox_getInternalNetworksContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getHostOnlyNetworksContext(ctx context.Context, request *IVirtualBox_getHostOnlyNetworks) (*IVirtualBox_getHostOnlyNetworksResponse, error) {
	response := new(IVirtualBox_getHostOnlyNetworksResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getHostOnlyNetworks(request *IVirtualBox_getHostOnlyNetworks) (*IVirtualBox_getHostOnlyNetworksResponse, error) {
	return service.IVirtualBox_getHostOnlyNetworksContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getGenericNetworkDriversContext(ctx context.Context, request *IVirtualBox_getGenericNetworkDrivers) (*IVirtualBox_getGenericNetworkDriversResponse, error) {
	response := new(IVirtualBox_getGenericNetworkDriversResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getGenericNetworkDrivers(request *IVirtualBox_getGenericNetworkDrivers) (*IVirtualBox_getGenericNetworkDriversResponse, error) {
	return service.IVirtualBox_getGenericNetworkDriversContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getCloudNetworksContext(ctx context.Context, request *IVirtualBox_getCloudNetworks) (*IVirtualBox_getCloudNetworksResponse, error) {
	response := new(IVirtualBox_getCloudNetworksResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getCloudNetworks(request *IVirtualBox_getCloudNetworks) (*IVirtualBox_getCloudNetworksResponse, error) {
	return service.IVirtualBox_getCloudNetworksContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getCloudProviderManagerContext(ctx context.Context, request *IVirtualBox_getCloudProviderManager) (*IVirtualBox_getCloudProviderManagerResponse, error) {
	response := new(IVirtualBox_getCloudProviderManagerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getCloudProviderManager(request *IVirtualBox_getCloudProviderManager) (*IVirtualBox_getCloudProviderManagerResponse, error) {
	return service.IVirtualBox_getCloudProviderManagerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_composeMachineFilenameContext(ctx context.Context, request *IVirtualBox_composeMachineFilename) (*IVirtualBox_composeMachineFilenameResponse, error) {
	response := new(IVirtualBox_composeMachineFilenameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_composeMachineFilename(request *IVirtualBox_composeMachineFilename) (*IVirtualBox_composeMachineFilenameResponse, error) {
	return service.IVirtualBox_composeMachineFilenameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_createMachineContext(ctx context.Context, request *IVirtualBox_createMachine) (*IVirtualBox_createMachineResponse, error) {
	response := new(IVirtualBox_createMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_createMachine(request *IVirtualBox_createMachine) (*IVirtualBox_createMachineResponse, error) {
	return service.IVirtualBox_createMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_openMachineContext(ctx context.Context, request *IVirtualBox_openMachine) (*IVirtualBox_openMachineResponse, error) {
	response := new(IVirtualBox_openMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_openMachine(request *IVirtualBox_openMachine) (*IVirtualBox_openMachineResponse, error) {
	return service.IVirtualBox_openMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_registerMachineContext(ctx context.Context, request *IVirtualBox_registerMachine) (*IVirtualBox_registerMachineResponse, error) {
	response := new(IVirtualBox_registerMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_registerMachine(request *IVirtualBox_registerMachine) (*IVirtualBox_registerMachineResponse, error) {
	return service.IVirtualBox_registerMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_findMachineContext(ctx context.Context, request *IVirtualBox_findMachine) (*IVirtualBox_findMachineResponse, error) {
	response := new(IVirtualBox_findMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_findMachine(request *IVirtualBox_findMachine) (*IVirtualBox_findMachineResponse, error) {
	return service.IVirtualBox_findMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getMachinesByGroupsContext(ctx context.Context, request *IVirtualBox_getMachinesByGroups) (*IVirtualBox_getMachinesByGroupsResponse, error) {
	response := new(IVirtualBox_getMachinesByGroupsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getMachinesByGroups(request *IVirtualBox_getMachinesByGroups) (*IVirtualBox_getMachinesByGroupsResponse, error) {
	return service.IVirtualBox_getMachinesByGroupsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getMachineStatesContext(ctx context.Context, request *IVirtualBox_getMachineStates) (*IVirtualBox_getMachineStatesResponse, error) {
	response := new(IVirtualBox_getMachineStatesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getMachineStates(request *IVirtualBox_getMachineStates) (*IVirtualBox_getMachineStatesResponse, error) {
	return service.IVirtualBox_getMachineStatesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_createApplianceContext(ctx context.Context, request *IVirtualBox_createAppliance) (*IVirtualBox_createApplianceResponse, error) {
	response := new(IVirtualBox_createApplianceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_createAppliance(request *IVirtualBox_createAppliance) (*IVirtualBox_createApplianceResponse, error) {
	return service.IVirtualBox_createApplianceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_createUnattendedInstallerContext(ctx context.Context, request *IVirtualBox_createUnattendedInstaller) (*IVirtualBox_createUnattendedInstallerResponse, error) {
	response := new(IVirtualBox_createUnattendedInstallerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_createUnattendedInstaller(request *IVirtualBox_createUnattendedInstaller) (*IVirtualBox_createUnattendedInstallerResponse, error) {
	return service.IVirtualBox_createUnattendedInstallerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_createMediumContext(ctx context.Context, request *IVirtualBox_createMedium) (*IVirtualBox_createMediumResponse, error) {
	response := new(IVirtualBox_createMediumResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_createMedium(request *IVirtualBox_createMedium) (*IVirtualBox_createMediumResponse, error) {
	return service.IVirtualBox_createMediumContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_openMediumContext(ctx context.Context, request *IVirtualBox_openMedium) (*IVirtualBox_openMediumResponse, error) {
	response := new(IVirtualBox_openMediumResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_openMedium(request *IVirtualBox_openMedium) (*IVirtualBox_openMediumResponse, error) {
	return service.IVirtualBox_openMediumContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getGuestOSTypeContext(ctx context.Context, request *IVirtualBox_getGuestOSType) (*IVirtualBox_getGuestOSTypeResponse, error) {
	response := new(IVirtualBox_getGuestOSTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getGuestOSType(request *IVirtualBox_getGuestOSType) (*IVirtualBox_getGuestOSTypeResponse, error) {
	return service.IVirtualBox_getGuestOSTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_createSharedFolderContext(ctx context.Context, request *IVirtualBox_createSharedFolder) (*IVirtualBox_createSharedFolderResponse, error) {
	response := new(IVirtualBox_createSharedFolderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_createSharedFolder(request *IVirtualBox_createSharedFolder) (*IVirtualBox_createSharedFolderResponse, error) {
	return service.IVirtualBox_createSharedFolderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_removeSharedFolderContext(ctx context.Context, request *IVirtualBox_removeSharedFolder) (*IVirtualBox_removeSharedFolderResponse, error) {
	response := new(IVirtualBox_removeSharedFolderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_removeSharedFolder(request *IVirtualBox_removeSharedFolder) (*IVirtualBox_removeSharedFolderResponse, error) {
	return service.IVirtualBox_removeSharedFolderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getExtraDataKeysContext(ctx context.Context, request *IVirtualBox_getExtraDataKeys) (*IVirtualBox_getExtraDataKeysResponse, error) {
	response := new(IVirtualBox_getExtraDataKeysResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getExtraDataKeys(request *IVirtualBox_getExtraDataKeys) (*IVirtualBox_getExtraDataKeysResponse, error) {
	return service.IVirtualBox_getExtraDataKeysContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_getExtraDataContext(ctx context.Context, request *IVirtualBox_getExtraData) (*IVirtualBox_getExtraDataResponse, error) {
	response := new(IVirtualBox_getExtraDataResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_getExtraData(request *IVirtualBox_getExtraData) (*IVirtualBox_getExtraDataResponse, error) {
	return service.IVirtualBox_getExtraDataContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_setExtraDataContext(ctx context.Context, request *IVirtualBox_setExtraData) (*IVirtualBox_setExtraDataResponse, error) {
	response := new(IVirtualBox_setExtraDataResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_setExtraData(request *IVirtualBox_setExtraData) (*IVirtualBox_setExtraDataResponse, error) {
	return service.IVirtualBox_setExtraDataContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_setSettingsSecretContext(ctx context.Context, request *IVirtualBox_setSettingsSecret) (*IVirtualBox_setSettingsSecretResponse, error) {
	response := new(IVirtualBox_setSettingsSecretResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_setSettingsSecret(request *IVirtualBox_setSettingsSecret) (*IVirtualBox_setSettingsSecretResponse, error) {
	return service.IVirtualBox_setSettingsSecretContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_createDHCPServerContext(ctx context.Context, request *IVirtualBox_createDHCPServer) (*IVirtualBox_createDHCPServerResponse, error) {
	response := new(IVirtualBox_createDHCPServerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_createDHCPServer(request *IVirtualBox_createDHCPServer) (*IVirtualBox_createDHCPServerResponse, error) {
	return service.IVirtualBox_createDHCPServerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_findDHCPServerByNetworkNameContext(ctx context.Context, request *IVirtualBox_findDHCPServerByNetworkName) (*IVirtualBox_findDHCPServerByNetworkNameResponse, error) {
	response := new(IVirtualBox_findDHCPServerByNetworkNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_findDHCPServerByNetworkName(request *IVirtualBox_findDHCPServerByNetworkName) (*IVirtualBox_findDHCPServerByNetworkNameResponse, error) {
	return service.IVirtualBox_findDHCPServerByNetworkNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_removeDHCPServerContext(ctx context.Context, request *IVirtualBox_removeDHCPServer) (*IVirtualBox_removeDHCPServerResponse, error) {
	response := new(IVirtualBox_removeDHCPServerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_removeDHCPServer(request *IVirtualBox_removeDHCPServer) (*IVirtualBox_removeDHCPServerResponse, error) {
	return service.IVirtualBox_removeDHCPServerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_createNATNetworkContext(ctx context.Context, request *IVirtualBox_createNATNetwork) (*IVirtualBox_createNATNetworkResponse, error) {
	response := new(IVirtualBox_createNATNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_createNATNetwork(request *IVirtualBox_createNATNetwork) (*IVirtualBox_createNATNetworkResponse, error) {
	return service.IVirtualBox_createNATNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_findNATNetworkByNameContext(ctx context.Context, request *IVirtualBox_findNATNetworkByName) (*IVirtualBox_findNATNetworkByNameResponse, error) {
	response := new(IVirtualBox_findNATNetworkByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_findNATNetworkByName(request *IVirtualBox_findNATNetworkByName) (*IVirtualBox_findNATNetworkByNameResponse, error) {
	return service.IVirtualBox_findNATNetworkByNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_removeNATNetworkContext(ctx context.Context, request *IVirtualBox_removeNATNetwork) (*IVirtualBox_removeNATNetworkResponse, error) {
	response := new(IVirtualBox_removeNATNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_removeNATNetwork(request *IVirtualBox_removeNATNetwork) (*IVirtualBox_removeNATNetworkResponse, error) {
	return service.IVirtualBox_removeNATNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_createHostOnlyNetworkContext(ctx context.Context, request *IVirtualBox_createHostOnlyNetwork) (*IVirtualBox_createHostOnlyNetworkResponse, error) {
	response := new(IVirtualBox_createHostOnlyNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_createHostOnlyNetwork(request *IVirtualBox_createHostOnlyNetwork) (*IVirtualBox_createHostOnlyNetworkResponse, error) {
	return service.IVirtualBox_createHostOnlyNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_findHostOnlyNetworkByNameContext(ctx context.Context, request *IVirtualBox_findHostOnlyNetworkByName) (*IVirtualBox_findHostOnlyNetworkByNameResponse, error) {
	response := new(IVirtualBox_findHostOnlyNetworkByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_findHostOnlyNetworkByName(request *IVirtualBox_findHostOnlyNetworkByName) (*IVirtualBox_findHostOnlyNetworkByNameResponse, error) {
	return service.IVirtualBox_findHostOnlyNetworkByNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_findHostOnlyNetworkByIdContext(ctx context.Context, request *IVirtualBox_findHostOnlyNetworkById) (*IVirtualBox_findHostOnlyNetworkByIdResponse, error) {
	response := new(IVirtualBox_findHostOnlyNetworkByIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_findHostOnlyNetworkById(request *IVirtualBox_findHostOnlyNetworkById) (*IVirtualBox_findHostOnlyNetworkByIdResponse, error) {
	return service.IVirtualBox_findHostOnlyNetworkByIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_removeHostOnlyNetworkContext(ctx context.Context, request *IVirtualBox_removeHostOnlyNetwork) (*IVirtualBox_removeHostOnlyNetworkResponse, error) {
	response := new(IVirtualBox_removeHostOnlyNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_removeHostOnlyNetwork(request *IVirtualBox_removeHostOnlyNetwork) (*IVirtualBox_removeHostOnlyNetworkResponse, error) {
	return service.IVirtualBox_removeHostOnlyNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_createCloudNetworkContext(ctx context.Context, request *IVirtualBox_createCloudNetwork) (*IVirtualBox_createCloudNetworkResponse, error) {
	response := new(IVirtualBox_createCloudNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_createCloudNetwork(request *IVirtualBox_createCloudNetwork) (*IVirtualBox_createCloudNetworkResponse, error) {
	return service.IVirtualBox_createCloudNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_findCloudNetworkByNameContext(ctx context.Context, request *IVirtualBox_findCloudNetworkByName) (*IVirtualBox_findCloudNetworkByNameResponse, error) {
	response := new(IVirtualBox_findCloudNetworkByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_findCloudNetworkByName(request *IVirtualBox_findCloudNetworkByName) (*IVirtualBox_findCloudNetworkByNameResponse, error) {
	return service.IVirtualBox_findCloudNetworkByNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_removeCloudNetworkContext(ctx context.Context, request *IVirtualBox_removeCloudNetwork) (*IVirtualBox_removeCloudNetworkResponse, error) {
	response := new(IVirtualBox_removeCloudNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_removeCloudNetwork(request *IVirtualBox_removeCloudNetwork) (*IVirtualBox_removeCloudNetworkResponse, error) {
	return service.IVirtualBox_removeCloudNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_checkFirmwarePresentContext(ctx context.Context, request *IVirtualBox_checkFirmwarePresent) (*IVirtualBox_checkFirmwarePresentResponse, error) {
	response := new(IVirtualBox_checkFirmwarePresentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_checkFirmwarePresent(request *IVirtualBox_checkFirmwarePresent) (*IVirtualBox_checkFirmwarePresentResponse, error) {
	return service.IVirtualBox_checkFirmwarePresentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualBox_findProgressByIdContext(ctx context.Context, request *IVirtualBox_findProgressById) (*IVirtualBox_findProgressByIdResponse, error) {
	response := new(IVirtualBox_findProgressByIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualBox_findProgressById(request *IVirtualBox_findProgressById) (*IVirtualBox_findProgressByIdResponse, error) {
	return service.IVirtualBox_findProgressByIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVFSExplorer_getPathContext(ctx context.Context, request *IVFSExplorer_getPath) (*IVFSExplorer_getPathResponse, error) {
	response := new(IVFSExplorer_getPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVFSExplorer_getPath(request *IVFSExplorer_getPath) (*IVFSExplorer_getPathResponse, error) {
	return service.IVFSExplorer_getPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVFSExplorer_getTypeContext(ctx context.Context, request *IVFSExplorer_getType) (*IVFSExplorer_getTypeResponse, error) {
	response := new(IVFSExplorer_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVFSExplorer_getType(request *IVFSExplorer_getType) (*IVFSExplorer_getTypeResponse, error) {
	return service.IVFSExplorer_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVFSExplorer_updateContext(ctx context.Context, request *IVFSExplorer_update) (*IVFSExplorer_updateResponse, error) {
	response := new(IVFSExplorer_updateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVFSExplorer_update(request *IVFSExplorer_update) (*IVFSExplorer_updateResponse, error) {
	return service.IVFSExplorer_updateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVFSExplorer_cdContext(ctx context.Context, request *IVFSExplorer_cd) (*IVFSExplorer_cdResponse, error) {
	response := new(IVFSExplorer_cdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVFSExplorer_cd(request *IVFSExplorer_cd) (*IVFSExplorer_cdResponse, error) {
	return service.IVFSExplorer_cdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVFSExplorer_cdUpContext(ctx context.Context, request *IVFSExplorer_cdUp) (*IVFSExplorer_cdUpResponse, error) {
	response := new(IVFSExplorer_cdUpResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVFSExplorer_cdUp(request *IVFSExplorer_cdUp) (*IVFSExplorer_cdUpResponse, error) {
	return service.IVFSExplorer_cdUpContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVFSExplorer_entryListContext(ctx context.Context, request *IVFSExplorer_entryList) (*IVFSExplorer_entryListResponse, error) {
	response := new(IVFSExplorer_entryListResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVFSExplorer_entryList(request *IVFSExplorer_entryList) (*IVFSExplorer_entryListResponse, error) {
	return service.IVFSExplorer_entryListContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVFSExplorer_existsContext(ctx context.Context, request *IVFSExplorer_exists) (*IVFSExplorer_existsResponse, error) {
	response := new(IVFSExplorer_existsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVFSExplorer_exists(request *IVFSExplorer_exists) (*IVFSExplorer_existsResponse, error) {
	return service.IVFSExplorer_existsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVFSExplorer_removeContext(ctx context.Context, request *IVFSExplorer_remove) (*IVFSExplorer_removeResponse, error) {
	response := new(IVFSExplorer_removeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVFSExplorer_remove(request *IVFSExplorer_remove) (*IVFSExplorer_removeResponse, error) {
	return service.IVFSExplorer_removeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getVersionNumberContext(ctx context.Context, request *ICertificate_getVersionNumber) (*ICertificate_getVersionNumberResponse, error) {
	response := new(ICertificate_getVersionNumberResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getVersionNumber(request *ICertificate_getVersionNumber) (*ICertificate_getVersionNumberResponse, error) {
	return service.ICertificate_getVersionNumberContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getSerialNumberContext(ctx context.Context, request *ICertificate_getSerialNumber) (*ICertificate_getSerialNumberResponse, error) {
	response := new(ICertificate_getSerialNumberResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getSerialNumber(request *ICertificate_getSerialNumber) (*ICertificate_getSerialNumberResponse, error) {
	return service.ICertificate_getSerialNumberContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getSignatureAlgorithmOIDContext(ctx context.Context, request *ICertificate_getSignatureAlgorithmOID) (*ICertificate_getSignatureAlgorithmOIDResponse, error) {
	response := new(ICertificate_getSignatureAlgorithmOIDResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getSignatureAlgorithmOID(request *ICertificate_getSignatureAlgorithmOID) (*ICertificate_getSignatureAlgorithmOIDResponse, error) {
	return service.ICertificate_getSignatureAlgorithmOIDContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getSignatureAlgorithmNameContext(ctx context.Context, request *ICertificate_getSignatureAlgorithmName) (*ICertificate_getSignatureAlgorithmNameResponse, error) {
	response := new(ICertificate_getSignatureAlgorithmNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getSignatureAlgorithmName(request *ICertificate_getSignatureAlgorithmName) (*ICertificate_getSignatureAlgorithmNameResponse, error) {
	return service.ICertificate_getSignatureAlgorithmNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getIssuerNameContext(ctx context.Context, request *ICertificate_getIssuerName) (*ICertificate_getIssuerNameResponse, error) {
	response := new(ICertificate_getIssuerNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getIssuerName(request *ICertificate_getIssuerName) (*ICertificate_getIssuerNameResponse, error) {
	return service.ICertificate_getIssuerNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getSubjectNameContext(ctx context.Context, request *ICertificate_getSubjectName) (*ICertificate_getSubjectNameResponse, error) {
	response := new(ICertificate_getSubjectNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getSubjectName(request *ICertificate_getSubjectName) (*ICertificate_getSubjectNameResponse, error) {
	return service.ICertificate_getSubjectNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getFriendlyNameContext(ctx context.Context, request *ICertificate_getFriendlyName) (*ICertificate_getFriendlyNameResponse, error) {
	response := new(ICertificate_getFriendlyNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getFriendlyName(request *ICertificate_getFriendlyName) (*ICertificate_getFriendlyNameResponse, error) {
	return service.ICertificate_getFriendlyNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getValidityPeriodNotBeforeContext(ctx context.Context, request *ICertificate_getValidityPeriodNotBefore) (*ICertificate_getValidityPeriodNotBeforeResponse, error) {
	response := new(ICertificate_getValidityPeriodNotBeforeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getValidityPeriodNotBefore(request *ICertificate_getValidityPeriodNotBefore) (*ICertificate_getValidityPeriodNotBeforeResponse, error) {
	return service.ICertificate_getValidityPeriodNotBeforeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getValidityPeriodNotAfterContext(ctx context.Context, request *ICertificate_getValidityPeriodNotAfter) (*ICertificate_getValidityPeriodNotAfterResponse, error) {
	response := new(ICertificate_getValidityPeriodNotAfterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getValidityPeriodNotAfter(request *ICertificate_getValidityPeriodNotAfter) (*ICertificate_getValidityPeriodNotAfterResponse, error) {
	return service.ICertificate_getValidityPeriodNotAfterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getPublicKeyAlgorithmOIDContext(ctx context.Context, request *ICertificate_getPublicKeyAlgorithmOID) (*ICertificate_getPublicKeyAlgorithmOIDResponse, error) {
	response := new(ICertificate_getPublicKeyAlgorithmOIDResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getPublicKeyAlgorithmOID(request *ICertificate_getPublicKeyAlgorithmOID) (*ICertificate_getPublicKeyAlgorithmOIDResponse, error) {
	return service.ICertificate_getPublicKeyAlgorithmOIDContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getPublicKeyAlgorithmContext(ctx context.Context, request *ICertificate_getPublicKeyAlgorithm) (*ICertificate_getPublicKeyAlgorithmResponse, error) {
	response := new(ICertificate_getPublicKeyAlgorithmResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getPublicKeyAlgorithm(request *ICertificate_getPublicKeyAlgorithm) (*ICertificate_getPublicKeyAlgorithmResponse, error) {
	return service.ICertificate_getPublicKeyAlgorithmContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getSubjectPublicKeyContext(ctx context.Context, request *ICertificate_getSubjectPublicKey) (*ICertificate_getSubjectPublicKeyResponse, error) {
	response := new(ICertificate_getSubjectPublicKeyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getSubjectPublicKey(request *ICertificate_getSubjectPublicKey) (*ICertificate_getSubjectPublicKeyResponse, error) {
	return service.ICertificate_getSubjectPublicKeyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getIssuerUniqueIdentifierContext(ctx context.Context, request *ICertificate_getIssuerUniqueIdentifier) (*ICertificate_getIssuerUniqueIdentifierResponse, error) {
	response := new(ICertificate_getIssuerUniqueIdentifierResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getIssuerUniqueIdentifier(request *ICertificate_getIssuerUniqueIdentifier) (*ICertificate_getIssuerUniqueIdentifierResponse, error) {
	return service.ICertificate_getIssuerUniqueIdentifierContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getSubjectUniqueIdentifierContext(ctx context.Context, request *ICertificate_getSubjectUniqueIdentifier) (*ICertificate_getSubjectUniqueIdentifierResponse, error) {
	response := new(ICertificate_getSubjectUniqueIdentifierResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getSubjectUniqueIdentifier(request *ICertificate_getSubjectUniqueIdentifier) (*ICertificate_getSubjectUniqueIdentifierResponse, error) {
	return service.ICertificate_getSubjectUniqueIdentifierContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getCertificateAuthorityContext(ctx context.Context, request *ICertificate_getCertificateAuthority) (*ICertificate_getCertificateAuthorityResponse, error) {
	response := new(ICertificate_getCertificateAuthorityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getCertificateAuthority(request *ICertificate_getCertificateAuthority) (*ICertificate_getCertificateAuthorityResponse, error) {
	return service.ICertificate_getCertificateAuthorityContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getKeyUsageContext(ctx context.Context, request *ICertificate_getKeyUsage) (*ICertificate_getKeyUsageResponse, error) {
	response := new(ICertificate_getKeyUsageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getKeyUsage(request *ICertificate_getKeyUsage) (*ICertificate_getKeyUsageResponse, error) {
	return service.ICertificate_getKeyUsageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getExtendedKeyUsageContext(ctx context.Context, request *ICertificate_getExtendedKeyUsage) (*ICertificate_getExtendedKeyUsageResponse, error) {
	response := new(ICertificate_getExtendedKeyUsageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getExtendedKeyUsage(request *ICertificate_getExtendedKeyUsage) (*ICertificate_getExtendedKeyUsageResponse, error) {
	return service.ICertificate_getExtendedKeyUsageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getRawCertDataContext(ctx context.Context, request *ICertificate_getRawCertData) (*ICertificate_getRawCertDataResponse, error) {
	response := new(ICertificate_getRawCertDataResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getRawCertData(request *ICertificate_getRawCertData) (*ICertificate_getRawCertDataResponse, error) {
	return service.ICertificate_getRawCertDataContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getSelfSignedContext(ctx context.Context, request *ICertificate_getSelfSigned) (*ICertificate_getSelfSignedResponse, error) {
	response := new(ICertificate_getSelfSignedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getSelfSigned(request *ICertificate_getSelfSigned) (*ICertificate_getSelfSignedResponse, error) {
	return service.ICertificate_getSelfSignedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getTrustedContext(ctx context.Context, request *ICertificate_getTrusted) (*ICertificate_getTrustedResponse, error) {
	response := new(ICertificate_getTrustedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getTrusted(request *ICertificate_getTrusted) (*ICertificate_getTrustedResponse, error) {
	return service.ICertificate_getTrustedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_getExpiredContext(ctx context.Context, request *ICertificate_getExpired) (*ICertificate_getExpiredResponse, error) {
	response := new(ICertificate_getExpiredResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_getExpired(request *ICertificate_getExpired) (*ICertificate_getExpiredResponse, error) {
	return service.ICertificate_getExpiredContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_isCurrentlyExpiredContext(ctx context.Context, request *ICertificate_isCurrentlyExpired) (*ICertificate_isCurrentlyExpiredResponse, error) {
	response := new(ICertificate_isCurrentlyExpiredResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_isCurrentlyExpired(request *ICertificate_isCurrentlyExpired) (*ICertificate_isCurrentlyExpiredResponse, error) {
	return service.ICertificate_isCurrentlyExpiredContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICertificate_queryInfoContext(ctx context.Context, request *ICertificate_queryInfo) (*ICertificate_queryInfoResponse, error) {
	response := new(ICertificate_queryInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICertificate_queryInfo(request *ICertificate_queryInfo) (*ICertificate_queryInfoResponse, error) {
	return service.ICertificate_queryInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_getPathContext(ctx context.Context, request *IAppliance_getPath) (*IAppliance_getPathResponse, error) {
	response := new(IAppliance_getPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_getPath(request *IAppliance_getPath) (*IAppliance_getPathResponse, error) {
	return service.IAppliance_getPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_getDisksContext(ctx context.Context, request *IAppliance_getDisks) (*IAppliance_getDisksResponse, error) {
	response := new(IAppliance_getDisksResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_getDisks(request *IAppliance_getDisks) (*IAppliance_getDisksResponse, error) {
	return service.IAppliance_getDisksContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_getVirtualSystemDescriptionsContext(ctx context.Context, request *IAppliance_getVirtualSystemDescriptions) (*IAppliance_getVirtualSystemDescriptionsResponse, error) {
	response := new(IAppliance_getVirtualSystemDescriptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_getVirtualSystemDescriptions(request *IAppliance_getVirtualSystemDescriptions) (*IAppliance_getVirtualSystemDescriptionsResponse, error) {
	return service.IAppliance_getVirtualSystemDescriptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_getMachinesContext(ctx context.Context, request *IAppliance_getMachines) (*IAppliance_getMachinesResponse, error) {
	response := new(IAppliance_getMachinesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_getMachines(request *IAppliance_getMachines) (*IAppliance_getMachinesResponse, error) {
	return service.IAppliance_getMachinesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_getCertificateContext(ctx context.Context, request *IAppliance_getCertificate) (*IAppliance_getCertificateResponse, error) {
	response := new(IAppliance_getCertificateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_getCertificate(request *IAppliance_getCertificate) (*IAppliance_getCertificateResponse, error) {
	return service.IAppliance_getCertificateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_readContext(ctx context.Context, request *IAppliance_read) (*IAppliance_readResponse, error) {
	response := new(IAppliance_readResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_read(request *IAppliance_read) (*IAppliance_readResponse, error) {
	return service.IAppliance_readContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_interpretContext(ctx context.Context, request *IAppliance_interpret) (*IAppliance_interpretResponse, error) {
	response := new(IAppliance_interpretResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_interpret(request *IAppliance_interpret) (*IAppliance_interpretResponse, error) {
	return service.IAppliance_interpretContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_importMachinesContext(ctx context.Context, request *IAppliance_importMachines) (*IAppliance_importMachinesResponse, error) {
	response := new(IAppliance_importMachinesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_importMachines(request *IAppliance_importMachines) (*IAppliance_importMachinesResponse, error) {
	return service.IAppliance_importMachinesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_createVFSExplorerContext(ctx context.Context, request *IAppliance_createVFSExplorer) (*IAppliance_createVFSExplorerResponse, error) {
	response := new(IAppliance_createVFSExplorerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_createVFSExplorer(request *IAppliance_createVFSExplorer) (*IAppliance_createVFSExplorerResponse, error) {
	return service.IAppliance_createVFSExplorerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_writeContext(ctx context.Context, request *IAppliance_write) (*IAppliance_writeResponse, error) {
	response := new(IAppliance_writeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_write(request *IAppliance_write) (*IAppliance_writeResponse, error) {
	return service.IAppliance_writeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_getWarningsContext(ctx context.Context, request *IAppliance_getWarnings) (*IAppliance_getWarningsResponse, error) {
	response := new(IAppliance_getWarningsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_getWarnings(request *IAppliance_getWarnings) (*IAppliance_getWarningsResponse, error) {
	return service.IAppliance_getWarningsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_getPasswordIdsContext(ctx context.Context, request *IAppliance_getPasswordIds) (*IAppliance_getPasswordIdsResponse, error) {
	response := new(IAppliance_getPasswordIdsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_getPasswordIds(request *IAppliance_getPasswordIds) (*IAppliance_getPasswordIdsResponse, error) {
	return service.IAppliance_getPasswordIdsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_getMediumIdsForPasswordIdContext(ctx context.Context, request *IAppliance_getMediumIdsForPasswordId) (*IAppliance_getMediumIdsForPasswordIdResponse, error) {
	response := new(IAppliance_getMediumIdsForPasswordIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_getMediumIdsForPasswordId(request *IAppliance_getMediumIdsForPasswordId) (*IAppliance_getMediumIdsForPasswordIdResponse, error) {
	return service.IAppliance_getMediumIdsForPasswordIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_addPasswordsContext(ctx context.Context, request *IAppliance_addPasswords) (*IAppliance_addPasswordsResponse, error) {
	response := new(IAppliance_addPasswordsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_addPasswords(request *IAppliance_addPasswords) (*IAppliance_addPasswordsResponse, error) {
	return service.IAppliance_addPasswordsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAppliance_createVirtualSystemDescriptionsContext(ctx context.Context, request *IAppliance_createVirtualSystemDescriptions) (*IAppliance_createVirtualSystemDescriptionsResponse, error) {
	response := new(IAppliance_createVirtualSystemDescriptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAppliance_createVirtualSystemDescriptions(request *IAppliance_createVirtualSystemDescriptions) (*IAppliance_createVirtualSystemDescriptionsResponse, error) {
	return service.IAppliance_createVirtualSystemDescriptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualSystemDescription_getCountContext(ctx context.Context, request *IVirtualSystemDescription_getCount) (*IVirtualSystemDescription_getCountResponse, error) {
	response := new(IVirtualSystemDescription_getCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualSystemDescription_getCount(request *IVirtualSystemDescription_getCount) (*IVirtualSystemDescription_getCountResponse, error) {
	return service.IVirtualSystemDescription_getCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualSystemDescription_getDescriptionContext(ctx context.Context, request *IVirtualSystemDescription_getDescription) (*IVirtualSystemDescription_getDescriptionResponse, error) {
	response := new(IVirtualSystemDescription_getDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualSystemDescription_getDescription(request *IVirtualSystemDescription_getDescription) (*IVirtualSystemDescription_getDescriptionResponse, error) {
	return service.IVirtualSystemDescription_getDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualSystemDescription_getDescriptionByTypeContext(ctx context.Context, request *IVirtualSystemDescription_getDescriptionByType) (*IVirtualSystemDescription_getDescriptionByTypeResponse, error) {
	response := new(IVirtualSystemDescription_getDescriptionByTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualSystemDescription_getDescriptionByType(request *IVirtualSystemDescription_getDescriptionByType) (*IVirtualSystemDescription_getDescriptionByTypeResponse, error) {
	return service.IVirtualSystemDescription_getDescriptionByTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualSystemDescription_removeDescriptionByTypeContext(ctx context.Context, request *IVirtualSystemDescription_removeDescriptionByType) (*IVirtualSystemDescription_removeDescriptionByTypeResponse, error) {
	response := new(IVirtualSystemDescription_removeDescriptionByTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualSystemDescription_removeDescriptionByType(request *IVirtualSystemDescription_removeDescriptionByType) (*IVirtualSystemDescription_removeDescriptionByTypeResponse, error) {
	return service.IVirtualSystemDescription_removeDescriptionByTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualSystemDescription_getValuesByTypeContext(ctx context.Context, request *IVirtualSystemDescription_getValuesByType) (*IVirtualSystemDescription_getValuesByTypeResponse, error) {
	response := new(IVirtualSystemDescription_getValuesByTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualSystemDescription_getValuesByType(request *IVirtualSystemDescription_getValuesByType) (*IVirtualSystemDescription_getValuesByTypeResponse, error) {
	return service.IVirtualSystemDescription_getValuesByTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualSystemDescription_setFinalValuesContext(ctx context.Context, request *IVirtualSystemDescription_setFinalValues) (*IVirtualSystemDescription_setFinalValuesResponse, error) {
	response := new(IVirtualSystemDescription_setFinalValuesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualSystemDescription_setFinalValues(request *IVirtualSystemDescription_setFinalValues) (*IVirtualSystemDescription_setFinalValuesResponse, error) {
	return service.IVirtualSystemDescription_setFinalValuesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualSystemDescription_addDescriptionContext(ctx context.Context, request *IVirtualSystemDescription_addDescription) (*IVirtualSystemDescription_addDescriptionResponse, error) {
	response := new(IVirtualSystemDescription_addDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualSystemDescription_addDescription(request *IVirtualSystemDescription_addDescription) (*IVirtualSystemDescription_addDescriptionResponse, error) {
	return service.IVirtualSystemDescription_addDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getIsoPathContext(ctx context.Context, request *IUnattended_getIsoPath) (*IUnattended_getIsoPathResponse, error) {
	response := new(IUnattended_getIsoPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getIsoPath(request *IUnattended_getIsoPath) (*IUnattended_getIsoPathResponse, error) {
	return service.IUnattended_getIsoPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setIsoPathContext(ctx context.Context, request *IUnattended_setIsoPath) (*IUnattended_setIsoPathResponse, error) {
	response := new(IUnattended_setIsoPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setIsoPath(request *IUnattended_setIsoPath) (*IUnattended_setIsoPathResponse, error) {
	return service.IUnattended_setIsoPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getMachineContext(ctx context.Context, request *IUnattended_getMachine) (*IUnattended_getMachineResponse, error) {
	response := new(IUnattended_getMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getMachine(request *IUnattended_getMachine) (*IUnattended_getMachineResponse, error) {
	return service.IUnattended_getMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setMachineContext(ctx context.Context, request *IUnattended_setMachine) (*IUnattended_setMachineResponse, error) {
	response := new(IUnattended_setMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setMachine(request *IUnattended_setMachine) (*IUnattended_setMachineResponse, error) {
	return service.IUnattended_setMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getUserContext(ctx context.Context, request *IUnattended_getUser) (*IUnattended_getUserResponse, error) {
	response := new(IUnattended_getUserResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getUser(request *IUnattended_getUser) (*IUnattended_getUserResponse, error) {
	return service.IUnattended_getUserContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setUserContext(ctx context.Context, request *IUnattended_setUser) (*IUnattended_setUserResponse, error) {
	response := new(IUnattended_setUserResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setUser(request *IUnattended_setUser) (*IUnattended_setUserResponse, error) {
	return service.IUnattended_setUserContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getPasswordContext(ctx context.Context, request *IUnattended_getPassword) (*IUnattended_getPasswordResponse, error) {
	response := new(IUnattended_getPasswordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getPassword(request *IUnattended_getPassword) (*IUnattended_getPasswordResponse, error) {
	return service.IUnattended_getPasswordContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setPasswordContext(ctx context.Context, request *IUnattended_setPassword) (*IUnattended_setPasswordResponse, error) {
	response := new(IUnattended_setPasswordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setPassword(request *IUnattended_setPassword) (*IUnattended_setPasswordResponse, error) {
	return service.IUnattended_setPasswordContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getFullUserNameContext(ctx context.Context, request *IUnattended_getFullUserName) (*IUnattended_getFullUserNameResponse, error) {
	response := new(IUnattended_getFullUserNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getFullUserName(request *IUnattended_getFullUserName) (*IUnattended_getFullUserNameResponse, error) {
	return service.IUnattended_getFullUserNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setFullUserNameContext(ctx context.Context, request *IUnattended_setFullUserName) (*IUnattended_setFullUserNameResponse, error) {
	response := new(IUnattended_setFullUserNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setFullUserName(request *IUnattended_setFullUserName) (*IUnattended_setFullUserNameResponse, error) {
	return service.IUnattended_setFullUserNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getProductKeyContext(ctx context.Context, request *IUnattended_getProductKey) (*IUnattended_getProductKeyResponse, error) {
	response := new(IUnattended_getProductKeyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getProductKey(request *IUnattended_getProductKey) (*IUnattended_getProductKeyResponse, error) {
	return service.IUnattended_getProductKeyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setProductKeyContext(ctx context.Context, request *IUnattended_setProductKey) (*IUnattended_setProductKeyResponse, error) {
	response := new(IUnattended_setProductKeyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setProductKey(request *IUnattended_setProductKey) (*IUnattended_setProductKeyResponse, error) {
	return service.IUnattended_setProductKeyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getAdditionsIsoPathContext(ctx context.Context, request *IUnattended_getAdditionsIsoPath) (*IUnattended_getAdditionsIsoPathResponse, error) {
	response := new(IUnattended_getAdditionsIsoPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getAdditionsIsoPath(request *IUnattended_getAdditionsIsoPath) (*IUnattended_getAdditionsIsoPathResponse, error) {
	return service.IUnattended_getAdditionsIsoPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setAdditionsIsoPathContext(ctx context.Context, request *IUnattended_setAdditionsIsoPath) (*IUnattended_setAdditionsIsoPathResponse, error) {
	response := new(IUnattended_setAdditionsIsoPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setAdditionsIsoPath(request *IUnattended_setAdditionsIsoPath) (*IUnattended_setAdditionsIsoPathResponse, error) {
	return service.IUnattended_setAdditionsIsoPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getInstallGuestAdditionsContext(ctx context.Context, request *IUnattended_getInstallGuestAdditions) (*IUnattended_getInstallGuestAdditionsResponse, error) {
	response := new(IUnattended_getInstallGuestAdditionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getInstallGuestAdditions(request *IUnattended_getInstallGuestAdditions) (*IUnattended_getInstallGuestAdditionsResponse, error) {
	return service.IUnattended_getInstallGuestAdditionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setInstallGuestAdditionsContext(ctx context.Context, request *IUnattended_setInstallGuestAdditions) (*IUnattended_setInstallGuestAdditionsResponse, error) {
	response := new(IUnattended_setInstallGuestAdditionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setInstallGuestAdditions(request *IUnattended_setInstallGuestAdditions) (*IUnattended_setInstallGuestAdditionsResponse, error) {
	return service.IUnattended_setInstallGuestAdditionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getValidationKitIsoPathContext(ctx context.Context, request *IUnattended_getValidationKitIsoPath) (*IUnattended_getValidationKitIsoPathResponse, error) {
	response := new(IUnattended_getValidationKitIsoPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getValidationKitIsoPath(request *IUnattended_getValidationKitIsoPath) (*IUnattended_getValidationKitIsoPathResponse, error) {
	return service.IUnattended_getValidationKitIsoPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setValidationKitIsoPathContext(ctx context.Context, request *IUnattended_setValidationKitIsoPath) (*IUnattended_setValidationKitIsoPathResponse, error) {
	response := new(IUnattended_setValidationKitIsoPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setValidationKitIsoPath(request *IUnattended_setValidationKitIsoPath) (*IUnattended_setValidationKitIsoPathResponse, error) {
	return service.IUnattended_setValidationKitIsoPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getInstallTestExecServiceContext(ctx context.Context, request *IUnattended_getInstallTestExecService) (*IUnattended_getInstallTestExecServiceResponse, error) {
	response := new(IUnattended_getInstallTestExecServiceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getInstallTestExecService(request *IUnattended_getInstallTestExecService) (*IUnattended_getInstallTestExecServiceResponse, error) {
	return service.IUnattended_getInstallTestExecServiceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setInstallTestExecServiceContext(ctx context.Context, request *IUnattended_setInstallTestExecService) (*IUnattended_setInstallTestExecServiceResponse, error) {
	response := new(IUnattended_setInstallTestExecServiceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setInstallTestExecService(request *IUnattended_setInstallTestExecService) (*IUnattended_setInstallTestExecServiceResponse, error) {
	return service.IUnattended_setInstallTestExecServiceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getTimeZoneContext(ctx context.Context, request *IUnattended_getTimeZone) (*IUnattended_getTimeZoneResponse, error) {
	response := new(IUnattended_getTimeZoneResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getTimeZone(request *IUnattended_getTimeZone) (*IUnattended_getTimeZoneResponse, error) {
	return service.IUnattended_getTimeZoneContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setTimeZoneContext(ctx context.Context, request *IUnattended_setTimeZone) (*IUnattended_setTimeZoneResponse, error) {
	response := new(IUnattended_setTimeZoneResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setTimeZone(request *IUnattended_setTimeZone) (*IUnattended_setTimeZoneResponse, error) {
	return service.IUnattended_setTimeZoneContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getLocaleContext(ctx context.Context, request *IUnattended_getLocale) (*IUnattended_getLocaleResponse, error) {
	response := new(IUnattended_getLocaleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getLocale(request *IUnattended_getLocale) (*IUnattended_getLocaleResponse, error) {
	return service.IUnattended_getLocaleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setLocaleContext(ctx context.Context, request *IUnattended_setLocale) (*IUnattended_setLocaleResponse, error) {
	response := new(IUnattended_setLocaleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setLocale(request *IUnattended_setLocale) (*IUnattended_setLocaleResponse, error) {
	return service.IUnattended_setLocaleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getLanguageContext(ctx context.Context, request *IUnattended_getLanguage) (*IUnattended_getLanguageResponse, error) {
	response := new(IUnattended_getLanguageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getLanguage(request *IUnattended_getLanguage) (*IUnattended_getLanguageResponse, error) {
	return service.IUnattended_getLanguageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setLanguageContext(ctx context.Context, request *IUnattended_setLanguage) (*IUnattended_setLanguageResponse, error) {
	response := new(IUnattended_setLanguageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setLanguage(request *IUnattended_setLanguage) (*IUnattended_setLanguageResponse, error) {
	return service.IUnattended_setLanguageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getCountryContext(ctx context.Context, request *IUnattended_getCountry) (*IUnattended_getCountryResponse, error) {
	response := new(IUnattended_getCountryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getCountry(request *IUnattended_getCountry) (*IUnattended_getCountryResponse, error) {
	return service.IUnattended_getCountryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setCountryContext(ctx context.Context, request *IUnattended_setCountry) (*IUnattended_setCountryResponse, error) {
	response := new(IUnattended_setCountryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setCountry(request *IUnattended_setCountry) (*IUnattended_setCountryResponse, error) {
	return service.IUnattended_setCountryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getProxyContext(ctx context.Context, request *IUnattended_getProxy) (*IUnattended_getProxyResponse, error) {
	response := new(IUnattended_getProxyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getProxy(request *IUnattended_getProxy) (*IUnattended_getProxyResponse, error) {
	return service.IUnattended_getProxyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setProxyContext(ctx context.Context, request *IUnattended_setProxy) (*IUnattended_setProxyResponse, error) {
	response := new(IUnattended_setProxyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setProxy(request *IUnattended_setProxy) (*IUnattended_setProxyResponse, error) {
	return service.IUnattended_setProxyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getPackageSelectionAdjustmentsContext(ctx context.Context, request *IUnattended_getPackageSelectionAdjustments) (*IUnattended_getPackageSelectionAdjustmentsResponse, error) {
	response := new(IUnattended_getPackageSelectionAdjustmentsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getPackageSelectionAdjustments(request *IUnattended_getPackageSelectionAdjustments) (*IUnattended_getPackageSelectionAdjustmentsResponse, error) {
	return service.IUnattended_getPackageSelectionAdjustmentsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setPackageSelectionAdjustmentsContext(ctx context.Context, request *IUnattended_setPackageSelectionAdjustments) (*IUnattended_setPackageSelectionAdjustmentsResponse, error) {
	response := new(IUnattended_setPackageSelectionAdjustmentsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setPackageSelectionAdjustments(request *IUnattended_setPackageSelectionAdjustments) (*IUnattended_setPackageSelectionAdjustmentsResponse, error) {
	return service.IUnattended_setPackageSelectionAdjustmentsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getHostnameContext(ctx context.Context, request *IUnattended_getHostname) (*IUnattended_getHostnameResponse, error) {
	response := new(IUnattended_getHostnameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getHostname(request *IUnattended_getHostname) (*IUnattended_getHostnameResponse, error) {
	return service.IUnattended_getHostnameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setHostnameContext(ctx context.Context, request *IUnattended_setHostname) (*IUnattended_setHostnameResponse, error) {
	response := new(IUnattended_setHostnameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setHostname(request *IUnattended_setHostname) (*IUnattended_setHostnameResponse, error) {
	return service.IUnattended_setHostnameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getAuxiliaryBasePathContext(ctx context.Context, request *IUnattended_getAuxiliaryBasePath) (*IUnattended_getAuxiliaryBasePathResponse, error) {
	response := new(IUnattended_getAuxiliaryBasePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getAuxiliaryBasePath(request *IUnattended_getAuxiliaryBasePath) (*IUnattended_getAuxiliaryBasePathResponse, error) {
	return service.IUnattended_getAuxiliaryBasePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setAuxiliaryBasePathContext(ctx context.Context, request *IUnattended_setAuxiliaryBasePath) (*IUnattended_setAuxiliaryBasePathResponse, error) {
	response := new(IUnattended_setAuxiliaryBasePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setAuxiliaryBasePath(request *IUnattended_setAuxiliaryBasePath) (*IUnattended_setAuxiliaryBasePathResponse, error) {
	return service.IUnattended_setAuxiliaryBasePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getImageIndexContext(ctx context.Context, request *IUnattended_getImageIndex) (*IUnattended_getImageIndexResponse, error) {
	response := new(IUnattended_getImageIndexResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getImageIndex(request *IUnattended_getImageIndex) (*IUnattended_getImageIndexResponse, error) {
	return service.IUnattended_getImageIndexContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setImageIndexContext(ctx context.Context, request *IUnattended_setImageIndex) (*IUnattended_setImageIndexResponse, error) {
	response := new(IUnattended_setImageIndexResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setImageIndex(request *IUnattended_setImageIndex) (*IUnattended_setImageIndexResponse, error) {
	return service.IUnattended_setImageIndexContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getScriptTemplatePathContext(ctx context.Context, request *IUnattended_getScriptTemplatePath) (*IUnattended_getScriptTemplatePathResponse, error) {
	response := new(IUnattended_getScriptTemplatePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getScriptTemplatePath(request *IUnattended_getScriptTemplatePath) (*IUnattended_getScriptTemplatePathResponse, error) {
	return service.IUnattended_getScriptTemplatePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setScriptTemplatePathContext(ctx context.Context, request *IUnattended_setScriptTemplatePath) (*IUnattended_setScriptTemplatePathResponse, error) {
	response := new(IUnattended_setScriptTemplatePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setScriptTemplatePath(request *IUnattended_setScriptTemplatePath) (*IUnattended_setScriptTemplatePathResponse, error) {
	return service.IUnattended_setScriptTemplatePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getPostInstallScriptTemplatePathContext(ctx context.Context, request *IUnattended_getPostInstallScriptTemplatePath) (*IUnattended_getPostInstallScriptTemplatePathResponse, error) {
	response := new(IUnattended_getPostInstallScriptTemplatePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getPostInstallScriptTemplatePath(request *IUnattended_getPostInstallScriptTemplatePath) (*IUnattended_getPostInstallScriptTemplatePathResponse, error) {
	return service.IUnattended_getPostInstallScriptTemplatePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setPostInstallScriptTemplatePathContext(ctx context.Context, request *IUnattended_setPostInstallScriptTemplatePath) (*IUnattended_setPostInstallScriptTemplatePathResponse, error) {
	response := new(IUnattended_setPostInstallScriptTemplatePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setPostInstallScriptTemplatePath(request *IUnattended_setPostInstallScriptTemplatePath) (*IUnattended_setPostInstallScriptTemplatePathResponse, error) {
	return service.IUnattended_setPostInstallScriptTemplatePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getPostInstallCommandContext(ctx context.Context, request *IUnattended_getPostInstallCommand) (*IUnattended_getPostInstallCommandResponse, error) {
	response := new(IUnattended_getPostInstallCommandResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getPostInstallCommand(request *IUnattended_getPostInstallCommand) (*IUnattended_getPostInstallCommandResponse, error) {
	return service.IUnattended_getPostInstallCommandContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setPostInstallCommandContext(ctx context.Context, request *IUnattended_setPostInstallCommand) (*IUnattended_setPostInstallCommandResponse, error) {
	response := new(IUnattended_setPostInstallCommandResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setPostInstallCommand(request *IUnattended_setPostInstallCommand) (*IUnattended_setPostInstallCommandResponse, error) {
	return service.IUnattended_setPostInstallCommandContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getExtraInstallKernelParametersContext(ctx context.Context, request *IUnattended_getExtraInstallKernelParameters) (*IUnattended_getExtraInstallKernelParametersResponse, error) {
	response := new(IUnattended_getExtraInstallKernelParametersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getExtraInstallKernelParameters(request *IUnattended_getExtraInstallKernelParameters) (*IUnattended_getExtraInstallKernelParametersResponse, error) {
	return service.IUnattended_getExtraInstallKernelParametersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setExtraInstallKernelParametersContext(ctx context.Context, request *IUnattended_setExtraInstallKernelParameters) (*IUnattended_setExtraInstallKernelParametersResponse, error) {
	response := new(IUnattended_setExtraInstallKernelParametersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setExtraInstallKernelParameters(request *IUnattended_setExtraInstallKernelParameters) (*IUnattended_setExtraInstallKernelParametersResponse, error) {
	return service.IUnattended_setExtraInstallKernelParametersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getDetectedOSTypeIdContext(ctx context.Context, request *IUnattended_getDetectedOSTypeId) (*IUnattended_getDetectedOSTypeIdResponse, error) {
	response := new(IUnattended_getDetectedOSTypeIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getDetectedOSTypeId(request *IUnattended_getDetectedOSTypeId) (*IUnattended_getDetectedOSTypeIdResponse, error) {
	return service.IUnattended_getDetectedOSTypeIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getDetectedOSVersionContext(ctx context.Context, request *IUnattended_getDetectedOSVersion) (*IUnattended_getDetectedOSVersionResponse, error) {
	response := new(IUnattended_getDetectedOSVersionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getDetectedOSVersion(request *IUnattended_getDetectedOSVersion) (*IUnattended_getDetectedOSVersionResponse, error) {
	return service.IUnattended_getDetectedOSVersionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getDetectedOSFlavorContext(ctx context.Context, request *IUnattended_getDetectedOSFlavor) (*IUnattended_getDetectedOSFlavorResponse, error) {
	response := new(IUnattended_getDetectedOSFlavorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getDetectedOSFlavor(request *IUnattended_getDetectedOSFlavor) (*IUnattended_getDetectedOSFlavorResponse, error) {
	return service.IUnattended_getDetectedOSFlavorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getDetectedOSLanguagesContext(ctx context.Context, request *IUnattended_getDetectedOSLanguages) (*IUnattended_getDetectedOSLanguagesResponse, error) {
	response := new(IUnattended_getDetectedOSLanguagesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getDetectedOSLanguages(request *IUnattended_getDetectedOSLanguages) (*IUnattended_getDetectedOSLanguagesResponse, error) {
	return service.IUnattended_getDetectedOSLanguagesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getDetectedOSHintsContext(ctx context.Context, request *IUnattended_getDetectedOSHints) (*IUnattended_getDetectedOSHintsResponse, error) {
	response := new(IUnattended_getDetectedOSHintsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getDetectedOSHints(request *IUnattended_getDetectedOSHints) (*IUnattended_getDetectedOSHintsResponse, error) {
	return service.IUnattended_getDetectedOSHintsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getDetectedImageNamesContext(ctx context.Context, request *IUnattended_getDetectedImageNames) (*IUnattended_getDetectedImageNamesResponse, error) {
	response := new(IUnattended_getDetectedImageNamesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getDetectedImageNames(request *IUnattended_getDetectedImageNames) (*IUnattended_getDetectedImageNamesResponse, error) {
	return service.IUnattended_getDetectedImageNamesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getDetectedImageIndicesContext(ctx context.Context, request *IUnattended_getDetectedImageIndices) (*IUnattended_getDetectedImageIndicesResponse, error) {
	response := new(IUnattended_getDetectedImageIndicesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getDetectedImageIndices(request *IUnattended_getDetectedImageIndices) (*IUnattended_getDetectedImageIndicesResponse, error) {
	return service.IUnattended_getDetectedImageIndicesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getIsUnattendedInstallSupportedContext(ctx context.Context, request *IUnattended_getIsUnattendedInstallSupported) (*IUnattended_getIsUnattendedInstallSupportedResponse, error) {
	response := new(IUnattended_getIsUnattendedInstallSupportedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getIsUnattendedInstallSupported(request *IUnattended_getIsUnattendedInstallSupported) (*IUnattended_getIsUnattendedInstallSupportedResponse, error) {
	return service.IUnattended_getIsUnattendedInstallSupportedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_getAvoidUpdatesOverNetworkContext(ctx context.Context, request *IUnattended_getAvoidUpdatesOverNetwork) (*IUnattended_getAvoidUpdatesOverNetworkResponse, error) {
	response := new(IUnattended_getAvoidUpdatesOverNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_getAvoidUpdatesOverNetwork(request *IUnattended_getAvoidUpdatesOverNetwork) (*IUnattended_getAvoidUpdatesOverNetworkResponse, error) {
	return service.IUnattended_getAvoidUpdatesOverNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_setAvoidUpdatesOverNetworkContext(ctx context.Context, request *IUnattended_setAvoidUpdatesOverNetwork) (*IUnattended_setAvoidUpdatesOverNetworkResponse, error) {
	response := new(IUnattended_setAvoidUpdatesOverNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_setAvoidUpdatesOverNetwork(request *IUnattended_setAvoidUpdatesOverNetwork) (*IUnattended_setAvoidUpdatesOverNetworkResponse, error) {
	return service.IUnattended_setAvoidUpdatesOverNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_detectIsoOSContext(ctx context.Context, request *IUnattended_detectIsoOS) (*IUnattended_detectIsoOSResponse, error) {
	response := new(IUnattended_detectIsoOSResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_detectIsoOS(request *IUnattended_detectIsoOS) (*IUnattended_detectIsoOSResponse, error) {
	return service.IUnattended_detectIsoOSContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_prepareContext(ctx context.Context, request *IUnattended_prepare) (*IUnattended_prepareResponse, error) {
	response := new(IUnattended_prepareResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_prepare(request *IUnattended_prepare) (*IUnattended_prepareResponse, error) {
	return service.IUnattended_prepareContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_constructMediaContext(ctx context.Context, request *IUnattended_constructMedia) (*IUnattended_constructMediaResponse, error) {
	response := new(IUnattended_constructMediaResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_constructMedia(request *IUnattended_constructMedia) (*IUnattended_constructMediaResponse, error) {
	return service.IUnattended_constructMediaContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_reconfigureVMContext(ctx context.Context, request *IUnattended_reconfigureVM) (*IUnattended_reconfigureVMResponse, error) {
	response := new(IUnattended_reconfigureVMResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_reconfigureVM(request *IUnattended_reconfigureVM) (*IUnattended_reconfigureVMResponse, error) {
	return service.IUnattended_reconfigureVMContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUnattended_doneContext(ctx context.Context, request *IUnattended_done) (*IUnattended_doneResponse, error) {
	response := new(IUnattended_doneResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUnattended_done(request *IUnattended_done) (*IUnattended_doneResponse, error) {
	return service.IUnattended_doneContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGraphicsAdapter_getGraphicsControllerTypeContext(ctx context.Context, request *IGraphicsAdapter_getGraphicsControllerType) (*IGraphicsAdapter_getGraphicsControllerTypeResponse, error) {
	response := new(IGraphicsAdapter_getGraphicsControllerTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGraphicsAdapter_getGraphicsControllerType(request *IGraphicsAdapter_getGraphicsControllerType) (*IGraphicsAdapter_getGraphicsControllerTypeResponse, error) {
	return service.IGraphicsAdapter_getGraphicsControllerTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGraphicsAdapter_setGraphicsControllerTypeContext(ctx context.Context, request *IGraphicsAdapter_setGraphicsControllerType) (*IGraphicsAdapter_setGraphicsControllerTypeResponse, error) {
	response := new(IGraphicsAdapter_setGraphicsControllerTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGraphicsAdapter_setGraphicsControllerType(request *IGraphicsAdapter_setGraphicsControllerType) (*IGraphicsAdapter_setGraphicsControllerTypeResponse, error) {
	return service.IGraphicsAdapter_setGraphicsControllerTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGraphicsAdapter_getVRAMSizeContext(ctx context.Context, request *IGraphicsAdapter_getVRAMSize) (*IGraphicsAdapter_getVRAMSizeResponse, error) {
	response := new(IGraphicsAdapter_getVRAMSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGraphicsAdapter_getVRAMSize(request *IGraphicsAdapter_getVRAMSize) (*IGraphicsAdapter_getVRAMSizeResponse, error) {
	return service.IGraphicsAdapter_getVRAMSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGraphicsAdapter_setVRAMSizeContext(ctx context.Context, request *IGraphicsAdapter_setVRAMSize) (*IGraphicsAdapter_setVRAMSizeResponse, error) {
	response := new(IGraphicsAdapter_setVRAMSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGraphicsAdapter_setVRAMSize(request *IGraphicsAdapter_setVRAMSize) (*IGraphicsAdapter_setVRAMSizeResponse, error) {
	return service.IGraphicsAdapter_setVRAMSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGraphicsAdapter_getAccelerate3DEnabledContext(ctx context.Context, request *IGraphicsAdapter_getAccelerate3DEnabled) (*IGraphicsAdapter_getAccelerate3DEnabledResponse, error) {
	response := new(IGraphicsAdapter_getAccelerate3DEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGraphicsAdapter_getAccelerate3DEnabled(request *IGraphicsAdapter_getAccelerate3DEnabled) (*IGraphicsAdapter_getAccelerate3DEnabledResponse, error) {
	return service.IGraphicsAdapter_getAccelerate3DEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGraphicsAdapter_setAccelerate3DEnabledContext(ctx context.Context, request *IGraphicsAdapter_setAccelerate3DEnabled) (*IGraphicsAdapter_setAccelerate3DEnabledResponse, error) {
	response := new(IGraphicsAdapter_setAccelerate3DEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGraphicsAdapter_setAccelerate3DEnabled(request *IGraphicsAdapter_setAccelerate3DEnabled) (*IGraphicsAdapter_setAccelerate3DEnabledResponse, error) {
	return service.IGraphicsAdapter_setAccelerate3DEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGraphicsAdapter_getAccelerate2DVideoEnabledContext(ctx context.Context, request *IGraphicsAdapter_getAccelerate2DVideoEnabled) (*IGraphicsAdapter_getAccelerate2DVideoEnabledResponse, error) {
	response := new(IGraphicsAdapter_getAccelerate2DVideoEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGraphicsAdapter_getAccelerate2DVideoEnabled(request *IGraphicsAdapter_getAccelerate2DVideoEnabled) (*IGraphicsAdapter_getAccelerate2DVideoEnabledResponse, error) {
	return service.IGraphicsAdapter_getAccelerate2DVideoEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGraphicsAdapter_setAccelerate2DVideoEnabledContext(ctx context.Context, request *IGraphicsAdapter_setAccelerate2DVideoEnabled) (*IGraphicsAdapter_setAccelerate2DVideoEnabledResponse, error) {
	response := new(IGraphicsAdapter_setAccelerate2DVideoEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGraphicsAdapter_setAccelerate2DVideoEnabled(request *IGraphicsAdapter_setAccelerate2DVideoEnabled) (*IGraphicsAdapter_setAccelerate2DVideoEnabledResponse, error) {
	return service.IGraphicsAdapter_setAccelerate2DVideoEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGraphicsAdapter_getMonitorCountContext(ctx context.Context, request *IGraphicsAdapter_getMonitorCount) (*IGraphicsAdapter_getMonitorCountResponse, error) {
	response := new(IGraphicsAdapter_getMonitorCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGraphicsAdapter_getMonitorCount(request *IGraphicsAdapter_getMonitorCount) (*IGraphicsAdapter_getMonitorCountResponse, error) {
	return service.IGraphicsAdapter_getMonitorCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGraphicsAdapter_setMonitorCountContext(ctx context.Context, request *IGraphicsAdapter_setMonitorCount) (*IGraphicsAdapter_setMonitorCountResponse, error) {
	response := new(IGraphicsAdapter_setMonitorCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGraphicsAdapter_setMonitorCount(request *IGraphicsAdapter_setMonitorCount) (*IGraphicsAdapter_setMonitorCountResponse, error) {
	return service.IGraphicsAdapter_setMonitorCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_getLogoFadeInContext(ctx context.Context, request *IBIOSSettings_getLogoFadeIn) (*IBIOSSettings_getLogoFadeInResponse, error) {
	response := new(IBIOSSettings_getLogoFadeInResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_getLogoFadeIn(request *IBIOSSettings_getLogoFadeIn) (*IBIOSSettings_getLogoFadeInResponse, error) {
	return service.IBIOSSettings_getLogoFadeInContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_setLogoFadeInContext(ctx context.Context, request *IBIOSSettings_setLogoFadeIn) (*IBIOSSettings_setLogoFadeInResponse, error) {
	response := new(IBIOSSettings_setLogoFadeInResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_setLogoFadeIn(request *IBIOSSettings_setLogoFadeIn) (*IBIOSSettings_setLogoFadeInResponse, error) {
	return service.IBIOSSettings_setLogoFadeInContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_getLogoFadeOutContext(ctx context.Context, request *IBIOSSettings_getLogoFadeOut) (*IBIOSSettings_getLogoFadeOutResponse, error) {
	response := new(IBIOSSettings_getLogoFadeOutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_getLogoFadeOut(request *IBIOSSettings_getLogoFadeOut) (*IBIOSSettings_getLogoFadeOutResponse, error) {
	return service.IBIOSSettings_getLogoFadeOutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_setLogoFadeOutContext(ctx context.Context, request *IBIOSSettings_setLogoFadeOut) (*IBIOSSettings_setLogoFadeOutResponse, error) {
	response := new(IBIOSSettings_setLogoFadeOutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_setLogoFadeOut(request *IBIOSSettings_setLogoFadeOut) (*IBIOSSettings_setLogoFadeOutResponse, error) {
	return service.IBIOSSettings_setLogoFadeOutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_getLogoDisplayTimeContext(ctx context.Context, request *IBIOSSettings_getLogoDisplayTime) (*IBIOSSettings_getLogoDisplayTimeResponse, error) {
	response := new(IBIOSSettings_getLogoDisplayTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_getLogoDisplayTime(request *IBIOSSettings_getLogoDisplayTime) (*IBIOSSettings_getLogoDisplayTimeResponse, error) {
	return service.IBIOSSettings_getLogoDisplayTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_setLogoDisplayTimeContext(ctx context.Context, request *IBIOSSettings_setLogoDisplayTime) (*IBIOSSettings_setLogoDisplayTimeResponse, error) {
	response := new(IBIOSSettings_setLogoDisplayTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_setLogoDisplayTime(request *IBIOSSettings_setLogoDisplayTime) (*IBIOSSettings_setLogoDisplayTimeResponse, error) {
	return service.IBIOSSettings_setLogoDisplayTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_getLogoImagePathContext(ctx context.Context, request *IBIOSSettings_getLogoImagePath) (*IBIOSSettings_getLogoImagePathResponse, error) {
	response := new(IBIOSSettings_getLogoImagePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_getLogoImagePath(request *IBIOSSettings_getLogoImagePath) (*IBIOSSettings_getLogoImagePathResponse, error) {
	return service.IBIOSSettings_getLogoImagePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_setLogoImagePathContext(ctx context.Context, request *IBIOSSettings_setLogoImagePath) (*IBIOSSettings_setLogoImagePathResponse, error) {
	response := new(IBIOSSettings_setLogoImagePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_setLogoImagePath(request *IBIOSSettings_setLogoImagePath) (*IBIOSSettings_setLogoImagePathResponse, error) {
	return service.IBIOSSettings_setLogoImagePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_getBootMenuModeContext(ctx context.Context, request *IBIOSSettings_getBootMenuMode) (*IBIOSSettings_getBootMenuModeResponse, error) {
	response := new(IBIOSSettings_getBootMenuModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_getBootMenuMode(request *IBIOSSettings_getBootMenuMode) (*IBIOSSettings_getBootMenuModeResponse, error) {
	return service.IBIOSSettings_getBootMenuModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_setBootMenuModeContext(ctx context.Context, request *IBIOSSettings_setBootMenuMode) (*IBIOSSettings_setBootMenuModeResponse, error) {
	response := new(IBIOSSettings_setBootMenuModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_setBootMenuMode(request *IBIOSSettings_setBootMenuMode) (*IBIOSSettings_setBootMenuModeResponse, error) {
	return service.IBIOSSettings_setBootMenuModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_getACPIEnabledContext(ctx context.Context, request *IBIOSSettings_getACPIEnabled) (*IBIOSSettings_getACPIEnabledResponse, error) {
	response := new(IBIOSSettings_getACPIEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_getACPIEnabled(request *IBIOSSettings_getACPIEnabled) (*IBIOSSettings_getACPIEnabledResponse, error) {
	return service.IBIOSSettings_getACPIEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_setACPIEnabledContext(ctx context.Context, request *IBIOSSettings_setACPIEnabled) (*IBIOSSettings_setACPIEnabledResponse, error) {
	response := new(IBIOSSettings_setACPIEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_setACPIEnabled(request *IBIOSSettings_setACPIEnabled) (*IBIOSSettings_setACPIEnabledResponse, error) {
	return service.IBIOSSettings_setACPIEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_getIOAPICEnabledContext(ctx context.Context, request *IBIOSSettings_getIOAPICEnabled) (*IBIOSSettings_getIOAPICEnabledResponse, error) {
	response := new(IBIOSSettings_getIOAPICEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_getIOAPICEnabled(request *IBIOSSettings_getIOAPICEnabled) (*IBIOSSettings_getIOAPICEnabledResponse, error) {
	return service.IBIOSSettings_getIOAPICEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_setIOAPICEnabledContext(ctx context.Context, request *IBIOSSettings_setIOAPICEnabled) (*IBIOSSettings_setIOAPICEnabledResponse, error) {
	response := new(IBIOSSettings_setIOAPICEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_setIOAPICEnabled(request *IBIOSSettings_setIOAPICEnabled) (*IBIOSSettings_setIOAPICEnabledResponse, error) {
	return service.IBIOSSettings_setIOAPICEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_getAPICModeContext(ctx context.Context, request *IBIOSSettings_getAPICMode) (*IBIOSSettings_getAPICModeResponse, error) {
	response := new(IBIOSSettings_getAPICModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_getAPICMode(request *IBIOSSettings_getAPICMode) (*IBIOSSettings_getAPICModeResponse, error) {
	return service.IBIOSSettings_getAPICModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_setAPICModeContext(ctx context.Context, request *IBIOSSettings_setAPICMode) (*IBIOSSettings_setAPICModeResponse, error) {
	response := new(IBIOSSettings_setAPICModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_setAPICMode(request *IBIOSSettings_setAPICMode) (*IBIOSSettings_setAPICModeResponse, error) {
	return service.IBIOSSettings_setAPICModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_getTimeOffsetContext(ctx context.Context, request *IBIOSSettings_getTimeOffset) (*IBIOSSettings_getTimeOffsetResponse, error) {
	response := new(IBIOSSettings_getTimeOffsetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_getTimeOffset(request *IBIOSSettings_getTimeOffset) (*IBIOSSettings_getTimeOffsetResponse, error) {
	return service.IBIOSSettings_getTimeOffsetContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_setTimeOffsetContext(ctx context.Context, request *IBIOSSettings_setTimeOffset) (*IBIOSSettings_setTimeOffsetResponse, error) {
	response := new(IBIOSSettings_setTimeOffsetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_setTimeOffset(request *IBIOSSettings_setTimeOffset) (*IBIOSSettings_setTimeOffsetResponse, error) {
	return service.IBIOSSettings_setTimeOffsetContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_getPXEDebugEnabledContext(ctx context.Context, request *IBIOSSettings_getPXEDebugEnabled) (*IBIOSSettings_getPXEDebugEnabledResponse, error) {
	response := new(IBIOSSettings_getPXEDebugEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_getPXEDebugEnabled(request *IBIOSSettings_getPXEDebugEnabled) (*IBIOSSettings_getPXEDebugEnabledResponse, error) {
	return service.IBIOSSettings_getPXEDebugEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_setPXEDebugEnabledContext(ctx context.Context, request *IBIOSSettings_setPXEDebugEnabled) (*IBIOSSettings_setPXEDebugEnabledResponse, error) {
	response := new(IBIOSSettings_setPXEDebugEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_setPXEDebugEnabled(request *IBIOSSettings_setPXEDebugEnabled) (*IBIOSSettings_setPXEDebugEnabledResponse, error) {
	return service.IBIOSSettings_setPXEDebugEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_getSMBIOSUuidLittleEndianContext(ctx context.Context, request *IBIOSSettings_getSMBIOSUuidLittleEndian) (*IBIOSSettings_getSMBIOSUuidLittleEndianResponse, error) {
	response := new(IBIOSSettings_getSMBIOSUuidLittleEndianResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_getSMBIOSUuidLittleEndian(request *IBIOSSettings_getSMBIOSUuidLittleEndian) (*IBIOSSettings_getSMBIOSUuidLittleEndianResponse, error) {
	return service.IBIOSSettings_getSMBIOSUuidLittleEndianContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBIOSSettings_setSMBIOSUuidLittleEndianContext(ctx context.Context, request *IBIOSSettings_setSMBIOSUuidLittleEndian) (*IBIOSSettings_setSMBIOSUuidLittleEndianResponse, error) {
	response := new(IBIOSSettings_setSMBIOSUuidLittleEndianResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBIOSSettings_setSMBIOSUuidLittleEndian(request *IBIOSSettings_setSMBIOSUuidLittleEndian) (*IBIOSSettings_setSMBIOSUuidLittleEndianResponse, error) {
	return service.IBIOSSettings_setSMBIOSUuidLittleEndianContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ITrustedPlatformModule_getTypeContext(ctx context.Context, request *ITrustedPlatformModule_getType) (*ITrustedPlatformModule_getTypeResponse, error) {
	response := new(ITrustedPlatformModule_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ITrustedPlatformModule_getType(request *ITrustedPlatformModule_getType) (*ITrustedPlatformModule_getTypeResponse, error) {
	return service.ITrustedPlatformModule_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ITrustedPlatformModule_setTypeContext(ctx context.Context, request *ITrustedPlatformModule_setType) (*ITrustedPlatformModule_setTypeResponse, error) {
	response := new(ITrustedPlatformModule_setTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ITrustedPlatformModule_setType(request *ITrustedPlatformModule_setType) (*ITrustedPlatformModule_setTypeResponse, error) {
	return service.ITrustedPlatformModule_setTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ITrustedPlatformModule_getLocationContext(ctx context.Context, request *ITrustedPlatformModule_getLocation) (*ITrustedPlatformModule_getLocationResponse, error) {
	response := new(ITrustedPlatformModule_getLocationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ITrustedPlatformModule_getLocation(request *ITrustedPlatformModule_getLocation) (*ITrustedPlatformModule_getLocationResponse, error) {
	return service.ITrustedPlatformModule_getLocationContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ITrustedPlatformModule_setLocationContext(ctx context.Context, request *ITrustedPlatformModule_setLocation) (*ITrustedPlatformModule_setLocationResponse, error) {
	response := new(ITrustedPlatformModule_setLocationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ITrustedPlatformModule_setLocation(request *ITrustedPlatformModule_setLocation) (*ITrustedPlatformModule_setLocationResponse, error) {
	return service.ITrustedPlatformModule_setLocationContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getIdContext(ctx context.Context, request *IRecordingScreenSettings_getId) (*IRecordingScreenSettings_getIdResponse, error) {
	response := new(IRecordingScreenSettings_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getId(request *IRecordingScreenSettings_getId) (*IRecordingScreenSettings_getIdResponse, error) {
	return service.IRecordingScreenSettings_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getEnabledContext(ctx context.Context, request *IRecordingScreenSettings_getEnabled) (*IRecordingScreenSettings_getEnabledResponse, error) {
	response := new(IRecordingScreenSettings_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getEnabled(request *IRecordingScreenSettings_getEnabled) (*IRecordingScreenSettings_getEnabledResponse, error) {
	return service.IRecordingScreenSettings_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setEnabledContext(ctx context.Context, request *IRecordingScreenSettings_setEnabled) (*IRecordingScreenSettings_setEnabledResponse, error) {
	response := new(IRecordingScreenSettings_setEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setEnabled(request *IRecordingScreenSettings_setEnabled) (*IRecordingScreenSettings_setEnabledResponse, error) {
	return service.IRecordingScreenSettings_setEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getFeaturesContext(ctx context.Context, request *IRecordingScreenSettings_getFeatures) (*IRecordingScreenSettings_getFeaturesResponse, error) {
	response := new(IRecordingScreenSettings_getFeaturesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getFeatures(request *IRecordingScreenSettings_getFeatures) (*IRecordingScreenSettings_getFeaturesResponse, error) {
	return service.IRecordingScreenSettings_getFeaturesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setFeaturesContext(ctx context.Context, request *IRecordingScreenSettings_setFeatures) (*IRecordingScreenSettings_setFeaturesResponse, error) {
	response := new(IRecordingScreenSettings_setFeaturesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setFeatures(request *IRecordingScreenSettings_setFeatures) (*IRecordingScreenSettings_setFeaturesResponse, error) {
	return service.IRecordingScreenSettings_setFeaturesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getDestinationContext(ctx context.Context, request *IRecordingScreenSettings_getDestination) (*IRecordingScreenSettings_getDestinationResponse, error) {
	response := new(IRecordingScreenSettings_getDestinationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getDestination(request *IRecordingScreenSettings_getDestination) (*IRecordingScreenSettings_getDestinationResponse, error) {
	return service.IRecordingScreenSettings_getDestinationContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setDestinationContext(ctx context.Context, request *IRecordingScreenSettings_setDestination) (*IRecordingScreenSettings_setDestinationResponse, error) {
	response := new(IRecordingScreenSettings_setDestinationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setDestination(request *IRecordingScreenSettings_setDestination) (*IRecordingScreenSettings_setDestinationResponse, error) {
	return service.IRecordingScreenSettings_setDestinationContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getFilenameContext(ctx context.Context, request *IRecordingScreenSettings_getFilename) (*IRecordingScreenSettings_getFilenameResponse, error) {
	response := new(IRecordingScreenSettings_getFilenameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getFilename(request *IRecordingScreenSettings_getFilename) (*IRecordingScreenSettings_getFilenameResponse, error) {
	return service.IRecordingScreenSettings_getFilenameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setFilenameContext(ctx context.Context, request *IRecordingScreenSettings_setFilename) (*IRecordingScreenSettings_setFilenameResponse, error) {
	response := new(IRecordingScreenSettings_setFilenameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setFilename(request *IRecordingScreenSettings_setFilename) (*IRecordingScreenSettings_setFilenameResponse, error) {
	return service.IRecordingScreenSettings_setFilenameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getMaxTimeContext(ctx context.Context, request *IRecordingScreenSettings_getMaxTime) (*IRecordingScreenSettings_getMaxTimeResponse, error) {
	response := new(IRecordingScreenSettings_getMaxTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getMaxTime(request *IRecordingScreenSettings_getMaxTime) (*IRecordingScreenSettings_getMaxTimeResponse, error) {
	return service.IRecordingScreenSettings_getMaxTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setMaxTimeContext(ctx context.Context, request *IRecordingScreenSettings_setMaxTime) (*IRecordingScreenSettings_setMaxTimeResponse, error) {
	response := new(IRecordingScreenSettings_setMaxTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setMaxTime(request *IRecordingScreenSettings_setMaxTime) (*IRecordingScreenSettings_setMaxTimeResponse, error) {
	return service.IRecordingScreenSettings_setMaxTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getMaxFileSizeContext(ctx context.Context, request *IRecordingScreenSettings_getMaxFileSize) (*IRecordingScreenSettings_getMaxFileSizeResponse, error) {
	response := new(IRecordingScreenSettings_getMaxFileSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getMaxFileSize(request *IRecordingScreenSettings_getMaxFileSize) (*IRecordingScreenSettings_getMaxFileSizeResponse, error) {
	return service.IRecordingScreenSettings_getMaxFileSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setMaxFileSizeContext(ctx context.Context, request *IRecordingScreenSettings_setMaxFileSize) (*IRecordingScreenSettings_setMaxFileSizeResponse, error) {
	response := new(IRecordingScreenSettings_setMaxFileSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setMaxFileSize(request *IRecordingScreenSettings_setMaxFileSize) (*IRecordingScreenSettings_setMaxFileSizeResponse, error) {
	return service.IRecordingScreenSettings_setMaxFileSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getOptionsContext(ctx context.Context, request *IRecordingScreenSettings_getOptions) (*IRecordingScreenSettings_getOptionsResponse, error) {
	response := new(IRecordingScreenSettings_getOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getOptions(request *IRecordingScreenSettings_getOptions) (*IRecordingScreenSettings_getOptionsResponse, error) {
	return service.IRecordingScreenSettings_getOptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setOptionsContext(ctx context.Context, request *IRecordingScreenSettings_setOptions) (*IRecordingScreenSettings_setOptionsResponse, error) {
	response := new(IRecordingScreenSettings_setOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setOptions(request *IRecordingScreenSettings_setOptions) (*IRecordingScreenSettings_setOptionsResponse, error) {
	return service.IRecordingScreenSettings_setOptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getAudioCodecContext(ctx context.Context, request *IRecordingScreenSettings_getAudioCodec) (*IRecordingScreenSettings_getAudioCodecResponse, error) {
	response := new(IRecordingScreenSettings_getAudioCodecResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getAudioCodec(request *IRecordingScreenSettings_getAudioCodec) (*IRecordingScreenSettings_getAudioCodecResponse, error) {
	return service.IRecordingScreenSettings_getAudioCodecContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setAudioCodecContext(ctx context.Context, request *IRecordingScreenSettings_setAudioCodec) (*IRecordingScreenSettings_setAudioCodecResponse, error) {
	response := new(IRecordingScreenSettings_setAudioCodecResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setAudioCodec(request *IRecordingScreenSettings_setAudioCodec) (*IRecordingScreenSettings_setAudioCodecResponse, error) {
	return service.IRecordingScreenSettings_setAudioCodecContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getAudioRateControlModeContext(ctx context.Context, request *IRecordingScreenSettings_getAudioRateControlMode) (*IRecordingScreenSettings_getAudioRateControlModeResponse, error) {
	response := new(IRecordingScreenSettings_getAudioRateControlModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getAudioRateControlMode(request *IRecordingScreenSettings_getAudioRateControlMode) (*IRecordingScreenSettings_getAudioRateControlModeResponse, error) {
	return service.IRecordingScreenSettings_getAudioRateControlModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setAudioRateControlModeContext(ctx context.Context, request *IRecordingScreenSettings_setAudioRateControlMode) (*IRecordingScreenSettings_setAudioRateControlModeResponse, error) {
	response := new(IRecordingScreenSettings_setAudioRateControlModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setAudioRateControlMode(request *IRecordingScreenSettings_setAudioRateControlMode) (*IRecordingScreenSettings_setAudioRateControlModeResponse, error) {
	return service.IRecordingScreenSettings_setAudioRateControlModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getAudioDeadlineContext(ctx context.Context, request *IRecordingScreenSettings_getAudioDeadline) (*IRecordingScreenSettings_getAudioDeadlineResponse, error) {
	response := new(IRecordingScreenSettings_getAudioDeadlineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getAudioDeadline(request *IRecordingScreenSettings_getAudioDeadline) (*IRecordingScreenSettings_getAudioDeadlineResponse, error) {
	return service.IRecordingScreenSettings_getAudioDeadlineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setAudioDeadlineContext(ctx context.Context, request *IRecordingScreenSettings_setAudioDeadline) (*IRecordingScreenSettings_setAudioDeadlineResponse, error) {
	response := new(IRecordingScreenSettings_setAudioDeadlineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setAudioDeadline(request *IRecordingScreenSettings_setAudioDeadline) (*IRecordingScreenSettings_setAudioDeadlineResponse, error) {
	return service.IRecordingScreenSettings_setAudioDeadlineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getAudioHzContext(ctx context.Context, request *IRecordingScreenSettings_getAudioHz) (*IRecordingScreenSettings_getAudioHzResponse, error) {
	response := new(IRecordingScreenSettings_getAudioHzResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getAudioHz(request *IRecordingScreenSettings_getAudioHz) (*IRecordingScreenSettings_getAudioHzResponse, error) {
	return service.IRecordingScreenSettings_getAudioHzContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setAudioHzContext(ctx context.Context, request *IRecordingScreenSettings_setAudioHz) (*IRecordingScreenSettings_setAudioHzResponse, error) {
	response := new(IRecordingScreenSettings_setAudioHzResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setAudioHz(request *IRecordingScreenSettings_setAudioHz) (*IRecordingScreenSettings_setAudioHzResponse, error) {
	return service.IRecordingScreenSettings_setAudioHzContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getAudioBitsContext(ctx context.Context, request *IRecordingScreenSettings_getAudioBits) (*IRecordingScreenSettings_getAudioBitsResponse, error) {
	response := new(IRecordingScreenSettings_getAudioBitsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getAudioBits(request *IRecordingScreenSettings_getAudioBits) (*IRecordingScreenSettings_getAudioBitsResponse, error) {
	return service.IRecordingScreenSettings_getAudioBitsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setAudioBitsContext(ctx context.Context, request *IRecordingScreenSettings_setAudioBits) (*IRecordingScreenSettings_setAudioBitsResponse, error) {
	response := new(IRecordingScreenSettings_setAudioBitsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setAudioBits(request *IRecordingScreenSettings_setAudioBits) (*IRecordingScreenSettings_setAudioBitsResponse, error) {
	return service.IRecordingScreenSettings_setAudioBitsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getAudioChannelsContext(ctx context.Context, request *IRecordingScreenSettings_getAudioChannels) (*IRecordingScreenSettings_getAudioChannelsResponse, error) {
	response := new(IRecordingScreenSettings_getAudioChannelsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getAudioChannels(request *IRecordingScreenSettings_getAudioChannels) (*IRecordingScreenSettings_getAudioChannelsResponse, error) {
	return service.IRecordingScreenSettings_getAudioChannelsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setAudioChannelsContext(ctx context.Context, request *IRecordingScreenSettings_setAudioChannels) (*IRecordingScreenSettings_setAudioChannelsResponse, error) {
	response := new(IRecordingScreenSettings_setAudioChannelsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setAudioChannels(request *IRecordingScreenSettings_setAudioChannels) (*IRecordingScreenSettings_setAudioChannelsResponse, error) {
	return service.IRecordingScreenSettings_setAudioChannelsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoCodecContext(ctx context.Context, request *IRecordingScreenSettings_getVideoCodec) (*IRecordingScreenSettings_getVideoCodecResponse, error) {
	response := new(IRecordingScreenSettings_getVideoCodecResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoCodec(request *IRecordingScreenSettings_getVideoCodec) (*IRecordingScreenSettings_getVideoCodecResponse, error) {
	return service.IRecordingScreenSettings_getVideoCodecContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoCodecContext(ctx context.Context, request *IRecordingScreenSettings_setVideoCodec) (*IRecordingScreenSettings_setVideoCodecResponse, error) {
	response := new(IRecordingScreenSettings_setVideoCodecResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoCodec(request *IRecordingScreenSettings_setVideoCodec) (*IRecordingScreenSettings_setVideoCodecResponse, error) {
	return service.IRecordingScreenSettings_setVideoCodecContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoDeadlineContext(ctx context.Context, request *IRecordingScreenSettings_getVideoDeadline) (*IRecordingScreenSettings_getVideoDeadlineResponse, error) {
	response := new(IRecordingScreenSettings_getVideoDeadlineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoDeadline(request *IRecordingScreenSettings_getVideoDeadline) (*IRecordingScreenSettings_getVideoDeadlineResponse, error) {
	return service.IRecordingScreenSettings_getVideoDeadlineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoDeadlineContext(ctx context.Context, request *IRecordingScreenSettings_setVideoDeadline) (*IRecordingScreenSettings_setVideoDeadlineResponse, error) {
	response := new(IRecordingScreenSettings_setVideoDeadlineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoDeadline(request *IRecordingScreenSettings_setVideoDeadline) (*IRecordingScreenSettings_setVideoDeadlineResponse, error) {
	return service.IRecordingScreenSettings_setVideoDeadlineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoWidthContext(ctx context.Context, request *IRecordingScreenSettings_getVideoWidth) (*IRecordingScreenSettings_getVideoWidthResponse, error) {
	response := new(IRecordingScreenSettings_getVideoWidthResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoWidth(request *IRecordingScreenSettings_getVideoWidth) (*IRecordingScreenSettings_getVideoWidthResponse, error) {
	return service.IRecordingScreenSettings_getVideoWidthContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoWidthContext(ctx context.Context, request *IRecordingScreenSettings_setVideoWidth) (*IRecordingScreenSettings_setVideoWidthResponse, error) {
	response := new(IRecordingScreenSettings_setVideoWidthResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoWidth(request *IRecordingScreenSettings_setVideoWidth) (*IRecordingScreenSettings_setVideoWidthResponse, error) {
	return service.IRecordingScreenSettings_setVideoWidthContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoHeightContext(ctx context.Context, request *IRecordingScreenSettings_getVideoHeight) (*IRecordingScreenSettings_getVideoHeightResponse, error) {
	response := new(IRecordingScreenSettings_getVideoHeightResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoHeight(request *IRecordingScreenSettings_getVideoHeight) (*IRecordingScreenSettings_getVideoHeightResponse, error) {
	return service.IRecordingScreenSettings_getVideoHeightContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoHeightContext(ctx context.Context, request *IRecordingScreenSettings_setVideoHeight) (*IRecordingScreenSettings_setVideoHeightResponse, error) {
	response := new(IRecordingScreenSettings_setVideoHeightResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoHeight(request *IRecordingScreenSettings_setVideoHeight) (*IRecordingScreenSettings_setVideoHeightResponse, error) {
	return service.IRecordingScreenSettings_setVideoHeightContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoRateContext(ctx context.Context, request *IRecordingScreenSettings_getVideoRate) (*IRecordingScreenSettings_getVideoRateResponse, error) {
	response := new(IRecordingScreenSettings_getVideoRateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoRate(request *IRecordingScreenSettings_getVideoRate) (*IRecordingScreenSettings_getVideoRateResponse, error) {
	return service.IRecordingScreenSettings_getVideoRateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoRateContext(ctx context.Context, request *IRecordingScreenSettings_setVideoRate) (*IRecordingScreenSettings_setVideoRateResponse, error) {
	response := new(IRecordingScreenSettings_setVideoRateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoRate(request *IRecordingScreenSettings_setVideoRate) (*IRecordingScreenSettings_setVideoRateResponse, error) {
	return service.IRecordingScreenSettings_setVideoRateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoRateControlModeContext(ctx context.Context, request *IRecordingScreenSettings_getVideoRateControlMode) (*IRecordingScreenSettings_getVideoRateControlModeResponse, error) {
	response := new(IRecordingScreenSettings_getVideoRateControlModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoRateControlMode(request *IRecordingScreenSettings_getVideoRateControlMode) (*IRecordingScreenSettings_getVideoRateControlModeResponse, error) {
	return service.IRecordingScreenSettings_getVideoRateControlModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoRateControlModeContext(ctx context.Context, request *IRecordingScreenSettings_setVideoRateControlMode) (*IRecordingScreenSettings_setVideoRateControlModeResponse, error) {
	response := new(IRecordingScreenSettings_setVideoRateControlModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoRateControlMode(request *IRecordingScreenSettings_setVideoRateControlMode) (*IRecordingScreenSettings_setVideoRateControlModeResponse, error) {
	return service.IRecordingScreenSettings_setVideoRateControlModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoFPSContext(ctx context.Context, request *IRecordingScreenSettings_getVideoFPS) (*IRecordingScreenSettings_getVideoFPSResponse, error) {
	response := new(IRecordingScreenSettings_getVideoFPSResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoFPS(request *IRecordingScreenSettings_getVideoFPS) (*IRecordingScreenSettings_getVideoFPSResponse, error) {
	return service.IRecordingScreenSettings_getVideoFPSContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoFPSContext(ctx context.Context, request *IRecordingScreenSettings_setVideoFPS) (*IRecordingScreenSettings_setVideoFPSResponse, error) {
	response := new(IRecordingScreenSettings_setVideoFPSResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoFPS(request *IRecordingScreenSettings_setVideoFPS) (*IRecordingScreenSettings_setVideoFPSResponse, error) {
	return service.IRecordingScreenSettings_setVideoFPSContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoScalingModeContext(ctx context.Context, request *IRecordingScreenSettings_getVideoScalingMode) (*IRecordingScreenSettings_getVideoScalingModeResponse, error) {
	response := new(IRecordingScreenSettings_getVideoScalingModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_getVideoScalingMode(request *IRecordingScreenSettings_getVideoScalingMode) (*IRecordingScreenSettings_getVideoScalingModeResponse, error) {
	return service.IRecordingScreenSettings_getVideoScalingModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoScalingModeContext(ctx context.Context, request *IRecordingScreenSettings_setVideoScalingMode) (*IRecordingScreenSettings_setVideoScalingModeResponse, error) {
	response := new(IRecordingScreenSettings_setVideoScalingModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_setVideoScalingMode(request *IRecordingScreenSettings_setVideoScalingMode) (*IRecordingScreenSettings_setVideoScalingModeResponse, error) {
	return service.IRecordingScreenSettings_setVideoScalingModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingScreenSettings_isFeatureEnabledContext(ctx context.Context, request *IRecordingScreenSettings_isFeatureEnabled) (*IRecordingScreenSettings_isFeatureEnabledResponse, error) {
	response := new(IRecordingScreenSettings_isFeatureEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingScreenSettings_isFeatureEnabled(request *IRecordingScreenSettings_isFeatureEnabled) (*IRecordingScreenSettings_isFeatureEnabledResponse, error) {
	return service.IRecordingScreenSettings_isFeatureEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingSettings_getEnabledContext(ctx context.Context, request *IRecordingSettings_getEnabled) (*IRecordingSettings_getEnabledResponse, error) {
	response := new(IRecordingSettings_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingSettings_getEnabled(request *IRecordingSettings_getEnabled) (*IRecordingSettings_getEnabledResponse, error) {
	return service.IRecordingSettings_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingSettings_setEnabledContext(ctx context.Context, request *IRecordingSettings_setEnabled) (*IRecordingSettings_setEnabledResponse, error) {
	response := new(IRecordingSettings_setEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingSettings_setEnabled(request *IRecordingSettings_setEnabled) (*IRecordingSettings_setEnabledResponse, error) {
	return service.IRecordingSettings_setEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingSettings_getScreensContext(ctx context.Context, request *IRecordingSettings_getScreens) (*IRecordingSettings_getScreensResponse, error) {
	response := new(IRecordingSettings_getScreensResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingSettings_getScreens(request *IRecordingSettings_getScreens) (*IRecordingSettings_getScreensResponse, error) {
	return service.IRecordingSettings_getScreensContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingSettings_getScreenSettingsContext(ctx context.Context, request *IRecordingSettings_getScreenSettings) (*IRecordingSettings_getScreenSettingsResponse, error) {
	response := new(IRecordingSettings_getScreenSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingSettings_getScreenSettings(request *IRecordingSettings_getScreenSettings) (*IRecordingSettings_getScreenSettingsResponse, error) {
	return service.IRecordingSettings_getScreenSettingsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPCIAddress_getBusContext(ctx context.Context, request *IPCIAddress_getBus) (*IPCIAddress_getBusResponse, error) {
	response := new(IPCIAddress_getBusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPCIAddress_getBus(request *IPCIAddress_getBus) (*IPCIAddress_getBusResponse, error) {
	return service.IPCIAddress_getBusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPCIAddress_setBusContext(ctx context.Context, request *IPCIAddress_setBus) (*IPCIAddress_setBusResponse, error) {
	response := new(IPCIAddress_setBusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPCIAddress_setBus(request *IPCIAddress_setBus) (*IPCIAddress_setBusResponse, error) {
	return service.IPCIAddress_setBusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPCIAddress_getDeviceContext(ctx context.Context, request *IPCIAddress_getDevice) (*IPCIAddress_getDeviceResponse, error) {
	response := new(IPCIAddress_getDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPCIAddress_getDevice(request *IPCIAddress_getDevice) (*IPCIAddress_getDeviceResponse, error) {
	return service.IPCIAddress_getDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPCIAddress_setDeviceContext(ctx context.Context, request *IPCIAddress_setDevice) (*IPCIAddress_setDeviceResponse, error) {
	response := new(IPCIAddress_setDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPCIAddress_setDevice(request *IPCIAddress_setDevice) (*IPCIAddress_setDeviceResponse, error) {
	return service.IPCIAddress_setDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPCIAddress_getDevFunctionContext(ctx context.Context, request *IPCIAddress_getDevFunction) (*IPCIAddress_getDevFunctionResponse, error) {
	response := new(IPCIAddress_getDevFunctionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPCIAddress_getDevFunction(request *IPCIAddress_getDevFunction) (*IPCIAddress_getDevFunctionResponse, error) {
	return service.IPCIAddress_getDevFunctionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPCIAddress_setDevFunctionContext(ctx context.Context, request *IPCIAddress_setDevFunction) (*IPCIAddress_setDevFunctionResponse, error) {
	response := new(IPCIAddress_setDevFunctionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPCIAddress_setDevFunction(request *IPCIAddress_setDevFunction) (*IPCIAddress_setDevFunctionResponse, error) {
	return service.IPCIAddress_setDevFunctionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPCIAddress_asLongContext(ctx context.Context, request *IPCIAddress_asLong) (*IPCIAddress_asLongResponse, error) {
	response := new(IPCIAddress_asLongResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPCIAddress_asLong(request *IPCIAddress_asLong) (*IPCIAddress_asLongResponse, error) {
	return service.IPCIAddress_asLongContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPCIAddress_fromLongContext(ctx context.Context, request *IPCIAddress_fromLong) (*IPCIAddress_fromLongResponse, error) {
	response := new(IPCIAddress_fromLongResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPCIAddress_fromLong(request *IPCIAddress_fromLong) (*IPCIAddress_fromLongResponse, error) {
	return service.IPCIAddress_fromLongContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_getSecureBootEnabledContext(ctx context.Context, request *IUefiVariableStore_getSecureBootEnabled) (*IUefiVariableStore_getSecureBootEnabledResponse, error) {
	response := new(IUefiVariableStore_getSecureBootEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_getSecureBootEnabled(request *IUefiVariableStore_getSecureBootEnabled) (*IUefiVariableStore_getSecureBootEnabledResponse, error) {
	return service.IUefiVariableStore_getSecureBootEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_setSecureBootEnabledContext(ctx context.Context, request *IUefiVariableStore_setSecureBootEnabled) (*IUefiVariableStore_setSecureBootEnabledResponse, error) {
	response := new(IUefiVariableStore_setSecureBootEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_setSecureBootEnabled(request *IUefiVariableStore_setSecureBootEnabled) (*IUefiVariableStore_setSecureBootEnabledResponse, error) {
	return service.IUefiVariableStore_setSecureBootEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_addVariableContext(ctx context.Context, request *IUefiVariableStore_addVariable) (*IUefiVariableStore_addVariableResponse, error) {
	response := new(IUefiVariableStore_addVariableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_addVariable(request *IUefiVariableStore_addVariable) (*IUefiVariableStore_addVariableResponse, error) {
	return service.IUefiVariableStore_addVariableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_deleteVariableContext(ctx context.Context, request *IUefiVariableStore_deleteVariable) (*IUefiVariableStore_deleteVariableResponse, error) {
	response := new(IUefiVariableStore_deleteVariableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_deleteVariable(request *IUefiVariableStore_deleteVariable) (*IUefiVariableStore_deleteVariableResponse, error) {
	return service.IUefiVariableStore_deleteVariableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_changeVariableContext(ctx context.Context, request *IUefiVariableStore_changeVariable) (*IUefiVariableStore_changeVariableResponse, error) {
	response := new(IUefiVariableStore_changeVariableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_changeVariable(request *IUefiVariableStore_changeVariable) (*IUefiVariableStore_changeVariableResponse, error) {
	return service.IUefiVariableStore_changeVariableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_queryVariableByNameContext(ctx context.Context, request *IUefiVariableStore_queryVariableByName) (*IUefiVariableStore_queryVariableByNameResponse, error) {
	response := new(IUefiVariableStore_queryVariableByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_queryVariableByName(request *IUefiVariableStore_queryVariableByName) (*IUefiVariableStore_queryVariableByNameResponse, error) {
	return service.IUefiVariableStore_queryVariableByNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_queryVariablesContext(ctx context.Context, request *IUefiVariableStore_queryVariables) (*IUefiVariableStore_queryVariablesResponse, error) {
	response := new(IUefiVariableStore_queryVariablesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_queryVariables(request *IUefiVariableStore_queryVariables) (*IUefiVariableStore_queryVariablesResponse, error) {
	return service.IUefiVariableStore_queryVariablesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_enrollOraclePlatformKeyContext(ctx context.Context, request *IUefiVariableStore_enrollOraclePlatformKey) (*IUefiVariableStore_enrollOraclePlatformKeyResponse, error) {
	response := new(IUefiVariableStore_enrollOraclePlatformKeyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_enrollOraclePlatformKey(request *IUefiVariableStore_enrollOraclePlatformKey) (*IUefiVariableStore_enrollOraclePlatformKeyResponse, error) {
	return service.IUefiVariableStore_enrollOraclePlatformKeyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_enrollPlatformKeyContext(ctx context.Context, request *IUefiVariableStore_enrollPlatformKey) (*IUefiVariableStore_enrollPlatformKeyResponse, error) {
	response := new(IUefiVariableStore_enrollPlatformKeyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_enrollPlatformKey(request *IUefiVariableStore_enrollPlatformKey) (*IUefiVariableStore_enrollPlatformKeyResponse, error) {
	return service.IUefiVariableStore_enrollPlatformKeyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_addKekContext(ctx context.Context, request *IUefiVariableStore_addKek) (*IUefiVariableStore_addKekResponse, error) {
	response := new(IUefiVariableStore_addKekResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_addKek(request *IUefiVariableStore_addKek) (*IUefiVariableStore_addKekResponse, error) {
	return service.IUefiVariableStore_addKekContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_addSignatureToDbContext(ctx context.Context, request *IUefiVariableStore_addSignatureToDb) (*IUefiVariableStore_addSignatureToDbResponse, error) {
	response := new(IUefiVariableStore_addSignatureToDbResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_addSignatureToDb(request *IUefiVariableStore_addSignatureToDb) (*IUefiVariableStore_addSignatureToDbResponse, error) {
	return service.IUefiVariableStore_addSignatureToDbContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_addSignatureToDbxContext(ctx context.Context, request *IUefiVariableStore_addSignatureToDbx) (*IUefiVariableStore_addSignatureToDbxResponse, error) {
	response := new(IUefiVariableStore_addSignatureToDbxResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_addSignatureToDbx(request *IUefiVariableStore_addSignatureToDbx) (*IUefiVariableStore_addSignatureToDbxResponse, error) {
	return service.IUefiVariableStore_addSignatureToDbxContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_enrollDefaultMsSignaturesContext(ctx context.Context, request *IUefiVariableStore_enrollDefaultMsSignatures) (*IUefiVariableStore_enrollDefaultMsSignaturesResponse, error) {
	response := new(IUefiVariableStore_enrollDefaultMsSignaturesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_enrollDefaultMsSignatures(request *IUefiVariableStore_enrollDefaultMsSignatures) (*IUefiVariableStore_enrollDefaultMsSignaturesResponse, error) {
	return service.IUefiVariableStore_enrollDefaultMsSignaturesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUefiVariableStore_addSignatureToMokContext(ctx context.Context, request *IUefiVariableStore_addSignatureToMok) (*IUefiVariableStore_addSignatureToMokResponse, error) {
	response := new(IUefiVariableStore_addSignatureToMokResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUefiVariableStore_addSignatureToMok(request *IUefiVariableStore_addSignatureToMok) (*IUefiVariableStore_addSignatureToMokResponse, error) {
	return service.IUefiVariableStore_addSignatureToMokContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INvramStore_getNonVolatileStorageFileContext(ctx context.Context, request *INvramStore_getNonVolatileStorageFile) (*INvramStore_getNonVolatileStorageFileResponse, error) {
	response := new(INvramStore_getNonVolatileStorageFileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INvramStore_getNonVolatileStorageFile(request *INvramStore_getNonVolatileStorageFile) (*INvramStore_getNonVolatileStorageFileResponse, error) {
	return service.INvramStore_getNonVolatileStorageFileContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INvramStore_getUefiVariableStoreContext(ctx context.Context, request *INvramStore_getUefiVariableStore) (*INvramStore_getUefiVariableStoreResponse, error) {
	response := new(INvramStore_getUefiVariableStoreResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INvramStore_getUefiVariableStore(request *INvramStore_getUefiVariableStore) (*INvramStore_getUefiVariableStoreResponse, error) {
	return service.INvramStore_getUefiVariableStoreContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INvramStore_getKeyIdContext(ctx context.Context, request *INvramStore_getKeyId) (*INvramStore_getKeyIdResponse, error) {
	response := new(INvramStore_getKeyIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INvramStore_getKeyId(request *INvramStore_getKeyId) (*INvramStore_getKeyIdResponse, error) {
	return service.INvramStore_getKeyIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INvramStore_getKeyStoreContext(ctx context.Context, request *INvramStore_getKeyStore) (*INvramStore_getKeyStoreResponse, error) {
	response := new(INvramStore_getKeyStoreResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INvramStore_getKeyStore(request *INvramStore_getKeyStore) (*INvramStore_getKeyStoreResponse, error) {
	return service.INvramStore_getKeyStoreContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INvramStore_initUefiVariableStoreContext(ctx context.Context, request *INvramStore_initUefiVariableStore) (*INvramStore_initUefiVariableStoreResponse, error) {
	response := new(INvramStore_initUefiVariableStoreResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INvramStore_initUefiVariableStore(request *INvramStore_initUefiVariableStore) (*INvramStore_initUefiVariableStoreResponse, error) {
	return service.INvramStore_initUefiVariableStoreContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getParentContext(ctx context.Context, request *IMachine_getParent) (*IMachine_getParentResponse, error) {
	response := new(IMachine_getParentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getParent(request *IMachine_getParent) (*IMachine_getParentResponse, error) {
	return service.IMachine_getParentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getIconContext(ctx context.Context, request *IMachine_getIcon) (*IMachine_getIconResponse, error) {
	response := new(IMachine_getIconResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getIcon(request *IMachine_getIcon) (*IMachine_getIconResponse, error) {
	return service.IMachine_getIconContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setIconContext(ctx context.Context, request *IMachine_setIcon) (*IMachine_setIconResponse, error) {
	response := new(IMachine_setIconResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setIcon(request *IMachine_setIcon) (*IMachine_setIconResponse, error) {
	return service.IMachine_setIconContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getAccessibleContext(ctx context.Context, request *IMachine_getAccessible) (*IMachine_getAccessibleResponse, error) {
	response := new(IMachine_getAccessibleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getAccessible(request *IMachine_getAccessible) (*IMachine_getAccessibleResponse, error) {
	return service.IMachine_getAccessibleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getAccessErrorContext(ctx context.Context, request *IMachine_getAccessError) (*IMachine_getAccessErrorResponse, error) {
	response := new(IMachine_getAccessErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getAccessError(request *IMachine_getAccessError) (*IMachine_getAccessErrorResponse, error) {
	return service.IMachine_getAccessErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getNameContext(ctx context.Context, request *IMachine_getName) (*IMachine_getNameResponse, error) {
	response := new(IMachine_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getName(request *IMachine_getName) (*IMachine_getNameResponse, error) {
	return service.IMachine_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setNameContext(ctx context.Context, request *IMachine_setName) (*IMachine_setNameResponse, error) {
	response := new(IMachine_setNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setName(request *IMachine_setName) (*IMachine_setNameResponse, error) {
	return service.IMachine_setNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getDescriptionContext(ctx context.Context, request *IMachine_getDescription) (*IMachine_getDescriptionResponse, error) {
	response := new(IMachine_getDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getDescription(request *IMachine_getDescription) (*IMachine_getDescriptionResponse, error) {
	return service.IMachine_getDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setDescriptionContext(ctx context.Context, request *IMachine_setDescription) (*IMachine_setDescriptionResponse, error) {
	response := new(IMachine_setDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setDescription(request *IMachine_setDescription) (*IMachine_setDescriptionResponse, error) {
	return service.IMachine_setDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getIdContext(ctx context.Context, request *IMachine_getId) (*IMachine_getIdResponse, error) {
	response := new(IMachine_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getId(request *IMachine_getId) (*IMachine_getIdResponse, error) {
	return service.IMachine_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getGroupsContext(ctx context.Context, request *IMachine_getGroups) (*IMachine_getGroupsResponse, error) {
	response := new(IMachine_getGroupsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getGroups(request *IMachine_getGroups) (*IMachine_getGroupsResponse, error) {
	return service.IMachine_getGroupsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setGroupsContext(ctx context.Context, request *IMachine_setGroups) (*IMachine_setGroupsResponse, error) {
	response := new(IMachine_setGroupsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setGroups(request *IMachine_setGroups) (*IMachine_setGroupsResponse, error) {
	return service.IMachine_setGroupsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getOSTypeIdContext(ctx context.Context, request *IMachine_getOSTypeId) (*IMachine_getOSTypeIdResponse, error) {
	response := new(IMachine_getOSTypeIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getOSTypeId(request *IMachine_getOSTypeId) (*IMachine_getOSTypeIdResponse, error) {
	return service.IMachine_getOSTypeIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setOSTypeIdContext(ctx context.Context, request *IMachine_setOSTypeId) (*IMachine_setOSTypeIdResponse, error) {
	response := new(IMachine_setOSTypeIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setOSTypeId(request *IMachine_setOSTypeId) (*IMachine_setOSTypeIdResponse, error) {
	return service.IMachine_setOSTypeIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getHardwareVersionContext(ctx context.Context, request *IMachine_getHardwareVersion) (*IMachine_getHardwareVersionResponse, error) {
	response := new(IMachine_getHardwareVersionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getHardwareVersion(request *IMachine_getHardwareVersion) (*IMachine_getHardwareVersionResponse, error) {
	return service.IMachine_getHardwareVersionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setHardwareVersionContext(ctx context.Context, request *IMachine_setHardwareVersion) (*IMachine_setHardwareVersionResponse, error) {
	response := new(IMachine_setHardwareVersionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setHardwareVersion(request *IMachine_setHardwareVersion) (*IMachine_setHardwareVersionResponse, error) {
	return service.IMachine_setHardwareVersionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getHardwareUUIDContext(ctx context.Context, request *IMachine_getHardwareUUID) (*IMachine_getHardwareUUIDResponse, error) {
	response := new(IMachine_getHardwareUUIDResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getHardwareUUID(request *IMachine_getHardwareUUID) (*IMachine_getHardwareUUIDResponse, error) {
	return service.IMachine_getHardwareUUIDContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setHardwareUUIDContext(ctx context.Context, request *IMachine_setHardwareUUID) (*IMachine_setHardwareUUIDResponse, error) {
	response := new(IMachine_setHardwareUUIDResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setHardwareUUID(request *IMachine_setHardwareUUID) (*IMachine_setHardwareUUIDResponse, error) {
	return service.IMachine_setHardwareUUIDContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getCPUCountContext(ctx context.Context, request *IMachine_getCPUCount) (*IMachine_getCPUCountResponse, error) {
	response := new(IMachine_getCPUCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getCPUCount(request *IMachine_getCPUCount) (*IMachine_getCPUCountResponse, error) {
	return service.IMachine_getCPUCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setCPUCountContext(ctx context.Context, request *IMachine_setCPUCount) (*IMachine_setCPUCountResponse, error) {
	response := new(IMachine_setCPUCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setCPUCount(request *IMachine_setCPUCount) (*IMachine_setCPUCountResponse, error) {
	return service.IMachine_setCPUCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getCPUHotPlugEnabledContext(ctx context.Context, request *IMachine_getCPUHotPlugEnabled) (*IMachine_getCPUHotPlugEnabledResponse, error) {
	response := new(IMachine_getCPUHotPlugEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getCPUHotPlugEnabled(request *IMachine_getCPUHotPlugEnabled) (*IMachine_getCPUHotPlugEnabledResponse, error) {
	return service.IMachine_getCPUHotPlugEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setCPUHotPlugEnabledContext(ctx context.Context, request *IMachine_setCPUHotPlugEnabled) (*IMachine_setCPUHotPlugEnabledResponse, error) {
	response := new(IMachine_setCPUHotPlugEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setCPUHotPlugEnabled(request *IMachine_setCPUHotPlugEnabled) (*IMachine_setCPUHotPlugEnabledResponse, error) {
	return service.IMachine_setCPUHotPlugEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getCPUExecutionCapContext(ctx context.Context, request *IMachine_getCPUExecutionCap) (*IMachine_getCPUExecutionCapResponse, error) {
	response := new(IMachine_getCPUExecutionCapResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getCPUExecutionCap(request *IMachine_getCPUExecutionCap) (*IMachine_getCPUExecutionCapResponse, error) {
	return service.IMachine_getCPUExecutionCapContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setCPUExecutionCapContext(ctx context.Context, request *IMachine_setCPUExecutionCap) (*IMachine_setCPUExecutionCapResponse, error) {
	response := new(IMachine_setCPUExecutionCapResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setCPUExecutionCap(request *IMachine_setCPUExecutionCap) (*IMachine_setCPUExecutionCapResponse, error) {
	return service.IMachine_setCPUExecutionCapContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getCPUIDPortabilityLevelContext(ctx context.Context, request *IMachine_getCPUIDPortabilityLevel) (*IMachine_getCPUIDPortabilityLevelResponse, error) {
	response := new(IMachine_getCPUIDPortabilityLevelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getCPUIDPortabilityLevel(request *IMachine_getCPUIDPortabilityLevel) (*IMachine_getCPUIDPortabilityLevelResponse, error) {
	return service.IMachine_getCPUIDPortabilityLevelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setCPUIDPortabilityLevelContext(ctx context.Context, request *IMachine_setCPUIDPortabilityLevel) (*IMachine_setCPUIDPortabilityLevelResponse, error) {
	response := new(IMachine_setCPUIDPortabilityLevelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setCPUIDPortabilityLevel(request *IMachine_setCPUIDPortabilityLevel) (*IMachine_setCPUIDPortabilityLevelResponse, error) {
	return service.IMachine_setCPUIDPortabilityLevelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getMemorySizeContext(ctx context.Context, request *IMachine_getMemorySize) (*IMachine_getMemorySizeResponse, error) {
	response := new(IMachine_getMemorySizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getMemorySize(request *IMachine_getMemorySize) (*IMachine_getMemorySizeResponse, error) {
	return service.IMachine_getMemorySizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setMemorySizeContext(ctx context.Context, request *IMachine_setMemorySize) (*IMachine_setMemorySizeResponse, error) {
	response := new(IMachine_setMemorySizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setMemorySize(request *IMachine_setMemorySize) (*IMachine_setMemorySizeResponse, error) {
	return service.IMachine_setMemorySizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getMemoryBalloonSizeContext(ctx context.Context, request *IMachine_getMemoryBalloonSize) (*IMachine_getMemoryBalloonSizeResponse, error) {
	response := new(IMachine_getMemoryBalloonSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getMemoryBalloonSize(request *IMachine_getMemoryBalloonSize) (*IMachine_getMemoryBalloonSizeResponse, error) {
	return service.IMachine_getMemoryBalloonSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setMemoryBalloonSizeContext(ctx context.Context, request *IMachine_setMemoryBalloonSize) (*IMachine_setMemoryBalloonSizeResponse, error) {
	response := new(IMachine_setMemoryBalloonSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setMemoryBalloonSize(request *IMachine_setMemoryBalloonSize) (*IMachine_setMemoryBalloonSizeResponse, error) {
	return service.IMachine_setMemoryBalloonSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getPageFusionEnabledContext(ctx context.Context, request *IMachine_getPageFusionEnabled) (*IMachine_getPageFusionEnabledResponse, error) {
	response := new(IMachine_getPageFusionEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getPageFusionEnabled(request *IMachine_getPageFusionEnabled) (*IMachine_getPageFusionEnabledResponse, error) {
	return service.IMachine_getPageFusionEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setPageFusionEnabledContext(ctx context.Context, request *IMachine_setPageFusionEnabled) (*IMachine_setPageFusionEnabledResponse, error) {
	response := new(IMachine_setPageFusionEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setPageFusionEnabled(request *IMachine_setPageFusionEnabled) (*IMachine_setPageFusionEnabledResponse, error) {
	return service.IMachine_setPageFusionEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getGraphicsAdapterContext(ctx context.Context, request *IMachine_getGraphicsAdapter) (*IMachine_getGraphicsAdapterResponse, error) {
	response := new(IMachine_getGraphicsAdapterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getGraphicsAdapter(request *IMachine_getGraphicsAdapter) (*IMachine_getGraphicsAdapterResponse, error) {
	return service.IMachine_getGraphicsAdapterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getBIOSSettingsContext(ctx context.Context, request *IMachine_getBIOSSettings) (*IMachine_getBIOSSettingsResponse, error) {
	response := new(IMachine_getBIOSSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getBIOSSettings(request *IMachine_getBIOSSettings) (*IMachine_getBIOSSettingsResponse, error) {
	return service.IMachine_getBIOSSettingsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getTrustedPlatformModuleContext(ctx context.Context, request *IMachine_getTrustedPlatformModule) (*IMachine_getTrustedPlatformModuleResponse, error) {
	response := new(IMachine_getTrustedPlatformModuleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getTrustedPlatformModule(request *IMachine_getTrustedPlatformModule) (*IMachine_getTrustedPlatformModuleResponse, error) {
	return service.IMachine_getTrustedPlatformModuleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getNonVolatileStoreContext(ctx context.Context, request *IMachine_getNonVolatileStore) (*IMachine_getNonVolatileStoreResponse, error) {
	response := new(IMachine_getNonVolatileStoreResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getNonVolatileStore(request *IMachine_getNonVolatileStore) (*IMachine_getNonVolatileStoreResponse, error) {
	return service.IMachine_getNonVolatileStoreContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getRecordingSettingsContext(ctx context.Context, request *IMachine_getRecordingSettings) (*IMachine_getRecordingSettingsResponse, error) {
	response := new(IMachine_getRecordingSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getRecordingSettings(request *IMachine_getRecordingSettings) (*IMachine_getRecordingSettingsResponse, error) {
	return service.IMachine_getRecordingSettingsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getFirmwareTypeContext(ctx context.Context, request *IMachine_getFirmwareType) (*IMachine_getFirmwareTypeResponse, error) {
	response := new(IMachine_getFirmwareTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getFirmwareType(request *IMachine_getFirmwareType) (*IMachine_getFirmwareTypeResponse, error) {
	return service.IMachine_getFirmwareTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setFirmwareTypeContext(ctx context.Context, request *IMachine_setFirmwareType) (*IMachine_setFirmwareTypeResponse, error) {
	response := new(IMachine_setFirmwareTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setFirmwareType(request *IMachine_setFirmwareType) (*IMachine_setFirmwareTypeResponse, error) {
	return service.IMachine_setFirmwareTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getPointingHIDTypeContext(ctx context.Context, request *IMachine_getPointingHIDType) (*IMachine_getPointingHIDTypeResponse, error) {
	response := new(IMachine_getPointingHIDTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getPointingHIDType(request *IMachine_getPointingHIDType) (*IMachine_getPointingHIDTypeResponse, error) {
	return service.IMachine_getPointingHIDTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setPointingHIDTypeContext(ctx context.Context, request *IMachine_setPointingHIDType) (*IMachine_setPointingHIDTypeResponse, error) {
	response := new(IMachine_setPointingHIDTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setPointingHIDType(request *IMachine_setPointingHIDType) (*IMachine_setPointingHIDTypeResponse, error) {
	return service.IMachine_setPointingHIDTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getKeyboardHIDTypeContext(ctx context.Context, request *IMachine_getKeyboardHIDType) (*IMachine_getKeyboardHIDTypeResponse, error) {
	response := new(IMachine_getKeyboardHIDTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getKeyboardHIDType(request *IMachine_getKeyboardHIDType) (*IMachine_getKeyboardHIDTypeResponse, error) {
	return service.IMachine_getKeyboardHIDTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setKeyboardHIDTypeContext(ctx context.Context, request *IMachine_setKeyboardHIDType) (*IMachine_setKeyboardHIDTypeResponse, error) {
	response := new(IMachine_setKeyboardHIDTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setKeyboardHIDType(request *IMachine_setKeyboardHIDType) (*IMachine_setKeyboardHIDTypeResponse, error) {
	return service.IMachine_setKeyboardHIDTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getHPETEnabledContext(ctx context.Context, request *IMachine_getHPETEnabled) (*IMachine_getHPETEnabledResponse, error) {
	response := new(IMachine_getHPETEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getHPETEnabled(request *IMachine_getHPETEnabled) (*IMachine_getHPETEnabledResponse, error) {
	return service.IMachine_getHPETEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setHPETEnabledContext(ctx context.Context, request *IMachine_setHPETEnabled) (*IMachine_setHPETEnabledResponse, error) {
	response := new(IMachine_setHPETEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setHPETEnabled(request *IMachine_setHPETEnabled) (*IMachine_setHPETEnabledResponse, error) {
	return service.IMachine_setHPETEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getChipsetTypeContext(ctx context.Context, request *IMachine_getChipsetType) (*IMachine_getChipsetTypeResponse, error) {
	response := new(IMachine_getChipsetTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getChipsetType(request *IMachine_getChipsetType) (*IMachine_getChipsetTypeResponse, error) {
	return service.IMachine_getChipsetTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setChipsetTypeContext(ctx context.Context, request *IMachine_setChipsetType) (*IMachine_setChipsetTypeResponse, error) {
	response := new(IMachine_setChipsetTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setChipsetType(request *IMachine_setChipsetType) (*IMachine_setChipsetTypeResponse, error) {
	return service.IMachine_setChipsetTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getIommuTypeContext(ctx context.Context, request *IMachine_getIommuType) (*IMachine_getIommuTypeResponse, error) {
	response := new(IMachine_getIommuTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getIommuType(request *IMachine_getIommuType) (*IMachine_getIommuTypeResponse, error) {
	return service.IMachine_getIommuTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setIommuTypeContext(ctx context.Context, request *IMachine_setIommuType) (*IMachine_setIommuTypeResponse, error) {
	response := new(IMachine_setIommuTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setIommuType(request *IMachine_setIommuType) (*IMachine_setIommuTypeResponse, error) {
	return service.IMachine_setIommuTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getSnapshotFolderContext(ctx context.Context, request *IMachine_getSnapshotFolder) (*IMachine_getSnapshotFolderResponse, error) {
	response := new(IMachine_getSnapshotFolderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getSnapshotFolder(request *IMachine_getSnapshotFolder) (*IMachine_getSnapshotFolderResponse, error) {
	return service.IMachine_getSnapshotFolderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setSnapshotFolderContext(ctx context.Context, request *IMachine_setSnapshotFolder) (*IMachine_setSnapshotFolderResponse, error) {
	response := new(IMachine_setSnapshotFolderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setSnapshotFolder(request *IMachine_setSnapshotFolder) (*IMachine_setSnapshotFolderResponse, error) {
	return service.IMachine_setSnapshotFolderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getVRDEServerContext(ctx context.Context, request *IMachine_getVRDEServer) (*IMachine_getVRDEServerResponse, error) {
	response := new(IMachine_getVRDEServerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getVRDEServer(request *IMachine_getVRDEServer) (*IMachine_getVRDEServerResponse, error) {
	return service.IMachine_getVRDEServerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getEmulatedUSBCardReaderEnabledContext(ctx context.Context, request *IMachine_getEmulatedUSBCardReaderEnabled) (*IMachine_getEmulatedUSBCardReaderEnabledResponse, error) {
	response := new(IMachine_getEmulatedUSBCardReaderEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getEmulatedUSBCardReaderEnabled(request *IMachine_getEmulatedUSBCardReaderEnabled) (*IMachine_getEmulatedUSBCardReaderEnabledResponse, error) {
	return service.IMachine_getEmulatedUSBCardReaderEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setEmulatedUSBCardReaderEnabledContext(ctx context.Context, request *IMachine_setEmulatedUSBCardReaderEnabled) (*IMachine_setEmulatedUSBCardReaderEnabledResponse, error) {
	response := new(IMachine_setEmulatedUSBCardReaderEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setEmulatedUSBCardReaderEnabled(request *IMachine_setEmulatedUSBCardReaderEnabled) (*IMachine_setEmulatedUSBCardReaderEnabledResponse, error) {
	return service.IMachine_setEmulatedUSBCardReaderEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getMediumAttachmentsContext(ctx context.Context, request *IMachine_getMediumAttachments) (*IMachine_getMediumAttachmentsResponse, error) {
	response := new(IMachine_getMediumAttachmentsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getMediumAttachments(request *IMachine_getMediumAttachments) (*IMachine_getMediumAttachmentsResponse, error) {
	return service.IMachine_getMediumAttachmentsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getUSBControllersContext(ctx context.Context, request *IMachine_getUSBControllers) (*IMachine_getUSBControllersResponse, error) {
	response := new(IMachine_getUSBControllersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getUSBControllers(request *IMachine_getUSBControllers) (*IMachine_getUSBControllersResponse, error) {
	return service.IMachine_getUSBControllersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getUSBDeviceFiltersContext(ctx context.Context, request *IMachine_getUSBDeviceFilters) (*IMachine_getUSBDeviceFiltersResponse, error) {
	response := new(IMachine_getUSBDeviceFiltersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getUSBDeviceFilters(request *IMachine_getUSBDeviceFilters) (*IMachine_getUSBDeviceFiltersResponse, error) {
	return service.IMachine_getUSBDeviceFiltersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getAudioSettingsContext(ctx context.Context, request *IMachine_getAudioSettings) (*IMachine_getAudioSettingsResponse, error) {
	response := new(IMachine_getAudioSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getAudioSettings(request *IMachine_getAudioSettings) (*IMachine_getAudioSettingsResponse, error) {
	return service.IMachine_getAudioSettingsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getStorageControllersContext(ctx context.Context, request *IMachine_getStorageControllers) (*IMachine_getStorageControllersResponse, error) {
	response := new(IMachine_getStorageControllersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getStorageControllers(request *IMachine_getStorageControllers) (*IMachine_getStorageControllersResponse, error) {
	return service.IMachine_getStorageControllersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getSettingsFilePathContext(ctx context.Context, request *IMachine_getSettingsFilePath) (*IMachine_getSettingsFilePathResponse, error) {
	response := new(IMachine_getSettingsFilePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getSettingsFilePath(request *IMachine_getSettingsFilePath) (*IMachine_getSettingsFilePathResponse, error) {
	return service.IMachine_getSettingsFilePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getSettingsAuxFilePathContext(ctx context.Context, request *IMachine_getSettingsAuxFilePath) (*IMachine_getSettingsAuxFilePathResponse, error) {
	response := new(IMachine_getSettingsAuxFilePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getSettingsAuxFilePath(request *IMachine_getSettingsAuxFilePath) (*IMachine_getSettingsAuxFilePathResponse, error) {
	return service.IMachine_getSettingsAuxFilePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getSettingsModifiedContext(ctx context.Context, request *IMachine_getSettingsModified) (*IMachine_getSettingsModifiedResponse, error) {
	response := new(IMachine_getSettingsModifiedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getSettingsModified(request *IMachine_getSettingsModified) (*IMachine_getSettingsModifiedResponse, error) {
	return service.IMachine_getSettingsModifiedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getSessionStateContext(ctx context.Context, request *IMachine_getSessionState) (*IMachine_getSessionStateResponse, error) {
	response := new(IMachine_getSessionStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getSessionState(request *IMachine_getSessionState) (*IMachine_getSessionStateResponse, error) {
	return service.IMachine_getSessionStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getSessionNameContext(ctx context.Context, request *IMachine_getSessionName) (*IMachine_getSessionNameResponse, error) {
	response := new(IMachine_getSessionNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getSessionName(request *IMachine_getSessionName) (*IMachine_getSessionNameResponse, error) {
	return service.IMachine_getSessionNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getSessionPIDContext(ctx context.Context, request *IMachine_getSessionPID) (*IMachine_getSessionPIDResponse, error) {
	response := new(IMachine_getSessionPIDResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getSessionPID(request *IMachine_getSessionPID) (*IMachine_getSessionPIDResponse, error) {
	return service.IMachine_getSessionPIDContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getStateContext(ctx context.Context, request *IMachine_getState) (*IMachine_getStateResponse, error) {
	response := new(IMachine_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getState(request *IMachine_getState) (*IMachine_getStateResponse, error) {
	return service.IMachine_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getLastStateChangeContext(ctx context.Context, request *IMachine_getLastStateChange) (*IMachine_getLastStateChangeResponse, error) {
	response := new(IMachine_getLastStateChangeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getLastStateChange(request *IMachine_getLastStateChange) (*IMachine_getLastStateChangeResponse, error) {
	return service.IMachine_getLastStateChangeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getStateFilePathContext(ctx context.Context, request *IMachine_getStateFilePath) (*IMachine_getStateFilePathResponse, error) {
	response := new(IMachine_getStateFilePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getStateFilePath(request *IMachine_getStateFilePath) (*IMachine_getStateFilePathResponse, error) {
	return service.IMachine_getStateFilePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getLogFolderContext(ctx context.Context, request *IMachine_getLogFolder) (*IMachine_getLogFolderResponse, error) {
	response := new(IMachine_getLogFolderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getLogFolder(request *IMachine_getLogFolder) (*IMachine_getLogFolderResponse, error) {
	return service.IMachine_getLogFolderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getCurrentSnapshotContext(ctx context.Context, request *IMachine_getCurrentSnapshot) (*IMachine_getCurrentSnapshotResponse, error) {
	response := new(IMachine_getCurrentSnapshotResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getCurrentSnapshot(request *IMachine_getCurrentSnapshot) (*IMachine_getCurrentSnapshotResponse, error) {
	return service.IMachine_getCurrentSnapshotContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getSnapshotCountContext(ctx context.Context, request *IMachine_getSnapshotCount) (*IMachine_getSnapshotCountResponse, error) {
	response := new(IMachine_getSnapshotCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getSnapshotCount(request *IMachine_getSnapshotCount) (*IMachine_getSnapshotCountResponse, error) {
	return service.IMachine_getSnapshotCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getCurrentStateModifiedContext(ctx context.Context, request *IMachine_getCurrentStateModified) (*IMachine_getCurrentStateModifiedResponse, error) {
	response := new(IMachine_getCurrentStateModifiedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getCurrentStateModified(request *IMachine_getCurrentStateModified) (*IMachine_getCurrentStateModifiedResponse, error) {
	return service.IMachine_getCurrentStateModifiedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getSharedFoldersContext(ctx context.Context, request *IMachine_getSharedFolders) (*IMachine_getSharedFoldersResponse, error) {
	response := new(IMachine_getSharedFoldersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getSharedFolders(request *IMachine_getSharedFolders) (*IMachine_getSharedFoldersResponse, error) {
	return service.IMachine_getSharedFoldersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getClipboardModeContext(ctx context.Context, request *IMachine_getClipboardMode) (*IMachine_getClipboardModeResponse, error) {
	response := new(IMachine_getClipboardModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getClipboardMode(request *IMachine_getClipboardMode) (*IMachine_getClipboardModeResponse, error) {
	return service.IMachine_getClipboardModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setClipboardModeContext(ctx context.Context, request *IMachine_setClipboardMode) (*IMachine_setClipboardModeResponse, error) {
	response := new(IMachine_setClipboardModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setClipboardMode(request *IMachine_setClipboardMode) (*IMachine_setClipboardModeResponse, error) {
	return service.IMachine_setClipboardModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getClipboardFileTransfersEnabledContext(ctx context.Context, request *IMachine_getClipboardFileTransfersEnabled) (*IMachine_getClipboardFileTransfersEnabledResponse, error) {
	response := new(IMachine_getClipboardFileTransfersEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getClipboardFileTransfersEnabled(request *IMachine_getClipboardFileTransfersEnabled) (*IMachine_getClipboardFileTransfersEnabledResponse, error) {
	return service.IMachine_getClipboardFileTransfersEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setClipboardFileTransfersEnabledContext(ctx context.Context, request *IMachine_setClipboardFileTransfersEnabled) (*IMachine_setClipboardFileTransfersEnabledResponse, error) {
	response := new(IMachine_setClipboardFileTransfersEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setClipboardFileTransfersEnabled(request *IMachine_setClipboardFileTransfersEnabled) (*IMachine_setClipboardFileTransfersEnabledResponse, error) {
	return service.IMachine_setClipboardFileTransfersEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getDnDModeContext(ctx context.Context, request *IMachine_getDnDMode) (*IMachine_getDnDModeResponse, error) {
	response := new(IMachine_getDnDModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getDnDMode(request *IMachine_getDnDMode) (*IMachine_getDnDModeResponse, error) {
	return service.IMachine_getDnDModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setDnDModeContext(ctx context.Context, request *IMachine_setDnDMode) (*IMachine_setDnDModeResponse, error) {
	response := new(IMachine_setDnDModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setDnDMode(request *IMachine_setDnDMode) (*IMachine_setDnDModeResponse, error) {
	return service.IMachine_setDnDModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getTeleporterEnabledContext(ctx context.Context, request *IMachine_getTeleporterEnabled) (*IMachine_getTeleporterEnabledResponse, error) {
	response := new(IMachine_getTeleporterEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getTeleporterEnabled(request *IMachine_getTeleporterEnabled) (*IMachine_getTeleporterEnabledResponse, error) {
	return service.IMachine_getTeleporterEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setTeleporterEnabledContext(ctx context.Context, request *IMachine_setTeleporterEnabled) (*IMachine_setTeleporterEnabledResponse, error) {
	response := new(IMachine_setTeleporterEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setTeleporterEnabled(request *IMachine_setTeleporterEnabled) (*IMachine_setTeleporterEnabledResponse, error) {
	return service.IMachine_setTeleporterEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getTeleporterPortContext(ctx context.Context, request *IMachine_getTeleporterPort) (*IMachine_getTeleporterPortResponse, error) {
	response := new(IMachine_getTeleporterPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getTeleporterPort(request *IMachine_getTeleporterPort) (*IMachine_getTeleporterPortResponse, error) {
	return service.IMachine_getTeleporterPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setTeleporterPortContext(ctx context.Context, request *IMachine_setTeleporterPort) (*IMachine_setTeleporterPortResponse, error) {
	response := new(IMachine_setTeleporterPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setTeleporterPort(request *IMachine_setTeleporterPort) (*IMachine_setTeleporterPortResponse, error) {
	return service.IMachine_setTeleporterPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getTeleporterAddressContext(ctx context.Context, request *IMachine_getTeleporterAddress) (*IMachine_getTeleporterAddressResponse, error) {
	response := new(IMachine_getTeleporterAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getTeleporterAddress(request *IMachine_getTeleporterAddress) (*IMachine_getTeleporterAddressResponse, error) {
	return service.IMachine_getTeleporterAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setTeleporterAddressContext(ctx context.Context, request *IMachine_setTeleporterAddress) (*IMachine_setTeleporterAddressResponse, error) {
	response := new(IMachine_setTeleporterAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setTeleporterAddress(request *IMachine_setTeleporterAddress) (*IMachine_setTeleporterAddressResponse, error) {
	return service.IMachine_setTeleporterAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getTeleporterPasswordContext(ctx context.Context, request *IMachine_getTeleporterPassword) (*IMachine_getTeleporterPasswordResponse, error) {
	response := new(IMachine_getTeleporterPasswordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getTeleporterPassword(request *IMachine_getTeleporterPassword) (*IMachine_getTeleporterPasswordResponse, error) {
	return service.IMachine_getTeleporterPasswordContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setTeleporterPasswordContext(ctx context.Context, request *IMachine_setTeleporterPassword) (*IMachine_setTeleporterPasswordResponse, error) {
	response := new(IMachine_setTeleporterPasswordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setTeleporterPassword(request *IMachine_setTeleporterPassword) (*IMachine_setTeleporterPasswordResponse, error) {
	return service.IMachine_setTeleporterPasswordContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getParavirtProviderContext(ctx context.Context, request *IMachine_getParavirtProvider) (*IMachine_getParavirtProviderResponse, error) {
	response := new(IMachine_getParavirtProviderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getParavirtProvider(request *IMachine_getParavirtProvider) (*IMachine_getParavirtProviderResponse, error) {
	return service.IMachine_getParavirtProviderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setParavirtProviderContext(ctx context.Context, request *IMachine_setParavirtProvider) (*IMachine_setParavirtProviderResponse, error) {
	response := new(IMachine_setParavirtProviderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setParavirtProvider(request *IMachine_setParavirtProvider) (*IMachine_setParavirtProviderResponse, error) {
	return service.IMachine_setParavirtProviderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getRTCUseUTCContext(ctx context.Context, request *IMachine_getRTCUseUTC) (*IMachine_getRTCUseUTCResponse, error) {
	response := new(IMachine_getRTCUseUTCResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getRTCUseUTC(request *IMachine_getRTCUseUTC) (*IMachine_getRTCUseUTCResponse, error) {
	return service.IMachine_getRTCUseUTCContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setRTCUseUTCContext(ctx context.Context, request *IMachine_setRTCUseUTC) (*IMachine_setRTCUseUTCResponse, error) {
	response := new(IMachine_setRTCUseUTCResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setRTCUseUTC(request *IMachine_setRTCUseUTC) (*IMachine_setRTCUseUTCResponse, error) {
	return service.IMachine_setRTCUseUTCContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getIOCacheEnabledContext(ctx context.Context, request *IMachine_getIOCacheEnabled) (*IMachine_getIOCacheEnabledResponse, error) {
	response := new(IMachine_getIOCacheEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getIOCacheEnabled(request *IMachine_getIOCacheEnabled) (*IMachine_getIOCacheEnabledResponse, error) {
	return service.IMachine_getIOCacheEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setIOCacheEnabledContext(ctx context.Context, request *IMachine_setIOCacheEnabled) (*IMachine_setIOCacheEnabledResponse, error) {
	response := new(IMachine_setIOCacheEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setIOCacheEnabled(request *IMachine_setIOCacheEnabled) (*IMachine_setIOCacheEnabledResponse, error) {
	return service.IMachine_setIOCacheEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getIOCacheSizeContext(ctx context.Context, request *IMachine_getIOCacheSize) (*IMachine_getIOCacheSizeResponse, error) {
	response := new(IMachine_getIOCacheSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getIOCacheSize(request *IMachine_getIOCacheSize) (*IMachine_getIOCacheSizeResponse, error) {
	return service.IMachine_getIOCacheSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setIOCacheSizeContext(ctx context.Context, request *IMachine_setIOCacheSize) (*IMachine_setIOCacheSizeResponse, error) {
	response := new(IMachine_setIOCacheSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setIOCacheSize(request *IMachine_setIOCacheSize) (*IMachine_setIOCacheSizeResponse, error) {
	return service.IMachine_setIOCacheSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getPCIDeviceAssignmentsContext(ctx context.Context, request *IMachine_getPCIDeviceAssignments) (*IMachine_getPCIDeviceAssignmentsResponse, error) {
	response := new(IMachine_getPCIDeviceAssignmentsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getPCIDeviceAssignments(request *IMachine_getPCIDeviceAssignments) (*IMachine_getPCIDeviceAssignmentsResponse, error) {
	return service.IMachine_getPCIDeviceAssignmentsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getBandwidthControlContext(ctx context.Context, request *IMachine_getBandwidthControl) (*IMachine_getBandwidthControlResponse, error) {
	response := new(IMachine_getBandwidthControlResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getBandwidthControl(request *IMachine_getBandwidthControl) (*IMachine_getBandwidthControlResponse, error) {
	return service.IMachine_getBandwidthControlContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getTracingEnabledContext(ctx context.Context, request *IMachine_getTracingEnabled) (*IMachine_getTracingEnabledResponse, error) {
	response := new(IMachine_getTracingEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getTracingEnabled(request *IMachine_getTracingEnabled) (*IMachine_getTracingEnabledResponse, error) {
	return service.IMachine_getTracingEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setTracingEnabledContext(ctx context.Context, request *IMachine_setTracingEnabled) (*IMachine_setTracingEnabledResponse, error) {
	response := new(IMachine_setTracingEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setTracingEnabled(request *IMachine_setTracingEnabled) (*IMachine_setTracingEnabledResponse, error) {
	return service.IMachine_setTracingEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getTracingConfigContext(ctx context.Context, request *IMachine_getTracingConfig) (*IMachine_getTracingConfigResponse, error) {
	response := new(IMachine_getTracingConfigResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getTracingConfig(request *IMachine_getTracingConfig) (*IMachine_getTracingConfigResponse, error) {
	return service.IMachine_getTracingConfigContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setTracingConfigContext(ctx context.Context, request *IMachine_setTracingConfig) (*IMachine_setTracingConfigResponse, error) {
	response := new(IMachine_setTracingConfigResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setTracingConfig(request *IMachine_setTracingConfig) (*IMachine_setTracingConfigResponse, error) {
	return service.IMachine_setTracingConfigContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getAllowTracingToAccessVMContext(ctx context.Context, request *IMachine_getAllowTracingToAccessVM) (*IMachine_getAllowTracingToAccessVMResponse, error) {
	response := new(IMachine_getAllowTracingToAccessVMResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getAllowTracingToAccessVM(request *IMachine_getAllowTracingToAccessVM) (*IMachine_getAllowTracingToAccessVMResponse, error) {
	return service.IMachine_getAllowTracingToAccessVMContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setAllowTracingToAccessVMContext(ctx context.Context, request *IMachine_setAllowTracingToAccessVM) (*IMachine_setAllowTracingToAccessVMResponse, error) {
	response := new(IMachine_setAllowTracingToAccessVMResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setAllowTracingToAccessVM(request *IMachine_setAllowTracingToAccessVM) (*IMachine_setAllowTracingToAccessVMResponse, error) {
	return service.IMachine_setAllowTracingToAccessVMContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getAutostartEnabledContext(ctx context.Context, request *IMachine_getAutostartEnabled) (*IMachine_getAutostartEnabledResponse, error) {
	response := new(IMachine_getAutostartEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getAutostartEnabled(request *IMachine_getAutostartEnabled) (*IMachine_getAutostartEnabledResponse, error) {
	return service.IMachine_getAutostartEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setAutostartEnabledContext(ctx context.Context, request *IMachine_setAutostartEnabled) (*IMachine_setAutostartEnabledResponse, error) {
	response := new(IMachine_setAutostartEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setAutostartEnabled(request *IMachine_setAutostartEnabled) (*IMachine_setAutostartEnabledResponse, error) {
	return service.IMachine_setAutostartEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getAutostartDelayContext(ctx context.Context, request *IMachine_getAutostartDelay) (*IMachine_getAutostartDelayResponse, error) {
	response := new(IMachine_getAutostartDelayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getAutostartDelay(request *IMachine_getAutostartDelay) (*IMachine_getAutostartDelayResponse, error) {
	return service.IMachine_getAutostartDelayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setAutostartDelayContext(ctx context.Context, request *IMachine_setAutostartDelay) (*IMachine_setAutostartDelayResponse, error) {
	response := new(IMachine_setAutostartDelayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setAutostartDelay(request *IMachine_setAutostartDelay) (*IMachine_setAutostartDelayResponse, error) {
	return service.IMachine_setAutostartDelayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getAutostopTypeContext(ctx context.Context, request *IMachine_getAutostopType) (*IMachine_getAutostopTypeResponse, error) {
	response := new(IMachine_getAutostopTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getAutostopType(request *IMachine_getAutostopType) (*IMachine_getAutostopTypeResponse, error) {
	return service.IMachine_getAutostopTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setAutostopTypeContext(ctx context.Context, request *IMachine_setAutostopType) (*IMachine_setAutostopTypeResponse, error) {
	response := new(IMachine_setAutostopTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setAutostopType(request *IMachine_setAutostopType) (*IMachine_setAutostopTypeResponse, error) {
	return service.IMachine_setAutostopTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getDefaultFrontendContext(ctx context.Context, request *IMachine_getDefaultFrontend) (*IMachine_getDefaultFrontendResponse, error) {
	response := new(IMachine_getDefaultFrontendResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getDefaultFrontend(request *IMachine_getDefaultFrontend) (*IMachine_getDefaultFrontendResponse, error) {
	return service.IMachine_getDefaultFrontendContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setDefaultFrontendContext(ctx context.Context, request *IMachine_setDefaultFrontend) (*IMachine_setDefaultFrontendResponse, error) {
	response := new(IMachine_setDefaultFrontendResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setDefaultFrontend(request *IMachine_setDefaultFrontend) (*IMachine_setDefaultFrontendResponse, error) {
	return service.IMachine_setDefaultFrontendContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getUSBProxyAvailableContext(ctx context.Context, request *IMachine_getUSBProxyAvailable) (*IMachine_getUSBProxyAvailableResponse, error) {
	response := new(IMachine_getUSBProxyAvailableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getUSBProxyAvailable(request *IMachine_getUSBProxyAvailable) (*IMachine_getUSBProxyAvailableResponse, error) {
	return service.IMachine_getUSBProxyAvailableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getVMProcessPriorityContext(ctx context.Context, request *IMachine_getVMProcessPriority) (*IMachine_getVMProcessPriorityResponse, error) {
	response := new(IMachine_getVMProcessPriorityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getVMProcessPriority(request *IMachine_getVMProcessPriority) (*IMachine_getVMProcessPriorityResponse, error) {
	return service.IMachine_getVMProcessPriorityContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setVMProcessPriorityContext(ctx context.Context, request *IMachine_setVMProcessPriority) (*IMachine_setVMProcessPriorityResponse, error) {
	response := new(IMachine_setVMProcessPriorityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setVMProcessPriority(request *IMachine_setVMProcessPriority) (*IMachine_setVMProcessPriorityResponse, error) {
	return service.IMachine_setVMProcessPriorityContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getParavirtDebugContext(ctx context.Context, request *IMachine_getParavirtDebug) (*IMachine_getParavirtDebugResponse, error) {
	response := new(IMachine_getParavirtDebugResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getParavirtDebug(request *IMachine_getParavirtDebug) (*IMachine_getParavirtDebugResponse, error) {
	return service.IMachine_getParavirtDebugContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setParavirtDebugContext(ctx context.Context, request *IMachine_setParavirtDebug) (*IMachine_setParavirtDebugResponse, error) {
	response := new(IMachine_setParavirtDebugResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setParavirtDebug(request *IMachine_setParavirtDebug) (*IMachine_setParavirtDebugResponse, error) {
	return service.IMachine_setParavirtDebugContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getCPUProfileContext(ctx context.Context, request *IMachine_getCPUProfile) (*IMachine_getCPUProfileResponse, error) {
	response := new(IMachine_getCPUProfileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getCPUProfile(request *IMachine_getCPUProfile) (*IMachine_getCPUProfileResponse, error) {
	return service.IMachine_getCPUProfileContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setCPUProfileContext(ctx context.Context, request *IMachine_setCPUProfile) (*IMachine_setCPUProfileResponse, error) {
	response := new(IMachine_setCPUProfileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setCPUProfile(request *IMachine_setCPUProfile) (*IMachine_setCPUProfileResponse, error) {
	return service.IMachine_setCPUProfileContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getStateKeyIdContext(ctx context.Context, request *IMachine_getStateKeyId) (*IMachine_getStateKeyIdResponse, error) {
	response := new(IMachine_getStateKeyIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getStateKeyId(request *IMachine_getStateKeyId) (*IMachine_getStateKeyIdResponse, error) {
	return service.IMachine_getStateKeyIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getStateKeyStoreContext(ctx context.Context, request *IMachine_getStateKeyStore) (*IMachine_getStateKeyStoreResponse, error) {
	response := new(IMachine_getStateKeyStoreResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getStateKeyStore(request *IMachine_getStateKeyStore) (*IMachine_getStateKeyStoreResponse, error) {
	return service.IMachine_getStateKeyStoreContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getLogKeyIdContext(ctx context.Context, request *IMachine_getLogKeyId) (*IMachine_getLogKeyIdResponse, error) {
	response := new(IMachine_getLogKeyIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getLogKeyId(request *IMachine_getLogKeyId) (*IMachine_getLogKeyIdResponse, error) {
	return service.IMachine_getLogKeyIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getLogKeyStoreContext(ctx context.Context, request *IMachine_getLogKeyStore) (*IMachine_getLogKeyStoreResponse, error) {
	response := new(IMachine_getLogKeyStoreResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getLogKeyStore(request *IMachine_getLogKeyStore) (*IMachine_getLogKeyStoreResponse, error) {
	return service.IMachine_getLogKeyStoreContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getGuestDebugControlContext(ctx context.Context, request *IMachine_getGuestDebugControl) (*IMachine_getGuestDebugControlResponse, error) {
	response := new(IMachine_getGuestDebugControlResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getGuestDebugControl(request *IMachine_getGuestDebugControl) (*IMachine_getGuestDebugControlResponse, error) {
	return service.IMachine_getGuestDebugControlContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_lockMachineContext(ctx context.Context, request *IMachine_lockMachine) (*IMachine_lockMachineResponse, error) {
	response := new(IMachine_lockMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_lockMachine(request *IMachine_lockMachine) (*IMachine_lockMachineResponse, error) {
	return service.IMachine_lockMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_launchVMProcessContext(ctx context.Context, request *IMachine_launchVMProcess) (*IMachine_launchVMProcessResponse, error) {
	response := new(IMachine_launchVMProcessResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_launchVMProcess(request *IMachine_launchVMProcess) (*IMachine_launchVMProcessResponse, error) {
	return service.IMachine_launchVMProcessContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setBootOrderContext(ctx context.Context, request *IMachine_setBootOrder) (*IMachine_setBootOrderResponse, error) {
	response := new(IMachine_setBootOrderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setBootOrder(request *IMachine_setBootOrder) (*IMachine_setBootOrderResponse, error) {
	return service.IMachine_setBootOrderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getBootOrderContext(ctx context.Context, request *IMachine_getBootOrder) (*IMachine_getBootOrderResponse, error) {
	response := new(IMachine_getBootOrderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getBootOrder(request *IMachine_getBootOrder) (*IMachine_getBootOrderResponse, error) {
	return service.IMachine_getBootOrderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_attachDeviceContext(ctx context.Context, request *IMachine_attachDevice) (*IMachine_attachDeviceResponse, error) {
	response := new(IMachine_attachDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_attachDevice(request *IMachine_attachDevice) (*IMachine_attachDeviceResponse, error) {
	return service.IMachine_attachDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_attachDeviceWithoutMediumContext(ctx context.Context, request *IMachine_attachDeviceWithoutMedium) (*IMachine_attachDeviceWithoutMediumResponse, error) {
	response := new(IMachine_attachDeviceWithoutMediumResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_attachDeviceWithoutMedium(request *IMachine_attachDeviceWithoutMedium) (*IMachine_attachDeviceWithoutMediumResponse, error) {
	return service.IMachine_attachDeviceWithoutMediumContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_detachDeviceContext(ctx context.Context, request *IMachine_detachDevice) (*IMachine_detachDeviceResponse, error) {
	response := new(IMachine_detachDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_detachDevice(request *IMachine_detachDevice) (*IMachine_detachDeviceResponse, error) {
	return service.IMachine_detachDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_passthroughDeviceContext(ctx context.Context, request *IMachine_passthroughDevice) (*IMachine_passthroughDeviceResponse, error) {
	response := new(IMachine_passthroughDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_passthroughDevice(request *IMachine_passthroughDevice) (*IMachine_passthroughDeviceResponse, error) {
	return service.IMachine_passthroughDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_temporaryEjectDeviceContext(ctx context.Context, request *IMachine_temporaryEjectDevice) (*IMachine_temporaryEjectDeviceResponse, error) {
	response := new(IMachine_temporaryEjectDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_temporaryEjectDevice(request *IMachine_temporaryEjectDevice) (*IMachine_temporaryEjectDeviceResponse, error) {
	return service.IMachine_temporaryEjectDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_nonRotationalDeviceContext(ctx context.Context, request *IMachine_nonRotationalDevice) (*IMachine_nonRotationalDeviceResponse, error) {
	response := new(IMachine_nonRotationalDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_nonRotationalDevice(request *IMachine_nonRotationalDevice) (*IMachine_nonRotationalDeviceResponse, error) {
	return service.IMachine_nonRotationalDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setAutoDiscardForDeviceContext(ctx context.Context, request *IMachine_setAutoDiscardForDevice) (*IMachine_setAutoDiscardForDeviceResponse, error) {
	response := new(IMachine_setAutoDiscardForDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setAutoDiscardForDevice(request *IMachine_setAutoDiscardForDevice) (*IMachine_setAutoDiscardForDeviceResponse, error) {
	return service.IMachine_setAutoDiscardForDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setHotPluggableForDeviceContext(ctx context.Context, request *IMachine_setHotPluggableForDevice) (*IMachine_setHotPluggableForDeviceResponse, error) {
	response := new(IMachine_setHotPluggableForDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setHotPluggableForDevice(request *IMachine_setHotPluggableForDevice) (*IMachine_setHotPluggableForDeviceResponse, error) {
	return service.IMachine_setHotPluggableForDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setBandwidthGroupForDeviceContext(ctx context.Context, request *IMachine_setBandwidthGroupForDevice) (*IMachine_setBandwidthGroupForDeviceResponse, error) {
	response := new(IMachine_setBandwidthGroupForDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setBandwidthGroupForDevice(request *IMachine_setBandwidthGroupForDevice) (*IMachine_setBandwidthGroupForDeviceResponse, error) {
	return service.IMachine_setBandwidthGroupForDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setNoBandwidthGroupForDeviceContext(ctx context.Context, request *IMachine_setNoBandwidthGroupForDevice) (*IMachine_setNoBandwidthGroupForDeviceResponse, error) {
	response := new(IMachine_setNoBandwidthGroupForDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setNoBandwidthGroupForDevice(request *IMachine_setNoBandwidthGroupForDevice) (*IMachine_setNoBandwidthGroupForDeviceResponse, error) {
	return service.IMachine_setNoBandwidthGroupForDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_unmountMediumContext(ctx context.Context, request *IMachine_unmountMedium) (*IMachine_unmountMediumResponse, error) {
	response := new(IMachine_unmountMediumResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_unmountMedium(request *IMachine_unmountMedium) (*IMachine_unmountMediumResponse, error) {
	return service.IMachine_unmountMediumContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_mountMediumContext(ctx context.Context, request *IMachine_mountMedium) (*IMachine_mountMediumResponse, error) {
	response := new(IMachine_mountMediumResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_mountMedium(request *IMachine_mountMedium) (*IMachine_mountMediumResponse, error) {
	return service.IMachine_mountMediumContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getMediumContext(ctx context.Context, request *IMachine_getMedium) (*IMachine_getMediumResponse, error) {
	response := new(IMachine_getMediumResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getMedium(request *IMachine_getMedium) (*IMachine_getMediumResponse, error) {
	return service.IMachine_getMediumContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getMediumAttachmentsOfControllerContext(ctx context.Context, request *IMachine_getMediumAttachmentsOfController) (*IMachine_getMediumAttachmentsOfControllerResponse, error) {
	response := new(IMachine_getMediumAttachmentsOfControllerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getMediumAttachmentsOfController(request *IMachine_getMediumAttachmentsOfController) (*IMachine_getMediumAttachmentsOfControllerResponse, error) {
	return service.IMachine_getMediumAttachmentsOfControllerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getMediumAttachmentContext(ctx context.Context, request *IMachine_getMediumAttachment) (*IMachine_getMediumAttachmentResponse, error) {
	response := new(IMachine_getMediumAttachmentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getMediumAttachment(request *IMachine_getMediumAttachment) (*IMachine_getMediumAttachmentResponse, error) {
	return service.IMachine_getMediumAttachmentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_attachHostPCIDeviceContext(ctx context.Context, request *IMachine_attachHostPCIDevice) (*IMachine_attachHostPCIDeviceResponse, error) {
	response := new(IMachine_attachHostPCIDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_attachHostPCIDevice(request *IMachine_attachHostPCIDevice) (*IMachine_attachHostPCIDeviceResponse, error) {
	return service.IMachine_attachHostPCIDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_detachHostPCIDeviceContext(ctx context.Context, request *IMachine_detachHostPCIDevice) (*IMachine_detachHostPCIDeviceResponse, error) {
	response := new(IMachine_detachHostPCIDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_detachHostPCIDevice(request *IMachine_detachHostPCIDevice) (*IMachine_detachHostPCIDeviceResponse, error) {
	return service.IMachine_detachHostPCIDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getNetworkAdapterContext(ctx context.Context, request *IMachine_getNetworkAdapter) (*IMachine_getNetworkAdapterResponse, error) {
	response := new(IMachine_getNetworkAdapterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getNetworkAdapter(request *IMachine_getNetworkAdapter) (*IMachine_getNetworkAdapterResponse, error) {
	return service.IMachine_getNetworkAdapterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_addStorageControllerContext(ctx context.Context, request *IMachine_addStorageController) (*IMachine_addStorageControllerResponse, error) {
	response := new(IMachine_addStorageControllerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_addStorageController(request *IMachine_addStorageController) (*IMachine_addStorageControllerResponse, error) {
	return service.IMachine_addStorageControllerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getStorageControllerByNameContext(ctx context.Context, request *IMachine_getStorageControllerByName) (*IMachine_getStorageControllerByNameResponse, error) {
	response := new(IMachine_getStorageControllerByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getStorageControllerByName(request *IMachine_getStorageControllerByName) (*IMachine_getStorageControllerByNameResponse, error) {
	return service.IMachine_getStorageControllerByNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getStorageControllerByInstanceContext(ctx context.Context, request *IMachine_getStorageControllerByInstance) (*IMachine_getStorageControllerByInstanceResponse, error) {
	response := new(IMachine_getStorageControllerByInstanceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getStorageControllerByInstance(request *IMachine_getStorageControllerByInstance) (*IMachine_getStorageControllerByInstanceResponse, error) {
	return service.IMachine_getStorageControllerByInstanceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_removeStorageControllerContext(ctx context.Context, request *IMachine_removeStorageController) (*IMachine_removeStorageControllerResponse, error) {
	response := new(IMachine_removeStorageControllerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_removeStorageController(request *IMachine_removeStorageController) (*IMachine_removeStorageControllerResponse, error) {
	return service.IMachine_removeStorageControllerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setStorageControllerBootableContext(ctx context.Context, request *IMachine_setStorageControllerBootable) (*IMachine_setStorageControllerBootableResponse, error) {
	response := new(IMachine_setStorageControllerBootableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setStorageControllerBootable(request *IMachine_setStorageControllerBootable) (*IMachine_setStorageControllerBootableResponse, error) {
	return service.IMachine_setStorageControllerBootableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_addUSBControllerContext(ctx context.Context, request *IMachine_addUSBController) (*IMachine_addUSBControllerResponse, error) {
	response := new(IMachine_addUSBControllerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_addUSBController(request *IMachine_addUSBController) (*IMachine_addUSBControllerResponse, error) {
	return service.IMachine_addUSBControllerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_removeUSBControllerContext(ctx context.Context, request *IMachine_removeUSBController) (*IMachine_removeUSBControllerResponse, error) {
	response := new(IMachine_removeUSBControllerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_removeUSBController(request *IMachine_removeUSBController) (*IMachine_removeUSBControllerResponse, error) {
	return service.IMachine_removeUSBControllerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getUSBControllerByNameContext(ctx context.Context, request *IMachine_getUSBControllerByName) (*IMachine_getUSBControllerByNameResponse, error) {
	response := new(IMachine_getUSBControllerByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getUSBControllerByName(request *IMachine_getUSBControllerByName) (*IMachine_getUSBControllerByNameResponse, error) {
	return service.IMachine_getUSBControllerByNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getUSBControllerCountByTypeContext(ctx context.Context, request *IMachine_getUSBControllerCountByType) (*IMachine_getUSBControllerCountByTypeResponse, error) {
	response := new(IMachine_getUSBControllerCountByTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getUSBControllerCountByType(request *IMachine_getUSBControllerCountByType) (*IMachine_getUSBControllerCountByTypeResponse, error) {
	return service.IMachine_getUSBControllerCountByTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getSerialPortContext(ctx context.Context, request *IMachine_getSerialPort) (*IMachine_getSerialPortResponse, error) {
	response := new(IMachine_getSerialPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getSerialPort(request *IMachine_getSerialPort) (*IMachine_getSerialPortResponse, error) {
	return service.IMachine_getSerialPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getParallelPortContext(ctx context.Context, request *IMachine_getParallelPort) (*IMachine_getParallelPortResponse, error) {
	response := new(IMachine_getParallelPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getParallelPort(request *IMachine_getParallelPort) (*IMachine_getParallelPortResponse, error) {
	return service.IMachine_getParallelPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getExtraDataKeysContext(ctx context.Context, request *IMachine_getExtraDataKeys) (*IMachine_getExtraDataKeysResponse, error) {
	response := new(IMachine_getExtraDataKeysResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getExtraDataKeys(request *IMachine_getExtraDataKeys) (*IMachine_getExtraDataKeysResponse, error) {
	return service.IMachine_getExtraDataKeysContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getExtraDataContext(ctx context.Context, request *IMachine_getExtraData) (*IMachine_getExtraDataResponse, error) {
	response := new(IMachine_getExtraDataResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getExtraData(request *IMachine_getExtraData) (*IMachine_getExtraDataResponse, error) {
	return service.IMachine_getExtraDataContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setExtraDataContext(ctx context.Context, request *IMachine_setExtraData) (*IMachine_setExtraDataResponse, error) {
	response := new(IMachine_setExtraDataResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setExtraData(request *IMachine_setExtraData) (*IMachine_setExtraDataResponse, error) {
	return service.IMachine_setExtraDataContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getCPUPropertyContext(ctx context.Context, request *IMachine_getCPUProperty) (*IMachine_getCPUPropertyResponse, error) {
	response := new(IMachine_getCPUPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getCPUProperty(request *IMachine_getCPUProperty) (*IMachine_getCPUPropertyResponse, error) {
	return service.IMachine_getCPUPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setCPUPropertyContext(ctx context.Context, request *IMachine_setCPUProperty) (*IMachine_setCPUPropertyResponse, error) {
	response := new(IMachine_setCPUPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setCPUProperty(request *IMachine_setCPUProperty) (*IMachine_setCPUPropertyResponse, error) {
	return service.IMachine_setCPUPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getCPUIDLeafByOrdinalContext(ctx context.Context, request *IMachine_getCPUIDLeafByOrdinal) (*IMachine_getCPUIDLeafByOrdinalResponse, error) {
	response := new(IMachine_getCPUIDLeafByOrdinalResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getCPUIDLeafByOrdinal(request *IMachine_getCPUIDLeafByOrdinal) (*IMachine_getCPUIDLeafByOrdinalResponse, error) {
	return service.IMachine_getCPUIDLeafByOrdinalContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getCPUIDLeafContext(ctx context.Context, request *IMachine_getCPUIDLeaf) (*IMachine_getCPUIDLeafResponse, error) {
	response := new(IMachine_getCPUIDLeafResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getCPUIDLeaf(request *IMachine_getCPUIDLeaf) (*IMachine_getCPUIDLeafResponse, error) {
	return service.IMachine_getCPUIDLeafContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setCPUIDLeafContext(ctx context.Context, request *IMachine_setCPUIDLeaf) (*IMachine_setCPUIDLeafResponse, error) {
	response := new(IMachine_setCPUIDLeafResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setCPUIDLeaf(request *IMachine_setCPUIDLeaf) (*IMachine_setCPUIDLeafResponse, error) {
	return service.IMachine_setCPUIDLeafContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_removeCPUIDLeafContext(ctx context.Context, request *IMachine_removeCPUIDLeaf) (*IMachine_removeCPUIDLeafResponse, error) {
	response := new(IMachine_removeCPUIDLeafResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_removeCPUIDLeaf(request *IMachine_removeCPUIDLeaf) (*IMachine_removeCPUIDLeafResponse, error) {
	return service.IMachine_removeCPUIDLeafContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_removeAllCPUIDLeavesContext(ctx context.Context, request *IMachine_removeAllCPUIDLeaves) (*IMachine_removeAllCPUIDLeavesResponse, error) {
	response := new(IMachine_removeAllCPUIDLeavesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_removeAllCPUIDLeaves(request *IMachine_removeAllCPUIDLeaves) (*IMachine_removeAllCPUIDLeavesResponse, error) {
	return service.IMachine_removeAllCPUIDLeavesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getHWVirtExPropertyContext(ctx context.Context, request *IMachine_getHWVirtExProperty) (*IMachine_getHWVirtExPropertyResponse, error) {
	response := new(IMachine_getHWVirtExPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getHWVirtExProperty(request *IMachine_getHWVirtExProperty) (*IMachine_getHWVirtExPropertyResponse, error) {
	return service.IMachine_getHWVirtExPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setHWVirtExPropertyContext(ctx context.Context, request *IMachine_setHWVirtExProperty) (*IMachine_setHWVirtExPropertyResponse, error) {
	response := new(IMachine_setHWVirtExPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setHWVirtExProperty(request *IMachine_setHWVirtExProperty) (*IMachine_setHWVirtExPropertyResponse, error) {
	return service.IMachine_setHWVirtExPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setSettingsFilePathContext(ctx context.Context, request *IMachine_setSettingsFilePath) (*IMachine_setSettingsFilePathResponse, error) {
	response := new(IMachine_setSettingsFilePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setSettingsFilePath(request *IMachine_setSettingsFilePath) (*IMachine_setSettingsFilePathResponse, error) {
	return service.IMachine_setSettingsFilePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_saveSettingsContext(ctx context.Context, request *IMachine_saveSettings) (*IMachine_saveSettingsResponse, error) {
	response := new(IMachine_saveSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_saveSettings(request *IMachine_saveSettings) (*IMachine_saveSettingsResponse, error) {
	return service.IMachine_saveSettingsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_discardSettingsContext(ctx context.Context, request *IMachine_discardSettings) (*IMachine_discardSettingsResponse, error) {
	response := new(IMachine_discardSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_discardSettings(request *IMachine_discardSettings) (*IMachine_discardSettingsResponse, error) {
	return service.IMachine_discardSettingsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_unregisterContext(ctx context.Context, request *IMachine_unregister) (*IMachine_unregisterResponse, error) {
	response := new(IMachine_unregisterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_unregister(request *IMachine_unregister) (*IMachine_unregisterResponse, error) {
	return service.IMachine_unregisterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_deleteConfigContext(ctx context.Context, request *IMachine_deleteConfig) (*IMachine_deleteConfigResponse, error) {
	response := new(IMachine_deleteConfigResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_deleteConfig(request *IMachine_deleteConfig) (*IMachine_deleteConfigResponse, error) {
	return service.IMachine_deleteConfigContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_exportToContext(ctx context.Context, request *IMachine_exportTo) (*IMachine_exportToResponse, error) {
	response := new(IMachine_exportToResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_exportTo(request *IMachine_exportTo) (*IMachine_exportToResponse, error) {
	return service.IMachine_exportToContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_findSnapshotContext(ctx context.Context, request *IMachine_findSnapshot) (*IMachine_findSnapshotResponse, error) {
	response := new(IMachine_findSnapshotResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_findSnapshot(request *IMachine_findSnapshot) (*IMachine_findSnapshotResponse, error) {
	return service.IMachine_findSnapshotContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_createSharedFolderContext(ctx context.Context, request *IMachine_createSharedFolder) (*IMachine_createSharedFolderResponse, error) {
	response := new(IMachine_createSharedFolderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_createSharedFolder(request *IMachine_createSharedFolder) (*IMachine_createSharedFolderResponse, error) {
	return service.IMachine_createSharedFolderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_removeSharedFolderContext(ctx context.Context, request *IMachine_removeSharedFolder) (*IMachine_removeSharedFolderResponse, error) {
	response := new(IMachine_removeSharedFolderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_removeSharedFolder(request *IMachine_removeSharedFolder) (*IMachine_removeSharedFolderResponse, error) {
	return service.IMachine_removeSharedFolderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_canShowConsoleWindowContext(ctx context.Context, request *IMachine_canShowConsoleWindow) (*IMachine_canShowConsoleWindowResponse, error) {
	response := new(IMachine_canShowConsoleWindowResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_canShowConsoleWindow(request *IMachine_canShowConsoleWindow) (*IMachine_canShowConsoleWindowResponse, error) {
	return service.IMachine_canShowConsoleWindowContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_showConsoleWindowContext(ctx context.Context, request *IMachine_showConsoleWindow) (*IMachine_showConsoleWindowResponse, error) {
	response := new(IMachine_showConsoleWindowResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_showConsoleWindow(request *IMachine_showConsoleWindow) (*IMachine_showConsoleWindowResponse, error) {
	return service.IMachine_showConsoleWindowContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getGuestPropertyContext(ctx context.Context, request *IMachine_getGuestProperty) (*IMachine_getGuestPropertyResponse, error) {
	response := new(IMachine_getGuestPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getGuestProperty(request *IMachine_getGuestProperty) (*IMachine_getGuestPropertyResponse, error) {
	return service.IMachine_getGuestPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getGuestPropertyValueContext(ctx context.Context, request *IMachine_getGuestPropertyValue) (*IMachine_getGuestPropertyValueResponse, error) {
	response := new(IMachine_getGuestPropertyValueResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getGuestPropertyValue(request *IMachine_getGuestPropertyValue) (*IMachine_getGuestPropertyValueResponse, error) {
	return service.IMachine_getGuestPropertyValueContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getGuestPropertyTimestampContext(ctx context.Context, request *IMachine_getGuestPropertyTimestamp) (*IMachine_getGuestPropertyTimestampResponse, error) {
	response := new(IMachine_getGuestPropertyTimestampResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getGuestPropertyTimestamp(request *IMachine_getGuestPropertyTimestamp) (*IMachine_getGuestPropertyTimestampResponse, error) {
	return service.IMachine_getGuestPropertyTimestampContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setGuestPropertyContext(ctx context.Context, request *IMachine_setGuestProperty) (*IMachine_setGuestPropertyResponse, error) {
	response := new(IMachine_setGuestPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setGuestProperty(request *IMachine_setGuestProperty) (*IMachine_setGuestPropertyResponse, error) {
	return service.IMachine_setGuestPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_setGuestPropertyValueContext(ctx context.Context, request *IMachine_setGuestPropertyValue) (*IMachine_setGuestPropertyValueResponse, error) {
	response := new(IMachine_setGuestPropertyValueResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_setGuestPropertyValue(request *IMachine_setGuestPropertyValue) (*IMachine_setGuestPropertyValueResponse, error) {
	return service.IMachine_setGuestPropertyValueContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_deleteGuestPropertyContext(ctx context.Context, request *IMachine_deleteGuestProperty) (*IMachine_deleteGuestPropertyResponse, error) {
	response := new(IMachine_deleteGuestPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_deleteGuestProperty(request *IMachine_deleteGuestProperty) (*IMachine_deleteGuestPropertyResponse, error) {
	return service.IMachine_deleteGuestPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_enumerateGuestPropertiesContext(ctx context.Context, request *IMachine_enumerateGuestProperties) (*IMachine_enumerateGuestPropertiesResponse, error) {
	response := new(IMachine_enumerateGuestPropertiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_enumerateGuestProperties(request *IMachine_enumerateGuestProperties) (*IMachine_enumerateGuestPropertiesResponse, error) {
	return service.IMachine_enumerateGuestPropertiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_querySavedGuestScreenInfoContext(ctx context.Context, request *IMachine_querySavedGuestScreenInfo) (*IMachine_querySavedGuestScreenInfoResponse, error) {
	response := new(IMachine_querySavedGuestScreenInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_querySavedGuestScreenInfo(request *IMachine_querySavedGuestScreenInfo) (*IMachine_querySavedGuestScreenInfoResponse, error) {
	return service.IMachine_querySavedGuestScreenInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_readSavedThumbnailToArrayContext(ctx context.Context, request *IMachine_readSavedThumbnailToArray) (*IMachine_readSavedThumbnailToArrayResponse, error) {
	response := new(IMachine_readSavedThumbnailToArrayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_readSavedThumbnailToArray(request *IMachine_readSavedThumbnailToArray) (*IMachine_readSavedThumbnailToArrayResponse, error) {
	return service.IMachine_readSavedThumbnailToArrayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_querySavedScreenshotInfoContext(ctx context.Context, request *IMachine_querySavedScreenshotInfo) (*IMachine_querySavedScreenshotInfoResponse, error) {
	response := new(IMachine_querySavedScreenshotInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_querySavedScreenshotInfo(request *IMachine_querySavedScreenshotInfo) (*IMachine_querySavedScreenshotInfoResponse, error) {
	return service.IMachine_querySavedScreenshotInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_readSavedScreenshotToArrayContext(ctx context.Context, request *IMachine_readSavedScreenshotToArray) (*IMachine_readSavedScreenshotToArrayResponse, error) {
	response := new(IMachine_readSavedScreenshotToArrayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_readSavedScreenshotToArray(request *IMachine_readSavedScreenshotToArray) (*IMachine_readSavedScreenshotToArrayResponse, error) {
	return service.IMachine_readSavedScreenshotToArrayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_hotPlugCPUContext(ctx context.Context, request *IMachine_hotPlugCPU) (*IMachine_hotPlugCPUResponse, error) {
	response := new(IMachine_hotPlugCPUResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_hotPlugCPU(request *IMachine_hotPlugCPU) (*IMachine_hotPlugCPUResponse, error) {
	return service.IMachine_hotPlugCPUContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_hotUnplugCPUContext(ctx context.Context, request *IMachine_hotUnplugCPU) (*IMachine_hotUnplugCPUResponse, error) {
	response := new(IMachine_hotUnplugCPUResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_hotUnplugCPU(request *IMachine_hotUnplugCPU) (*IMachine_hotUnplugCPUResponse, error) {
	return service.IMachine_hotUnplugCPUContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getCPUStatusContext(ctx context.Context, request *IMachine_getCPUStatus) (*IMachine_getCPUStatusResponse, error) {
	response := new(IMachine_getCPUStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getCPUStatus(request *IMachine_getCPUStatus) (*IMachine_getCPUStatusResponse, error) {
	return service.IMachine_getCPUStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getEffectiveParavirtProviderContext(ctx context.Context, request *IMachine_getEffectiveParavirtProvider) (*IMachine_getEffectiveParavirtProviderResponse, error) {
	response := new(IMachine_getEffectiveParavirtProviderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getEffectiveParavirtProvider(request *IMachine_getEffectiveParavirtProvider) (*IMachine_getEffectiveParavirtProviderResponse, error) {
	return service.IMachine_getEffectiveParavirtProviderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_queryLogFilenameContext(ctx context.Context, request *IMachine_queryLogFilename) (*IMachine_queryLogFilenameResponse, error) {
	response := new(IMachine_queryLogFilenameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_queryLogFilename(request *IMachine_queryLogFilename) (*IMachine_queryLogFilenameResponse, error) {
	return service.IMachine_queryLogFilenameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_readLogContext(ctx context.Context, request *IMachine_readLog) (*IMachine_readLogResponse, error) {
	response := new(IMachine_readLogResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_readLog(request *IMachine_readLog) (*IMachine_readLogResponse, error) {
	return service.IMachine_readLogContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_cloneToContext(ctx context.Context, request *IMachine_cloneTo) (*IMachine_cloneToResponse, error) {
	response := new(IMachine_cloneToResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_cloneTo(request *IMachine_cloneTo) (*IMachine_cloneToResponse, error) {
	return service.IMachine_cloneToContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_moveToContext(ctx context.Context, request *IMachine_moveTo) (*IMachine_moveToResponse, error) {
	response := new(IMachine_moveToResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_moveTo(request *IMachine_moveTo) (*IMachine_moveToResponse, error) {
	return service.IMachine_moveToContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_saveStateContext(ctx context.Context, request *IMachine_saveState) (*IMachine_saveStateResponse, error) {
	response := new(IMachine_saveStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_saveState(request *IMachine_saveState) (*IMachine_saveStateResponse, error) {
	return service.IMachine_saveStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_adoptSavedStateContext(ctx context.Context, request *IMachine_adoptSavedState) (*IMachine_adoptSavedStateResponse, error) {
	response := new(IMachine_adoptSavedStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_adoptSavedState(request *IMachine_adoptSavedState) (*IMachine_adoptSavedStateResponse, error) {
	return service.IMachine_adoptSavedStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_discardSavedStateContext(ctx context.Context, request *IMachine_discardSavedState) (*IMachine_discardSavedStateResponse, error) {
	response := new(IMachine_discardSavedStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_discardSavedState(request *IMachine_discardSavedState) (*IMachine_discardSavedStateResponse, error) {
	return service.IMachine_discardSavedStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_takeSnapshotContext(ctx context.Context, request *IMachine_takeSnapshot) (*IMachine_takeSnapshotResponse, error) {
	response := new(IMachine_takeSnapshotResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_takeSnapshot(request *IMachine_takeSnapshot) (*IMachine_takeSnapshotResponse, error) {
	return service.IMachine_takeSnapshotContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_deleteSnapshotContext(ctx context.Context, request *IMachine_deleteSnapshot) (*IMachine_deleteSnapshotResponse, error) {
	response := new(IMachine_deleteSnapshotResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_deleteSnapshot(request *IMachine_deleteSnapshot) (*IMachine_deleteSnapshotResponse, error) {
	return service.IMachine_deleteSnapshotContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_deleteSnapshotAndAllChildrenContext(ctx context.Context, request *IMachine_deleteSnapshotAndAllChildren) (*IMachine_deleteSnapshotAndAllChildrenResponse, error) {
	response := new(IMachine_deleteSnapshotAndAllChildrenResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_deleteSnapshotAndAllChildren(request *IMachine_deleteSnapshotAndAllChildren) (*IMachine_deleteSnapshotAndAllChildrenResponse, error) {
	return service.IMachine_deleteSnapshotAndAllChildrenContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_deleteSnapshotRangeContext(ctx context.Context, request *IMachine_deleteSnapshotRange) (*IMachine_deleteSnapshotRangeResponse, error) {
	response := new(IMachine_deleteSnapshotRangeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_deleteSnapshotRange(request *IMachine_deleteSnapshotRange) (*IMachine_deleteSnapshotRangeResponse, error) {
	return service.IMachine_deleteSnapshotRangeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_restoreSnapshotContext(ctx context.Context, request *IMachine_restoreSnapshot) (*IMachine_restoreSnapshotResponse, error) {
	response := new(IMachine_restoreSnapshotResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_restoreSnapshot(request *IMachine_restoreSnapshot) (*IMachine_restoreSnapshotResponse, error) {
	return service.IMachine_restoreSnapshotContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_applyDefaultsContext(ctx context.Context, request *IMachine_applyDefaults) (*IMachine_applyDefaultsResponse, error) {
	response := new(IMachine_applyDefaultsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_applyDefaults(request *IMachine_applyDefaults) (*IMachine_applyDefaultsResponse, error) {
	return service.IMachine_applyDefaultsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_changeEncryptionContext(ctx context.Context, request *IMachine_changeEncryption) (*IMachine_changeEncryptionResponse, error) {
	response := new(IMachine_changeEncryptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_changeEncryption(request *IMachine_changeEncryption) (*IMachine_changeEncryptionResponse, error) {
	return service.IMachine_changeEncryptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_getEncryptionSettingsContext(ctx context.Context, request *IMachine_getEncryptionSettings) (*IMachine_getEncryptionSettingsResponse, error) {
	response := new(IMachine_getEncryptionSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_getEncryptionSettings(request *IMachine_getEncryptionSettings) (*IMachine_getEncryptionSettingsResponse, error) {
	return service.IMachine_getEncryptionSettingsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_checkEncryptionPasswordContext(ctx context.Context, request *IMachine_checkEncryptionPassword) (*IMachine_checkEncryptionPasswordResponse, error) {
	response := new(IMachine_checkEncryptionPasswordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_checkEncryptionPassword(request *IMachine_checkEncryptionPassword) (*IMachine_checkEncryptionPasswordResponse, error) {
	return service.IMachine_checkEncryptionPasswordContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_addEncryptionPasswordContext(ctx context.Context, request *IMachine_addEncryptionPassword) (*IMachine_addEncryptionPasswordResponse, error) {
	response := new(IMachine_addEncryptionPasswordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_addEncryptionPassword(request *IMachine_addEncryptionPassword) (*IMachine_addEncryptionPasswordResponse, error) {
	return service.IMachine_addEncryptionPasswordContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_addEncryptionPasswordsContext(ctx context.Context, request *IMachine_addEncryptionPasswords) (*IMachine_addEncryptionPasswordsResponse, error) {
	response := new(IMachine_addEncryptionPasswordsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_addEncryptionPasswords(request *IMachine_addEncryptionPasswords) (*IMachine_addEncryptionPasswordsResponse, error) {
	return service.IMachine_addEncryptionPasswordsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_removeEncryptionPasswordContext(ctx context.Context, request *IMachine_removeEncryptionPassword) (*IMachine_removeEncryptionPasswordResponse, error) {
	response := new(IMachine_removeEncryptionPasswordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_removeEncryptionPassword(request *IMachine_removeEncryptionPassword) (*IMachine_removeEncryptionPasswordResponse, error) {
	return service.IMachine_removeEncryptionPasswordContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachine_clearAllEncryptionPasswordsContext(ctx context.Context, request *IMachine_clearAllEncryptionPasswords) (*IMachine_clearAllEncryptionPasswordsResponse, error) {
	response := new(IMachine_clearAllEncryptionPasswordsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachine_clearAllEncryptionPasswords(request *IMachine_clearAllEncryptionPasswords) (*IMachine_clearAllEncryptionPasswordsResponse, error) {
	return service.IMachine_clearAllEncryptionPasswordsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEmulatedUSB_getWebcamsContext(ctx context.Context, request *IEmulatedUSB_getWebcams) (*IEmulatedUSB_getWebcamsResponse, error) {
	response := new(IEmulatedUSB_getWebcamsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEmulatedUSB_getWebcams(request *IEmulatedUSB_getWebcams) (*IEmulatedUSB_getWebcamsResponse, error) {
	return service.IEmulatedUSB_getWebcamsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEmulatedUSB_webcamAttachContext(ctx context.Context, request *IEmulatedUSB_webcamAttach) (*IEmulatedUSB_webcamAttachResponse, error) {
	response := new(IEmulatedUSB_webcamAttachResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEmulatedUSB_webcamAttach(request *IEmulatedUSB_webcamAttach) (*IEmulatedUSB_webcamAttachResponse, error) {
	return service.IEmulatedUSB_webcamAttachContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEmulatedUSB_webcamDetachContext(ctx context.Context, request *IEmulatedUSB_webcamDetach) (*IEmulatedUSB_webcamDetachResponse, error) {
	response := new(IEmulatedUSB_webcamDetachResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEmulatedUSB_webcamDetach(request *IEmulatedUSB_webcamDetach) (*IEmulatedUSB_webcamDetachResponse, error) {
	return service.IEmulatedUSB_webcamDetachContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getMachineContext(ctx context.Context, request *IConsole_getMachine) (*IConsole_getMachineResponse, error) {
	response := new(IConsole_getMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getMachine(request *IConsole_getMachine) (*IConsole_getMachineResponse, error) {
	return service.IConsole_getMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getStateContext(ctx context.Context, request *IConsole_getState) (*IConsole_getStateResponse, error) {
	response := new(IConsole_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getState(request *IConsole_getState) (*IConsole_getStateResponse, error) {
	return service.IConsole_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getGuestContext(ctx context.Context, request *IConsole_getGuest) (*IConsole_getGuestResponse, error) {
	response := new(IConsole_getGuestResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getGuest(request *IConsole_getGuest) (*IConsole_getGuestResponse, error) {
	return service.IConsole_getGuestContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getKeyboardContext(ctx context.Context, request *IConsole_getKeyboard) (*IConsole_getKeyboardResponse, error) {
	response := new(IConsole_getKeyboardResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getKeyboard(request *IConsole_getKeyboard) (*IConsole_getKeyboardResponse, error) {
	return service.IConsole_getKeyboardContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getMouseContext(ctx context.Context, request *IConsole_getMouse) (*IConsole_getMouseResponse, error) {
	response := new(IConsole_getMouseResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getMouse(request *IConsole_getMouse) (*IConsole_getMouseResponse, error) {
	return service.IConsole_getMouseContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getDisplayContext(ctx context.Context, request *IConsole_getDisplay) (*IConsole_getDisplayResponse, error) {
	response := new(IConsole_getDisplayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getDisplay(request *IConsole_getDisplay) (*IConsole_getDisplayResponse, error) {
	return service.IConsole_getDisplayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getDebuggerContext(ctx context.Context, request *IConsole_getDebugger) (*IConsole_getDebuggerResponse, error) {
	response := new(IConsole_getDebuggerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getDebugger(request *IConsole_getDebugger) (*IConsole_getDebuggerResponse, error) {
	return service.IConsole_getDebuggerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getUSBDevicesContext(ctx context.Context, request *IConsole_getUSBDevices) (*IConsole_getUSBDevicesResponse, error) {
	response := new(IConsole_getUSBDevicesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getUSBDevices(request *IConsole_getUSBDevices) (*IConsole_getUSBDevicesResponse, error) {
	return service.IConsole_getUSBDevicesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getRemoteUSBDevicesContext(ctx context.Context, request *IConsole_getRemoteUSBDevices) (*IConsole_getRemoteUSBDevicesResponse, error) {
	response := new(IConsole_getRemoteUSBDevicesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getRemoteUSBDevices(request *IConsole_getRemoteUSBDevices) (*IConsole_getRemoteUSBDevicesResponse, error) {
	return service.IConsole_getRemoteUSBDevicesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getSharedFoldersContext(ctx context.Context, request *IConsole_getSharedFolders) (*IConsole_getSharedFoldersResponse, error) {
	response := new(IConsole_getSharedFoldersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getSharedFolders(request *IConsole_getSharedFolders) (*IConsole_getSharedFoldersResponse, error) {
	return service.IConsole_getSharedFoldersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getVRDEServerInfoContext(ctx context.Context, request *IConsole_getVRDEServerInfo) (*IConsole_getVRDEServerInfoResponse, error) {
	response := new(IConsole_getVRDEServerInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getVRDEServerInfo(request *IConsole_getVRDEServerInfo) (*IConsole_getVRDEServerInfoResponse, error) {
	return service.IConsole_getVRDEServerInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getEventSourceContext(ctx context.Context, request *IConsole_getEventSource) (*IConsole_getEventSourceResponse, error) {
	response := new(IConsole_getEventSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getEventSource(request *IConsole_getEventSource) (*IConsole_getEventSourceResponse, error) {
	return service.IConsole_getEventSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getAttachedPCIDevicesContext(ctx context.Context, request *IConsole_getAttachedPCIDevices) (*IConsole_getAttachedPCIDevicesResponse, error) {
	response := new(IConsole_getAttachedPCIDevicesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getAttachedPCIDevices(request *IConsole_getAttachedPCIDevices) (*IConsole_getAttachedPCIDevicesResponse, error) {
	return service.IConsole_getAttachedPCIDevicesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getUseHostClipboardContext(ctx context.Context, request *IConsole_getUseHostClipboard) (*IConsole_getUseHostClipboardResponse, error) {
	response := new(IConsole_getUseHostClipboardResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getUseHostClipboard(request *IConsole_getUseHostClipboard) (*IConsole_getUseHostClipboardResponse, error) {
	return service.IConsole_getUseHostClipboardContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_setUseHostClipboardContext(ctx context.Context, request *IConsole_setUseHostClipboard) (*IConsole_setUseHostClipboardResponse, error) {
	response := new(IConsole_setUseHostClipboardResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_setUseHostClipboard(request *IConsole_setUseHostClipboard) (*IConsole_setUseHostClipboardResponse, error) {
	return service.IConsole_setUseHostClipboardContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getEmulatedUSBContext(ctx context.Context, request *IConsole_getEmulatedUSB) (*IConsole_getEmulatedUSBResponse, error) {
	response := new(IConsole_getEmulatedUSBResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getEmulatedUSB(request *IConsole_getEmulatedUSB) (*IConsole_getEmulatedUSBResponse, error) {
	return service.IConsole_getEmulatedUSBContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_powerUpContext(ctx context.Context, request *IConsole_powerUp) (*IConsole_powerUpResponse, error) {
	response := new(IConsole_powerUpResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_powerUp(request *IConsole_powerUp) (*IConsole_powerUpResponse, error) {
	return service.IConsole_powerUpContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_powerUpPausedContext(ctx context.Context, request *IConsole_powerUpPaused) (*IConsole_powerUpPausedResponse, error) {
	response := new(IConsole_powerUpPausedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_powerUpPaused(request *IConsole_powerUpPaused) (*IConsole_powerUpPausedResponse, error) {
	return service.IConsole_powerUpPausedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_powerDownContext(ctx context.Context, request *IConsole_powerDown) (*IConsole_powerDownResponse, error) {
	response := new(IConsole_powerDownResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_powerDown(request *IConsole_powerDown) (*IConsole_powerDownResponse, error) {
	return service.IConsole_powerDownContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_resetContext(ctx context.Context, request *IConsole_reset) (*IConsole_resetResponse, error) {
	response := new(IConsole_resetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_reset(request *IConsole_reset) (*IConsole_resetResponse, error) {
	return service.IConsole_resetContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_pauseContext(ctx context.Context, request *IConsole_pause) (*IConsole_pauseResponse, error) {
	response := new(IConsole_pauseResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_pause(request *IConsole_pause) (*IConsole_pauseResponse, error) {
	return service.IConsole_pauseContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_resumeContext(ctx context.Context, request *IConsole_resume) (*IConsole_resumeResponse, error) {
	response := new(IConsole_resumeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_resume(request *IConsole_resume) (*IConsole_resumeResponse, error) {
	return service.IConsole_resumeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_powerButtonContext(ctx context.Context, request *IConsole_powerButton) (*IConsole_powerButtonResponse, error) {
	response := new(IConsole_powerButtonResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_powerButton(request *IConsole_powerButton) (*IConsole_powerButtonResponse, error) {
	return service.IConsole_powerButtonContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_sleepButtonContext(ctx context.Context, request *IConsole_sleepButton) (*IConsole_sleepButtonResponse, error) {
	response := new(IConsole_sleepButtonResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_sleepButton(request *IConsole_sleepButton) (*IConsole_sleepButtonResponse, error) {
	return service.IConsole_sleepButtonContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getPowerButtonHandledContext(ctx context.Context, request *IConsole_getPowerButtonHandled) (*IConsole_getPowerButtonHandledResponse, error) {
	response := new(IConsole_getPowerButtonHandledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getPowerButtonHandled(request *IConsole_getPowerButtonHandled) (*IConsole_getPowerButtonHandledResponse, error) {
	return service.IConsole_getPowerButtonHandledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getGuestEnteredACPIModeContext(ctx context.Context, request *IConsole_getGuestEnteredACPIMode) (*IConsole_getGuestEnteredACPIModeResponse, error) {
	response := new(IConsole_getGuestEnteredACPIModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getGuestEnteredACPIMode(request *IConsole_getGuestEnteredACPIMode) (*IConsole_getGuestEnteredACPIModeResponse, error) {
	return service.IConsole_getGuestEnteredACPIModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_getDeviceActivityContext(ctx context.Context, request *IConsole_getDeviceActivity) (*IConsole_getDeviceActivityResponse, error) {
	response := new(IConsole_getDeviceActivityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_getDeviceActivity(request *IConsole_getDeviceActivity) (*IConsole_getDeviceActivityResponse, error) {
	return service.IConsole_getDeviceActivityContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_attachUSBDeviceContext(ctx context.Context, request *IConsole_attachUSBDevice) (*IConsole_attachUSBDeviceResponse, error) {
	response := new(IConsole_attachUSBDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_attachUSBDevice(request *IConsole_attachUSBDevice) (*IConsole_attachUSBDeviceResponse, error) {
	return service.IConsole_attachUSBDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_detachUSBDeviceContext(ctx context.Context, request *IConsole_detachUSBDevice) (*IConsole_detachUSBDeviceResponse, error) {
	response := new(IConsole_detachUSBDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_detachUSBDevice(request *IConsole_detachUSBDevice) (*IConsole_detachUSBDeviceResponse, error) {
	return service.IConsole_detachUSBDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_findUSBDeviceByAddressContext(ctx context.Context, request *IConsole_findUSBDeviceByAddress) (*IConsole_findUSBDeviceByAddressResponse, error) {
	response := new(IConsole_findUSBDeviceByAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_findUSBDeviceByAddress(request *IConsole_findUSBDeviceByAddress) (*IConsole_findUSBDeviceByAddressResponse, error) {
	return service.IConsole_findUSBDeviceByAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_findUSBDeviceByIdContext(ctx context.Context, request *IConsole_findUSBDeviceById) (*IConsole_findUSBDeviceByIdResponse, error) {
	response := new(IConsole_findUSBDeviceByIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_findUSBDeviceById(request *IConsole_findUSBDeviceById) (*IConsole_findUSBDeviceByIdResponse, error) {
	return service.IConsole_findUSBDeviceByIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_createSharedFolderContext(ctx context.Context, request *IConsole_createSharedFolder) (*IConsole_createSharedFolderResponse, error) {
	response := new(IConsole_createSharedFolderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_createSharedFolder(request *IConsole_createSharedFolder) (*IConsole_createSharedFolderResponse, error) {
	return service.IConsole_createSharedFolderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_removeSharedFolderContext(ctx context.Context, request *IConsole_removeSharedFolder) (*IConsole_removeSharedFolderResponse, error) {
	response := new(IConsole_removeSharedFolderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_removeSharedFolder(request *IConsole_removeSharedFolder) (*IConsole_removeSharedFolderResponse, error) {
	return service.IConsole_removeSharedFolderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_teleportContext(ctx context.Context, request *IConsole_teleport) (*IConsole_teleportResponse, error) {
	response := new(IConsole_teleportResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_teleport(request *IConsole_teleport) (*IConsole_teleportResponse, error) {
	return service.IConsole_teleportContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_addEncryptionPasswordContext(ctx context.Context, request *IConsole_addEncryptionPassword) (*IConsole_addEncryptionPasswordResponse, error) {
	response := new(IConsole_addEncryptionPasswordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_addEncryptionPassword(request *IConsole_addEncryptionPassword) (*IConsole_addEncryptionPasswordResponse, error) {
	return service.IConsole_addEncryptionPasswordContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_addEncryptionPasswordsContext(ctx context.Context, request *IConsole_addEncryptionPasswords) (*IConsole_addEncryptionPasswordsResponse, error) {
	response := new(IConsole_addEncryptionPasswordsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_addEncryptionPasswords(request *IConsole_addEncryptionPasswords) (*IConsole_addEncryptionPasswordsResponse, error) {
	return service.IConsole_addEncryptionPasswordsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_removeEncryptionPasswordContext(ctx context.Context, request *IConsole_removeEncryptionPassword) (*IConsole_removeEncryptionPasswordResponse, error) {
	response := new(IConsole_removeEncryptionPasswordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_removeEncryptionPassword(request *IConsole_removeEncryptionPassword) (*IConsole_removeEncryptionPasswordResponse, error) {
	return service.IConsole_removeEncryptionPasswordContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IConsole_clearAllEncryptionPasswordsContext(ctx context.Context, request *IConsole_clearAllEncryptionPasswords) (*IConsole_clearAllEncryptionPasswordsResponse, error) {
	response := new(IConsole_clearAllEncryptionPasswordsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IConsole_clearAllEncryptionPasswords(request *IConsole_clearAllEncryptionPasswords) (*IConsole_clearAllEncryptionPasswordsResponse, error) {
	return service.IConsole_clearAllEncryptionPasswordsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getNameContext(ctx context.Context, request *IHostNetworkInterface_getName) (*IHostNetworkInterface_getNameResponse, error) {
	response := new(IHostNetworkInterface_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getName(request *IHostNetworkInterface_getName) (*IHostNetworkInterface_getNameResponse, error) {
	return service.IHostNetworkInterface_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getShortNameContext(ctx context.Context, request *IHostNetworkInterface_getShortName) (*IHostNetworkInterface_getShortNameResponse, error) {
	response := new(IHostNetworkInterface_getShortNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getShortName(request *IHostNetworkInterface_getShortName) (*IHostNetworkInterface_getShortNameResponse, error) {
	return service.IHostNetworkInterface_getShortNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getIdContext(ctx context.Context, request *IHostNetworkInterface_getId) (*IHostNetworkInterface_getIdResponse, error) {
	response := new(IHostNetworkInterface_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getId(request *IHostNetworkInterface_getId) (*IHostNetworkInterface_getIdResponse, error) {
	return service.IHostNetworkInterface_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getNetworkNameContext(ctx context.Context, request *IHostNetworkInterface_getNetworkName) (*IHostNetworkInterface_getNetworkNameResponse, error) {
	response := new(IHostNetworkInterface_getNetworkNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getNetworkName(request *IHostNetworkInterface_getNetworkName) (*IHostNetworkInterface_getNetworkNameResponse, error) {
	return service.IHostNetworkInterface_getNetworkNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getDHCPEnabledContext(ctx context.Context, request *IHostNetworkInterface_getDHCPEnabled) (*IHostNetworkInterface_getDHCPEnabledResponse, error) {
	response := new(IHostNetworkInterface_getDHCPEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getDHCPEnabled(request *IHostNetworkInterface_getDHCPEnabled) (*IHostNetworkInterface_getDHCPEnabledResponse, error) {
	return service.IHostNetworkInterface_getDHCPEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getIPAddressContext(ctx context.Context, request *IHostNetworkInterface_getIPAddress) (*IHostNetworkInterface_getIPAddressResponse, error) {
	response := new(IHostNetworkInterface_getIPAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getIPAddress(request *IHostNetworkInterface_getIPAddress) (*IHostNetworkInterface_getIPAddressResponse, error) {
	return service.IHostNetworkInterface_getIPAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getNetworkMaskContext(ctx context.Context, request *IHostNetworkInterface_getNetworkMask) (*IHostNetworkInterface_getNetworkMaskResponse, error) {
	response := new(IHostNetworkInterface_getNetworkMaskResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getNetworkMask(request *IHostNetworkInterface_getNetworkMask) (*IHostNetworkInterface_getNetworkMaskResponse, error) {
	return service.IHostNetworkInterface_getNetworkMaskContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getIPV6SupportedContext(ctx context.Context, request *IHostNetworkInterface_getIPV6Supported) (*IHostNetworkInterface_getIPV6SupportedResponse, error) {
	response := new(IHostNetworkInterface_getIPV6SupportedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getIPV6Supported(request *IHostNetworkInterface_getIPV6Supported) (*IHostNetworkInterface_getIPV6SupportedResponse, error) {
	return service.IHostNetworkInterface_getIPV6SupportedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getIPV6AddressContext(ctx context.Context, request *IHostNetworkInterface_getIPV6Address) (*IHostNetworkInterface_getIPV6AddressResponse, error) {
	response := new(IHostNetworkInterface_getIPV6AddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getIPV6Address(request *IHostNetworkInterface_getIPV6Address) (*IHostNetworkInterface_getIPV6AddressResponse, error) {
	return service.IHostNetworkInterface_getIPV6AddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthContext(ctx context.Context, request *IHostNetworkInterface_getIPV6NetworkMaskPrefixLength) (*IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse, error) {
	response := new(IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getIPV6NetworkMaskPrefixLength(request *IHostNetworkInterface_getIPV6NetworkMaskPrefixLength) (*IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthResponse, error) {
	return service.IHostNetworkInterface_getIPV6NetworkMaskPrefixLengthContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getHardwareAddressContext(ctx context.Context, request *IHostNetworkInterface_getHardwareAddress) (*IHostNetworkInterface_getHardwareAddressResponse, error) {
	response := new(IHostNetworkInterface_getHardwareAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getHardwareAddress(request *IHostNetworkInterface_getHardwareAddress) (*IHostNetworkInterface_getHardwareAddressResponse, error) {
	return service.IHostNetworkInterface_getHardwareAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getMediumTypeContext(ctx context.Context, request *IHostNetworkInterface_getMediumType) (*IHostNetworkInterface_getMediumTypeResponse, error) {
	response := new(IHostNetworkInterface_getMediumTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getMediumType(request *IHostNetworkInterface_getMediumType) (*IHostNetworkInterface_getMediumTypeResponse, error) {
	return service.IHostNetworkInterface_getMediumTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getStatusContext(ctx context.Context, request *IHostNetworkInterface_getStatus) (*IHostNetworkInterface_getStatusResponse, error) {
	response := new(IHostNetworkInterface_getStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getStatus(request *IHostNetworkInterface_getStatus) (*IHostNetworkInterface_getStatusResponse, error) {
	return service.IHostNetworkInterface_getStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getInterfaceTypeContext(ctx context.Context, request *IHostNetworkInterface_getInterfaceType) (*IHostNetworkInterface_getInterfaceTypeResponse, error) {
	response := new(IHostNetworkInterface_getInterfaceTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getInterfaceType(request *IHostNetworkInterface_getInterfaceType) (*IHostNetworkInterface_getInterfaceTypeResponse, error) {
	return service.IHostNetworkInterface_getInterfaceTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_getWirelessContext(ctx context.Context, request *IHostNetworkInterface_getWireless) (*IHostNetworkInterface_getWirelessResponse, error) {
	response := new(IHostNetworkInterface_getWirelessResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_getWireless(request *IHostNetworkInterface_getWireless) (*IHostNetworkInterface_getWirelessResponse, error) {
	return service.IHostNetworkInterface_getWirelessContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_enableStaticIPConfigContext(ctx context.Context, request *IHostNetworkInterface_enableStaticIPConfig) (*IHostNetworkInterface_enableStaticIPConfigResponse, error) {
	response := new(IHostNetworkInterface_enableStaticIPConfigResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_enableStaticIPConfig(request *IHostNetworkInterface_enableStaticIPConfig) (*IHostNetworkInterface_enableStaticIPConfigResponse, error) {
	return service.IHostNetworkInterface_enableStaticIPConfigContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_enableStaticIPConfigV6Context(ctx context.Context, request *IHostNetworkInterface_enableStaticIPConfigV6) (*IHostNetworkInterface_enableStaticIPConfigV6Response, error) {
	response := new(IHostNetworkInterface_enableStaticIPConfigV6Response)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_enableStaticIPConfigV6(request *IHostNetworkInterface_enableStaticIPConfigV6) (*IHostNetworkInterface_enableStaticIPConfigV6Response, error) {
	return service.IHostNetworkInterface_enableStaticIPConfigV6Context(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_enableDynamicIPConfigContext(ctx context.Context, request *IHostNetworkInterface_enableDynamicIPConfig) (*IHostNetworkInterface_enableDynamicIPConfigResponse, error) {
	response := new(IHostNetworkInterface_enableDynamicIPConfigResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_enableDynamicIPConfig(request *IHostNetworkInterface_enableDynamicIPConfig) (*IHostNetworkInterface_enableDynamicIPConfigResponse, error) {
	return service.IHostNetworkInterface_enableDynamicIPConfigContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNetworkInterface_DHCPRediscoverContext(ctx context.Context, request *IHostNetworkInterface_DHCPRediscover) (*IHostNetworkInterface_DHCPRediscoverResponse, error) {
	response := new(IHostNetworkInterface_DHCPRediscoverResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNetworkInterface_DHCPRediscover(request *IHostNetworkInterface_DHCPRediscover) (*IHostNetworkInterface_DHCPRediscoverResponse, error) {
	return service.IHostNetworkInterface_DHCPRediscoverContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostVideoInputDevice_getNameContext(ctx context.Context, request *IHostVideoInputDevice_getName) (*IHostVideoInputDevice_getNameResponse, error) {
	response := new(IHostVideoInputDevice_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostVideoInputDevice_getName(request *IHostVideoInputDevice_getName) (*IHostVideoInputDevice_getNameResponse, error) {
	return service.IHostVideoInputDevice_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostVideoInputDevice_getPathContext(ctx context.Context, request *IHostVideoInputDevice_getPath) (*IHostVideoInputDevice_getPathResponse, error) {
	response := new(IHostVideoInputDevice_getPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostVideoInputDevice_getPath(request *IHostVideoInputDevice_getPath) (*IHostVideoInputDevice_getPathResponse, error) {
	return service.IHostVideoInputDevice_getPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostVideoInputDevice_getAliasContext(ctx context.Context, request *IHostVideoInputDevice_getAlias) (*IHostVideoInputDevice_getAliasResponse, error) {
	response := new(IHostVideoInputDevice_getAliasResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostVideoInputDevice_getAlias(request *IHostVideoInputDevice_getAlias) (*IHostVideoInputDevice_getAliasResponse, error) {
	return service.IHostVideoInputDevice_getAliasContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getNameContext(ctx context.Context, request *IUpdateAgent_getName) (*IUpdateAgent_getNameResponse, error) {
	response := new(IUpdateAgent_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getName(request *IUpdateAgent_getName) (*IUpdateAgent_getNameResponse, error) {
	return service.IUpdateAgent_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getEventSourceContext(ctx context.Context, request *IUpdateAgent_getEventSource) (*IUpdateAgent_getEventSourceResponse, error) {
	response := new(IUpdateAgent_getEventSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getEventSource(request *IUpdateAgent_getEventSource) (*IUpdateAgent_getEventSourceResponse, error) {
	return service.IUpdateAgent_getEventSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getOrderContext(ctx context.Context, request *IUpdateAgent_getOrder) (*IUpdateAgent_getOrderResponse, error) {
	response := new(IUpdateAgent_getOrderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getOrder(request *IUpdateAgent_getOrder) (*IUpdateAgent_getOrderResponse, error) {
	return service.IUpdateAgent_getOrderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getDependsOnContext(ctx context.Context, request *IUpdateAgent_getDependsOn) (*IUpdateAgent_getDependsOnResponse, error) {
	response := new(IUpdateAgent_getDependsOnResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getDependsOn(request *IUpdateAgent_getDependsOn) (*IUpdateAgent_getDependsOnResponse, error) {
	return service.IUpdateAgent_getDependsOnContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getVersionContext(ctx context.Context, request *IUpdateAgent_getVersion) (*IUpdateAgent_getVersionResponse, error) {
	response := new(IUpdateAgent_getVersionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getVersion(request *IUpdateAgent_getVersion) (*IUpdateAgent_getVersionResponse, error) {
	return service.IUpdateAgent_getVersionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getDownloadUrlContext(ctx context.Context, request *IUpdateAgent_getDownloadUrl) (*IUpdateAgent_getDownloadUrlResponse, error) {
	response := new(IUpdateAgent_getDownloadUrlResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getDownloadUrl(request *IUpdateAgent_getDownloadUrl) (*IUpdateAgent_getDownloadUrlResponse, error) {
	return service.IUpdateAgent_getDownloadUrlContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getWebUrlContext(ctx context.Context, request *IUpdateAgent_getWebUrl) (*IUpdateAgent_getWebUrlResponse, error) {
	response := new(IUpdateAgent_getWebUrlResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getWebUrl(request *IUpdateAgent_getWebUrl) (*IUpdateAgent_getWebUrlResponse, error) {
	return service.IUpdateAgent_getWebUrlContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getReleaseNotesContext(ctx context.Context, request *IUpdateAgent_getReleaseNotes) (*IUpdateAgent_getReleaseNotesResponse, error) {
	response := new(IUpdateAgent_getReleaseNotesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getReleaseNotes(request *IUpdateAgent_getReleaseNotes) (*IUpdateAgent_getReleaseNotesResponse, error) {
	return service.IUpdateAgent_getReleaseNotesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getEnabledContext(ctx context.Context, request *IUpdateAgent_getEnabled) (*IUpdateAgent_getEnabledResponse, error) {
	response := new(IUpdateAgent_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getEnabled(request *IUpdateAgent_getEnabled) (*IUpdateAgent_getEnabledResponse, error) {
	return service.IUpdateAgent_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_setEnabledContext(ctx context.Context, request *IUpdateAgent_setEnabled) (*IUpdateAgent_setEnabledResponse, error) {
	response := new(IUpdateAgent_setEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_setEnabled(request *IUpdateAgent_setEnabled) (*IUpdateAgent_setEnabledResponse, error) {
	return service.IUpdateAgent_setEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getHiddenContext(ctx context.Context, request *IUpdateAgent_getHidden) (*IUpdateAgent_getHiddenResponse, error) {
	response := new(IUpdateAgent_getHiddenResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getHidden(request *IUpdateAgent_getHidden) (*IUpdateAgent_getHiddenResponse, error) {
	return service.IUpdateAgent_getHiddenContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getStateContext(ctx context.Context, request *IUpdateAgent_getState) (*IUpdateAgent_getStateResponse, error) {
	response := new(IUpdateAgent_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getState(request *IUpdateAgent_getState) (*IUpdateAgent_getStateResponse, error) {
	return service.IUpdateAgent_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getCheckFrequencyContext(ctx context.Context, request *IUpdateAgent_getCheckFrequency) (*IUpdateAgent_getCheckFrequencyResponse, error) {
	response := new(IUpdateAgent_getCheckFrequencyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getCheckFrequency(request *IUpdateAgent_getCheckFrequency) (*IUpdateAgent_getCheckFrequencyResponse, error) {
	return service.IUpdateAgent_getCheckFrequencyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_setCheckFrequencyContext(ctx context.Context, request *IUpdateAgent_setCheckFrequency) (*IUpdateAgent_setCheckFrequencyResponse, error) {
	response := new(IUpdateAgent_setCheckFrequencyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_setCheckFrequency(request *IUpdateAgent_setCheckFrequency) (*IUpdateAgent_setCheckFrequencyResponse, error) {
	return service.IUpdateAgent_setCheckFrequencyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getChannelContext(ctx context.Context, request *IUpdateAgent_getChannel) (*IUpdateAgent_getChannelResponse, error) {
	response := new(IUpdateAgent_getChannelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getChannel(request *IUpdateAgent_getChannel) (*IUpdateAgent_getChannelResponse, error) {
	return service.IUpdateAgent_getChannelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_setChannelContext(ctx context.Context, request *IUpdateAgent_setChannel) (*IUpdateAgent_setChannelResponse, error) {
	response := new(IUpdateAgent_setChannelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_setChannel(request *IUpdateAgent_setChannel) (*IUpdateAgent_setChannelResponse, error) {
	return service.IUpdateAgent_setChannelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getRepositoryURLContext(ctx context.Context, request *IUpdateAgent_getRepositoryURL) (*IUpdateAgent_getRepositoryURLResponse, error) {
	response := new(IUpdateAgent_getRepositoryURLResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getRepositoryURL(request *IUpdateAgent_getRepositoryURL) (*IUpdateAgent_getRepositoryURLResponse, error) {
	return service.IUpdateAgent_getRepositoryURLContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_setRepositoryURLContext(ctx context.Context, request *IUpdateAgent_setRepositoryURL) (*IUpdateAgent_setRepositoryURLResponse, error) {
	response := new(IUpdateAgent_setRepositoryURLResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_setRepositoryURL(request *IUpdateAgent_setRepositoryURL) (*IUpdateAgent_setRepositoryURLResponse, error) {
	return service.IUpdateAgent_setRepositoryURLContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getLastCheckDateContext(ctx context.Context, request *IUpdateAgent_getLastCheckDate) (*IUpdateAgent_getLastCheckDateResponse, error) {
	response := new(IUpdateAgent_getLastCheckDateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getLastCheckDate(request *IUpdateAgent_getLastCheckDate) (*IUpdateAgent_getLastCheckDateResponse, error) {
	return service.IUpdateAgent_getLastCheckDateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getCheckCountContext(ctx context.Context, request *IUpdateAgent_getCheckCount) (*IUpdateAgent_getCheckCountResponse, error) {
	response := new(IUpdateAgent_getCheckCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getCheckCount(request *IUpdateAgent_getCheckCount) (*IUpdateAgent_getCheckCountResponse, error) {
	return service.IUpdateAgent_getCheckCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getIsCheckNeededContext(ctx context.Context, request *IUpdateAgent_getIsCheckNeeded) (*IUpdateAgent_getIsCheckNeededResponse, error) {
	response := new(IUpdateAgent_getIsCheckNeededResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getIsCheckNeeded(request *IUpdateAgent_getIsCheckNeeded) (*IUpdateAgent_getIsCheckNeededResponse, error) {
	return service.IUpdateAgent_getIsCheckNeededContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_getSupportedChannelsContext(ctx context.Context, request *IUpdateAgent_getSupportedChannels) (*IUpdateAgent_getSupportedChannelsResponse, error) {
	response := new(IUpdateAgent_getSupportedChannelsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_getSupportedChannels(request *IUpdateAgent_getSupportedChannels) (*IUpdateAgent_getSupportedChannelsResponse, error) {
	return service.IUpdateAgent_getSupportedChannelsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_checkForContext(ctx context.Context, request *IUpdateAgent_checkFor) (*IUpdateAgent_checkForResponse, error) {
	response := new(IUpdateAgent_checkForResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_checkFor(request *IUpdateAgent_checkFor) (*IUpdateAgent_checkForResponse, error) {
	return service.IUpdateAgent_checkForContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_downloadContext(ctx context.Context, request *IUpdateAgent_download) (*IUpdateAgent_downloadResponse, error) {
	response := new(IUpdateAgent_downloadResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_download(request *IUpdateAgent_download) (*IUpdateAgent_downloadResponse, error) {
	return service.IUpdateAgent_downloadContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_installContext(ctx context.Context, request *IUpdateAgent_install) (*IUpdateAgent_installResponse, error) {
	response := new(IUpdateAgent_installResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_install(request *IUpdateAgent_install) (*IUpdateAgent_installResponse, error) {
	return service.IUpdateAgent_installContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgent_rollbackContext(ctx context.Context, request *IUpdateAgent_rollback) (*IUpdateAgent_rollbackResponse, error) {
	response := new(IUpdateAgent_rollbackResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgent_rollback(request *IUpdateAgent_rollback) (*IUpdateAgent_rollbackResponse, error) {
	return service.IUpdateAgent_rollbackContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfaces) (*IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfaces(request *IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfaces) (*IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IHostUpdateAgent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostDrive_getDrivePathContext(ctx context.Context, request *IHostDrive_getDrivePath) (*IHostDrive_getDrivePathResponse, error) {
	response := new(IHostDrive_getDrivePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostDrive_getDrivePath(request *IHostDrive_getDrivePath) (*IHostDrive_getDrivePathResponse, error) {
	return service.IHostDrive_getDrivePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostDrive_getPartitioningTypeContext(ctx context.Context, request *IHostDrive_getPartitioningType) (*IHostDrive_getPartitioningTypeResponse, error) {
	response := new(IHostDrive_getPartitioningTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostDrive_getPartitioningType(request *IHostDrive_getPartitioningType) (*IHostDrive_getPartitioningTypeResponse, error) {
	return service.IHostDrive_getPartitioningTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostDrive_getUuidContext(ctx context.Context, request *IHostDrive_getUuid) (*IHostDrive_getUuidResponse, error) {
	response := new(IHostDrive_getUuidResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostDrive_getUuid(request *IHostDrive_getUuid) (*IHostDrive_getUuidResponse, error) {
	return service.IHostDrive_getUuidContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostDrive_getSectorSizeContext(ctx context.Context, request *IHostDrive_getSectorSize) (*IHostDrive_getSectorSizeResponse, error) {
	response := new(IHostDrive_getSectorSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostDrive_getSectorSize(request *IHostDrive_getSectorSize) (*IHostDrive_getSectorSizeResponse, error) {
	return service.IHostDrive_getSectorSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostDrive_getSizeContext(ctx context.Context, request *IHostDrive_getSize) (*IHostDrive_getSizeResponse, error) {
	response := new(IHostDrive_getSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostDrive_getSize(request *IHostDrive_getSize) (*IHostDrive_getSizeResponse, error) {
	return service.IHostDrive_getSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostDrive_getModelContext(ctx context.Context, request *IHostDrive_getModel) (*IHostDrive_getModelResponse, error) {
	response := new(IHostDrive_getModelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostDrive_getModel(request *IHostDrive_getModel) (*IHostDrive_getModelResponse, error) {
	return service.IHostDrive_getModelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostDrive_getPartitionsContext(ctx context.Context, request *IHostDrive_getPartitions) (*IHostDrive_getPartitionsResponse, error) {
	response := new(IHostDrive_getPartitionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostDrive_getPartitions(request *IHostDrive_getPartitions) (*IHostDrive_getPartitionsResponse, error) {
	return service.IHostDrive_getPartitionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getDVDDrivesContext(ctx context.Context, request *IHost_getDVDDrives) (*IHost_getDVDDrivesResponse, error) {
	response := new(IHost_getDVDDrivesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getDVDDrives(request *IHost_getDVDDrives) (*IHost_getDVDDrivesResponse, error) {
	return service.IHost_getDVDDrivesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getFloppyDrivesContext(ctx context.Context, request *IHost_getFloppyDrives) (*IHost_getFloppyDrivesResponse, error) {
	response := new(IHost_getFloppyDrivesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getFloppyDrives(request *IHost_getFloppyDrives) (*IHost_getFloppyDrivesResponse, error) {
	return service.IHost_getFloppyDrivesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getAudioDevicesContext(ctx context.Context, request *IHost_getAudioDevices) (*IHost_getAudioDevicesResponse, error) {
	response := new(IHost_getAudioDevicesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getAudioDevices(request *IHost_getAudioDevices) (*IHost_getAudioDevicesResponse, error) {
	return service.IHost_getAudioDevicesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getUSBDevicesContext(ctx context.Context, request *IHost_getUSBDevices) (*IHost_getUSBDevicesResponse, error) {
	response := new(IHost_getUSBDevicesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getUSBDevices(request *IHost_getUSBDevices) (*IHost_getUSBDevicesResponse, error) {
	return service.IHost_getUSBDevicesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getUSBDeviceFiltersContext(ctx context.Context, request *IHost_getUSBDeviceFilters) (*IHost_getUSBDeviceFiltersResponse, error) {
	response := new(IHost_getUSBDeviceFiltersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getUSBDeviceFilters(request *IHost_getUSBDeviceFilters) (*IHost_getUSBDeviceFiltersResponse, error) {
	return service.IHost_getUSBDeviceFiltersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getNetworkInterfacesContext(ctx context.Context, request *IHost_getNetworkInterfaces) (*IHost_getNetworkInterfacesResponse, error) {
	response := new(IHost_getNetworkInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getNetworkInterfaces(request *IHost_getNetworkInterfaces) (*IHost_getNetworkInterfacesResponse, error) {
	return service.IHost_getNetworkInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getNameServersContext(ctx context.Context, request *IHost_getNameServers) (*IHost_getNameServersResponse, error) {
	response := new(IHost_getNameServersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getNameServers(request *IHost_getNameServers) (*IHost_getNameServersResponse, error) {
	return service.IHost_getNameServersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getDomainNameContext(ctx context.Context, request *IHost_getDomainName) (*IHost_getDomainNameResponse, error) {
	response := new(IHost_getDomainNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getDomainName(request *IHost_getDomainName) (*IHost_getDomainNameResponse, error) {
	return service.IHost_getDomainNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getSearchStringsContext(ctx context.Context, request *IHost_getSearchStrings) (*IHost_getSearchStringsResponse, error) {
	response := new(IHost_getSearchStringsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getSearchStrings(request *IHost_getSearchStrings) (*IHost_getSearchStringsResponse, error) {
	return service.IHost_getSearchStringsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getProcessorCountContext(ctx context.Context, request *IHost_getProcessorCount) (*IHost_getProcessorCountResponse, error) {
	response := new(IHost_getProcessorCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getProcessorCount(request *IHost_getProcessorCount) (*IHost_getProcessorCountResponse, error) {
	return service.IHost_getProcessorCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getProcessorOnlineCountContext(ctx context.Context, request *IHost_getProcessorOnlineCount) (*IHost_getProcessorOnlineCountResponse, error) {
	response := new(IHost_getProcessorOnlineCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getProcessorOnlineCount(request *IHost_getProcessorOnlineCount) (*IHost_getProcessorOnlineCountResponse, error) {
	return service.IHost_getProcessorOnlineCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getProcessorCoreCountContext(ctx context.Context, request *IHost_getProcessorCoreCount) (*IHost_getProcessorCoreCountResponse, error) {
	response := new(IHost_getProcessorCoreCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getProcessorCoreCount(request *IHost_getProcessorCoreCount) (*IHost_getProcessorCoreCountResponse, error) {
	return service.IHost_getProcessorCoreCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getProcessorOnlineCoreCountContext(ctx context.Context, request *IHost_getProcessorOnlineCoreCount) (*IHost_getProcessorOnlineCoreCountResponse, error) {
	response := new(IHost_getProcessorOnlineCoreCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getProcessorOnlineCoreCount(request *IHost_getProcessorOnlineCoreCount) (*IHost_getProcessorOnlineCoreCountResponse, error) {
	return service.IHost_getProcessorOnlineCoreCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getHostDrivesContext(ctx context.Context, request *IHost_getHostDrives) (*IHost_getHostDrivesResponse, error) {
	response := new(IHost_getHostDrivesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getHostDrives(request *IHost_getHostDrives) (*IHost_getHostDrivesResponse, error) {
	return service.IHost_getHostDrivesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getMemorySizeContext(ctx context.Context, request *IHost_getMemorySize) (*IHost_getMemorySizeResponse, error) {
	response := new(IHost_getMemorySizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getMemorySize(request *IHost_getMemorySize) (*IHost_getMemorySizeResponse, error) {
	return service.IHost_getMemorySizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getMemoryAvailableContext(ctx context.Context, request *IHost_getMemoryAvailable) (*IHost_getMemoryAvailableResponse, error) {
	response := new(IHost_getMemoryAvailableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getMemoryAvailable(request *IHost_getMemoryAvailable) (*IHost_getMemoryAvailableResponse, error) {
	return service.IHost_getMemoryAvailableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getOperatingSystemContext(ctx context.Context, request *IHost_getOperatingSystem) (*IHost_getOperatingSystemResponse, error) {
	response := new(IHost_getOperatingSystemResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getOperatingSystem(request *IHost_getOperatingSystem) (*IHost_getOperatingSystemResponse, error) {
	return service.IHost_getOperatingSystemContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getOSVersionContext(ctx context.Context, request *IHost_getOSVersion) (*IHost_getOSVersionResponse, error) {
	response := new(IHost_getOSVersionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getOSVersion(request *IHost_getOSVersion) (*IHost_getOSVersionResponse, error) {
	return service.IHost_getOSVersionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getUTCTimeContext(ctx context.Context, request *IHost_getUTCTime) (*IHost_getUTCTimeResponse, error) {
	response := new(IHost_getUTCTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getUTCTime(request *IHost_getUTCTime) (*IHost_getUTCTimeResponse, error) {
	return service.IHost_getUTCTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getAcceleration3DAvailableContext(ctx context.Context, request *IHost_getAcceleration3DAvailable) (*IHost_getAcceleration3DAvailableResponse, error) {
	response := new(IHost_getAcceleration3DAvailableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getAcceleration3DAvailable(request *IHost_getAcceleration3DAvailable) (*IHost_getAcceleration3DAvailableResponse, error) {
	return service.IHost_getAcceleration3DAvailableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getVideoInputDevicesContext(ctx context.Context, request *IHost_getVideoInputDevices) (*IHost_getVideoInputDevicesResponse, error) {
	response := new(IHost_getVideoInputDevicesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getVideoInputDevices(request *IHost_getVideoInputDevices) (*IHost_getVideoInputDevicesResponse, error) {
	return service.IHost_getVideoInputDevicesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getUpdateHostContext(ctx context.Context, request *IHost_getUpdateHost) (*IHost_getUpdateHostResponse, error) {
	response := new(IHost_getUpdateHostResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getUpdateHost(request *IHost_getUpdateHost) (*IHost_getUpdateHostResponse, error) {
	return service.IHost_getUpdateHostContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getUpdateExtPackContext(ctx context.Context, request *IHost_getUpdateExtPack) (*IHost_getUpdateExtPackResponse, error) {
	response := new(IHost_getUpdateExtPackResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getUpdateExtPack(request *IHost_getUpdateExtPack) (*IHost_getUpdateExtPackResponse, error) {
	return service.IHost_getUpdateExtPackContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getUpdateGuestAdditionsContext(ctx context.Context, request *IHost_getUpdateGuestAdditions) (*IHost_getUpdateGuestAdditionsResponse, error) {
	response := new(IHost_getUpdateGuestAdditionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getUpdateGuestAdditions(request *IHost_getUpdateGuestAdditions) (*IHost_getUpdateGuestAdditionsResponse, error) {
	return service.IHost_getUpdateGuestAdditionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getProcessorSpeedContext(ctx context.Context, request *IHost_getProcessorSpeed) (*IHost_getProcessorSpeedResponse, error) {
	response := new(IHost_getProcessorSpeedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getProcessorSpeed(request *IHost_getProcessorSpeed) (*IHost_getProcessorSpeedResponse, error) {
	return service.IHost_getProcessorSpeedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getProcessorFeatureContext(ctx context.Context, request *IHost_getProcessorFeature) (*IHost_getProcessorFeatureResponse, error) {
	response := new(IHost_getProcessorFeatureResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getProcessorFeature(request *IHost_getProcessorFeature) (*IHost_getProcessorFeatureResponse, error) {
	return service.IHost_getProcessorFeatureContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getProcessorDescriptionContext(ctx context.Context, request *IHost_getProcessorDescription) (*IHost_getProcessorDescriptionResponse, error) {
	response := new(IHost_getProcessorDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getProcessorDescription(request *IHost_getProcessorDescription) (*IHost_getProcessorDescriptionResponse, error) {
	return service.IHost_getProcessorDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_getProcessorCPUIDLeafContext(ctx context.Context, request *IHost_getProcessorCPUIDLeaf) (*IHost_getProcessorCPUIDLeafResponse, error) {
	response := new(IHost_getProcessorCPUIDLeafResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_getProcessorCPUIDLeaf(request *IHost_getProcessorCPUIDLeaf) (*IHost_getProcessorCPUIDLeafResponse, error) {
	return service.IHost_getProcessorCPUIDLeafContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_createHostOnlyNetworkInterfaceContext(ctx context.Context, request *IHost_createHostOnlyNetworkInterface) (*IHost_createHostOnlyNetworkInterfaceResponse, error) {
	response := new(IHost_createHostOnlyNetworkInterfaceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_createHostOnlyNetworkInterface(request *IHost_createHostOnlyNetworkInterface) (*IHost_createHostOnlyNetworkInterfaceResponse, error) {
	return service.IHost_createHostOnlyNetworkInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_removeHostOnlyNetworkInterfaceContext(ctx context.Context, request *IHost_removeHostOnlyNetworkInterface) (*IHost_removeHostOnlyNetworkInterfaceResponse, error) {
	response := new(IHost_removeHostOnlyNetworkInterfaceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_removeHostOnlyNetworkInterface(request *IHost_removeHostOnlyNetworkInterface) (*IHost_removeHostOnlyNetworkInterfaceResponse, error) {
	return service.IHost_removeHostOnlyNetworkInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_createUSBDeviceFilterContext(ctx context.Context, request *IHost_createUSBDeviceFilter) (*IHost_createUSBDeviceFilterResponse, error) {
	response := new(IHost_createUSBDeviceFilterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_createUSBDeviceFilter(request *IHost_createUSBDeviceFilter) (*IHost_createUSBDeviceFilterResponse, error) {
	return service.IHost_createUSBDeviceFilterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_insertUSBDeviceFilterContext(ctx context.Context, request *IHost_insertUSBDeviceFilter) (*IHost_insertUSBDeviceFilterResponse, error) {
	response := new(IHost_insertUSBDeviceFilterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_insertUSBDeviceFilter(request *IHost_insertUSBDeviceFilter) (*IHost_insertUSBDeviceFilterResponse, error) {
	return service.IHost_insertUSBDeviceFilterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_removeUSBDeviceFilterContext(ctx context.Context, request *IHost_removeUSBDeviceFilter) (*IHost_removeUSBDeviceFilterResponse, error) {
	response := new(IHost_removeUSBDeviceFilterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_removeUSBDeviceFilter(request *IHost_removeUSBDeviceFilter) (*IHost_removeUSBDeviceFilterResponse, error) {
	return service.IHost_removeUSBDeviceFilterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_findHostDVDDriveContext(ctx context.Context, request *IHost_findHostDVDDrive) (*IHost_findHostDVDDriveResponse, error) {
	response := new(IHost_findHostDVDDriveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_findHostDVDDrive(request *IHost_findHostDVDDrive) (*IHost_findHostDVDDriveResponse, error) {
	return service.IHost_findHostDVDDriveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_findHostFloppyDriveContext(ctx context.Context, request *IHost_findHostFloppyDrive) (*IHost_findHostFloppyDriveResponse, error) {
	response := new(IHost_findHostFloppyDriveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_findHostFloppyDrive(request *IHost_findHostFloppyDrive) (*IHost_findHostFloppyDriveResponse, error) {
	return service.IHost_findHostFloppyDriveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_findHostNetworkInterfaceByNameContext(ctx context.Context, request *IHost_findHostNetworkInterfaceByName) (*IHost_findHostNetworkInterfaceByNameResponse, error) {
	response := new(IHost_findHostNetworkInterfaceByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_findHostNetworkInterfaceByName(request *IHost_findHostNetworkInterfaceByName) (*IHost_findHostNetworkInterfaceByNameResponse, error) {
	return service.IHost_findHostNetworkInterfaceByNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_findHostNetworkInterfaceByIdContext(ctx context.Context, request *IHost_findHostNetworkInterfaceById) (*IHost_findHostNetworkInterfaceByIdResponse, error) {
	response := new(IHost_findHostNetworkInterfaceByIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_findHostNetworkInterfaceById(request *IHost_findHostNetworkInterfaceById) (*IHost_findHostNetworkInterfaceByIdResponse, error) {
	return service.IHost_findHostNetworkInterfaceByIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_findHostNetworkInterfacesOfTypeContext(ctx context.Context, request *IHost_findHostNetworkInterfacesOfType) (*IHost_findHostNetworkInterfacesOfTypeResponse, error) {
	response := new(IHost_findHostNetworkInterfacesOfTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_findHostNetworkInterfacesOfType(request *IHost_findHostNetworkInterfacesOfType) (*IHost_findHostNetworkInterfacesOfTypeResponse, error) {
	return service.IHost_findHostNetworkInterfacesOfTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_findUSBDeviceByIdContext(ctx context.Context, request *IHost_findUSBDeviceById) (*IHost_findUSBDeviceByIdResponse, error) {
	response := new(IHost_findUSBDeviceByIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_findUSBDeviceById(request *IHost_findUSBDeviceById) (*IHost_findUSBDeviceByIdResponse, error) {
	return service.IHost_findUSBDeviceByIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_findUSBDeviceByAddressContext(ctx context.Context, request *IHost_findUSBDeviceByAddress) (*IHost_findUSBDeviceByAddressResponse, error) {
	response := new(IHost_findUSBDeviceByAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_findUSBDeviceByAddress(request *IHost_findUSBDeviceByAddress) (*IHost_findUSBDeviceByAddressResponse, error) {
	return service.IHost_findUSBDeviceByAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_generateMACAddressContext(ctx context.Context, request *IHost_generateMACAddress) (*IHost_generateMACAddressResponse, error) {
	response := new(IHost_generateMACAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_generateMACAddress(request *IHost_generateMACAddress) (*IHost_generateMACAddressResponse, error) {
	return service.IHost_generateMACAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_addUSBDeviceSourceContext(ctx context.Context, request *IHost_addUSBDeviceSource) (*IHost_addUSBDeviceSourceResponse, error) {
	response := new(IHost_addUSBDeviceSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_addUSBDeviceSource(request *IHost_addUSBDeviceSource) (*IHost_addUSBDeviceSourceResponse, error) {
	return service.IHost_addUSBDeviceSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHost_removeUSBDeviceSourceContext(ctx context.Context, request *IHost_removeUSBDeviceSource) (*IHost_removeUSBDeviceSourceResponse, error) {
	response := new(IHost_removeUSBDeviceSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHost_removeUSBDeviceSource(request *IHost_removeUSBDeviceSource) (*IHost_removeUSBDeviceSourceResponse, error) {
	return service.IHost_removeUSBDeviceSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICPUProfile_getNameContext(ctx context.Context, request *ICPUProfile_getName) (*ICPUProfile_getNameResponse, error) {
	response := new(ICPUProfile_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICPUProfile_getName(request *ICPUProfile_getName) (*ICPUProfile_getNameResponse, error) {
	return service.ICPUProfile_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICPUProfile_getFullNameContext(ctx context.Context, request *ICPUProfile_getFullName) (*ICPUProfile_getFullNameResponse, error) {
	response := new(ICPUProfile_getFullNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICPUProfile_getFullName(request *ICPUProfile_getFullName) (*ICPUProfile_getFullNameResponse, error) {
	return service.ICPUProfile_getFullNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICPUProfile_getArchitectureContext(ctx context.Context, request *ICPUProfile_getArchitecture) (*ICPUProfile_getArchitectureResponse, error) {
	response := new(ICPUProfile_getArchitectureResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICPUProfile_getArchitecture(request *ICPUProfile_getArchitecture) (*ICPUProfile_getArchitectureResponse, error) {
	return service.ICPUProfile_getArchitectureContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMinGuestRAMContext(ctx context.Context, request *ISystemProperties_getMinGuestRAM) (*ISystemProperties_getMinGuestRAMResponse, error) {
	response := new(ISystemProperties_getMinGuestRAMResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMinGuestRAM(request *ISystemProperties_getMinGuestRAM) (*ISystemProperties_getMinGuestRAMResponse, error) {
	return service.ISystemProperties_getMinGuestRAMContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMaxGuestRAMContext(ctx context.Context, request *ISystemProperties_getMaxGuestRAM) (*ISystemProperties_getMaxGuestRAMResponse, error) {
	response := new(ISystemProperties_getMaxGuestRAMResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMaxGuestRAM(request *ISystemProperties_getMaxGuestRAM) (*ISystemProperties_getMaxGuestRAMResponse, error) {
	return service.ISystemProperties_getMaxGuestRAMContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMinGuestVRAMContext(ctx context.Context, request *ISystemProperties_getMinGuestVRAM) (*ISystemProperties_getMinGuestVRAMResponse, error) {
	response := new(ISystemProperties_getMinGuestVRAMResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMinGuestVRAM(request *ISystemProperties_getMinGuestVRAM) (*ISystemProperties_getMinGuestVRAMResponse, error) {
	return service.ISystemProperties_getMinGuestVRAMContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMaxGuestVRAMContext(ctx context.Context, request *ISystemProperties_getMaxGuestVRAM) (*ISystemProperties_getMaxGuestVRAMResponse, error) {
	response := new(ISystemProperties_getMaxGuestVRAMResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMaxGuestVRAM(request *ISystemProperties_getMaxGuestVRAM) (*ISystemProperties_getMaxGuestVRAMResponse, error) {
	return service.ISystemProperties_getMaxGuestVRAMContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMinGuestCPUCountContext(ctx context.Context, request *ISystemProperties_getMinGuestCPUCount) (*ISystemProperties_getMinGuestCPUCountResponse, error) {
	response := new(ISystemProperties_getMinGuestCPUCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMinGuestCPUCount(request *ISystemProperties_getMinGuestCPUCount) (*ISystemProperties_getMinGuestCPUCountResponse, error) {
	return service.ISystemProperties_getMinGuestCPUCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMaxGuestCPUCountContext(ctx context.Context, request *ISystemProperties_getMaxGuestCPUCount) (*ISystemProperties_getMaxGuestCPUCountResponse, error) {
	response := new(ISystemProperties_getMaxGuestCPUCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMaxGuestCPUCount(request *ISystemProperties_getMaxGuestCPUCount) (*ISystemProperties_getMaxGuestCPUCountResponse, error) {
	return service.ISystemProperties_getMaxGuestCPUCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMaxGuestMonitorsContext(ctx context.Context, request *ISystemProperties_getMaxGuestMonitors) (*ISystemProperties_getMaxGuestMonitorsResponse, error) {
	response := new(ISystemProperties_getMaxGuestMonitorsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMaxGuestMonitors(request *ISystemProperties_getMaxGuestMonitors) (*ISystemProperties_getMaxGuestMonitorsResponse, error) {
	return service.ISystemProperties_getMaxGuestMonitorsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getInfoVDSizeContext(ctx context.Context, request *ISystemProperties_getInfoVDSize) (*ISystemProperties_getInfoVDSizeResponse, error) {
	response := new(ISystemProperties_getInfoVDSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getInfoVDSize(request *ISystemProperties_getInfoVDSize) (*ISystemProperties_getInfoVDSizeResponse, error) {
	return service.ISystemProperties_getInfoVDSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSerialPortCountContext(ctx context.Context, request *ISystemProperties_getSerialPortCount) (*ISystemProperties_getSerialPortCountResponse, error) {
	response := new(ISystemProperties_getSerialPortCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSerialPortCount(request *ISystemProperties_getSerialPortCount) (*ISystemProperties_getSerialPortCountResponse, error) {
	return service.ISystemProperties_getSerialPortCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getParallelPortCountContext(ctx context.Context, request *ISystemProperties_getParallelPortCount) (*ISystemProperties_getParallelPortCountResponse, error) {
	response := new(ISystemProperties_getParallelPortCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getParallelPortCount(request *ISystemProperties_getParallelPortCount) (*ISystemProperties_getParallelPortCountResponse, error) {
	return service.ISystemProperties_getParallelPortCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMaxBootPositionContext(ctx context.Context, request *ISystemProperties_getMaxBootPosition) (*ISystemProperties_getMaxBootPositionResponse, error) {
	response := new(ISystemProperties_getMaxBootPositionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMaxBootPosition(request *ISystemProperties_getMaxBootPosition) (*ISystemProperties_getMaxBootPositionResponse, error) {
	return service.ISystemProperties_getMaxBootPositionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getRawModeSupportedContext(ctx context.Context, request *ISystemProperties_getRawModeSupported) (*ISystemProperties_getRawModeSupportedResponse, error) {
	response := new(ISystemProperties_getRawModeSupportedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getRawModeSupported(request *ISystemProperties_getRawModeSupported) (*ISystemProperties_getRawModeSupportedResponse, error) {
	return service.ISystemProperties_getRawModeSupportedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getExclusiveHwVirtContext(ctx context.Context, request *ISystemProperties_getExclusiveHwVirt) (*ISystemProperties_getExclusiveHwVirtResponse, error) {
	response := new(ISystemProperties_getExclusiveHwVirtResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getExclusiveHwVirt(request *ISystemProperties_getExclusiveHwVirt) (*ISystemProperties_getExclusiveHwVirtResponse, error) {
	return service.ISystemProperties_getExclusiveHwVirtContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setExclusiveHwVirtContext(ctx context.Context, request *ISystemProperties_setExclusiveHwVirt) (*ISystemProperties_setExclusiveHwVirtResponse, error) {
	response := new(ISystemProperties_setExclusiveHwVirtResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setExclusiveHwVirt(request *ISystemProperties_setExclusiveHwVirt) (*ISystemProperties_setExclusiveHwVirtResponse, error) {
	return service.ISystemProperties_setExclusiveHwVirtContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getDefaultMachineFolderContext(ctx context.Context, request *ISystemProperties_getDefaultMachineFolder) (*ISystemProperties_getDefaultMachineFolderResponse, error) {
	response := new(ISystemProperties_getDefaultMachineFolderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getDefaultMachineFolder(request *ISystemProperties_getDefaultMachineFolder) (*ISystemProperties_getDefaultMachineFolderResponse, error) {
	return service.ISystemProperties_getDefaultMachineFolderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setDefaultMachineFolderContext(ctx context.Context, request *ISystemProperties_setDefaultMachineFolder) (*ISystemProperties_setDefaultMachineFolderResponse, error) {
	response := new(ISystemProperties_setDefaultMachineFolderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setDefaultMachineFolder(request *ISystemProperties_setDefaultMachineFolder) (*ISystemProperties_setDefaultMachineFolderResponse, error) {
	return service.ISystemProperties_setDefaultMachineFolderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getLoggingLevelContext(ctx context.Context, request *ISystemProperties_getLoggingLevel) (*ISystemProperties_getLoggingLevelResponse, error) {
	response := new(ISystemProperties_getLoggingLevelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getLoggingLevel(request *ISystemProperties_getLoggingLevel) (*ISystemProperties_getLoggingLevelResponse, error) {
	return service.ISystemProperties_getLoggingLevelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setLoggingLevelContext(ctx context.Context, request *ISystemProperties_setLoggingLevel) (*ISystemProperties_setLoggingLevelResponse, error) {
	response := new(ISystemProperties_setLoggingLevelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setLoggingLevel(request *ISystemProperties_setLoggingLevel) (*ISystemProperties_setLoggingLevelResponse, error) {
	return service.ISystemProperties_setLoggingLevelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMediumFormatsContext(ctx context.Context, request *ISystemProperties_getMediumFormats) (*ISystemProperties_getMediumFormatsResponse, error) {
	response := new(ISystemProperties_getMediumFormatsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMediumFormats(request *ISystemProperties_getMediumFormats) (*ISystemProperties_getMediumFormatsResponse, error) {
	return service.ISystemProperties_getMediumFormatsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getDefaultHardDiskFormatContext(ctx context.Context, request *ISystemProperties_getDefaultHardDiskFormat) (*ISystemProperties_getDefaultHardDiskFormatResponse, error) {
	response := new(ISystemProperties_getDefaultHardDiskFormatResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getDefaultHardDiskFormat(request *ISystemProperties_getDefaultHardDiskFormat) (*ISystemProperties_getDefaultHardDiskFormatResponse, error) {
	return service.ISystemProperties_getDefaultHardDiskFormatContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setDefaultHardDiskFormatContext(ctx context.Context, request *ISystemProperties_setDefaultHardDiskFormat) (*ISystemProperties_setDefaultHardDiskFormatResponse, error) {
	response := new(ISystemProperties_setDefaultHardDiskFormatResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setDefaultHardDiskFormat(request *ISystemProperties_setDefaultHardDiskFormat) (*ISystemProperties_setDefaultHardDiskFormatResponse, error) {
	return service.ISystemProperties_setDefaultHardDiskFormatContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getFreeDiskSpaceWarningContext(ctx context.Context, request *ISystemProperties_getFreeDiskSpaceWarning) (*ISystemProperties_getFreeDiskSpaceWarningResponse, error) {
	response := new(ISystemProperties_getFreeDiskSpaceWarningResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getFreeDiskSpaceWarning(request *ISystemProperties_getFreeDiskSpaceWarning) (*ISystemProperties_getFreeDiskSpaceWarningResponse, error) {
	return service.ISystemProperties_getFreeDiskSpaceWarningContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setFreeDiskSpaceWarningContext(ctx context.Context, request *ISystemProperties_setFreeDiskSpaceWarning) (*ISystemProperties_setFreeDiskSpaceWarningResponse, error) {
	response := new(ISystemProperties_setFreeDiskSpaceWarningResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setFreeDiskSpaceWarning(request *ISystemProperties_setFreeDiskSpaceWarning) (*ISystemProperties_setFreeDiskSpaceWarningResponse, error) {
	return service.ISystemProperties_setFreeDiskSpaceWarningContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getFreeDiskSpacePercentWarningContext(ctx context.Context, request *ISystemProperties_getFreeDiskSpacePercentWarning) (*ISystemProperties_getFreeDiskSpacePercentWarningResponse, error) {
	response := new(ISystemProperties_getFreeDiskSpacePercentWarningResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getFreeDiskSpacePercentWarning(request *ISystemProperties_getFreeDiskSpacePercentWarning) (*ISystemProperties_getFreeDiskSpacePercentWarningResponse, error) {
	return service.ISystemProperties_getFreeDiskSpacePercentWarningContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setFreeDiskSpacePercentWarningContext(ctx context.Context, request *ISystemProperties_setFreeDiskSpacePercentWarning) (*ISystemProperties_setFreeDiskSpacePercentWarningResponse, error) {
	response := new(ISystemProperties_setFreeDiskSpacePercentWarningResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setFreeDiskSpacePercentWarning(request *ISystemProperties_setFreeDiskSpacePercentWarning) (*ISystemProperties_setFreeDiskSpacePercentWarningResponse, error) {
	return service.ISystemProperties_setFreeDiskSpacePercentWarningContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getFreeDiskSpaceErrorContext(ctx context.Context, request *ISystemProperties_getFreeDiskSpaceError) (*ISystemProperties_getFreeDiskSpaceErrorResponse, error) {
	response := new(ISystemProperties_getFreeDiskSpaceErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getFreeDiskSpaceError(request *ISystemProperties_getFreeDiskSpaceError) (*ISystemProperties_getFreeDiskSpaceErrorResponse, error) {
	return service.ISystemProperties_getFreeDiskSpaceErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setFreeDiskSpaceErrorContext(ctx context.Context, request *ISystemProperties_setFreeDiskSpaceError) (*ISystemProperties_setFreeDiskSpaceErrorResponse, error) {
	response := new(ISystemProperties_setFreeDiskSpaceErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setFreeDiskSpaceError(request *ISystemProperties_setFreeDiskSpaceError) (*ISystemProperties_setFreeDiskSpaceErrorResponse, error) {
	return service.ISystemProperties_setFreeDiskSpaceErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getFreeDiskSpacePercentErrorContext(ctx context.Context, request *ISystemProperties_getFreeDiskSpacePercentError) (*ISystemProperties_getFreeDiskSpacePercentErrorResponse, error) {
	response := new(ISystemProperties_getFreeDiskSpacePercentErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getFreeDiskSpacePercentError(request *ISystemProperties_getFreeDiskSpacePercentError) (*ISystemProperties_getFreeDiskSpacePercentErrorResponse, error) {
	return service.ISystemProperties_getFreeDiskSpacePercentErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setFreeDiskSpacePercentErrorContext(ctx context.Context, request *ISystemProperties_setFreeDiskSpacePercentError) (*ISystemProperties_setFreeDiskSpacePercentErrorResponse, error) {
	response := new(ISystemProperties_setFreeDiskSpacePercentErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setFreeDiskSpacePercentError(request *ISystemProperties_setFreeDiskSpacePercentError) (*ISystemProperties_setFreeDiskSpacePercentErrorResponse, error) {
	return service.ISystemProperties_setFreeDiskSpacePercentErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getVRDEAuthLibraryContext(ctx context.Context, request *ISystemProperties_getVRDEAuthLibrary) (*ISystemProperties_getVRDEAuthLibraryResponse, error) {
	response := new(ISystemProperties_getVRDEAuthLibraryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getVRDEAuthLibrary(request *ISystemProperties_getVRDEAuthLibrary) (*ISystemProperties_getVRDEAuthLibraryResponse, error) {
	return service.ISystemProperties_getVRDEAuthLibraryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setVRDEAuthLibraryContext(ctx context.Context, request *ISystemProperties_setVRDEAuthLibrary) (*ISystemProperties_setVRDEAuthLibraryResponse, error) {
	response := new(ISystemProperties_setVRDEAuthLibraryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setVRDEAuthLibrary(request *ISystemProperties_setVRDEAuthLibrary) (*ISystemProperties_setVRDEAuthLibraryResponse, error) {
	return service.ISystemProperties_setVRDEAuthLibraryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getWebServiceAuthLibraryContext(ctx context.Context, request *ISystemProperties_getWebServiceAuthLibrary) (*ISystemProperties_getWebServiceAuthLibraryResponse, error) {
	response := new(ISystemProperties_getWebServiceAuthLibraryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getWebServiceAuthLibrary(request *ISystemProperties_getWebServiceAuthLibrary) (*ISystemProperties_getWebServiceAuthLibraryResponse, error) {
	return service.ISystemProperties_getWebServiceAuthLibraryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setWebServiceAuthLibraryContext(ctx context.Context, request *ISystemProperties_setWebServiceAuthLibrary) (*ISystemProperties_setWebServiceAuthLibraryResponse, error) {
	response := new(ISystemProperties_setWebServiceAuthLibraryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setWebServiceAuthLibrary(request *ISystemProperties_setWebServiceAuthLibrary) (*ISystemProperties_setWebServiceAuthLibraryResponse, error) {
	return service.ISystemProperties_setWebServiceAuthLibraryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getDefaultVRDEExtPackContext(ctx context.Context, request *ISystemProperties_getDefaultVRDEExtPack) (*ISystemProperties_getDefaultVRDEExtPackResponse, error) {
	response := new(ISystemProperties_getDefaultVRDEExtPackResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getDefaultVRDEExtPack(request *ISystemProperties_getDefaultVRDEExtPack) (*ISystemProperties_getDefaultVRDEExtPackResponse, error) {
	return service.ISystemProperties_getDefaultVRDEExtPackContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setDefaultVRDEExtPackContext(ctx context.Context, request *ISystemProperties_setDefaultVRDEExtPack) (*ISystemProperties_setDefaultVRDEExtPackResponse, error) {
	response := new(ISystemProperties_setDefaultVRDEExtPackResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setDefaultVRDEExtPack(request *ISystemProperties_setDefaultVRDEExtPack) (*ISystemProperties_setDefaultVRDEExtPackResponse, error) {
	return service.ISystemProperties_setDefaultVRDEExtPackContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getDefaultCryptoExtPackContext(ctx context.Context, request *ISystemProperties_getDefaultCryptoExtPack) (*ISystemProperties_getDefaultCryptoExtPackResponse, error) {
	response := new(ISystemProperties_getDefaultCryptoExtPackResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getDefaultCryptoExtPack(request *ISystemProperties_getDefaultCryptoExtPack) (*ISystemProperties_getDefaultCryptoExtPackResponse, error) {
	return service.ISystemProperties_getDefaultCryptoExtPackContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setDefaultCryptoExtPackContext(ctx context.Context, request *ISystemProperties_setDefaultCryptoExtPack) (*ISystemProperties_setDefaultCryptoExtPackResponse, error) {
	response := new(ISystemProperties_setDefaultCryptoExtPackResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setDefaultCryptoExtPack(request *ISystemProperties_setDefaultCryptoExtPack) (*ISystemProperties_setDefaultCryptoExtPackResponse, error) {
	return service.ISystemProperties_setDefaultCryptoExtPackContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getLogHistoryCountContext(ctx context.Context, request *ISystemProperties_getLogHistoryCount) (*ISystemProperties_getLogHistoryCountResponse, error) {
	response := new(ISystemProperties_getLogHistoryCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getLogHistoryCount(request *ISystemProperties_getLogHistoryCount) (*ISystemProperties_getLogHistoryCountResponse, error) {
	return service.ISystemProperties_getLogHistoryCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setLogHistoryCountContext(ctx context.Context, request *ISystemProperties_setLogHistoryCount) (*ISystemProperties_setLogHistoryCountResponse, error) {
	response := new(ISystemProperties_setLogHistoryCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setLogHistoryCount(request *ISystemProperties_setLogHistoryCount) (*ISystemProperties_setLogHistoryCountResponse, error) {
	return service.ISystemProperties_setLogHistoryCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getDefaultAudioDriverContext(ctx context.Context, request *ISystemProperties_getDefaultAudioDriver) (*ISystemProperties_getDefaultAudioDriverResponse, error) {
	response := new(ISystemProperties_getDefaultAudioDriverResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getDefaultAudioDriver(request *ISystemProperties_getDefaultAudioDriver) (*ISystemProperties_getDefaultAudioDriverResponse, error) {
	return service.ISystemProperties_getDefaultAudioDriverContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getAutostartDatabasePathContext(ctx context.Context, request *ISystemProperties_getAutostartDatabasePath) (*ISystemProperties_getAutostartDatabasePathResponse, error) {
	response := new(ISystemProperties_getAutostartDatabasePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getAutostartDatabasePath(request *ISystemProperties_getAutostartDatabasePath) (*ISystemProperties_getAutostartDatabasePathResponse, error) {
	return service.ISystemProperties_getAutostartDatabasePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setAutostartDatabasePathContext(ctx context.Context, request *ISystemProperties_setAutostartDatabasePath) (*ISystemProperties_setAutostartDatabasePathResponse, error) {
	response := new(ISystemProperties_setAutostartDatabasePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setAutostartDatabasePath(request *ISystemProperties_setAutostartDatabasePath) (*ISystemProperties_setAutostartDatabasePathResponse, error) {
	return service.ISystemProperties_setAutostartDatabasePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getDefaultAdditionsISOContext(ctx context.Context, request *ISystemProperties_getDefaultAdditionsISO) (*ISystemProperties_getDefaultAdditionsISOResponse, error) {
	response := new(ISystemProperties_getDefaultAdditionsISOResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getDefaultAdditionsISO(request *ISystemProperties_getDefaultAdditionsISO) (*ISystemProperties_getDefaultAdditionsISOResponse, error) {
	return service.ISystemProperties_getDefaultAdditionsISOContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setDefaultAdditionsISOContext(ctx context.Context, request *ISystemProperties_setDefaultAdditionsISO) (*ISystemProperties_setDefaultAdditionsISOResponse, error) {
	response := new(ISystemProperties_setDefaultAdditionsISOResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setDefaultAdditionsISO(request *ISystemProperties_setDefaultAdditionsISO) (*ISystemProperties_setDefaultAdditionsISOResponse, error) {
	return service.ISystemProperties_setDefaultAdditionsISOContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getDefaultFrontendContext(ctx context.Context, request *ISystemProperties_getDefaultFrontend) (*ISystemProperties_getDefaultFrontendResponse, error) {
	response := new(ISystemProperties_getDefaultFrontendResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getDefaultFrontend(request *ISystemProperties_getDefaultFrontend) (*ISystemProperties_getDefaultFrontendResponse, error) {
	return service.ISystemProperties_getDefaultFrontendContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setDefaultFrontendContext(ctx context.Context, request *ISystemProperties_setDefaultFrontend) (*ISystemProperties_setDefaultFrontendResponse, error) {
	response := new(ISystemProperties_setDefaultFrontendResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setDefaultFrontend(request *ISystemProperties_setDefaultFrontend) (*ISystemProperties_setDefaultFrontendResponse, error) {
	return service.ISystemProperties_setDefaultFrontendContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getScreenShotFormatsContext(ctx context.Context, request *ISystemProperties_getScreenShotFormats) (*ISystemProperties_getScreenShotFormatsResponse, error) {
	response := new(ISystemProperties_getScreenShotFormatsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getScreenShotFormats(request *ISystemProperties_getScreenShotFormats) (*ISystemProperties_getScreenShotFormatsResponse, error) {
	return service.ISystemProperties_getScreenShotFormatsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getProxyModeContext(ctx context.Context, request *ISystemProperties_getProxyMode) (*ISystemProperties_getProxyModeResponse, error) {
	response := new(ISystemProperties_getProxyModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getProxyMode(request *ISystemProperties_getProxyMode) (*ISystemProperties_getProxyModeResponse, error) {
	return service.ISystemProperties_getProxyModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setProxyModeContext(ctx context.Context, request *ISystemProperties_setProxyMode) (*ISystemProperties_setProxyModeResponse, error) {
	response := new(ISystemProperties_setProxyModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setProxyMode(request *ISystemProperties_setProxyMode) (*ISystemProperties_setProxyModeResponse, error) {
	return service.ISystemProperties_setProxyModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getProxyURLContext(ctx context.Context, request *ISystemProperties_getProxyURL) (*ISystemProperties_getProxyURLResponse, error) {
	response := new(ISystemProperties_getProxyURLResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getProxyURL(request *ISystemProperties_getProxyURL) (*ISystemProperties_getProxyURLResponse, error) {
	return service.ISystemProperties_getProxyURLContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setProxyURLContext(ctx context.Context, request *ISystemProperties_setProxyURL) (*ISystemProperties_setProxyURLResponse, error) {
	response := new(ISystemProperties_setProxyURLResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setProxyURL(request *ISystemProperties_setProxyURL) (*ISystemProperties_setProxyURLResponse, error) {
	return service.ISystemProperties_setProxyURLContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedParavirtProvidersContext(ctx context.Context, request *ISystemProperties_getSupportedParavirtProviders) (*ISystemProperties_getSupportedParavirtProvidersResponse, error) {
	response := new(ISystemProperties_getSupportedParavirtProvidersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedParavirtProviders(request *ISystemProperties_getSupportedParavirtProviders) (*ISystemProperties_getSupportedParavirtProvidersResponse, error) {
	return service.ISystemProperties_getSupportedParavirtProvidersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedClipboardModesContext(ctx context.Context, request *ISystemProperties_getSupportedClipboardModes) (*ISystemProperties_getSupportedClipboardModesResponse, error) {
	response := new(ISystemProperties_getSupportedClipboardModesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedClipboardModes(request *ISystemProperties_getSupportedClipboardModes) (*ISystemProperties_getSupportedClipboardModesResponse, error) {
	return service.ISystemProperties_getSupportedClipboardModesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedDnDModesContext(ctx context.Context, request *ISystemProperties_getSupportedDnDModes) (*ISystemProperties_getSupportedDnDModesResponse, error) {
	response := new(ISystemProperties_getSupportedDnDModesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedDnDModes(request *ISystemProperties_getSupportedDnDModes) (*ISystemProperties_getSupportedDnDModesResponse, error) {
	return service.ISystemProperties_getSupportedDnDModesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedFirmwareTypesContext(ctx context.Context, request *ISystemProperties_getSupportedFirmwareTypes) (*ISystemProperties_getSupportedFirmwareTypesResponse, error) {
	response := new(ISystemProperties_getSupportedFirmwareTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedFirmwareTypes(request *ISystemProperties_getSupportedFirmwareTypes) (*ISystemProperties_getSupportedFirmwareTypesResponse, error) {
	return service.ISystemProperties_getSupportedFirmwareTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedPointingHIDTypesContext(ctx context.Context, request *ISystemProperties_getSupportedPointingHIDTypes) (*ISystemProperties_getSupportedPointingHIDTypesResponse, error) {
	response := new(ISystemProperties_getSupportedPointingHIDTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedPointingHIDTypes(request *ISystemProperties_getSupportedPointingHIDTypes) (*ISystemProperties_getSupportedPointingHIDTypesResponse, error) {
	return service.ISystemProperties_getSupportedPointingHIDTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedKeyboardHIDTypesContext(ctx context.Context, request *ISystemProperties_getSupportedKeyboardHIDTypes) (*ISystemProperties_getSupportedKeyboardHIDTypesResponse, error) {
	response := new(ISystemProperties_getSupportedKeyboardHIDTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedKeyboardHIDTypes(request *ISystemProperties_getSupportedKeyboardHIDTypes) (*ISystemProperties_getSupportedKeyboardHIDTypesResponse, error) {
	return service.ISystemProperties_getSupportedKeyboardHIDTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedVFSTypesContext(ctx context.Context, request *ISystemProperties_getSupportedVFSTypes) (*ISystemProperties_getSupportedVFSTypesResponse, error) {
	response := new(ISystemProperties_getSupportedVFSTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedVFSTypes(request *ISystemProperties_getSupportedVFSTypes) (*ISystemProperties_getSupportedVFSTypesResponse, error) {
	return service.ISystemProperties_getSupportedVFSTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedImportOptionsContext(ctx context.Context, request *ISystemProperties_getSupportedImportOptions) (*ISystemProperties_getSupportedImportOptionsResponse, error) {
	response := new(ISystemProperties_getSupportedImportOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedImportOptions(request *ISystemProperties_getSupportedImportOptions) (*ISystemProperties_getSupportedImportOptionsResponse, error) {
	return service.ISystemProperties_getSupportedImportOptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedExportOptionsContext(ctx context.Context, request *ISystemProperties_getSupportedExportOptions) (*ISystemProperties_getSupportedExportOptionsResponse, error) {
	response := new(ISystemProperties_getSupportedExportOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedExportOptions(request *ISystemProperties_getSupportedExportOptions) (*ISystemProperties_getSupportedExportOptionsResponse, error) {
	return service.ISystemProperties_getSupportedExportOptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedRecordingFeaturesContext(ctx context.Context, request *ISystemProperties_getSupportedRecordingFeatures) (*ISystemProperties_getSupportedRecordingFeaturesResponse, error) {
	response := new(ISystemProperties_getSupportedRecordingFeaturesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedRecordingFeatures(request *ISystemProperties_getSupportedRecordingFeatures) (*ISystemProperties_getSupportedRecordingFeaturesResponse, error) {
	return service.ISystemProperties_getSupportedRecordingFeaturesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedRecordingAudioCodecsContext(ctx context.Context, request *ISystemProperties_getSupportedRecordingAudioCodecs) (*ISystemProperties_getSupportedRecordingAudioCodecsResponse, error) {
	response := new(ISystemProperties_getSupportedRecordingAudioCodecsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedRecordingAudioCodecs(request *ISystemProperties_getSupportedRecordingAudioCodecs) (*ISystemProperties_getSupportedRecordingAudioCodecsResponse, error) {
	return service.ISystemProperties_getSupportedRecordingAudioCodecsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedRecordingVideoCodecsContext(ctx context.Context, request *ISystemProperties_getSupportedRecordingVideoCodecs) (*ISystemProperties_getSupportedRecordingVideoCodecsResponse, error) {
	response := new(ISystemProperties_getSupportedRecordingVideoCodecsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedRecordingVideoCodecs(request *ISystemProperties_getSupportedRecordingVideoCodecs) (*ISystemProperties_getSupportedRecordingVideoCodecsResponse, error) {
	return service.ISystemProperties_getSupportedRecordingVideoCodecsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedRecordingVSModesContext(ctx context.Context, request *ISystemProperties_getSupportedRecordingVSModes) (*ISystemProperties_getSupportedRecordingVSModesResponse, error) {
	response := new(ISystemProperties_getSupportedRecordingVSModesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedRecordingVSModes(request *ISystemProperties_getSupportedRecordingVSModes) (*ISystemProperties_getSupportedRecordingVSModesResponse, error) {
	return service.ISystemProperties_getSupportedRecordingVSModesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedRecordingARCModesContext(ctx context.Context, request *ISystemProperties_getSupportedRecordingARCModes) (*ISystemProperties_getSupportedRecordingARCModesResponse, error) {
	response := new(ISystemProperties_getSupportedRecordingARCModesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedRecordingARCModes(request *ISystemProperties_getSupportedRecordingARCModes) (*ISystemProperties_getSupportedRecordingARCModesResponse, error) {
	return service.ISystemProperties_getSupportedRecordingARCModesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedRecordingVRCModesContext(ctx context.Context, request *ISystemProperties_getSupportedRecordingVRCModes) (*ISystemProperties_getSupportedRecordingVRCModesResponse, error) {
	response := new(ISystemProperties_getSupportedRecordingVRCModesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedRecordingVRCModes(request *ISystemProperties_getSupportedRecordingVRCModes) (*ISystemProperties_getSupportedRecordingVRCModesResponse, error) {
	return service.ISystemProperties_getSupportedRecordingVRCModesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedGraphicsControllerTypesContext(ctx context.Context, request *ISystemProperties_getSupportedGraphicsControllerTypes) (*ISystemProperties_getSupportedGraphicsControllerTypesResponse, error) {
	response := new(ISystemProperties_getSupportedGraphicsControllerTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedGraphicsControllerTypes(request *ISystemProperties_getSupportedGraphicsControllerTypes) (*ISystemProperties_getSupportedGraphicsControllerTypesResponse, error) {
	return service.ISystemProperties_getSupportedGraphicsControllerTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedCloneOptionsContext(ctx context.Context, request *ISystemProperties_getSupportedCloneOptions) (*ISystemProperties_getSupportedCloneOptionsResponse, error) {
	response := new(ISystemProperties_getSupportedCloneOptionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedCloneOptions(request *ISystemProperties_getSupportedCloneOptions) (*ISystemProperties_getSupportedCloneOptionsResponse, error) {
	return service.ISystemProperties_getSupportedCloneOptionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedAutostopTypesContext(ctx context.Context, request *ISystemProperties_getSupportedAutostopTypes) (*ISystemProperties_getSupportedAutostopTypesResponse, error) {
	response := new(ISystemProperties_getSupportedAutostopTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedAutostopTypes(request *ISystemProperties_getSupportedAutostopTypes) (*ISystemProperties_getSupportedAutostopTypesResponse, error) {
	return service.ISystemProperties_getSupportedAutostopTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedVMProcPrioritiesContext(ctx context.Context, request *ISystemProperties_getSupportedVMProcPriorities) (*ISystemProperties_getSupportedVMProcPrioritiesResponse, error) {
	response := new(ISystemProperties_getSupportedVMProcPrioritiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedVMProcPriorities(request *ISystemProperties_getSupportedVMProcPriorities) (*ISystemProperties_getSupportedVMProcPrioritiesResponse, error) {
	return service.ISystemProperties_getSupportedVMProcPrioritiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedNetworkAttachmentTypesContext(ctx context.Context, request *ISystemProperties_getSupportedNetworkAttachmentTypes) (*ISystemProperties_getSupportedNetworkAttachmentTypesResponse, error) {
	response := new(ISystemProperties_getSupportedNetworkAttachmentTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedNetworkAttachmentTypes(request *ISystemProperties_getSupportedNetworkAttachmentTypes) (*ISystemProperties_getSupportedNetworkAttachmentTypesResponse, error) {
	return service.ISystemProperties_getSupportedNetworkAttachmentTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedNetworkAdapterTypesContext(ctx context.Context, request *ISystemProperties_getSupportedNetworkAdapterTypes) (*ISystemProperties_getSupportedNetworkAdapterTypesResponse, error) {
	response := new(ISystemProperties_getSupportedNetworkAdapterTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedNetworkAdapterTypes(request *ISystemProperties_getSupportedNetworkAdapterTypes) (*ISystemProperties_getSupportedNetworkAdapterTypesResponse, error) {
	return service.ISystemProperties_getSupportedNetworkAdapterTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedPortModesContext(ctx context.Context, request *ISystemProperties_getSupportedPortModes) (*ISystemProperties_getSupportedPortModesResponse, error) {
	response := new(ISystemProperties_getSupportedPortModesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedPortModes(request *ISystemProperties_getSupportedPortModes) (*ISystemProperties_getSupportedPortModesResponse, error) {
	return service.ISystemProperties_getSupportedPortModesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedUartTypesContext(ctx context.Context, request *ISystemProperties_getSupportedUartTypes) (*ISystemProperties_getSupportedUartTypesResponse, error) {
	response := new(ISystemProperties_getSupportedUartTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedUartTypes(request *ISystemProperties_getSupportedUartTypes) (*ISystemProperties_getSupportedUartTypesResponse, error) {
	return service.ISystemProperties_getSupportedUartTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedUSBControllerTypesContext(ctx context.Context, request *ISystemProperties_getSupportedUSBControllerTypes) (*ISystemProperties_getSupportedUSBControllerTypesResponse, error) {
	response := new(ISystemProperties_getSupportedUSBControllerTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedUSBControllerTypes(request *ISystemProperties_getSupportedUSBControllerTypes) (*ISystemProperties_getSupportedUSBControllerTypesResponse, error) {
	return service.ISystemProperties_getSupportedUSBControllerTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedAudioDriverTypesContext(ctx context.Context, request *ISystemProperties_getSupportedAudioDriverTypes) (*ISystemProperties_getSupportedAudioDriverTypesResponse, error) {
	response := new(ISystemProperties_getSupportedAudioDriverTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedAudioDriverTypes(request *ISystemProperties_getSupportedAudioDriverTypes) (*ISystemProperties_getSupportedAudioDriverTypesResponse, error) {
	return service.ISystemProperties_getSupportedAudioDriverTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedAudioControllerTypesContext(ctx context.Context, request *ISystemProperties_getSupportedAudioControllerTypes) (*ISystemProperties_getSupportedAudioControllerTypesResponse, error) {
	response := new(ISystemProperties_getSupportedAudioControllerTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedAudioControllerTypes(request *ISystemProperties_getSupportedAudioControllerTypes) (*ISystemProperties_getSupportedAudioControllerTypesResponse, error) {
	return service.ISystemProperties_getSupportedAudioControllerTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedStorageBusesContext(ctx context.Context, request *ISystemProperties_getSupportedStorageBuses) (*ISystemProperties_getSupportedStorageBusesResponse, error) {
	response := new(ISystemProperties_getSupportedStorageBusesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedStorageBuses(request *ISystemProperties_getSupportedStorageBuses) (*ISystemProperties_getSupportedStorageBusesResponse, error) {
	return service.ISystemProperties_getSupportedStorageBusesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedStorageControllerTypesContext(ctx context.Context, request *ISystemProperties_getSupportedStorageControllerTypes) (*ISystemProperties_getSupportedStorageControllerTypesResponse, error) {
	response := new(ISystemProperties_getSupportedStorageControllerTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedStorageControllerTypes(request *ISystemProperties_getSupportedStorageControllerTypes) (*ISystemProperties_getSupportedStorageControllerTypesResponse, error) {
	return service.ISystemProperties_getSupportedStorageControllerTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedChipsetTypesContext(ctx context.Context, request *ISystemProperties_getSupportedChipsetTypes) (*ISystemProperties_getSupportedChipsetTypesResponse, error) {
	response := new(ISystemProperties_getSupportedChipsetTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedChipsetTypes(request *ISystemProperties_getSupportedChipsetTypes) (*ISystemProperties_getSupportedChipsetTypesResponse, error) {
	return service.ISystemProperties_getSupportedChipsetTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedIommuTypesContext(ctx context.Context, request *ISystemProperties_getSupportedIommuTypes) (*ISystemProperties_getSupportedIommuTypesResponse, error) {
	response := new(ISystemProperties_getSupportedIommuTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedIommuTypes(request *ISystemProperties_getSupportedIommuTypes) (*ISystemProperties_getSupportedIommuTypesResponse, error) {
	return service.ISystemProperties_getSupportedIommuTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getSupportedTpmTypesContext(ctx context.Context, request *ISystemProperties_getSupportedTpmTypes) (*ISystemProperties_getSupportedTpmTypesResponse, error) {
	response := new(ISystemProperties_getSupportedTpmTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getSupportedTpmTypes(request *ISystemProperties_getSupportedTpmTypes) (*ISystemProperties_getSupportedTpmTypesResponse, error) {
	return service.ISystemProperties_getSupportedTpmTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getLanguageIdContext(ctx context.Context, request *ISystemProperties_getLanguageId) (*ISystemProperties_getLanguageIdResponse, error) {
	response := new(ISystemProperties_getLanguageIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getLanguageId(request *ISystemProperties_getLanguageId) (*ISystemProperties_getLanguageIdResponse, error) {
	return service.ISystemProperties_getLanguageIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_setLanguageIdContext(ctx context.Context, request *ISystemProperties_setLanguageId) (*ISystemProperties_setLanguageIdResponse, error) {
	response := new(ISystemProperties_setLanguageIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_setLanguageId(request *ISystemProperties_setLanguageId) (*ISystemProperties_setLanguageIdResponse, error) {
	return service.ISystemProperties_setLanguageIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMaxNetworkAdaptersContext(ctx context.Context, request *ISystemProperties_getMaxNetworkAdapters) (*ISystemProperties_getMaxNetworkAdaptersResponse, error) {
	response := new(ISystemProperties_getMaxNetworkAdaptersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMaxNetworkAdapters(request *ISystemProperties_getMaxNetworkAdapters) (*ISystemProperties_getMaxNetworkAdaptersResponse, error) {
	return service.ISystemProperties_getMaxNetworkAdaptersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMaxNetworkAdaptersOfTypeContext(ctx context.Context, request *ISystemProperties_getMaxNetworkAdaptersOfType) (*ISystemProperties_getMaxNetworkAdaptersOfTypeResponse, error) {
	response := new(ISystemProperties_getMaxNetworkAdaptersOfTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMaxNetworkAdaptersOfType(request *ISystemProperties_getMaxNetworkAdaptersOfType) (*ISystemProperties_getMaxNetworkAdaptersOfTypeResponse, error) {
	return service.ISystemProperties_getMaxNetworkAdaptersOfTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMaxDevicesPerPortForStorageBusContext(ctx context.Context, request *ISystemProperties_getMaxDevicesPerPortForStorageBus) (*ISystemProperties_getMaxDevicesPerPortForStorageBusResponse, error) {
	response := new(ISystemProperties_getMaxDevicesPerPortForStorageBusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMaxDevicesPerPortForStorageBus(request *ISystemProperties_getMaxDevicesPerPortForStorageBus) (*ISystemProperties_getMaxDevicesPerPortForStorageBusResponse, error) {
	return service.ISystemProperties_getMaxDevicesPerPortForStorageBusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMinPortCountForStorageBusContext(ctx context.Context, request *ISystemProperties_getMinPortCountForStorageBus) (*ISystemProperties_getMinPortCountForStorageBusResponse, error) {
	response := new(ISystemProperties_getMinPortCountForStorageBusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMinPortCountForStorageBus(request *ISystemProperties_getMinPortCountForStorageBus) (*ISystemProperties_getMinPortCountForStorageBusResponse, error) {
	return service.ISystemProperties_getMinPortCountForStorageBusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMaxPortCountForStorageBusContext(ctx context.Context, request *ISystemProperties_getMaxPortCountForStorageBus) (*ISystemProperties_getMaxPortCountForStorageBusResponse, error) {
	response := new(ISystemProperties_getMaxPortCountForStorageBusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMaxPortCountForStorageBus(request *ISystemProperties_getMaxPortCountForStorageBus) (*ISystemProperties_getMaxPortCountForStorageBusResponse, error) {
	return service.ISystemProperties_getMaxPortCountForStorageBusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMaxInstancesOfStorageBusContext(ctx context.Context, request *ISystemProperties_getMaxInstancesOfStorageBus) (*ISystemProperties_getMaxInstancesOfStorageBusResponse, error) {
	response := new(ISystemProperties_getMaxInstancesOfStorageBusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMaxInstancesOfStorageBus(request *ISystemProperties_getMaxInstancesOfStorageBus) (*ISystemProperties_getMaxInstancesOfStorageBusResponse, error) {
	return service.ISystemProperties_getMaxInstancesOfStorageBusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getDeviceTypesForStorageBusContext(ctx context.Context, request *ISystemProperties_getDeviceTypesForStorageBus) (*ISystemProperties_getDeviceTypesForStorageBusResponse, error) {
	response := new(ISystemProperties_getDeviceTypesForStorageBusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getDeviceTypesForStorageBus(request *ISystemProperties_getDeviceTypesForStorageBus) (*ISystemProperties_getDeviceTypesForStorageBusResponse, error) {
	return service.ISystemProperties_getDeviceTypesForStorageBusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getStorageBusForStorageControllerTypeContext(ctx context.Context, request *ISystemProperties_getStorageBusForStorageControllerType) (*ISystemProperties_getStorageBusForStorageControllerTypeResponse, error) {
	response := new(ISystemProperties_getStorageBusForStorageControllerTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getStorageBusForStorageControllerType(request *ISystemProperties_getStorageBusForStorageControllerType) (*ISystemProperties_getStorageBusForStorageControllerTypeResponse, error) {
	return service.ISystemProperties_getStorageBusForStorageControllerTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getStorageControllerTypesForStorageBusContext(ctx context.Context, request *ISystemProperties_getStorageControllerTypesForStorageBus) (*ISystemProperties_getStorageControllerTypesForStorageBusResponse, error) {
	response := new(ISystemProperties_getStorageControllerTypesForStorageBusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getStorageControllerTypesForStorageBus(request *ISystemProperties_getStorageControllerTypesForStorageBus) (*ISystemProperties_getStorageControllerTypesForStorageBusResponse, error) {
	return service.ISystemProperties_getStorageControllerTypesForStorageBusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getDefaultIoCacheSettingForStorageControllerContext(ctx context.Context, request *ISystemProperties_getDefaultIoCacheSettingForStorageController) (*ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse, error) {
	response := new(ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getDefaultIoCacheSettingForStorageController(request *ISystemProperties_getDefaultIoCacheSettingForStorageController) (*ISystemProperties_getDefaultIoCacheSettingForStorageControllerResponse, error) {
	return service.ISystemProperties_getDefaultIoCacheSettingForStorageControllerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getStorageControllerHotplugCapableContext(ctx context.Context, request *ISystemProperties_getStorageControllerHotplugCapable) (*ISystemProperties_getStorageControllerHotplugCapableResponse, error) {
	response := new(ISystemProperties_getStorageControllerHotplugCapableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getStorageControllerHotplugCapable(request *ISystemProperties_getStorageControllerHotplugCapable) (*ISystemProperties_getStorageControllerHotplugCapableResponse, error) {
	return service.ISystemProperties_getStorageControllerHotplugCapableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getMaxInstancesOfUSBControllerTypeContext(ctx context.Context, request *ISystemProperties_getMaxInstancesOfUSBControllerType) (*ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse, error) {
	response := new(ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getMaxInstancesOfUSBControllerType(request *ISystemProperties_getMaxInstancesOfUSBControllerType) (*ISystemProperties_getMaxInstancesOfUSBControllerTypeResponse, error) {
	return service.ISystemProperties_getMaxInstancesOfUSBControllerTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISystemProperties_getCPUProfilesContext(ctx context.Context, request *ISystemProperties_getCPUProfiles) (*ISystemProperties_getCPUProfilesResponse, error) {
	response := new(ISystemProperties_getCPUProfilesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISystemProperties_getCPUProfiles(request *ISystemProperties_getCPUProfiles) (*ISystemProperties_getCPUProfilesResponse, error) {
	return service.ISystemProperties_getCPUProfilesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDBase_getFormatsContext(ctx context.Context, request *IDnDBase_getFormats) (*IDnDBase_getFormatsResponse, error) {
	response := new(IDnDBase_getFormatsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDBase_getFormats(request *IDnDBase_getFormats) (*IDnDBase_getFormatsResponse, error) {
	return service.IDnDBase_getFormatsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDBase_isFormatSupportedContext(ctx context.Context, request *IDnDBase_isFormatSupported) (*IDnDBase_isFormatSupportedResponse, error) {
	response := new(IDnDBase_isFormatSupportedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDBase_isFormatSupported(request *IDnDBase_isFormatSupported) (*IDnDBase_isFormatSupportedResponse, error) {
	return service.IDnDBase_isFormatSupportedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDBase_addFormatsContext(ctx context.Context, request *IDnDBase_addFormats) (*IDnDBase_addFormatsResponse, error) {
	response := new(IDnDBase_addFormatsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDBase_addFormats(request *IDnDBase_addFormats) (*IDnDBase_addFormatsResponse, error) {
	return service.IDnDBase_addFormatsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDBase_removeFormatsContext(ctx context.Context, request *IDnDBase_removeFormats) (*IDnDBase_removeFormatsResponse, error) {
	response := new(IDnDBase_removeFormatsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDBase_removeFormats(request *IDnDBase_removeFormats) (*IDnDBase_removeFormatsResponse, error) {
	return service.IDnDBase_removeFormatsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDSource_dragIsPendingContext(ctx context.Context, request *IDnDSource_dragIsPending) (*IDnDSource_dragIsPendingResponse, error) {
	response := new(IDnDSource_dragIsPendingResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDSource_dragIsPending(request *IDnDSource_dragIsPending) (*IDnDSource_dragIsPendingResponse, error) {
	return service.IDnDSource_dragIsPendingContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDSource_dropContext(ctx context.Context, request *IDnDSource_drop) (*IDnDSource_dropResponse, error) {
	response := new(IDnDSource_dropResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDSource_drop(request *IDnDSource_drop) (*IDnDSource_dropResponse, error) {
	return service.IDnDSource_dropContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDSource_receiveDataContext(ctx context.Context, request *IDnDSource_receiveData) (*IDnDSource_receiveDataResponse, error) {
	response := new(IDnDSource_receiveDataResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDSource_receiveData(request *IDnDSource_receiveData) (*IDnDSource_receiveDataResponse, error) {
	return service.IDnDSource_receiveDataContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces) (*IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces(request *IGuestDnDSource_getMidlDoesNotLikeEmptyInterfaces) (*IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IGuestDnDSource_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDTarget_enterContext(ctx context.Context, request *IDnDTarget_enter) (*IDnDTarget_enterResponse, error) {
	response := new(IDnDTarget_enterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDTarget_enter(request *IDnDTarget_enter) (*IDnDTarget_enterResponse, error) {
	return service.IDnDTarget_enterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDTarget_moveContext(ctx context.Context, request *IDnDTarget_move) (*IDnDTarget_moveResponse, error) {
	response := new(IDnDTarget_moveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDTarget_move(request *IDnDTarget_move) (*IDnDTarget_moveResponse, error) {
	return service.IDnDTarget_moveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDTarget_leaveContext(ctx context.Context, request *IDnDTarget_leave) (*IDnDTarget_leaveResponse, error) {
	response := new(IDnDTarget_leaveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDTarget_leave(request *IDnDTarget_leave) (*IDnDTarget_leaveResponse, error) {
	return service.IDnDTarget_leaveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDTarget_dropContext(ctx context.Context, request *IDnDTarget_drop) (*IDnDTarget_dropResponse, error) {
	response := new(IDnDTarget_dropResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDTarget_drop(request *IDnDTarget_drop) (*IDnDTarget_dropResponse, error) {
	return service.IDnDTarget_dropContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDTarget_sendDataContext(ctx context.Context, request *IDnDTarget_sendData) (*IDnDTarget_sendDataResponse, error) {
	response := new(IDnDTarget_sendDataResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDTarget_sendData(request *IDnDTarget_sendData) (*IDnDTarget_sendDataResponse, error) {
	return service.IDnDTarget_sendDataContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDTarget_cancelContext(ctx context.Context, request *IDnDTarget_cancel) (*IDnDTarget_cancelResponse, error) {
	response := new(IDnDTarget_cancelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDTarget_cancel(request *IDnDTarget_cancel) (*IDnDTarget_cancelResponse, error) {
	return service.IDnDTarget_cancelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces) (*IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces(request *IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfaces) (*IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IGuestDnDTarget_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getUserContext(ctx context.Context, request *IGuestSession_getUser) (*IGuestSession_getUserResponse, error) {
	response := new(IGuestSession_getUserResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getUser(request *IGuestSession_getUser) (*IGuestSession_getUserResponse, error) {
	return service.IGuestSession_getUserContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getDomainContext(ctx context.Context, request *IGuestSession_getDomain) (*IGuestSession_getDomainResponse, error) {
	response := new(IGuestSession_getDomainResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getDomain(request *IGuestSession_getDomain) (*IGuestSession_getDomainResponse, error) {
	return service.IGuestSession_getDomainContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getNameContext(ctx context.Context, request *IGuestSession_getName) (*IGuestSession_getNameResponse, error) {
	response := new(IGuestSession_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getName(request *IGuestSession_getName) (*IGuestSession_getNameResponse, error) {
	return service.IGuestSession_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getIdContext(ctx context.Context, request *IGuestSession_getId) (*IGuestSession_getIdResponse, error) {
	response := new(IGuestSession_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getId(request *IGuestSession_getId) (*IGuestSession_getIdResponse, error) {
	return service.IGuestSession_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getTimeoutContext(ctx context.Context, request *IGuestSession_getTimeout) (*IGuestSession_getTimeoutResponse, error) {
	response := new(IGuestSession_getTimeoutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getTimeout(request *IGuestSession_getTimeout) (*IGuestSession_getTimeoutResponse, error) {
	return service.IGuestSession_getTimeoutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_setTimeoutContext(ctx context.Context, request *IGuestSession_setTimeout) (*IGuestSession_setTimeoutResponse, error) {
	response := new(IGuestSession_setTimeoutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_setTimeout(request *IGuestSession_setTimeout) (*IGuestSession_setTimeoutResponse, error) {
	return service.IGuestSession_setTimeoutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getProtocolVersionContext(ctx context.Context, request *IGuestSession_getProtocolVersion) (*IGuestSession_getProtocolVersionResponse, error) {
	response := new(IGuestSession_getProtocolVersionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getProtocolVersion(request *IGuestSession_getProtocolVersion) (*IGuestSession_getProtocolVersionResponse, error) {
	return service.IGuestSession_getProtocolVersionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getStatusContext(ctx context.Context, request *IGuestSession_getStatus) (*IGuestSession_getStatusResponse, error) {
	response := new(IGuestSession_getStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getStatus(request *IGuestSession_getStatus) (*IGuestSession_getStatusResponse, error) {
	return service.IGuestSession_getStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getEnvironmentChangesContext(ctx context.Context, request *IGuestSession_getEnvironmentChanges) (*IGuestSession_getEnvironmentChangesResponse, error) {
	response := new(IGuestSession_getEnvironmentChangesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getEnvironmentChanges(request *IGuestSession_getEnvironmentChanges) (*IGuestSession_getEnvironmentChangesResponse, error) {
	return service.IGuestSession_getEnvironmentChangesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_setEnvironmentChangesContext(ctx context.Context, request *IGuestSession_setEnvironmentChanges) (*IGuestSession_setEnvironmentChangesResponse, error) {
	response := new(IGuestSession_setEnvironmentChangesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_setEnvironmentChanges(request *IGuestSession_setEnvironmentChanges) (*IGuestSession_setEnvironmentChangesResponse, error) {
	return service.IGuestSession_setEnvironmentChangesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getEnvironmentBaseContext(ctx context.Context, request *IGuestSession_getEnvironmentBase) (*IGuestSession_getEnvironmentBaseResponse, error) {
	response := new(IGuestSession_getEnvironmentBaseResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getEnvironmentBase(request *IGuestSession_getEnvironmentBase) (*IGuestSession_getEnvironmentBaseResponse, error) {
	return service.IGuestSession_getEnvironmentBaseContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getProcessesContext(ctx context.Context, request *IGuestSession_getProcesses) (*IGuestSession_getProcessesResponse, error) {
	response := new(IGuestSession_getProcessesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getProcesses(request *IGuestSession_getProcesses) (*IGuestSession_getProcessesResponse, error) {
	return service.IGuestSession_getProcessesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getPathStyleContext(ctx context.Context, request *IGuestSession_getPathStyle) (*IGuestSession_getPathStyleResponse, error) {
	response := new(IGuestSession_getPathStyleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getPathStyle(request *IGuestSession_getPathStyle) (*IGuestSession_getPathStyleResponse, error) {
	return service.IGuestSession_getPathStyleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getCurrentDirectoryContext(ctx context.Context, request *IGuestSession_getCurrentDirectory) (*IGuestSession_getCurrentDirectoryResponse, error) {
	response := new(IGuestSession_getCurrentDirectoryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getCurrentDirectory(request *IGuestSession_getCurrentDirectory) (*IGuestSession_getCurrentDirectoryResponse, error) {
	return service.IGuestSession_getCurrentDirectoryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_setCurrentDirectoryContext(ctx context.Context, request *IGuestSession_setCurrentDirectory) (*IGuestSession_setCurrentDirectoryResponse, error) {
	response := new(IGuestSession_setCurrentDirectoryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_setCurrentDirectory(request *IGuestSession_setCurrentDirectory) (*IGuestSession_setCurrentDirectoryResponse, error) {
	return service.IGuestSession_setCurrentDirectoryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getUserHomeContext(ctx context.Context, request *IGuestSession_getUserHome) (*IGuestSession_getUserHomeResponse, error) {
	response := new(IGuestSession_getUserHomeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getUserHome(request *IGuestSession_getUserHome) (*IGuestSession_getUserHomeResponse, error) {
	return service.IGuestSession_getUserHomeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getUserDocumentsContext(ctx context.Context, request *IGuestSession_getUserDocuments) (*IGuestSession_getUserDocumentsResponse, error) {
	response := new(IGuestSession_getUserDocumentsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getUserDocuments(request *IGuestSession_getUserDocuments) (*IGuestSession_getUserDocumentsResponse, error) {
	return service.IGuestSession_getUserDocumentsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getDirectoriesContext(ctx context.Context, request *IGuestSession_getDirectories) (*IGuestSession_getDirectoriesResponse, error) {
	response := new(IGuestSession_getDirectoriesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getDirectories(request *IGuestSession_getDirectories) (*IGuestSession_getDirectoriesResponse, error) {
	return service.IGuestSession_getDirectoriesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getFilesContext(ctx context.Context, request *IGuestSession_getFiles) (*IGuestSession_getFilesResponse, error) {
	response := new(IGuestSession_getFilesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getFiles(request *IGuestSession_getFiles) (*IGuestSession_getFilesResponse, error) {
	return service.IGuestSession_getFilesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_getEventSourceContext(ctx context.Context, request *IGuestSession_getEventSource) (*IGuestSession_getEventSourceResponse, error) {
	response := new(IGuestSession_getEventSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_getEventSource(request *IGuestSession_getEventSource) (*IGuestSession_getEventSourceResponse, error) {
	return service.IGuestSession_getEventSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_closeContext(ctx context.Context, request *IGuestSession_close) (*IGuestSession_closeResponse, error) {
	response := new(IGuestSession_closeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_close(request *IGuestSession_close) (*IGuestSession_closeResponse, error) {
	return service.IGuestSession_closeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_copyFromGuestContext(ctx context.Context, request *IGuestSession_copyFromGuest) (*IGuestSession_copyFromGuestResponse, error) {
	response := new(IGuestSession_copyFromGuestResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_copyFromGuest(request *IGuestSession_copyFromGuest) (*IGuestSession_copyFromGuestResponse, error) {
	return service.IGuestSession_copyFromGuestContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_copyToGuestContext(ctx context.Context, request *IGuestSession_copyToGuest) (*IGuestSession_copyToGuestResponse, error) {
	response := new(IGuestSession_copyToGuestResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_copyToGuest(request *IGuestSession_copyToGuest) (*IGuestSession_copyToGuestResponse, error) {
	return service.IGuestSession_copyToGuestContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_directoryCopyContext(ctx context.Context, request *IGuestSession_directoryCopy) (*IGuestSession_directoryCopyResponse, error) {
	response := new(IGuestSession_directoryCopyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_directoryCopy(request *IGuestSession_directoryCopy) (*IGuestSession_directoryCopyResponse, error) {
	return service.IGuestSession_directoryCopyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_directoryCopyFromGuestContext(ctx context.Context, request *IGuestSession_directoryCopyFromGuest) (*IGuestSession_directoryCopyFromGuestResponse, error) {
	response := new(IGuestSession_directoryCopyFromGuestResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_directoryCopyFromGuest(request *IGuestSession_directoryCopyFromGuest) (*IGuestSession_directoryCopyFromGuestResponse, error) {
	return service.IGuestSession_directoryCopyFromGuestContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_directoryCopyToGuestContext(ctx context.Context, request *IGuestSession_directoryCopyToGuest) (*IGuestSession_directoryCopyToGuestResponse, error) {
	response := new(IGuestSession_directoryCopyToGuestResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_directoryCopyToGuest(request *IGuestSession_directoryCopyToGuest) (*IGuestSession_directoryCopyToGuestResponse, error) {
	return service.IGuestSession_directoryCopyToGuestContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_directoryCreateContext(ctx context.Context, request *IGuestSession_directoryCreate) (*IGuestSession_directoryCreateResponse, error) {
	response := new(IGuestSession_directoryCreateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_directoryCreate(request *IGuestSession_directoryCreate) (*IGuestSession_directoryCreateResponse, error) {
	return service.IGuestSession_directoryCreateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_directoryCreateTempContext(ctx context.Context, request *IGuestSession_directoryCreateTemp) (*IGuestSession_directoryCreateTempResponse, error) {
	response := new(IGuestSession_directoryCreateTempResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_directoryCreateTemp(request *IGuestSession_directoryCreateTemp) (*IGuestSession_directoryCreateTempResponse, error) {
	return service.IGuestSession_directoryCreateTempContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_directoryExistsContext(ctx context.Context, request *IGuestSession_directoryExists) (*IGuestSession_directoryExistsResponse, error) {
	response := new(IGuestSession_directoryExistsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_directoryExists(request *IGuestSession_directoryExists) (*IGuestSession_directoryExistsResponse, error) {
	return service.IGuestSession_directoryExistsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_directoryOpenContext(ctx context.Context, request *IGuestSession_directoryOpen) (*IGuestSession_directoryOpenResponse, error) {
	response := new(IGuestSession_directoryOpenResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_directoryOpen(request *IGuestSession_directoryOpen) (*IGuestSession_directoryOpenResponse, error) {
	return service.IGuestSession_directoryOpenContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_directoryRemoveContext(ctx context.Context, request *IGuestSession_directoryRemove) (*IGuestSession_directoryRemoveResponse, error) {
	response := new(IGuestSession_directoryRemoveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_directoryRemove(request *IGuestSession_directoryRemove) (*IGuestSession_directoryRemoveResponse, error) {
	return service.IGuestSession_directoryRemoveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_directoryRemoveRecursiveContext(ctx context.Context, request *IGuestSession_directoryRemoveRecursive) (*IGuestSession_directoryRemoveRecursiveResponse, error) {
	response := new(IGuestSession_directoryRemoveRecursiveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_directoryRemoveRecursive(request *IGuestSession_directoryRemoveRecursive) (*IGuestSession_directoryRemoveRecursiveResponse, error) {
	return service.IGuestSession_directoryRemoveRecursiveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_environmentScheduleSetContext(ctx context.Context, request *IGuestSession_environmentScheduleSet) (*IGuestSession_environmentScheduleSetResponse, error) {
	response := new(IGuestSession_environmentScheduleSetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_environmentScheduleSet(request *IGuestSession_environmentScheduleSet) (*IGuestSession_environmentScheduleSetResponse, error) {
	return service.IGuestSession_environmentScheduleSetContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_environmentScheduleUnsetContext(ctx context.Context, request *IGuestSession_environmentScheduleUnset) (*IGuestSession_environmentScheduleUnsetResponse, error) {
	response := new(IGuestSession_environmentScheduleUnsetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_environmentScheduleUnset(request *IGuestSession_environmentScheduleUnset) (*IGuestSession_environmentScheduleUnsetResponse, error) {
	return service.IGuestSession_environmentScheduleUnsetContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_environmentGetBaseVariableContext(ctx context.Context, request *IGuestSession_environmentGetBaseVariable) (*IGuestSession_environmentGetBaseVariableResponse, error) {
	response := new(IGuestSession_environmentGetBaseVariableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_environmentGetBaseVariable(request *IGuestSession_environmentGetBaseVariable) (*IGuestSession_environmentGetBaseVariableResponse, error) {
	return service.IGuestSession_environmentGetBaseVariableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_environmentDoesBaseVariableExistContext(ctx context.Context, request *IGuestSession_environmentDoesBaseVariableExist) (*IGuestSession_environmentDoesBaseVariableExistResponse, error) {
	response := new(IGuestSession_environmentDoesBaseVariableExistResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_environmentDoesBaseVariableExist(request *IGuestSession_environmentDoesBaseVariableExist) (*IGuestSession_environmentDoesBaseVariableExistResponse, error) {
	return service.IGuestSession_environmentDoesBaseVariableExistContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fileCopyContext(ctx context.Context, request *IGuestSession_fileCopy) (*IGuestSession_fileCopyResponse, error) {
	response := new(IGuestSession_fileCopyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fileCopy(request *IGuestSession_fileCopy) (*IGuestSession_fileCopyResponse, error) {
	return service.IGuestSession_fileCopyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fileCopyFromGuestContext(ctx context.Context, request *IGuestSession_fileCopyFromGuest) (*IGuestSession_fileCopyFromGuestResponse, error) {
	response := new(IGuestSession_fileCopyFromGuestResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fileCopyFromGuest(request *IGuestSession_fileCopyFromGuest) (*IGuestSession_fileCopyFromGuestResponse, error) {
	return service.IGuestSession_fileCopyFromGuestContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fileCopyToGuestContext(ctx context.Context, request *IGuestSession_fileCopyToGuest) (*IGuestSession_fileCopyToGuestResponse, error) {
	response := new(IGuestSession_fileCopyToGuestResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fileCopyToGuest(request *IGuestSession_fileCopyToGuest) (*IGuestSession_fileCopyToGuestResponse, error) {
	return service.IGuestSession_fileCopyToGuestContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fileCreateTempContext(ctx context.Context, request *IGuestSession_fileCreateTemp) (*IGuestSession_fileCreateTempResponse, error) {
	response := new(IGuestSession_fileCreateTempResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fileCreateTemp(request *IGuestSession_fileCreateTemp) (*IGuestSession_fileCreateTempResponse, error) {
	return service.IGuestSession_fileCreateTempContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fileExistsContext(ctx context.Context, request *IGuestSession_fileExists) (*IGuestSession_fileExistsResponse, error) {
	response := new(IGuestSession_fileExistsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fileExists(request *IGuestSession_fileExists) (*IGuestSession_fileExistsResponse, error) {
	return service.IGuestSession_fileExistsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fileOpenContext(ctx context.Context, request *IGuestSession_fileOpen) (*IGuestSession_fileOpenResponse, error) {
	response := new(IGuestSession_fileOpenResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fileOpen(request *IGuestSession_fileOpen) (*IGuestSession_fileOpenResponse, error) {
	return service.IGuestSession_fileOpenContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fileOpenExContext(ctx context.Context, request *IGuestSession_fileOpenEx) (*IGuestSession_fileOpenExResponse, error) {
	response := new(IGuestSession_fileOpenExResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fileOpenEx(request *IGuestSession_fileOpenEx) (*IGuestSession_fileOpenExResponse, error) {
	return service.IGuestSession_fileOpenExContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fileQuerySizeContext(ctx context.Context, request *IGuestSession_fileQuerySize) (*IGuestSession_fileQuerySizeResponse, error) {
	response := new(IGuestSession_fileQuerySizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fileQuerySize(request *IGuestSession_fileQuerySize) (*IGuestSession_fileQuerySizeResponse, error) {
	return service.IGuestSession_fileQuerySizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fsObjExistsContext(ctx context.Context, request *IGuestSession_fsObjExists) (*IGuestSession_fsObjExistsResponse, error) {
	response := new(IGuestSession_fsObjExistsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fsObjExists(request *IGuestSession_fsObjExists) (*IGuestSession_fsObjExistsResponse, error) {
	return service.IGuestSession_fsObjExistsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fsObjQueryInfoContext(ctx context.Context, request *IGuestSession_fsObjQueryInfo) (*IGuestSession_fsObjQueryInfoResponse, error) {
	response := new(IGuestSession_fsObjQueryInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fsObjQueryInfo(request *IGuestSession_fsObjQueryInfo) (*IGuestSession_fsObjQueryInfoResponse, error) {
	return service.IGuestSession_fsObjQueryInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fsObjRemoveContext(ctx context.Context, request *IGuestSession_fsObjRemove) (*IGuestSession_fsObjRemoveResponse, error) {
	response := new(IGuestSession_fsObjRemoveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fsObjRemove(request *IGuestSession_fsObjRemove) (*IGuestSession_fsObjRemoveResponse, error) {
	return service.IGuestSession_fsObjRemoveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fsObjRemoveArrayContext(ctx context.Context, request *IGuestSession_fsObjRemoveArray) (*IGuestSession_fsObjRemoveArrayResponse, error) {
	response := new(IGuestSession_fsObjRemoveArrayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fsObjRemoveArray(request *IGuestSession_fsObjRemoveArray) (*IGuestSession_fsObjRemoveArrayResponse, error) {
	return service.IGuestSession_fsObjRemoveArrayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fsObjRenameContext(ctx context.Context, request *IGuestSession_fsObjRename) (*IGuestSession_fsObjRenameResponse, error) {
	response := new(IGuestSession_fsObjRenameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fsObjRename(request *IGuestSession_fsObjRename) (*IGuestSession_fsObjRenameResponse, error) {
	return service.IGuestSession_fsObjRenameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fsObjMoveContext(ctx context.Context, request *IGuestSession_fsObjMove) (*IGuestSession_fsObjMoveResponse, error) {
	response := new(IGuestSession_fsObjMoveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fsObjMove(request *IGuestSession_fsObjMove) (*IGuestSession_fsObjMoveResponse, error) {
	return service.IGuestSession_fsObjMoveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fsObjMoveArrayContext(ctx context.Context, request *IGuestSession_fsObjMoveArray) (*IGuestSession_fsObjMoveArrayResponse, error) {
	response := new(IGuestSession_fsObjMoveArrayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fsObjMoveArray(request *IGuestSession_fsObjMoveArray) (*IGuestSession_fsObjMoveArrayResponse, error) {
	return service.IGuestSession_fsObjMoveArrayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fsObjCopyArrayContext(ctx context.Context, request *IGuestSession_fsObjCopyArray) (*IGuestSession_fsObjCopyArrayResponse, error) {
	response := new(IGuestSession_fsObjCopyArrayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fsObjCopyArray(request *IGuestSession_fsObjCopyArray) (*IGuestSession_fsObjCopyArrayResponse, error) {
	return service.IGuestSession_fsObjCopyArrayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fsObjSetACLContext(ctx context.Context, request *IGuestSession_fsObjSetACL) (*IGuestSession_fsObjSetACLResponse, error) {
	response := new(IGuestSession_fsObjSetACLResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fsObjSetACL(request *IGuestSession_fsObjSetACL) (*IGuestSession_fsObjSetACLResponse, error) {
	return service.IGuestSession_fsObjSetACLContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fsQueryFreeSpaceContext(ctx context.Context, request *IGuestSession_fsQueryFreeSpace) (*IGuestSession_fsQueryFreeSpaceResponse, error) {
	response := new(IGuestSession_fsQueryFreeSpaceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fsQueryFreeSpace(request *IGuestSession_fsQueryFreeSpace) (*IGuestSession_fsQueryFreeSpaceResponse, error) {
	return service.IGuestSession_fsQueryFreeSpaceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_fsQueryInfoContext(ctx context.Context, request *IGuestSession_fsQueryInfo) (*IGuestSession_fsQueryInfoResponse, error) {
	response := new(IGuestSession_fsQueryInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_fsQueryInfo(request *IGuestSession_fsQueryInfo) (*IGuestSession_fsQueryInfoResponse, error) {
	return service.IGuestSession_fsQueryInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_processCreateContext(ctx context.Context, request *IGuestSession_processCreate) (*IGuestSession_processCreateResponse, error) {
	response := new(IGuestSession_processCreateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_processCreate(request *IGuestSession_processCreate) (*IGuestSession_processCreateResponse, error) {
	return service.IGuestSession_processCreateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_processCreateExContext(ctx context.Context, request *IGuestSession_processCreateEx) (*IGuestSession_processCreateExResponse, error) {
	response := new(IGuestSession_processCreateExResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_processCreateEx(request *IGuestSession_processCreateEx) (*IGuestSession_processCreateExResponse, error) {
	return service.IGuestSession_processCreateExContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_processGetContext(ctx context.Context, request *IGuestSession_processGet) (*IGuestSession_processGetResponse, error) {
	response := new(IGuestSession_processGetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_processGet(request *IGuestSession_processGet) (*IGuestSession_processGetResponse, error) {
	return service.IGuestSession_processGetContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_symlinkCreateContext(ctx context.Context, request *IGuestSession_symlinkCreate) (*IGuestSession_symlinkCreateResponse, error) {
	response := new(IGuestSession_symlinkCreateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_symlinkCreate(request *IGuestSession_symlinkCreate) (*IGuestSession_symlinkCreateResponse, error) {
	return service.IGuestSession_symlinkCreateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_symlinkExistsContext(ctx context.Context, request *IGuestSession_symlinkExists) (*IGuestSession_symlinkExistsResponse, error) {
	response := new(IGuestSession_symlinkExistsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_symlinkExists(request *IGuestSession_symlinkExists) (*IGuestSession_symlinkExistsResponse, error) {
	return service.IGuestSession_symlinkExistsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_symlinkReadContext(ctx context.Context, request *IGuestSession_symlinkRead) (*IGuestSession_symlinkReadResponse, error) {
	response := new(IGuestSession_symlinkReadResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_symlinkRead(request *IGuestSession_symlinkRead) (*IGuestSession_symlinkReadResponse, error) {
	return service.IGuestSession_symlinkReadContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_waitForContext(ctx context.Context, request *IGuestSession_waitFor) (*IGuestSession_waitForResponse, error) {
	response := new(IGuestSession_waitForResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_waitFor(request *IGuestSession_waitFor) (*IGuestSession_waitForResponse, error) {
	return service.IGuestSession_waitForContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSession_waitForArrayContext(ctx context.Context, request *IGuestSession_waitForArray) (*IGuestSession_waitForArrayResponse, error) {
	response := new(IGuestSession_waitForArrayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSession_waitForArray(request *IGuestSession_waitForArray) (*IGuestSession_waitForArrayResponse, error) {
	return service.IGuestSession_waitForArrayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_getArgumentsContext(ctx context.Context, request *IProcess_getArguments) (*IProcess_getArgumentsResponse, error) {
	response := new(IProcess_getArgumentsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_getArguments(request *IProcess_getArguments) (*IProcess_getArgumentsResponse, error) {
	return service.IProcess_getArgumentsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_getEnvironmentContext(ctx context.Context, request *IProcess_getEnvironment) (*IProcess_getEnvironmentResponse, error) {
	response := new(IProcess_getEnvironmentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_getEnvironment(request *IProcess_getEnvironment) (*IProcess_getEnvironmentResponse, error) {
	return service.IProcess_getEnvironmentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_getEventSourceContext(ctx context.Context, request *IProcess_getEventSource) (*IProcess_getEventSourceResponse, error) {
	response := new(IProcess_getEventSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_getEventSource(request *IProcess_getEventSource) (*IProcess_getEventSourceResponse, error) {
	return service.IProcess_getEventSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_getExecutablePathContext(ctx context.Context, request *IProcess_getExecutablePath) (*IProcess_getExecutablePathResponse, error) {
	response := new(IProcess_getExecutablePathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_getExecutablePath(request *IProcess_getExecutablePath) (*IProcess_getExecutablePathResponse, error) {
	return service.IProcess_getExecutablePathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_getExitCodeContext(ctx context.Context, request *IProcess_getExitCode) (*IProcess_getExitCodeResponse, error) {
	response := new(IProcess_getExitCodeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_getExitCode(request *IProcess_getExitCode) (*IProcess_getExitCodeResponse, error) {
	return service.IProcess_getExitCodeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_getNameContext(ctx context.Context, request *IProcess_getName) (*IProcess_getNameResponse, error) {
	response := new(IProcess_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_getName(request *IProcess_getName) (*IProcess_getNameResponse, error) {
	return service.IProcess_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_getPIDContext(ctx context.Context, request *IProcess_getPID) (*IProcess_getPIDResponse, error) {
	response := new(IProcess_getPIDResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_getPID(request *IProcess_getPID) (*IProcess_getPIDResponse, error) {
	return service.IProcess_getPIDContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_getStatusContext(ctx context.Context, request *IProcess_getStatus) (*IProcess_getStatusResponse, error) {
	response := new(IProcess_getStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_getStatus(request *IProcess_getStatus) (*IProcess_getStatusResponse, error) {
	return service.IProcess_getStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_waitForContext(ctx context.Context, request *IProcess_waitFor) (*IProcess_waitForResponse, error) {
	response := new(IProcess_waitForResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_waitFor(request *IProcess_waitFor) (*IProcess_waitForResponse, error) {
	return service.IProcess_waitForContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_waitForArrayContext(ctx context.Context, request *IProcess_waitForArray) (*IProcess_waitForArrayResponse, error) {
	response := new(IProcess_waitForArrayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_waitForArray(request *IProcess_waitForArray) (*IProcess_waitForArrayResponse, error) {
	return service.IProcess_waitForArrayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_readContext(ctx context.Context, request *IProcess_read) (*IProcess_readResponse, error) {
	response := new(IProcess_readResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_read(request *IProcess_read) (*IProcess_readResponse, error) {
	return service.IProcess_readContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_writeContext(ctx context.Context, request *IProcess_write) (*IProcess_writeResponse, error) {
	response := new(IProcess_writeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_write(request *IProcess_write) (*IProcess_writeResponse, error) {
	return service.IProcess_writeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_writeArrayContext(ctx context.Context, request *IProcess_writeArray) (*IProcess_writeArrayResponse, error) {
	response := new(IProcess_writeArrayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_writeArray(request *IProcess_writeArray) (*IProcess_writeArrayResponse, error) {
	return service.IProcess_writeArrayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProcess_terminateContext(ctx context.Context, request *IProcess_terminate) (*IProcess_terminateResponse, error) {
	response := new(IProcess_terminateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProcess_terminate(request *IProcess_terminate) (*IProcess_terminateResponse, error) {
	return service.IProcess_terminateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestProcess_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestProcess_getMidlDoesNotLikeEmptyInterfaces) (*IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestProcess_getMidlDoesNotLikeEmptyInterfaces(request *IGuestProcess_getMidlDoesNotLikeEmptyInterfaces) (*IGuestProcess_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IGuestProcess_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDirectory_getDirectoryNameContext(ctx context.Context, request *IDirectory_getDirectoryName) (*IDirectory_getDirectoryNameResponse, error) {
	response := new(IDirectory_getDirectoryNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDirectory_getDirectoryName(request *IDirectory_getDirectoryName) (*IDirectory_getDirectoryNameResponse, error) {
	return service.IDirectory_getDirectoryNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDirectory_getFilterContext(ctx context.Context, request *IDirectory_getFilter) (*IDirectory_getFilterResponse, error) {
	response := new(IDirectory_getFilterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDirectory_getFilter(request *IDirectory_getFilter) (*IDirectory_getFilterResponse, error) {
	return service.IDirectory_getFilterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDirectory_closeContext(ctx context.Context, request *IDirectory_close) (*IDirectory_closeResponse, error) {
	response := new(IDirectory_closeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDirectory_close(request *IDirectory_close) (*IDirectory_closeResponse, error) {
	return service.IDirectory_closeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDirectory_readContext(ctx context.Context, request *IDirectory_read) (*IDirectory_readResponse, error) {
	response := new(IDirectory_readResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDirectory_read(request *IDirectory_read) (*IDirectory_readResponse, error) {
	return service.IDirectory_readContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces) (*IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces(request *IGuestDirectory_getMidlDoesNotLikeEmptyInterfaces) (*IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IGuestDirectory_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_getEventSourceContext(ctx context.Context, request *IFile_getEventSource) (*IFile_getEventSourceResponse, error) {
	response := new(IFile_getEventSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_getEventSource(request *IFile_getEventSource) (*IFile_getEventSourceResponse, error) {
	return service.IFile_getEventSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_getIdContext(ctx context.Context, request *IFile_getId) (*IFile_getIdResponse, error) {
	response := new(IFile_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_getId(request *IFile_getId) (*IFile_getIdResponse, error) {
	return service.IFile_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_getInitialSizeContext(ctx context.Context, request *IFile_getInitialSize) (*IFile_getInitialSizeResponse, error) {
	response := new(IFile_getInitialSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_getInitialSize(request *IFile_getInitialSize) (*IFile_getInitialSizeResponse, error) {
	return service.IFile_getInitialSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_getOffsetContext(ctx context.Context, request *IFile_getOffset) (*IFile_getOffsetResponse, error) {
	response := new(IFile_getOffsetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_getOffset(request *IFile_getOffset) (*IFile_getOffsetResponse, error) {
	return service.IFile_getOffsetContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_getStatusContext(ctx context.Context, request *IFile_getStatus) (*IFile_getStatusResponse, error) {
	response := new(IFile_getStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_getStatus(request *IFile_getStatus) (*IFile_getStatusResponse, error) {
	return service.IFile_getStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_getFilenameContext(ctx context.Context, request *IFile_getFilename) (*IFile_getFilenameResponse, error) {
	response := new(IFile_getFilenameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_getFilename(request *IFile_getFilename) (*IFile_getFilenameResponse, error) {
	return service.IFile_getFilenameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_getCreationModeContext(ctx context.Context, request *IFile_getCreationMode) (*IFile_getCreationModeResponse, error) {
	response := new(IFile_getCreationModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_getCreationMode(request *IFile_getCreationMode) (*IFile_getCreationModeResponse, error) {
	return service.IFile_getCreationModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_getOpenActionContext(ctx context.Context, request *IFile_getOpenAction) (*IFile_getOpenActionResponse, error) {
	response := new(IFile_getOpenActionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_getOpenAction(request *IFile_getOpenAction) (*IFile_getOpenActionResponse, error) {
	return service.IFile_getOpenActionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_getAccessModeContext(ctx context.Context, request *IFile_getAccessMode) (*IFile_getAccessModeResponse, error) {
	response := new(IFile_getAccessModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_getAccessMode(request *IFile_getAccessMode) (*IFile_getAccessModeResponse, error) {
	return service.IFile_getAccessModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_closeContext(ctx context.Context, request *IFile_close) (*IFile_closeResponse, error) {
	response := new(IFile_closeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_close(request *IFile_close) (*IFile_closeResponse, error) {
	return service.IFile_closeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_queryInfoContext(ctx context.Context, request *IFile_queryInfo) (*IFile_queryInfoResponse, error) {
	response := new(IFile_queryInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_queryInfo(request *IFile_queryInfo) (*IFile_queryInfoResponse, error) {
	return service.IFile_queryInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_querySizeContext(ctx context.Context, request *IFile_querySize) (*IFile_querySizeResponse, error) {
	response := new(IFile_querySizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_querySize(request *IFile_querySize) (*IFile_querySizeResponse, error) {
	return service.IFile_querySizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_readContext(ctx context.Context, request *IFile_read) (*IFile_readResponse, error) {
	response := new(IFile_readResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_read(request *IFile_read) (*IFile_readResponse, error) {
	return service.IFile_readContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_readAtContext(ctx context.Context, request *IFile_readAt) (*IFile_readAtResponse, error) {
	response := new(IFile_readAtResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_readAt(request *IFile_readAt) (*IFile_readAtResponse, error) {
	return service.IFile_readAtContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_seekContext(ctx context.Context, request *IFile_seek) (*IFile_seekResponse, error) {
	response := new(IFile_seekResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_seek(request *IFile_seek) (*IFile_seekResponse, error) {
	return service.IFile_seekContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_setACLContext(ctx context.Context, request *IFile_setACL) (*IFile_setACLResponse, error) {
	response := new(IFile_setACLResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_setACL(request *IFile_setACL) (*IFile_setACLResponse, error) {
	return service.IFile_setACLContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_setSizeContext(ctx context.Context, request *IFile_setSize) (*IFile_setSizeResponse, error) {
	response := new(IFile_setSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_setSize(request *IFile_setSize) (*IFile_setSizeResponse, error) {
	return service.IFile_setSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_writeContext(ctx context.Context, request *IFile_write) (*IFile_writeResponse, error) {
	response := new(IFile_writeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_write(request *IFile_write) (*IFile_writeResponse, error) {
	return service.IFile_writeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFile_writeAtContext(ctx context.Context, request *IFile_writeAt) (*IFile_writeAtResponse, error) {
	response := new(IFile_writeAtResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFile_writeAt(request *IFile_writeAt) (*IFile_writeAtResponse, error) {
	return service.IFile_writeAtContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFile_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestFile_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFile_getMidlDoesNotLikeEmptyInterfaces(request *IGuestFile_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFile_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IGuestFile_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getFreeSizeContext(ctx context.Context, request *IFsInfo_getFreeSize) (*IFsInfo_getFreeSizeResponse, error) {
	response := new(IFsInfo_getFreeSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getFreeSize(request *IFsInfo_getFreeSize) (*IFsInfo_getFreeSizeResponse, error) {
	return service.IFsInfo_getFreeSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getTotalSizeContext(ctx context.Context, request *IFsInfo_getTotalSize) (*IFsInfo_getTotalSizeResponse, error) {
	response := new(IFsInfo_getTotalSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getTotalSize(request *IFsInfo_getTotalSize) (*IFsInfo_getTotalSizeResponse, error) {
	return service.IFsInfo_getTotalSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getBlockSizeContext(ctx context.Context, request *IFsInfo_getBlockSize) (*IFsInfo_getBlockSizeResponse, error) {
	response := new(IFsInfo_getBlockSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getBlockSize(request *IFsInfo_getBlockSize) (*IFsInfo_getBlockSizeResponse, error) {
	return service.IFsInfo_getBlockSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getSectorSizeContext(ctx context.Context, request *IFsInfo_getSectorSize) (*IFsInfo_getSectorSizeResponse, error) {
	response := new(IFsInfo_getSectorSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getSectorSize(request *IFsInfo_getSectorSize) (*IFsInfo_getSectorSizeResponse, error) {
	return service.IFsInfo_getSectorSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getSerialNumberContext(ctx context.Context, request *IFsInfo_getSerialNumber) (*IFsInfo_getSerialNumberResponse, error) {
	response := new(IFsInfo_getSerialNumberResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getSerialNumber(request *IFsInfo_getSerialNumber) (*IFsInfo_getSerialNumberResponse, error) {
	return service.IFsInfo_getSerialNumberContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getIsRemoteContext(ctx context.Context, request *IFsInfo_getIsRemote) (*IFsInfo_getIsRemoteResponse, error) {
	response := new(IFsInfo_getIsRemoteResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getIsRemote(request *IFsInfo_getIsRemote) (*IFsInfo_getIsRemoteResponse, error) {
	return service.IFsInfo_getIsRemoteContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getIsCaseSensitiveContext(ctx context.Context, request *IFsInfo_getIsCaseSensitive) (*IFsInfo_getIsCaseSensitiveResponse, error) {
	response := new(IFsInfo_getIsCaseSensitiveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getIsCaseSensitive(request *IFsInfo_getIsCaseSensitive) (*IFsInfo_getIsCaseSensitiveResponse, error) {
	return service.IFsInfo_getIsCaseSensitiveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getIsReadOnlyContext(ctx context.Context, request *IFsInfo_getIsReadOnly) (*IFsInfo_getIsReadOnlyResponse, error) {
	response := new(IFsInfo_getIsReadOnlyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getIsReadOnly(request *IFsInfo_getIsReadOnly) (*IFsInfo_getIsReadOnlyResponse, error) {
	return service.IFsInfo_getIsReadOnlyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getIsCompressedContext(ctx context.Context, request *IFsInfo_getIsCompressed) (*IFsInfo_getIsCompressedResponse, error) {
	response := new(IFsInfo_getIsCompressedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getIsCompressed(request *IFsInfo_getIsCompressed) (*IFsInfo_getIsCompressedResponse, error) {
	return service.IFsInfo_getIsCompressedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getSupportsFileCompressionContext(ctx context.Context, request *IFsInfo_getSupportsFileCompression) (*IFsInfo_getSupportsFileCompressionResponse, error) {
	response := new(IFsInfo_getSupportsFileCompressionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getSupportsFileCompression(request *IFsInfo_getSupportsFileCompression) (*IFsInfo_getSupportsFileCompressionResponse, error) {
	return service.IFsInfo_getSupportsFileCompressionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getMaxComponentContext(ctx context.Context, request *IFsInfo_getMaxComponent) (*IFsInfo_getMaxComponentResponse, error) {
	response := new(IFsInfo_getMaxComponentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getMaxComponent(request *IFsInfo_getMaxComponent) (*IFsInfo_getMaxComponentResponse, error) {
	return service.IFsInfo_getMaxComponentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getTypeContext(ctx context.Context, request *IFsInfo_getType) (*IFsInfo_getTypeResponse, error) {
	response := new(IFsInfo_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getType(request *IFsInfo_getType) (*IFsInfo_getTypeResponse, error) {
	return service.IFsInfo_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getLabelContext(ctx context.Context, request *IFsInfo_getLabel) (*IFsInfo_getLabelResponse, error) {
	response := new(IFsInfo_getLabelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getLabel(request *IFsInfo_getLabel) (*IFsInfo_getLabelResponse, error) {
	return service.IFsInfo_getLabelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsInfo_getMountPointContext(ctx context.Context, request *IFsInfo_getMountPoint) (*IFsInfo_getMountPointResponse, error) {
	response := new(IFsInfo_getMountPointResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsInfo_getMountPoint(request *IFsInfo_getMountPoint) (*IFsInfo_getMountPointResponse, error) {
	return service.IFsInfo_getMountPointContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getNameContext(ctx context.Context, request *IFsObjInfo_getName) (*IFsObjInfo_getNameResponse, error) {
	response := new(IFsObjInfo_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getName(request *IFsObjInfo_getName) (*IFsObjInfo_getNameResponse, error) {
	return service.IFsObjInfo_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getTypeContext(ctx context.Context, request *IFsObjInfo_getType) (*IFsObjInfo_getTypeResponse, error) {
	response := new(IFsObjInfo_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getType(request *IFsObjInfo_getType) (*IFsObjInfo_getTypeResponse, error) {
	return service.IFsObjInfo_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getFileAttributesContext(ctx context.Context, request *IFsObjInfo_getFileAttributes) (*IFsObjInfo_getFileAttributesResponse, error) {
	response := new(IFsObjInfo_getFileAttributesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getFileAttributes(request *IFsObjInfo_getFileAttributes) (*IFsObjInfo_getFileAttributesResponse, error) {
	return service.IFsObjInfo_getFileAttributesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getObjectSizeContext(ctx context.Context, request *IFsObjInfo_getObjectSize) (*IFsObjInfo_getObjectSizeResponse, error) {
	response := new(IFsObjInfo_getObjectSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getObjectSize(request *IFsObjInfo_getObjectSize) (*IFsObjInfo_getObjectSizeResponse, error) {
	return service.IFsObjInfo_getObjectSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getAllocatedSizeContext(ctx context.Context, request *IFsObjInfo_getAllocatedSize) (*IFsObjInfo_getAllocatedSizeResponse, error) {
	response := new(IFsObjInfo_getAllocatedSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getAllocatedSize(request *IFsObjInfo_getAllocatedSize) (*IFsObjInfo_getAllocatedSizeResponse, error) {
	return service.IFsObjInfo_getAllocatedSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getAccessTimeContext(ctx context.Context, request *IFsObjInfo_getAccessTime) (*IFsObjInfo_getAccessTimeResponse, error) {
	response := new(IFsObjInfo_getAccessTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getAccessTime(request *IFsObjInfo_getAccessTime) (*IFsObjInfo_getAccessTimeResponse, error) {
	return service.IFsObjInfo_getAccessTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getBirthTimeContext(ctx context.Context, request *IFsObjInfo_getBirthTime) (*IFsObjInfo_getBirthTimeResponse, error) {
	response := new(IFsObjInfo_getBirthTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getBirthTime(request *IFsObjInfo_getBirthTime) (*IFsObjInfo_getBirthTimeResponse, error) {
	return service.IFsObjInfo_getBirthTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getChangeTimeContext(ctx context.Context, request *IFsObjInfo_getChangeTime) (*IFsObjInfo_getChangeTimeResponse, error) {
	response := new(IFsObjInfo_getChangeTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getChangeTime(request *IFsObjInfo_getChangeTime) (*IFsObjInfo_getChangeTimeResponse, error) {
	return service.IFsObjInfo_getChangeTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getModificationTimeContext(ctx context.Context, request *IFsObjInfo_getModificationTime) (*IFsObjInfo_getModificationTimeResponse, error) {
	response := new(IFsObjInfo_getModificationTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getModificationTime(request *IFsObjInfo_getModificationTime) (*IFsObjInfo_getModificationTimeResponse, error) {
	return service.IFsObjInfo_getModificationTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getUIDContext(ctx context.Context, request *IFsObjInfo_getUID) (*IFsObjInfo_getUIDResponse, error) {
	response := new(IFsObjInfo_getUIDResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getUID(request *IFsObjInfo_getUID) (*IFsObjInfo_getUIDResponse, error) {
	return service.IFsObjInfo_getUIDContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getUserNameContext(ctx context.Context, request *IFsObjInfo_getUserName) (*IFsObjInfo_getUserNameResponse, error) {
	response := new(IFsObjInfo_getUserNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getUserName(request *IFsObjInfo_getUserName) (*IFsObjInfo_getUserNameResponse, error) {
	return service.IFsObjInfo_getUserNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getGIDContext(ctx context.Context, request *IFsObjInfo_getGID) (*IFsObjInfo_getGIDResponse, error) {
	response := new(IFsObjInfo_getGIDResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getGID(request *IFsObjInfo_getGID) (*IFsObjInfo_getGIDResponse, error) {
	return service.IFsObjInfo_getGIDContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getGroupNameContext(ctx context.Context, request *IFsObjInfo_getGroupName) (*IFsObjInfo_getGroupNameResponse, error) {
	response := new(IFsObjInfo_getGroupNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getGroupName(request *IFsObjInfo_getGroupName) (*IFsObjInfo_getGroupNameResponse, error) {
	return service.IFsObjInfo_getGroupNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getNodeIdContext(ctx context.Context, request *IFsObjInfo_getNodeId) (*IFsObjInfo_getNodeIdResponse, error) {
	response := new(IFsObjInfo_getNodeIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getNodeId(request *IFsObjInfo_getNodeId) (*IFsObjInfo_getNodeIdResponse, error) {
	return service.IFsObjInfo_getNodeIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getNodeIdDeviceContext(ctx context.Context, request *IFsObjInfo_getNodeIdDevice) (*IFsObjInfo_getNodeIdDeviceResponse, error) {
	response := new(IFsObjInfo_getNodeIdDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getNodeIdDevice(request *IFsObjInfo_getNodeIdDevice) (*IFsObjInfo_getNodeIdDeviceResponse, error) {
	return service.IFsObjInfo_getNodeIdDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getHardLinksContext(ctx context.Context, request *IFsObjInfo_getHardLinks) (*IFsObjInfo_getHardLinksResponse, error) {
	response := new(IFsObjInfo_getHardLinksResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getHardLinks(request *IFsObjInfo_getHardLinks) (*IFsObjInfo_getHardLinksResponse, error) {
	return service.IFsObjInfo_getHardLinksContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getDeviceNumberContext(ctx context.Context, request *IFsObjInfo_getDeviceNumber) (*IFsObjInfo_getDeviceNumberResponse, error) {
	response := new(IFsObjInfo_getDeviceNumberResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getDeviceNumber(request *IFsObjInfo_getDeviceNumber) (*IFsObjInfo_getDeviceNumberResponse, error) {
	return service.IFsObjInfo_getDeviceNumberContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getGenerationIdContext(ctx context.Context, request *IFsObjInfo_getGenerationId) (*IFsObjInfo_getGenerationIdResponse, error) {
	response := new(IFsObjInfo_getGenerationIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getGenerationId(request *IFsObjInfo_getGenerationId) (*IFsObjInfo_getGenerationIdResponse, error) {
	return service.IFsObjInfo_getGenerationIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFsObjInfo_getUserFlagsContext(ctx context.Context, request *IFsObjInfo_getUserFlags) (*IFsObjInfo_getUserFlagsResponse, error) {
	response := new(IFsObjInfo_getUserFlagsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFsObjInfo_getUserFlags(request *IFsObjInfo_getUserFlags) (*IFsObjInfo_getUserFlagsResponse, error) {
	return service.IFsObjInfo_getUserFlagsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFsInfo_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestFsInfo_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFsInfo_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IGuestFsInfo_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFsInfo_getMidlDoesNotLikeEmptyInterfaces(request *IGuestFsInfo_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFsInfo_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IGuestFsInfo_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces(request *IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IGuestFsObjInfo_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getOSTypeIdContext(ctx context.Context, request *IGuest_getOSTypeId) (*IGuest_getOSTypeIdResponse, error) {
	response := new(IGuest_getOSTypeIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getOSTypeId(request *IGuest_getOSTypeId) (*IGuest_getOSTypeIdResponse, error) {
	return service.IGuest_getOSTypeIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getAdditionsRunLevelContext(ctx context.Context, request *IGuest_getAdditionsRunLevel) (*IGuest_getAdditionsRunLevelResponse, error) {
	response := new(IGuest_getAdditionsRunLevelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getAdditionsRunLevel(request *IGuest_getAdditionsRunLevel) (*IGuest_getAdditionsRunLevelResponse, error) {
	return service.IGuest_getAdditionsRunLevelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getAdditionsVersionContext(ctx context.Context, request *IGuest_getAdditionsVersion) (*IGuest_getAdditionsVersionResponse, error) {
	response := new(IGuest_getAdditionsVersionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getAdditionsVersion(request *IGuest_getAdditionsVersion) (*IGuest_getAdditionsVersionResponse, error) {
	return service.IGuest_getAdditionsVersionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getAdditionsRevisionContext(ctx context.Context, request *IGuest_getAdditionsRevision) (*IGuest_getAdditionsRevisionResponse, error) {
	response := new(IGuest_getAdditionsRevisionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getAdditionsRevision(request *IGuest_getAdditionsRevision) (*IGuest_getAdditionsRevisionResponse, error) {
	return service.IGuest_getAdditionsRevisionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getDnDSourceContext(ctx context.Context, request *IGuest_getDnDSource) (*IGuest_getDnDSourceResponse, error) {
	response := new(IGuest_getDnDSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getDnDSource(request *IGuest_getDnDSource) (*IGuest_getDnDSourceResponse, error) {
	return service.IGuest_getDnDSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getDnDTargetContext(ctx context.Context, request *IGuest_getDnDTarget) (*IGuest_getDnDTargetResponse, error) {
	response := new(IGuest_getDnDTargetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getDnDTarget(request *IGuest_getDnDTarget) (*IGuest_getDnDTargetResponse, error) {
	return service.IGuest_getDnDTargetContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getEventSourceContext(ctx context.Context, request *IGuest_getEventSource) (*IGuest_getEventSourceResponse, error) {
	response := new(IGuest_getEventSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getEventSource(request *IGuest_getEventSource) (*IGuest_getEventSourceResponse, error) {
	return service.IGuest_getEventSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getFacilitiesContext(ctx context.Context, request *IGuest_getFacilities) (*IGuest_getFacilitiesResponse, error) {
	response := new(IGuest_getFacilitiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getFacilities(request *IGuest_getFacilities) (*IGuest_getFacilitiesResponse, error) {
	return service.IGuest_getFacilitiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getSessionsContext(ctx context.Context, request *IGuest_getSessions) (*IGuest_getSessionsResponse, error) {
	response := new(IGuest_getSessionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getSessions(request *IGuest_getSessions) (*IGuest_getSessionsResponse, error) {
	return service.IGuest_getSessionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getMemoryBalloonSizeContext(ctx context.Context, request *IGuest_getMemoryBalloonSize) (*IGuest_getMemoryBalloonSizeResponse, error) {
	response := new(IGuest_getMemoryBalloonSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getMemoryBalloonSize(request *IGuest_getMemoryBalloonSize) (*IGuest_getMemoryBalloonSizeResponse, error) {
	return service.IGuest_getMemoryBalloonSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_setMemoryBalloonSizeContext(ctx context.Context, request *IGuest_setMemoryBalloonSize) (*IGuest_setMemoryBalloonSizeResponse, error) {
	response := new(IGuest_setMemoryBalloonSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_setMemoryBalloonSize(request *IGuest_setMemoryBalloonSize) (*IGuest_setMemoryBalloonSizeResponse, error) {
	return service.IGuest_setMemoryBalloonSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getStatisticsUpdateIntervalContext(ctx context.Context, request *IGuest_getStatisticsUpdateInterval) (*IGuest_getStatisticsUpdateIntervalResponse, error) {
	response := new(IGuest_getStatisticsUpdateIntervalResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getStatisticsUpdateInterval(request *IGuest_getStatisticsUpdateInterval) (*IGuest_getStatisticsUpdateIntervalResponse, error) {
	return service.IGuest_getStatisticsUpdateIntervalContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_setStatisticsUpdateIntervalContext(ctx context.Context, request *IGuest_setStatisticsUpdateInterval) (*IGuest_setStatisticsUpdateIntervalResponse, error) {
	response := new(IGuest_setStatisticsUpdateIntervalResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_setStatisticsUpdateInterval(request *IGuest_setStatisticsUpdateInterval) (*IGuest_setStatisticsUpdateIntervalResponse, error) {
	return service.IGuest_setStatisticsUpdateIntervalContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_internalGetStatisticsContext(ctx context.Context, request *IGuest_internalGetStatistics) (*IGuest_internalGetStatisticsResponse, error) {
	response := new(IGuest_internalGetStatisticsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_internalGetStatistics(request *IGuest_internalGetStatistics) (*IGuest_internalGetStatisticsResponse, error) {
	return service.IGuest_internalGetStatisticsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getFacilityStatusContext(ctx context.Context, request *IGuest_getFacilityStatus) (*IGuest_getFacilityStatusResponse, error) {
	response := new(IGuest_getFacilityStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getFacilityStatus(request *IGuest_getFacilityStatus) (*IGuest_getFacilityStatusResponse, error) {
	return service.IGuest_getFacilityStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_getAdditionsStatusContext(ctx context.Context, request *IGuest_getAdditionsStatus) (*IGuest_getAdditionsStatusResponse, error) {
	response := new(IGuest_getAdditionsStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_getAdditionsStatus(request *IGuest_getAdditionsStatus) (*IGuest_getAdditionsStatusResponse, error) {
	return service.IGuest_getAdditionsStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_setCredentialsContext(ctx context.Context, request *IGuest_setCredentials) (*IGuest_setCredentialsResponse, error) {
	response := new(IGuest_setCredentialsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_setCredentials(request *IGuest_setCredentials) (*IGuest_setCredentialsResponse, error) {
	return service.IGuest_setCredentialsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_createSessionContext(ctx context.Context, request *IGuest_createSession) (*IGuest_createSessionResponse, error) {
	response := new(IGuest_createSessionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_createSession(request *IGuest_createSession) (*IGuest_createSessionResponse, error) {
	return service.IGuest_createSessionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_findSessionContext(ctx context.Context, request *IGuest_findSession) (*IGuest_findSessionResponse, error) {
	response := new(IGuest_findSessionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_findSession(request *IGuest_findSession) (*IGuest_findSessionResponse, error) {
	return service.IGuest_findSessionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_shutdownContext(ctx context.Context, request *IGuest_shutdown) (*IGuest_shutdownResponse, error) {
	response := new(IGuest_shutdownResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_shutdown(request *IGuest_shutdown) (*IGuest_shutdownResponse, error) {
	return service.IGuest_shutdownContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuest_updateGuestAdditionsContext(ctx context.Context, request *IGuest_updateGuestAdditions) (*IGuest_updateGuestAdditionsResponse, error) {
	response := new(IGuest_updateGuestAdditionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuest_updateGuestAdditions(request *IGuest_updateGuestAdditions) (*IGuest_updateGuestAdditionsResponse, error) {
	return service.IGuest_updateGuestAdditionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getIdContext(ctx context.Context, request *IProgress_getId) (*IProgress_getIdResponse, error) {
	response := new(IProgress_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getId(request *IProgress_getId) (*IProgress_getIdResponse, error) {
	return service.IProgress_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getDescriptionContext(ctx context.Context, request *IProgress_getDescription) (*IProgress_getDescriptionResponse, error) {
	response := new(IProgress_getDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getDescription(request *IProgress_getDescription) (*IProgress_getDescriptionResponse, error) {
	return service.IProgress_getDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getInitiatorContext(ctx context.Context, request *IProgress_getInitiator) (*IProgress_getInitiatorResponse, error) {
	response := new(IProgress_getInitiatorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getInitiator(request *IProgress_getInitiator) (*IProgress_getInitiatorResponse, error) {
	return service.IProgress_getInitiatorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getCancelableContext(ctx context.Context, request *IProgress_getCancelable) (*IProgress_getCancelableResponse, error) {
	response := new(IProgress_getCancelableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getCancelable(request *IProgress_getCancelable) (*IProgress_getCancelableResponse, error) {
	return service.IProgress_getCancelableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getPercentContext(ctx context.Context, request *IProgress_getPercent) (*IProgress_getPercentResponse, error) {
	response := new(IProgress_getPercentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getPercent(request *IProgress_getPercent) (*IProgress_getPercentResponse, error) {
	return service.IProgress_getPercentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getTimeRemainingContext(ctx context.Context, request *IProgress_getTimeRemaining) (*IProgress_getTimeRemainingResponse, error) {
	response := new(IProgress_getTimeRemainingResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getTimeRemaining(request *IProgress_getTimeRemaining) (*IProgress_getTimeRemainingResponse, error) {
	return service.IProgress_getTimeRemainingContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getCompletedContext(ctx context.Context, request *IProgress_getCompleted) (*IProgress_getCompletedResponse, error) {
	response := new(IProgress_getCompletedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getCompleted(request *IProgress_getCompleted) (*IProgress_getCompletedResponse, error) {
	return service.IProgress_getCompletedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getCanceledContext(ctx context.Context, request *IProgress_getCanceled) (*IProgress_getCanceledResponse, error) {
	response := new(IProgress_getCanceledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getCanceled(request *IProgress_getCanceled) (*IProgress_getCanceledResponse, error) {
	return service.IProgress_getCanceledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getResultCodeContext(ctx context.Context, request *IProgress_getResultCode) (*IProgress_getResultCodeResponse, error) {
	response := new(IProgress_getResultCodeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getResultCode(request *IProgress_getResultCode) (*IProgress_getResultCodeResponse, error) {
	return service.IProgress_getResultCodeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getErrorInfoContext(ctx context.Context, request *IProgress_getErrorInfo) (*IProgress_getErrorInfoResponse, error) {
	response := new(IProgress_getErrorInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getErrorInfo(request *IProgress_getErrorInfo) (*IProgress_getErrorInfoResponse, error) {
	return service.IProgress_getErrorInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getOperationCountContext(ctx context.Context, request *IProgress_getOperationCount) (*IProgress_getOperationCountResponse, error) {
	response := new(IProgress_getOperationCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getOperationCount(request *IProgress_getOperationCount) (*IProgress_getOperationCountResponse, error) {
	return service.IProgress_getOperationCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getOperationContext(ctx context.Context, request *IProgress_getOperation) (*IProgress_getOperationResponse, error) {
	response := new(IProgress_getOperationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getOperation(request *IProgress_getOperation) (*IProgress_getOperationResponse, error) {
	return service.IProgress_getOperationContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getOperationDescriptionContext(ctx context.Context, request *IProgress_getOperationDescription) (*IProgress_getOperationDescriptionResponse, error) {
	response := new(IProgress_getOperationDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getOperationDescription(request *IProgress_getOperationDescription) (*IProgress_getOperationDescriptionResponse, error) {
	return service.IProgress_getOperationDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getOperationPercentContext(ctx context.Context, request *IProgress_getOperationPercent) (*IProgress_getOperationPercentResponse, error) {
	response := new(IProgress_getOperationPercentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getOperationPercent(request *IProgress_getOperationPercent) (*IProgress_getOperationPercentResponse, error) {
	return service.IProgress_getOperationPercentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getOperationWeightContext(ctx context.Context, request *IProgress_getOperationWeight) (*IProgress_getOperationWeightResponse, error) {
	response := new(IProgress_getOperationWeightResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getOperationWeight(request *IProgress_getOperationWeight) (*IProgress_getOperationWeightResponse, error) {
	return service.IProgress_getOperationWeightContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getTimeoutContext(ctx context.Context, request *IProgress_getTimeout) (*IProgress_getTimeoutResponse, error) {
	response := new(IProgress_getTimeoutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getTimeout(request *IProgress_getTimeout) (*IProgress_getTimeoutResponse, error) {
	return service.IProgress_getTimeoutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_setTimeoutContext(ctx context.Context, request *IProgress_setTimeout) (*IProgress_setTimeoutResponse, error) {
	response := new(IProgress_setTimeoutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_setTimeout(request *IProgress_setTimeout) (*IProgress_setTimeoutResponse, error) {
	return service.IProgress_setTimeoutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_getEventSourceContext(ctx context.Context, request *IProgress_getEventSource) (*IProgress_getEventSourceResponse, error) {
	response := new(IProgress_getEventSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_getEventSource(request *IProgress_getEventSource) (*IProgress_getEventSourceResponse, error) {
	return service.IProgress_getEventSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_waitForCompletionContext(ctx context.Context, request *IProgress_waitForCompletion) (*IProgress_waitForCompletionResponse, error) {
	response := new(IProgress_waitForCompletionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_waitForCompletion(request *IProgress_waitForCompletion) (*IProgress_waitForCompletionResponse, error) {
	return service.IProgress_waitForCompletionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_waitForOperationCompletionContext(ctx context.Context, request *IProgress_waitForOperationCompletion) (*IProgress_waitForOperationCompletionResponse, error) {
	response := new(IProgress_waitForOperationCompletionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_waitForOperationCompletion(request *IProgress_waitForOperationCompletion) (*IProgress_waitForOperationCompletionResponse, error) {
	return service.IProgress_waitForOperationCompletionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgress_cancelContext(ctx context.Context, request *IProgress_cancel) (*IProgress_cancelResponse, error) {
	response := new(IProgress_cancelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgress_cancel(request *IProgress_cancel) (*IProgress_cancelResponse, error) {
	return service.IProgress_cancelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshot_getIdContext(ctx context.Context, request *ISnapshot_getId) (*ISnapshot_getIdResponse, error) {
	response := new(ISnapshot_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshot_getId(request *ISnapshot_getId) (*ISnapshot_getIdResponse, error) {
	return service.ISnapshot_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshot_getNameContext(ctx context.Context, request *ISnapshot_getName) (*ISnapshot_getNameResponse, error) {
	response := new(ISnapshot_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshot_getName(request *ISnapshot_getName) (*ISnapshot_getNameResponse, error) {
	return service.ISnapshot_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshot_setNameContext(ctx context.Context, request *ISnapshot_setName) (*ISnapshot_setNameResponse, error) {
	response := new(ISnapshot_setNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshot_setName(request *ISnapshot_setName) (*ISnapshot_setNameResponse, error) {
	return service.ISnapshot_setNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshot_getDescriptionContext(ctx context.Context, request *ISnapshot_getDescription) (*ISnapshot_getDescriptionResponse, error) {
	response := new(ISnapshot_getDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshot_getDescription(request *ISnapshot_getDescription) (*ISnapshot_getDescriptionResponse, error) {
	return service.ISnapshot_getDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshot_setDescriptionContext(ctx context.Context, request *ISnapshot_setDescription) (*ISnapshot_setDescriptionResponse, error) {
	response := new(ISnapshot_setDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshot_setDescription(request *ISnapshot_setDescription) (*ISnapshot_setDescriptionResponse, error) {
	return service.ISnapshot_setDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshot_getTimeStampContext(ctx context.Context, request *ISnapshot_getTimeStamp) (*ISnapshot_getTimeStampResponse, error) {
	response := new(ISnapshot_getTimeStampResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshot_getTimeStamp(request *ISnapshot_getTimeStamp) (*ISnapshot_getTimeStampResponse, error) {
	return service.ISnapshot_getTimeStampContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshot_getOnlineContext(ctx context.Context, request *ISnapshot_getOnline) (*ISnapshot_getOnlineResponse, error) {
	response := new(ISnapshot_getOnlineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshot_getOnline(request *ISnapshot_getOnline) (*ISnapshot_getOnlineResponse, error) {
	return service.ISnapshot_getOnlineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshot_getMachineContext(ctx context.Context, request *ISnapshot_getMachine) (*ISnapshot_getMachineResponse, error) {
	response := new(ISnapshot_getMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshot_getMachine(request *ISnapshot_getMachine) (*ISnapshot_getMachineResponse, error) {
	return service.ISnapshot_getMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshot_getParentContext(ctx context.Context, request *ISnapshot_getParent) (*ISnapshot_getParentResponse, error) {
	response := new(ISnapshot_getParentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshot_getParent(request *ISnapshot_getParent) (*ISnapshot_getParentResponse, error) {
	return service.ISnapshot_getParentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshot_getChildrenContext(ctx context.Context, request *ISnapshot_getChildren) (*ISnapshot_getChildrenResponse, error) {
	response := new(ISnapshot_getChildrenResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshot_getChildren(request *ISnapshot_getChildren) (*ISnapshot_getChildrenResponse, error) {
	return service.ISnapshot_getChildrenContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshot_getChildrenCountContext(ctx context.Context, request *ISnapshot_getChildrenCount) (*ISnapshot_getChildrenCountResponse, error) {
	response := new(ISnapshot_getChildrenCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshot_getChildrenCount(request *ISnapshot_getChildrenCount) (*ISnapshot_getChildrenCountResponse, error) {
	return service.ISnapshot_getChildrenCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getIdContext(ctx context.Context, request *IMedium_getId) (*IMedium_getIdResponse, error) {
	response := new(IMedium_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getId(request *IMedium_getId) (*IMedium_getIdResponse, error) {
	return service.IMedium_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getDescriptionContext(ctx context.Context, request *IMedium_getDescription) (*IMedium_getDescriptionResponse, error) {
	response := new(IMedium_getDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getDescription(request *IMedium_getDescription) (*IMedium_getDescriptionResponse, error) {
	return service.IMedium_getDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_setDescriptionContext(ctx context.Context, request *IMedium_setDescription) (*IMedium_setDescriptionResponse, error) {
	response := new(IMedium_setDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_setDescription(request *IMedium_setDescription) (*IMedium_setDescriptionResponse, error) {
	return service.IMedium_setDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getStateContext(ctx context.Context, request *IMedium_getState) (*IMedium_getStateResponse, error) {
	response := new(IMedium_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getState(request *IMedium_getState) (*IMedium_getStateResponse, error) {
	return service.IMedium_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getVariantContext(ctx context.Context, request *IMedium_getVariant) (*IMedium_getVariantResponse, error) {
	response := new(IMedium_getVariantResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getVariant(request *IMedium_getVariant) (*IMedium_getVariantResponse, error) {
	return service.IMedium_getVariantContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getLocationContext(ctx context.Context, request *IMedium_getLocation) (*IMedium_getLocationResponse, error) {
	response := new(IMedium_getLocationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getLocation(request *IMedium_getLocation) (*IMedium_getLocationResponse, error) {
	return service.IMedium_getLocationContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_setLocationContext(ctx context.Context, request *IMedium_setLocation) (*IMedium_setLocationResponse, error) {
	response := new(IMedium_setLocationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_setLocation(request *IMedium_setLocation) (*IMedium_setLocationResponse, error) {
	return service.IMedium_setLocationContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getNameContext(ctx context.Context, request *IMedium_getName) (*IMedium_getNameResponse, error) {
	response := new(IMedium_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getName(request *IMedium_getName) (*IMedium_getNameResponse, error) {
	return service.IMedium_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getDeviceTypeContext(ctx context.Context, request *IMedium_getDeviceType) (*IMedium_getDeviceTypeResponse, error) {
	response := new(IMedium_getDeviceTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getDeviceType(request *IMedium_getDeviceType) (*IMedium_getDeviceTypeResponse, error) {
	return service.IMedium_getDeviceTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getHostDriveContext(ctx context.Context, request *IMedium_getHostDrive) (*IMedium_getHostDriveResponse, error) {
	response := new(IMedium_getHostDriveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getHostDrive(request *IMedium_getHostDrive) (*IMedium_getHostDriveResponse, error) {
	return service.IMedium_getHostDriveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getSizeContext(ctx context.Context, request *IMedium_getSize) (*IMedium_getSizeResponse, error) {
	response := new(IMedium_getSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getSize(request *IMedium_getSize) (*IMedium_getSizeResponse, error) {
	return service.IMedium_getSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getFormatContext(ctx context.Context, request *IMedium_getFormat) (*IMedium_getFormatResponse, error) {
	response := new(IMedium_getFormatResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getFormat(request *IMedium_getFormat) (*IMedium_getFormatResponse, error) {
	return service.IMedium_getFormatContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getMediumFormatContext(ctx context.Context, request *IMedium_getMediumFormat) (*IMedium_getMediumFormatResponse, error) {
	response := new(IMedium_getMediumFormatResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getMediumFormat(request *IMedium_getMediumFormat) (*IMedium_getMediumFormatResponse, error) {
	return service.IMedium_getMediumFormatContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getTypeContext(ctx context.Context, request *IMedium_getType) (*IMedium_getTypeResponse, error) {
	response := new(IMedium_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getType(request *IMedium_getType) (*IMedium_getTypeResponse, error) {
	return service.IMedium_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_setTypeContext(ctx context.Context, request *IMedium_setType) (*IMedium_setTypeResponse, error) {
	response := new(IMedium_setTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_setType(request *IMedium_setType) (*IMedium_setTypeResponse, error) {
	return service.IMedium_setTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getAllowedTypesContext(ctx context.Context, request *IMedium_getAllowedTypes) (*IMedium_getAllowedTypesResponse, error) {
	response := new(IMedium_getAllowedTypesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getAllowedTypes(request *IMedium_getAllowedTypes) (*IMedium_getAllowedTypesResponse, error) {
	return service.IMedium_getAllowedTypesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getParentContext(ctx context.Context, request *IMedium_getParent) (*IMedium_getParentResponse, error) {
	response := new(IMedium_getParentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getParent(request *IMedium_getParent) (*IMedium_getParentResponse, error) {
	return service.IMedium_getParentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getChildrenContext(ctx context.Context, request *IMedium_getChildren) (*IMedium_getChildrenResponse, error) {
	response := new(IMedium_getChildrenResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getChildren(request *IMedium_getChildren) (*IMedium_getChildrenResponse, error) {
	return service.IMedium_getChildrenContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getBaseContext(ctx context.Context, request *IMedium_getBase) (*IMedium_getBaseResponse, error) {
	response := new(IMedium_getBaseResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getBase(request *IMedium_getBase) (*IMedium_getBaseResponse, error) {
	return service.IMedium_getBaseContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getReadOnlyContext(ctx context.Context, request *IMedium_getReadOnly) (*IMedium_getReadOnlyResponse, error) {
	response := new(IMedium_getReadOnlyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getReadOnly(request *IMedium_getReadOnly) (*IMedium_getReadOnlyResponse, error) {
	return service.IMedium_getReadOnlyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getLogicalSizeContext(ctx context.Context, request *IMedium_getLogicalSize) (*IMedium_getLogicalSizeResponse, error) {
	response := new(IMedium_getLogicalSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getLogicalSize(request *IMedium_getLogicalSize) (*IMedium_getLogicalSizeResponse, error) {
	return service.IMedium_getLogicalSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getAutoResetContext(ctx context.Context, request *IMedium_getAutoReset) (*IMedium_getAutoResetResponse, error) {
	response := new(IMedium_getAutoResetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getAutoReset(request *IMedium_getAutoReset) (*IMedium_getAutoResetResponse, error) {
	return service.IMedium_getAutoResetContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_setAutoResetContext(ctx context.Context, request *IMedium_setAutoReset) (*IMedium_setAutoResetResponse, error) {
	response := new(IMedium_setAutoResetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_setAutoReset(request *IMedium_setAutoReset) (*IMedium_setAutoResetResponse, error) {
	return service.IMedium_setAutoResetContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getLastAccessErrorContext(ctx context.Context, request *IMedium_getLastAccessError) (*IMedium_getLastAccessErrorResponse, error) {
	response := new(IMedium_getLastAccessErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getLastAccessError(request *IMedium_getLastAccessError) (*IMedium_getLastAccessErrorResponse, error) {
	return service.IMedium_getLastAccessErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getMachineIdsContext(ctx context.Context, request *IMedium_getMachineIds) (*IMedium_getMachineIdsResponse, error) {
	response := new(IMedium_getMachineIdsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getMachineIds(request *IMedium_getMachineIds) (*IMedium_getMachineIdsResponse, error) {
	return service.IMedium_getMachineIdsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_setIdsContext(ctx context.Context, request *IMedium_setIds) (*IMedium_setIdsResponse, error) {
	response := new(IMedium_setIdsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_setIds(request *IMedium_setIds) (*IMedium_setIdsResponse, error) {
	return service.IMedium_setIdsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_refreshStateContext(ctx context.Context, request *IMedium_refreshState) (*IMedium_refreshStateResponse, error) {
	response := new(IMedium_refreshStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_refreshState(request *IMedium_refreshState) (*IMedium_refreshStateResponse, error) {
	return service.IMedium_refreshStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getSnapshotIdsContext(ctx context.Context, request *IMedium_getSnapshotIds) (*IMedium_getSnapshotIdsResponse, error) {
	response := new(IMedium_getSnapshotIdsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getSnapshotIds(request *IMedium_getSnapshotIds) (*IMedium_getSnapshotIdsResponse, error) {
	return service.IMedium_getSnapshotIdsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_lockReadContext(ctx context.Context, request *IMedium_lockRead) (*IMedium_lockReadResponse, error) {
	response := new(IMedium_lockReadResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_lockRead(request *IMedium_lockRead) (*IMedium_lockReadResponse, error) {
	return service.IMedium_lockReadContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_lockWriteContext(ctx context.Context, request *IMedium_lockWrite) (*IMedium_lockWriteResponse, error) {
	response := new(IMedium_lockWriteResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_lockWrite(request *IMedium_lockWrite) (*IMedium_lockWriteResponse, error) {
	return service.IMedium_lockWriteContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_closeContext(ctx context.Context, request *IMedium_close) (*IMedium_closeResponse, error) {
	response := new(IMedium_closeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_close(request *IMedium_close) (*IMedium_closeResponse, error) {
	return service.IMedium_closeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getPropertyContext(ctx context.Context, request *IMedium_getProperty) (*IMedium_getPropertyResponse, error) {
	response := new(IMedium_getPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getProperty(request *IMedium_getProperty) (*IMedium_getPropertyResponse, error) {
	return service.IMedium_getPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_setPropertyContext(ctx context.Context, request *IMedium_setProperty) (*IMedium_setPropertyResponse, error) {
	response := new(IMedium_setPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_setProperty(request *IMedium_setProperty) (*IMedium_setPropertyResponse, error) {
	return service.IMedium_setPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getPropertiesContext(ctx context.Context, request *IMedium_getProperties) (*IMedium_getPropertiesResponse, error) {
	response := new(IMedium_getPropertiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getProperties(request *IMedium_getProperties) (*IMedium_getPropertiesResponse, error) {
	return service.IMedium_getPropertiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_setPropertiesContext(ctx context.Context, request *IMedium_setProperties) (*IMedium_setPropertiesResponse, error) {
	response := new(IMedium_setPropertiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_setProperties(request *IMedium_setProperties) (*IMedium_setPropertiesResponse, error) {
	return service.IMedium_setPropertiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_createBaseStorageContext(ctx context.Context, request *IMedium_createBaseStorage) (*IMedium_createBaseStorageResponse, error) {
	response := new(IMedium_createBaseStorageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_createBaseStorage(request *IMedium_createBaseStorage) (*IMedium_createBaseStorageResponse, error) {
	return service.IMedium_createBaseStorageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_deleteStorageContext(ctx context.Context, request *IMedium_deleteStorage) (*IMedium_deleteStorageResponse, error) {
	response := new(IMedium_deleteStorageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_deleteStorage(request *IMedium_deleteStorage) (*IMedium_deleteStorageResponse, error) {
	return service.IMedium_deleteStorageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_createDiffStorageContext(ctx context.Context, request *IMedium_createDiffStorage) (*IMedium_createDiffStorageResponse, error) {
	response := new(IMedium_createDiffStorageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_createDiffStorage(request *IMedium_createDiffStorage) (*IMedium_createDiffStorageResponse, error) {
	return service.IMedium_createDiffStorageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_mergeToContext(ctx context.Context, request *IMedium_mergeTo) (*IMedium_mergeToResponse, error) {
	response := new(IMedium_mergeToResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_mergeTo(request *IMedium_mergeTo) (*IMedium_mergeToResponse, error) {
	return service.IMedium_mergeToContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_cloneToContext(ctx context.Context, request *IMedium_cloneTo) (*IMedium_cloneToResponse, error) {
	response := new(IMedium_cloneToResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_cloneTo(request *IMedium_cloneTo) (*IMedium_cloneToResponse, error) {
	return service.IMedium_cloneToContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_cloneToBaseContext(ctx context.Context, request *IMedium_cloneToBase) (*IMedium_cloneToBaseResponse, error) {
	response := new(IMedium_cloneToBaseResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_cloneToBase(request *IMedium_cloneToBase) (*IMedium_cloneToBaseResponse, error) {
	return service.IMedium_cloneToBaseContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_moveToContext(ctx context.Context, request *IMedium_moveTo) (*IMedium_moveToResponse, error) {
	response := new(IMedium_moveToResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_moveTo(request *IMedium_moveTo) (*IMedium_moveToResponse, error) {
	return service.IMedium_moveToContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_compactContext(ctx context.Context, request *IMedium_compact) (*IMedium_compactResponse, error) {
	response := new(IMedium_compactResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_compact(request *IMedium_compact) (*IMedium_compactResponse, error) {
	return service.IMedium_compactContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_resizeContext(ctx context.Context, request *IMedium_resize) (*IMedium_resizeResponse, error) {
	response := new(IMedium_resizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_resize(request *IMedium_resize) (*IMedium_resizeResponse, error) {
	return service.IMedium_resizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_resetContext(ctx context.Context, request *IMedium_reset) (*IMedium_resetResponse, error) {
	response := new(IMedium_resetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_reset(request *IMedium_reset) (*IMedium_resetResponse, error) {
	return service.IMedium_resetContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_changeEncryptionContext(ctx context.Context, request *IMedium_changeEncryption) (*IMedium_changeEncryptionResponse, error) {
	response := new(IMedium_changeEncryptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_changeEncryption(request *IMedium_changeEncryption) (*IMedium_changeEncryptionResponse, error) {
	return service.IMedium_changeEncryptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_getEncryptionSettingsContext(ctx context.Context, request *IMedium_getEncryptionSettings) (*IMedium_getEncryptionSettingsResponse, error) {
	response := new(IMedium_getEncryptionSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_getEncryptionSettings(request *IMedium_getEncryptionSettings) (*IMedium_getEncryptionSettingsResponse, error) {
	return service.IMedium_getEncryptionSettingsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_checkEncryptionPasswordContext(ctx context.Context, request *IMedium_checkEncryptionPassword) (*IMedium_checkEncryptionPasswordResponse, error) {
	response := new(IMedium_checkEncryptionPasswordResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_checkEncryptionPassword(request *IMedium_checkEncryptionPassword) (*IMedium_checkEncryptionPasswordResponse, error) {
	return service.IMedium_checkEncryptionPasswordContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_openForIOContext(ctx context.Context, request *IMedium_openForIO) (*IMedium_openForIOResponse, error) {
	response := new(IMedium_openForIOResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_openForIO(request *IMedium_openForIO) (*IMedium_openForIOResponse, error) {
	return service.IMedium_openForIOContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMedium_resizeAndCloneToContext(ctx context.Context, request *IMedium_resizeAndCloneTo) (*IMedium_resizeAndCloneToResponse, error) {
	response := new(IMedium_resizeAndCloneToResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMedium_resizeAndCloneTo(request *IMedium_resizeAndCloneTo) (*IMedium_resizeAndCloneToResponse, error) {
	return service.IMedium_resizeAndCloneToContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumFormat_getIdContext(ctx context.Context, request *IMediumFormat_getId) (*IMediumFormat_getIdResponse, error) {
	response := new(IMediumFormat_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumFormat_getId(request *IMediumFormat_getId) (*IMediumFormat_getIdResponse, error) {
	return service.IMediumFormat_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumFormat_getNameContext(ctx context.Context, request *IMediumFormat_getName) (*IMediumFormat_getNameResponse, error) {
	response := new(IMediumFormat_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumFormat_getName(request *IMediumFormat_getName) (*IMediumFormat_getNameResponse, error) {
	return service.IMediumFormat_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumFormat_getCapabilitiesContext(ctx context.Context, request *IMediumFormat_getCapabilities) (*IMediumFormat_getCapabilitiesResponse, error) {
	response := new(IMediumFormat_getCapabilitiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumFormat_getCapabilities(request *IMediumFormat_getCapabilities) (*IMediumFormat_getCapabilitiesResponse, error) {
	return service.IMediumFormat_getCapabilitiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumFormat_describeFileExtensionsContext(ctx context.Context, request *IMediumFormat_describeFileExtensions) (*IMediumFormat_describeFileExtensionsResponse, error) {
	response := new(IMediumFormat_describeFileExtensionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumFormat_describeFileExtensions(request *IMediumFormat_describeFileExtensions) (*IMediumFormat_describeFileExtensionsResponse, error) {
	return service.IMediumFormat_describeFileExtensionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumFormat_describePropertiesContext(ctx context.Context, request *IMediumFormat_describeProperties) (*IMediumFormat_describePropertiesResponse, error) {
	response := new(IMediumFormat_describePropertiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumFormat_describeProperties(request *IMediumFormat_describeProperties) (*IMediumFormat_describePropertiesResponse, error) {
	return service.IMediumFormat_describePropertiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDataStream_getReadSizeContext(ctx context.Context, request *IDataStream_getReadSize) (*IDataStream_getReadSizeResponse, error) {
	response := new(IDataStream_getReadSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDataStream_getReadSize(request *IDataStream_getReadSize) (*IDataStream_getReadSizeResponse, error) {
	return service.IDataStream_getReadSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDataStream_readContext(ctx context.Context, request *IDataStream_read) (*IDataStream_readResponse, error) {
	response := new(IDataStream_readResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDataStream_read(request *IDataStream_read) (*IDataStream_readResponse, error) {
	return service.IDataStream_readContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumIO_getMediumContext(ctx context.Context, request *IMediumIO_getMedium) (*IMediumIO_getMediumResponse, error) {
	response := new(IMediumIO_getMediumResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumIO_getMedium(request *IMediumIO_getMedium) (*IMediumIO_getMediumResponse, error) {
	return service.IMediumIO_getMediumContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumIO_getWritableContext(ctx context.Context, request *IMediumIO_getWritable) (*IMediumIO_getWritableResponse, error) {
	response := new(IMediumIO_getWritableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumIO_getWritable(request *IMediumIO_getWritable) (*IMediumIO_getWritableResponse, error) {
	return service.IMediumIO_getWritableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumIO_getExplorerContext(ctx context.Context, request *IMediumIO_getExplorer) (*IMediumIO_getExplorerResponse, error) {
	response := new(IMediumIO_getExplorerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumIO_getExplorer(request *IMediumIO_getExplorer) (*IMediumIO_getExplorerResponse, error) {
	return service.IMediumIO_getExplorerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumIO_readContext(ctx context.Context, request *IMediumIO_read) (*IMediumIO_readResponse, error) {
	response := new(IMediumIO_readResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumIO_read(request *IMediumIO_read) (*IMediumIO_readResponse, error) {
	return service.IMediumIO_readContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumIO_writeContext(ctx context.Context, request *IMediumIO_write) (*IMediumIO_writeResponse, error) {
	response := new(IMediumIO_writeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumIO_write(request *IMediumIO_write) (*IMediumIO_writeResponse, error) {
	return service.IMediumIO_writeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumIO_formatFATContext(ctx context.Context, request *IMediumIO_formatFAT) (*IMediumIO_formatFATResponse, error) {
	response := new(IMediumIO_formatFATResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumIO_formatFAT(request *IMediumIO_formatFAT) (*IMediumIO_formatFATResponse, error) {
	return service.IMediumIO_formatFATContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumIO_initializePartitionTableContext(ctx context.Context, request *IMediumIO_initializePartitionTable) (*IMediumIO_initializePartitionTableResponse, error) {
	response := new(IMediumIO_initializePartitionTableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumIO_initializePartitionTable(request *IMediumIO_initializePartitionTable) (*IMediumIO_initializePartitionTableResponse, error) {
	return service.IMediumIO_initializePartitionTableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumIO_convertToStreamContext(ctx context.Context, request *IMediumIO_convertToStream) (*IMediumIO_convertToStreamResponse, error) {
	response := new(IMediumIO_convertToStreamResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumIO_convertToStream(request *IMediumIO_convertToStream) (*IMediumIO_convertToStreamResponse, error) {
	return service.IMediumIO_convertToStreamContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumIO_closeContext(ctx context.Context, request *IMediumIO_close) (*IMediumIO_closeResponse, error) {
	response := new(IMediumIO_closeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumIO_close(request *IMediumIO_close) (*IMediumIO_closeResponse, error) {
	return service.IMediumIO_closeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IToken_abandonContext(ctx context.Context, request *IToken_abandon) (*IToken_abandonResponse, error) {
	response := new(IToken_abandonResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IToken_abandon(request *IToken_abandon) (*IToken_abandonResponse, error) {
	return service.IToken_abandonContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IToken_dummyContext(ctx context.Context, request *IToken_dummy) (*IToken_dummyResponse, error) {
	response := new(IToken_dummyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IToken_dummy(request *IToken_dummy) (*IToken_dummyResponse, error) {
	return service.IToken_dummyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IKeyboard_getKeyboardLEDsContext(ctx context.Context, request *IKeyboard_getKeyboardLEDs) (*IKeyboard_getKeyboardLEDsResponse, error) {
	response := new(IKeyboard_getKeyboardLEDsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IKeyboard_getKeyboardLEDs(request *IKeyboard_getKeyboardLEDs) (*IKeyboard_getKeyboardLEDsResponse, error) {
	return service.IKeyboard_getKeyboardLEDsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IKeyboard_getEventSourceContext(ctx context.Context, request *IKeyboard_getEventSource) (*IKeyboard_getEventSourceResponse, error) {
	response := new(IKeyboard_getEventSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IKeyboard_getEventSource(request *IKeyboard_getEventSource) (*IKeyboard_getEventSourceResponse, error) {
	return service.IKeyboard_getEventSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IKeyboard_putScancodeContext(ctx context.Context, request *IKeyboard_putScancode) (*IKeyboard_putScancodeResponse, error) {
	response := new(IKeyboard_putScancodeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IKeyboard_putScancode(request *IKeyboard_putScancode) (*IKeyboard_putScancodeResponse, error) {
	return service.IKeyboard_putScancodeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IKeyboard_putScancodesContext(ctx context.Context, request *IKeyboard_putScancodes) (*IKeyboard_putScancodesResponse, error) {
	response := new(IKeyboard_putScancodesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IKeyboard_putScancodes(request *IKeyboard_putScancodes) (*IKeyboard_putScancodesResponse, error) {
	return service.IKeyboard_putScancodesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IKeyboard_putCADContext(ctx context.Context, request *IKeyboard_putCAD) (*IKeyboard_putCADResponse, error) {
	response := new(IKeyboard_putCADResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IKeyboard_putCAD(request *IKeyboard_putCAD) (*IKeyboard_putCADResponse, error) {
	return service.IKeyboard_putCADContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IKeyboard_releaseKeysContext(ctx context.Context, request *IKeyboard_releaseKeys) (*IKeyboard_releaseKeysResponse, error) {
	response := new(IKeyboard_releaseKeysResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IKeyboard_releaseKeys(request *IKeyboard_releaseKeys) (*IKeyboard_releaseKeysResponse, error) {
	return service.IKeyboard_releaseKeysContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IKeyboard_putUsageCodeContext(ctx context.Context, request *IKeyboard_putUsageCode) (*IKeyboard_putUsageCodeResponse, error) {
	response := new(IKeyboard_putUsageCodeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IKeyboard_putUsageCode(request *IKeyboard_putUsageCode) (*IKeyboard_putUsageCodeResponse, error) {
	return service.IKeyboard_putUsageCodeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShape_getVisibleContext(ctx context.Context, request *IMousePointerShape_getVisible) (*IMousePointerShape_getVisibleResponse, error) {
	response := new(IMousePointerShape_getVisibleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShape_getVisible(request *IMousePointerShape_getVisible) (*IMousePointerShape_getVisibleResponse, error) {
	return service.IMousePointerShape_getVisibleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShape_getAlphaContext(ctx context.Context, request *IMousePointerShape_getAlpha) (*IMousePointerShape_getAlphaResponse, error) {
	response := new(IMousePointerShape_getAlphaResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShape_getAlpha(request *IMousePointerShape_getAlpha) (*IMousePointerShape_getAlphaResponse, error) {
	return service.IMousePointerShape_getAlphaContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShape_getHotXContext(ctx context.Context, request *IMousePointerShape_getHotX) (*IMousePointerShape_getHotXResponse, error) {
	response := new(IMousePointerShape_getHotXResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShape_getHotX(request *IMousePointerShape_getHotX) (*IMousePointerShape_getHotXResponse, error) {
	return service.IMousePointerShape_getHotXContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShape_getHotYContext(ctx context.Context, request *IMousePointerShape_getHotY) (*IMousePointerShape_getHotYResponse, error) {
	response := new(IMousePointerShape_getHotYResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShape_getHotY(request *IMousePointerShape_getHotY) (*IMousePointerShape_getHotYResponse, error) {
	return service.IMousePointerShape_getHotYContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShape_getWidthContext(ctx context.Context, request *IMousePointerShape_getWidth) (*IMousePointerShape_getWidthResponse, error) {
	response := new(IMousePointerShape_getWidthResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShape_getWidth(request *IMousePointerShape_getWidth) (*IMousePointerShape_getWidthResponse, error) {
	return service.IMousePointerShape_getWidthContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShape_getHeightContext(ctx context.Context, request *IMousePointerShape_getHeight) (*IMousePointerShape_getHeightResponse, error) {
	response := new(IMousePointerShape_getHeightResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShape_getHeight(request *IMousePointerShape_getHeight) (*IMousePointerShape_getHeightResponse, error) {
	return service.IMousePointerShape_getHeightContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShape_getShapeContext(ctx context.Context, request *IMousePointerShape_getShape) (*IMousePointerShape_getShapeResponse, error) {
	response := new(IMousePointerShape_getShapeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShape_getShape(request *IMousePointerShape_getShape) (*IMousePointerShape_getShapeResponse, error) {
	return service.IMousePointerShape_getShapeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouse_getAbsoluteSupportedContext(ctx context.Context, request *IMouse_getAbsoluteSupported) (*IMouse_getAbsoluteSupportedResponse, error) {
	response := new(IMouse_getAbsoluteSupportedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouse_getAbsoluteSupported(request *IMouse_getAbsoluteSupported) (*IMouse_getAbsoluteSupportedResponse, error) {
	return service.IMouse_getAbsoluteSupportedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouse_getRelativeSupportedContext(ctx context.Context, request *IMouse_getRelativeSupported) (*IMouse_getRelativeSupportedResponse, error) {
	response := new(IMouse_getRelativeSupportedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouse_getRelativeSupported(request *IMouse_getRelativeSupported) (*IMouse_getRelativeSupportedResponse, error) {
	return service.IMouse_getRelativeSupportedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouse_getTouchScreenSupportedContext(ctx context.Context, request *IMouse_getTouchScreenSupported) (*IMouse_getTouchScreenSupportedResponse, error) {
	response := new(IMouse_getTouchScreenSupportedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouse_getTouchScreenSupported(request *IMouse_getTouchScreenSupported) (*IMouse_getTouchScreenSupportedResponse, error) {
	return service.IMouse_getTouchScreenSupportedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouse_getTouchPadSupportedContext(ctx context.Context, request *IMouse_getTouchPadSupported) (*IMouse_getTouchPadSupportedResponse, error) {
	response := new(IMouse_getTouchPadSupportedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouse_getTouchPadSupported(request *IMouse_getTouchPadSupported) (*IMouse_getTouchPadSupportedResponse, error) {
	return service.IMouse_getTouchPadSupportedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouse_getNeedsHostCursorContext(ctx context.Context, request *IMouse_getNeedsHostCursor) (*IMouse_getNeedsHostCursorResponse, error) {
	response := new(IMouse_getNeedsHostCursorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouse_getNeedsHostCursor(request *IMouse_getNeedsHostCursor) (*IMouse_getNeedsHostCursorResponse, error) {
	return service.IMouse_getNeedsHostCursorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouse_getPointerShapeContext(ctx context.Context, request *IMouse_getPointerShape) (*IMouse_getPointerShapeResponse, error) {
	response := new(IMouse_getPointerShapeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouse_getPointerShape(request *IMouse_getPointerShape) (*IMouse_getPointerShapeResponse, error) {
	return service.IMouse_getPointerShapeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouse_getEventSourceContext(ctx context.Context, request *IMouse_getEventSource) (*IMouse_getEventSourceResponse, error) {
	response := new(IMouse_getEventSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouse_getEventSource(request *IMouse_getEventSource) (*IMouse_getEventSourceResponse, error) {
	return service.IMouse_getEventSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouse_putMouseEventContext(ctx context.Context, request *IMouse_putMouseEvent) (*IMouse_putMouseEventResponse, error) {
	response := new(IMouse_putMouseEventResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouse_putMouseEvent(request *IMouse_putMouseEvent) (*IMouse_putMouseEventResponse, error) {
	return service.IMouse_putMouseEventContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouse_putMouseEventAbsoluteContext(ctx context.Context, request *IMouse_putMouseEventAbsolute) (*IMouse_putMouseEventAbsoluteResponse, error) {
	response := new(IMouse_putMouseEventAbsoluteResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouse_putMouseEventAbsolute(request *IMouse_putMouseEventAbsolute) (*IMouse_putMouseEventAbsoluteResponse, error) {
	return service.IMouse_putMouseEventAbsoluteContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouse_putEventMultiTouchContext(ctx context.Context, request *IMouse_putEventMultiTouch) (*IMouse_putEventMultiTouchResponse, error) {
	response := new(IMouse_putEventMultiTouchResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouse_putEventMultiTouch(request *IMouse_putEventMultiTouch) (*IMouse_putEventMultiTouchResponse, error) {
	return service.IMouse_putEventMultiTouchContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouse_putEventMultiTouchStringContext(ctx context.Context, request *IMouse_putEventMultiTouchString) (*IMouse_putEventMultiTouchStringResponse, error) {
	response := new(IMouse_putEventMultiTouchStringResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouse_putEventMultiTouchString(request *IMouse_putEventMultiTouchString) (*IMouse_putEventMultiTouchStringResponse, error) {
	return service.IMouse_putEventMultiTouchStringContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_getWidthContext(ctx context.Context, request *IFramebuffer_getWidth) (*IFramebuffer_getWidthResponse, error) {
	response := new(IFramebuffer_getWidthResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_getWidth(request *IFramebuffer_getWidth) (*IFramebuffer_getWidthResponse, error) {
	return service.IFramebuffer_getWidthContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_getHeightContext(ctx context.Context, request *IFramebuffer_getHeight) (*IFramebuffer_getHeightResponse, error) {
	response := new(IFramebuffer_getHeightResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_getHeight(request *IFramebuffer_getHeight) (*IFramebuffer_getHeightResponse, error) {
	return service.IFramebuffer_getHeightContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_getBitsPerPixelContext(ctx context.Context, request *IFramebuffer_getBitsPerPixel) (*IFramebuffer_getBitsPerPixelResponse, error) {
	response := new(IFramebuffer_getBitsPerPixelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_getBitsPerPixel(request *IFramebuffer_getBitsPerPixel) (*IFramebuffer_getBitsPerPixelResponse, error) {
	return service.IFramebuffer_getBitsPerPixelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_getBytesPerLineContext(ctx context.Context, request *IFramebuffer_getBytesPerLine) (*IFramebuffer_getBytesPerLineResponse, error) {
	response := new(IFramebuffer_getBytesPerLineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_getBytesPerLine(request *IFramebuffer_getBytesPerLine) (*IFramebuffer_getBytesPerLineResponse, error) {
	return service.IFramebuffer_getBytesPerLineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_getPixelFormatContext(ctx context.Context, request *IFramebuffer_getPixelFormat) (*IFramebuffer_getPixelFormatResponse, error) {
	response := new(IFramebuffer_getPixelFormatResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_getPixelFormat(request *IFramebuffer_getPixelFormat) (*IFramebuffer_getPixelFormatResponse, error) {
	return service.IFramebuffer_getPixelFormatContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_getHeightReductionContext(ctx context.Context, request *IFramebuffer_getHeightReduction) (*IFramebuffer_getHeightReductionResponse, error) {
	response := new(IFramebuffer_getHeightReductionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_getHeightReduction(request *IFramebuffer_getHeightReduction) (*IFramebuffer_getHeightReductionResponse, error) {
	return service.IFramebuffer_getHeightReductionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_getOverlayContext(ctx context.Context, request *IFramebuffer_getOverlay) (*IFramebuffer_getOverlayResponse, error) {
	response := new(IFramebuffer_getOverlayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_getOverlay(request *IFramebuffer_getOverlay) (*IFramebuffer_getOverlayResponse, error) {
	return service.IFramebuffer_getOverlayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_getCapabilitiesContext(ctx context.Context, request *IFramebuffer_getCapabilities) (*IFramebuffer_getCapabilitiesResponse, error) {
	response := new(IFramebuffer_getCapabilitiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_getCapabilities(request *IFramebuffer_getCapabilities) (*IFramebuffer_getCapabilitiesResponse, error) {
	return service.IFramebuffer_getCapabilitiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_notifyUpdateContext(ctx context.Context, request *IFramebuffer_notifyUpdate) (*IFramebuffer_notifyUpdateResponse, error) {
	response := new(IFramebuffer_notifyUpdateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_notifyUpdate(request *IFramebuffer_notifyUpdate) (*IFramebuffer_notifyUpdateResponse, error) {
	return service.IFramebuffer_notifyUpdateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_notifyUpdateImageContext(ctx context.Context, request *IFramebuffer_notifyUpdateImage) (*IFramebuffer_notifyUpdateImageResponse, error) {
	response := new(IFramebuffer_notifyUpdateImageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_notifyUpdateImage(request *IFramebuffer_notifyUpdateImage) (*IFramebuffer_notifyUpdateImageResponse, error) {
	return service.IFramebuffer_notifyUpdateImageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_notifyChangeContext(ctx context.Context, request *IFramebuffer_notifyChange) (*IFramebuffer_notifyChangeResponse, error) {
	response := new(IFramebuffer_notifyChangeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_notifyChange(request *IFramebuffer_notifyChange) (*IFramebuffer_notifyChangeResponse, error) {
	return service.IFramebuffer_notifyChangeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_videoModeSupportedContext(ctx context.Context, request *IFramebuffer_videoModeSupported) (*IFramebuffer_videoModeSupportedResponse, error) {
	response := new(IFramebuffer_videoModeSupportedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_videoModeSupported(request *IFramebuffer_videoModeSupported) (*IFramebuffer_videoModeSupportedResponse, error) {
	return service.IFramebuffer_videoModeSupportedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebuffer_notify3DEventContext(ctx context.Context, request *IFramebuffer_notify3DEvent) (*IFramebuffer_notify3DEventResponse, error) {
	response := new(IFramebuffer_notify3DEventResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebuffer_notify3DEvent(request *IFramebuffer_notify3DEvent) (*IFramebuffer_notify3DEventResponse, error) {
	return service.IFramebuffer_notify3DEventContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebufferOverlay_getXContext(ctx context.Context, request *IFramebufferOverlay_getX) (*IFramebufferOverlay_getXResponse, error) {
	response := new(IFramebufferOverlay_getXResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebufferOverlay_getX(request *IFramebufferOverlay_getX) (*IFramebufferOverlay_getXResponse, error) {
	return service.IFramebufferOverlay_getXContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebufferOverlay_getYContext(ctx context.Context, request *IFramebufferOverlay_getY) (*IFramebufferOverlay_getYResponse, error) {
	response := new(IFramebufferOverlay_getYResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebufferOverlay_getY(request *IFramebufferOverlay_getY) (*IFramebufferOverlay_getYResponse, error) {
	return service.IFramebufferOverlay_getYContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebufferOverlay_getVisibleContext(ctx context.Context, request *IFramebufferOverlay_getVisible) (*IFramebufferOverlay_getVisibleResponse, error) {
	response := new(IFramebufferOverlay_getVisibleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebufferOverlay_getVisible(request *IFramebufferOverlay_getVisible) (*IFramebufferOverlay_getVisibleResponse, error) {
	return service.IFramebufferOverlay_getVisibleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebufferOverlay_setVisibleContext(ctx context.Context, request *IFramebufferOverlay_setVisible) (*IFramebufferOverlay_setVisibleResponse, error) {
	response := new(IFramebufferOverlay_setVisibleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebufferOverlay_setVisible(request *IFramebufferOverlay_setVisible) (*IFramebufferOverlay_setVisibleResponse, error) {
	return service.IFramebufferOverlay_setVisibleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebufferOverlay_getAlphaContext(ctx context.Context, request *IFramebufferOverlay_getAlpha) (*IFramebufferOverlay_getAlphaResponse, error) {
	response := new(IFramebufferOverlay_getAlphaResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebufferOverlay_getAlpha(request *IFramebufferOverlay_getAlpha) (*IFramebufferOverlay_getAlphaResponse, error) {
	return service.IFramebufferOverlay_getAlphaContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebufferOverlay_setAlphaContext(ctx context.Context, request *IFramebufferOverlay_setAlpha) (*IFramebufferOverlay_setAlphaResponse, error) {
	response := new(IFramebufferOverlay_setAlphaResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebufferOverlay_setAlpha(request *IFramebufferOverlay_setAlpha) (*IFramebufferOverlay_setAlphaResponse, error) {
	return service.IFramebufferOverlay_setAlphaContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFramebufferOverlay_moveContext(ctx context.Context, request *IFramebufferOverlay_move) (*IFramebufferOverlay_moveResponse, error) {
	response := new(IFramebufferOverlay_moveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFramebufferOverlay_move(request *IFramebufferOverlay_move) (*IFramebufferOverlay_moveResponse, error) {
	return service.IFramebufferOverlay_moveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestScreenInfo_getScreenIdContext(ctx context.Context, request *IGuestScreenInfo_getScreenId) (*IGuestScreenInfo_getScreenIdResponse, error) {
	response := new(IGuestScreenInfo_getScreenIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestScreenInfo_getScreenId(request *IGuestScreenInfo_getScreenId) (*IGuestScreenInfo_getScreenIdResponse, error) {
	return service.IGuestScreenInfo_getScreenIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestScreenInfo_getGuestMonitorStatusContext(ctx context.Context, request *IGuestScreenInfo_getGuestMonitorStatus) (*IGuestScreenInfo_getGuestMonitorStatusResponse, error) {
	response := new(IGuestScreenInfo_getGuestMonitorStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestScreenInfo_getGuestMonitorStatus(request *IGuestScreenInfo_getGuestMonitorStatus) (*IGuestScreenInfo_getGuestMonitorStatusResponse, error) {
	return service.IGuestScreenInfo_getGuestMonitorStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestScreenInfo_getPrimaryContext(ctx context.Context, request *IGuestScreenInfo_getPrimary) (*IGuestScreenInfo_getPrimaryResponse, error) {
	response := new(IGuestScreenInfo_getPrimaryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestScreenInfo_getPrimary(request *IGuestScreenInfo_getPrimary) (*IGuestScreenInfo_getPrimaryResponse, error) {
	return service.IGuestScreenInfo_getPrimaryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestScreenInfo_getOriginContext(ctx context.Context, request *IGuestScreenInfo_getOrigin) (*IGuestScreenInfo_getOriginResponse, error) {
	response := new(IGuestScreenInfo_getOriginResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestScreenInfo_getOrigin(request *IGuestScreenInfo_getOrigin) (*IGuestScreenInfo_getOriginResponse, error) {
	return service.IGuestScreenInfo_getOriginContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestScreenInfo_getOriginXContext(ctx context.Context, request *IGuestScreenInfo_getOriginX) (*IGuestScreenInfo_getOriginXResponse, error) {
	response := new(IGuestScreenInfo_getOriginXResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestScreenInfo_getOriginX(request *IGuestScreenInfo_getOriginX) (*IGuestScreenInfo_getOriginXResponse, error) {
	return service.IGuestScreenInfo_getOriginXContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestScreenInfo_getOriginYContext(ctx context.Context, request *IGuestScreenInfo_getOriginY) (*IGuestScreenInfo_getOriginYResponse, error) {
	response := new(IGuestScreenInfo_getOriginYResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestScreenInfo_getOriginY(request *IGuestScreenInfo_getOriginY) (*IGuestScreenInfo_getOriginYResponse, error) {
	return service.IGuestScreenInfo_getOriginYContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestScreenInfo_getWidthContext(ctx context.Context, request *IGuestScreenInfo_getWidth) (*IGuestScreenInfo_getWidthResponse, error) {
	response := new(IGuestScreenInfo_getWidthResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestScreenInfo_getWidth(request *IGuestScreenInfo_getWidth) (*IGuestScreenInfo_getWidthResponse, error) {
	return service.IGuestScreenInfo_getWidthContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestScreenInfo_getHeightContext(ctx context.Context, request *IGuestScreenInfo_getHeight) (*IGuestScreenInfo_getHeightResponse, error) {
	response := new(IGuestScreenInfo_getHeightResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestScreenInfo_getHeight(request *IGuestScreenInfo_getHeight) (*IGuestScreenInfo_getHeightResponse, error) {
	return service.IGuestScreenInfo_getHeightContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestScreenInfo_getBitsPerPixelContext(ctx context.Context, request *IGuestScreenInfo_getBitsPerPixel) (*IGuestScreenInfo_getBitsPerPixelResponse, error) {
	response := new(IGuestScreenInfo_getBitsPerPixelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestScreenInfo_getBitsPerPixel(request *IGuestScreenInfo_getBitsPerPixel) (*IGuestScreenInfo_getBitsPerPixelResponse, error) {
	return service.IGuestScreenInfo_getBitsPerPixelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestScreenInfo_getExtendedInfoContext(ctx context.Context, request *IGuestScreenInfo_getExtendedInfo) (*IGuestScreenInfo_getExtendedInfoResponse, error) {
	response := new(IGuestScreenInfo_getExtendedInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestScreenInfo_getExtendedInfo(request *IGuestScreenInfo_getExtendedInfo) (*IGuestScreenInfo_getExtendedInfoResponse, error) {
	return service.IGuestScreenInfo_getExtendedInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_getGuestScreenLayoutContext(ctx context.Context, request *IDisplay_getGuestScreenLayout) (*IDisplay_getGuestScreenLayoutResponse, error) {
	response := new(IDisplay_getGuestScreenLayoutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_getGuestScreenLayout(request *IDisplay_getGuestScreenLayout) (*IDisplay_getGuestScreenLayoutResponse, error) {
	return service.IDisplay_getGuestScreenLayoutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_getScreenResolutionContext(ctx context.Context, request *IDisplay_getScreenResolution) (*IDisplay_getScreenResolutionResponse, error) {
	response := new(IDisplay_getScreenResolutionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_getScreenResolution(request *IDisplay_getScreenResolution) (*IDisplay_getScreenResolutionResponse, error) {
	return service.IDisplay_getScreenResolutionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_attachFramebufferContext(ctx context.Context, request *IDisplay_attachFramebuffer) (*IDisplay_attachFramebufferResponse, error) {
	response := new(IDisplay_attachFramebufferResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_attachFramebuffer(request *IDisplay_attachFramebuffer) (*IDisplay_attachFramebufferResponse, error) {
	return service.IDisplay_attachFramebufferContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_detachFramebufferContext(ctx context.Context, request *IDisplay_detachFramebuffer) (*IDisplay_detachFramebufferResponse, error) {
	response := new(IDisplay_detachFramebufferResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_detachFramebuffer(request *IDisplay_detachFramebuffer) (*IDisplay_detachFramebufferResponse, error) {
	return service.IDisplay_detachFramebufferContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_queryFramebufferContext(ctx context.Context, request *IDisplay_queryFramebuffer) (*IDisplay_queryFramebufferResponse, error) {
	response := new(IDisplay_queryFramebufferResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_queryFramebuffer(request *IDisplay_queryFramebuffer) (*IDisplay_queryFramebufferResponse, error) {
	return service.IDisplay_queryFramebufferContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_setVideoModeHintContext(ctx context.Context, request *IDisplay_setVideoModeHint) (*IDisplay_setVideoModeHintResponse, error) {
	response := new(IDisplay_setVideoModeHintResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_setVideoModeHint(request *IDisplay_setVideoModeHint) (*IDisplay_setVideoModeHintResponse, error) {
	return service.IDisplay_setVideoModeHintContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_getVideoModeHintContext(ctx context.Context, request *IDisplay_getVideoModeHint) (*IDisplay_getVideoModeHintResponse, error) {
	response := new(IDisplay_getVideoModeHintResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_getVideoModeHint(request *IDisplay_getVideoModeHint) (*IDisplay_getVideoModeHintResponse, error) {
	return service.IDisplay_getVideoModeHintContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_setSeamlessModeContext(ctx context.Context, request *IDisplay_setSeamlessMode) (*IDisplay_setSeamlessModeResponse, error) {
	response := new(IDisplay_setSeamlessModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_setSeamlessMode(request *IDisplay_setSeamlessMode) (*IDisplay_setSeamlessModeResponse, error) {
	return service.IDisplay_setSeamlessModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_takeScreenShotToArrayContext(ctx context.Context, request *IDisplay_takeScreenShotToArray) (*IDisplay_takeScreenShotToArrayResponse, error) {
	response := new(IDisplay_takeScreenShotToArrayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_takeScreenShotToArray(request *IDisplay_takeScreenShotToArray) (*IDisplay_takeScreenShotToArrayResponse, error) {
	return service.IDisplay_takeScreenShotToArrayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_invalidateAndUpdateContext(ctx context.Context, request *IDisplay_invalidateAndUpdate) (*IDisplay_invalidateAndUpdateResponse, error) {
	response := new(IDisplay_invalidateAndUpdateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_invalidateAndUpdate(request *IDisplay_invalidateAndUpdate) (*IDisplay_invalidateAndUpdateResponse, error) {
	return service.IDisplay_invalidateAndUpdateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_invalidateAndUpdateScreenContext(ctx context.Context, request *IDisplay_invalidateAndUpdateScreen) (*IDisplay_invalidateAndUpdateScreenResponse, error) {
	response := new(IDisplay_invalidateAndUpdateScreenResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_invalidateAndUpdateScreen(request *IDisplay_invalidateAndUpdateScreen) (*IDisplay_invalidateAndUpdateScreenResponse, error) {
	return service.IDisplay_invalidateAndUpdateScreenContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_viewportChangedContext(ctx context.Context, request *IDisplay_viewportChanged) (*IDisplay_viewportChangedResponse, error) {
	response := new(IDisplay_viewportChangedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_viewportChanged(request *IDisplay_viewportChanged) (*IDisplay_viewportChangedResponse, error) {
	return service.IDisplay_viewportChangedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_notifyScaleFactorChangeContext(ctx context.Context, request *IDisplay_notifyScaleFactorChange) (*IDisplay_notifyScaleFactorChangeResponse, error) {
	response := new(IDisplay_notifyScaleFactorChangeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_notifyScaleFactorChange(request *IDisplay_notifyScaleFactorChange) (*IDisplay_notifyScaleFactorChangeResponse, error) {
	return service.IDisplay_notifyScaleFactorChangeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_notifyHiDPIOutputPolicyChangeContext(ctx context.Context, request *IDisplay_notifyHiDPIOutputPolicyChange) (*IDisplay_notifyHiDPIOutputPolicyChangeResponse, error) {
	response := new(IDisplay_notifyHiDPIOutputPolicyChangeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_notifyHiDPIOutputPolicyChange(request *IDisplay_notifyHiDPIOutputPolicyChange) (*IDisplay_notifyHiDPIOutputPolicyChangeResponse, error) {
	return service.IDisplay_notifyHiDPIOutputPolicyChangeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_setScreenLayoutContext(ctx context.Context, request *IDisplay_setScreenLayout) (*IDisplay_setScreenLayoutResponse, error) {
	response := new(IDisplay_setScreenLayoutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_setScreenLayout(request *IDisplay_setScreenLayout) (*IDisplay_setScreenLayoutResponse, error) {
	return service.IDisplay_setScreenLayoutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_detachScreensContext(ctx context.Context, request *IDisplay_detachScreens) (*IDisplay_detachScreensResponse, error) {
	response := new(IDisplay_detachScreensResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_detachScreens(request *IDisplay_detachScreens) (*IDisplay_detachScreensResponse, error) {
	return service.IDisplay_detachScreensContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDisplay_createGuestScreenInfoContext(ctx context.Context, request *IDisplay_createGuestScreenInfo) (*IDisplay_createGuestScreenInfoResponse, error) {
	response := new(IDisplay_createGuestScreenInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDisplay_createGuestScreenInfo(request *IDisplay_createGuestScreenInfo) (*IDisplay_createGuestScreenInfoResponse, error) {
	return service.IDisplay_createGuestScreenInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getAdapterTypeContext(ctx context.Context, request *INetworkAdapter_getAdapterType) (*INetworkAdapter_getAdapterTypeResponse, error) {
	response := new(INetworkAdapter_getAdapterTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getAdapterType(request *INetworkAdapter_getAdapterType) (*INetworkAdapter_getAdapterTypeResponse, error) {
	return service.INetworkAdapter_getAdapterTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setAdapterTypeContext(ctx context.Context, request *INetworkAdapter_setAdapterType) (*INetworkAdapter_setAdapterTypeResponse, error) {
	response := new(INetworkAdapter_setAdapterTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setAdapterType(request *INetworkAdapter_setAdapterType) (*INetworkAdapter_setAdapterTypeResponse, error) {
	return service.INetworkAdapter_setAdapterTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getSlotContext(ctx context.Context, request *INetworkAdapter_getSlot) (*INetworkAdapter_getSlotResponse, error) {
	response := new(INetworkAdapter_getSlotResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getSlot(request *INetworkAdapter_getSlot) (*INetworkAdapter_getSlotResponse, error) {
	return service.INetworkAdapter_getSlotContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getEnabledContext(ctx context.Context, request *INetworkAdapter_getEnabled) (*INetworkAdapter_getEnabledResponse, error) {
	response := new(INetworkAdapter_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getEnabled(request *INetworkAdapter_getEnabled) (*INetworkAdapter_getEnabledResponse, error) {
	return service.INetworkAdapter_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setEnabledContext(ctx context.Context, request *INetworkAdapter_setEnabled) (*INetworkAdapter_setEnabledResponse, error) {
	response := new(INetworkAdapter_setEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setEnabled(request *INetworkAdapter_setEnabled) (*INetworkAdapter_setEnabledResponse, error) {
	return service.INetworkAdapter_setEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getMACAddressContext(ctx context.Context, request *INetworkAdapter_getMACAddress) (*INetworkAdapter_getMACAddressResponse, error) {
	response := new(INetworkAdapter_getMACAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getMACAddress(request *INetworkAdapter_getMACAddress) (*INetworkAdapter_getMACAddressResponse, error) {
	return service.INetworkAdapter_getMACAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setMACAddressContext(ctx context.Context, request *INetworkAdapter_setMACAddress) (*INetworkAdapter_setMACAddressResponse, error) {
	response := new(INetworkAdapter_setMACAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setMACAddress(request *INetworkAdapter_setMACAddress) (*INetworkAdapter_setMACAddressResponse, error) {
	return service.INetworkAdapter_setMACAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getAttachmentTypeContext(ctx context.Context, request *INetworkAdapter_getAttachmentType) (*INetworkAdapter_getAttachmentTypeResponse, error) {
	response := new(INetworkAdapter_getAttachmentTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getAttachmentType(request *INetworkAdapter_getAttachmentType) (*INetworkAdapter_getAttachmentTypeResponse, error) {
	return service.INetworkAdapter_getAttachmentTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setAttachmentTypeContext(ctx context.Context, request *INetworkAdapter_setAttachmentType) (*INetworkAdapter_setAttachmentTypeResponse, error) {
	response := new(INetworkAdapter_setAttachmentTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setAttachmentType(request *INetworkAdapter_setAttachmentType) (*INetworkAdapter_setAttachmentTypeResponse, error) {
	return service.INetworkAdapter_setAttachmentTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getBridgedInterfaceContext(ctx context.Context, request *INetworkAdapter_getBridgedInterface) (*INetworkAdapter_getBridgedInterfaceResponse, error) {
	response := new(INetworkAdapter_getBridgedInterfaceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getBridgedInterface(request *INetworkAdapter_getBridgedInterface) (*INetworkAdapter_getBridgedInterfaceResponse, error) {
	return service.INetworkAdapter_getBridgedInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setBridgedInterfaceContext(ctx context.Context, request *INetworkAdapter_setBridgedInterface) (*INetworkAdapter_setBridgedInterfaceResponse, error) {
	response := new(INetworkAdapter_setBridgedInterfaceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setBridgedInterface(request *INetworkAdapter_setBridgedInterface) (*INetworkAdapter_setBridgedInterfaceResponse, error) {
	return service.INetworkAdapter_setBridgedInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getHostOnlyInterfaceContext(ctx context.Context, request *INetworkAdapter_getHostOnlyInterface) (*INetworkAdapter_getHostOnlyInterfaceResponse, error) {
	response := new(INetworkAdapter_getHostOnlyInterfaceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getHostOnlyInterface(request *INetworkAdapter_getHostOnlyInterface) (*INetworkAdapter_getHostOnlyInterfaceResponse, error) {
	return service.INetworkAdapter_getHostOnlyInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setHostOnlyInterfaceContext(ctx context.Context, request *INetworkAdapter_setHostOnlyInterface) (*INetworkAdapter_setHostOnlyInterfaceResponse, error) {
	response := new(INetworkAdapter_setHostOnlyInterfaceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setHostOnlyInterface(request *INetworkAdapter_setHostOnlyInterface) (*INetworkAdapter_setHostOnlyInterfaceResponse, error) {
	return service.INetworkAdapter_setHostOnlyInterfaceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getHostOnlyNetworkContext(ctx context.Context, request *INetworkAdapter_getHostOnlyNetwork) (*INetworkAdapter_getHostOnlyNetworkResponse, error) {
	response := new(INetworkAdapter_getHostOnlyNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getHostOnlyNetwork(request *INetworkAdapter_getHostOnlyNetwork) (*INetworkAdapter_getHostOnlyNetworkResponse, error) {
	return service.INetworkAdapter_getHostOnlyNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setHostOnlyNetworkContext(ctx context.Context, request *INetworkAdapter_setHostOnlyNetwork) (*INetworkAdapter_setHostOnlyNetworkResponse, error) {
	response := new(INetworkAdapter_setHostOnlyNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setHostOnlyNetwork(request *INetworkAdapter_setHostOnlyNetwork) (*INetworkAdapter_setHostOnlyNetworkResponse, error) {
	return service.INetworkAdapter_setHostOnlyNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getInternalNetworkContext(ctx context.Context, request *INetworkAdapter_getInternalNetwork) (*INetworkAdapter_getInternalNetworkResponse, error) {
	response := new(INetworkAdapter_getInternalNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getInternalNetwork(request *INetworkAdapter_getInternalNetwork) (*INetworkAdapter_getInternalNetworkResponse, error) {
	return service.INetworkAdapter_getInternalNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setInternalNetworkContext(ctx context.Context, request *INetworkAdapter_setInternalNetwork) (*INetworkAdapter_setInternalNetworkResponse, error) {
	response := new(INetworkAdapter_setInternalNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setInternalNetwork(request *INetworkAdapter_setInternalNetwork) (*INetworkAdapter_setInternalNetworkResponse, error) {
	return service.INetworkAdapter_setInternalNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getNATNetworkContext(ctx context.Context, request *INetworkAdapter_getNATNetwork) (*INetworkAdapter_getNATNetworkResponse, error) {
	response := new(INetworkAdapter_getNATNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getNATNetwork(request *INetworkAdapter_getNATNetwork) (*INetworkAdapter_getNATNetworkResponse, error) {
	return service.INetworkAdapter_getNATNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setNATNetworkContext(ctx context.Context, request *INetworkAdapter_setNATNetwork) (*INetworkAdapter_setNATNetworkResponse, error) {
	response := new(INetworkAdapter_setNATNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setNATNetwork(request *INetworkAdapter_setNATNetwork) (*INetworkAdapter_setNATNetworkResponse, error) {
	return service.INetworkAdapter_setNATNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getGenericDriverContext(ctx context.Context, request *INetworkAdapter_getGenericDriver) (*INetworkAdapter_getGenericDriverResponse, error) {
	response := new(INetworkAdapter_getGenericDriverResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getGenericDriver(request *INetworkAdapter_getGenericDriver) (*INetworkAdapter_getGenericDriverResponse, error) {
	return service.INetworkAdapter_getGenericDriverContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setGenericDriverContext(ctx context.Context, request *INetworkAdapter_setGenericDriver) (*INetworkAdapter_setGenericDriverResponse, error) {
	response := new(INetworkAdapter_setGenericDriverResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setGenericDriver(request *INetworkAdapter_setGenericDriver) (*INetworkAdapter_setGenericDriverResponse, error) {
	return service.INetworkAdapter_setGenericDriverContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getCloudNetworkContext(ctx context.Context, request *INetworkAdapter_getCloudNetwork) (*INetworkAdapter_getCloudNetworkResponse, error) {
	response := new(INetworkAdapter_getCloudNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getCloudNetwork(request *INetworkAdapter_getCloudNetwork) (*INetworkAdapter_getCloudNetworkResponse, error) {
	return service.INetworkAdapter_getCloudNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setCloudNetworkContext(ctx context.Context, request *INetworkAdapter_setCloudNetwork) (*INetworkAdapter_setCloudNetworkResponse, error) {
	response := new(INetworkAdapter_setCloudNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setCloudNetwork(request *INetworkAdapter_setCloudNetwork) (*INetworkAdapter_setCloudNetworkResponse, error) {
	return service.INetworkAdapter_setCloudNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getCableConnectedContext(ctx context.Context, request *INetworkAdapter_getCableConnected) (*INetworkAdapter_getCableConnectedResponse, error) {
	response := new(INetworkAdapter_getCableConnectedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getCableConnected(request *INetworkAdapter_getCableConnected) (*INetworkAdapter_getCableConnectedResponse, error) {
	return service.INetworkAdapter_getCableConnectedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setCableConnectedContext(ctx context.Context, request *INetworkAdapter_setCableConnected) (*INetworkAdapter_setCableConnectedResponse, error) {
	response := new(INetworkAdapter_setCableConnectedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setCableConnected(request *INetworkAdapter_setCableConnected) (*INetworkAdapter_setCableConnectedResponse, error) {
	return service.INetworkAdapter_setCableConnectedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getLineSpeedContext(ctx context.Context, request *INetworkAdapter_getLineSpeed) (*INetworkAdapter_getLineSpeedResponse, error) {
	response := new(INetworkAdapter_getLineSpeedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getLineSpeed(request *INetworkAdapter_getLineSpeed) (*INetworkAdapter_getLineSpeedResponse, error) {
	return service.INetworkAdapter_getLineSpeedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setLineSpeedContext(ctx context.Context, request *INetworkAdapter_setLineSpeed) (*INetworkAdapter_setLineSpeedResponse, error) {
	response := new(INetworkAdapter_setLineSpeedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setLineSpeed(request *INetworkAdapter_setLineSpeed) (*INetworkAdapter_setLineSpeedResponse, error) {
	return service.INetworkAdapter_setLineSpeedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getPromiscModePolicyContext(ctx context.Context, request *INetworkAdapter_getPromiscModePolicy) (*INetworkAdapter_getPromiscModePolicyResponse, error) {
	response := new(INetworkAdapter_getPromiscModePolicyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getPromiscModePolicy(request *INetworkAdapter_getPromiscModePolicy) (*INetworkAdapter_getPromiscModePolicyResponse, error) {
	return service.INetworkAdapter_getPromiscModePolicyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setPromiscModePolicyContext(ctx context.Context, request *INetworkAdapter_setPromiscModePolicy) (*INetworkAdapter_setPromiscModePolicyResponse, error) {
	response := new(INetworkAdapter_setPromiscModePolicyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setPromiscModePolicy(request *INetworkAdapter_setPromiscModePolicy) (*INetworkAdapter_setPromiscModePolicyResponse, error) {
	return service.INetworkAdapter_setPromiscModePolicyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getTraceEnabledContext(ctx context.Context, request *INetworkAdapter_getTraceEnabled) (*INetworkAdapter_getTraceEnabledResponse, error) {
	response := new(INetworkAdapter_getTraceEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getTraceEnabled(request *INetworkAdapter_getTraceEnabled) (*INetworkAdapter_getTraceEnabledResponse, error) {
	return service.INetworkAdapter_getTraceEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setTraceEnabledContext(ctx context.Context, request *INetworkAdapter_setTraceEnabled) (*INetworkAdapter_setTraceEnabledResponse, error) {
	response := new(INetworkAdapter_setTraceEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setTraceEnabled(request *INetworkAdapter_setTraceEnabled) (*INetworkAdapter_setTraceEnabledResponse, error) {
	return service.INetworkAdapter_setTraceEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getTraceFileContext(ctx context.Context, request *INetworkAdapter_getTraceFile) (*INetworkAdapter_getTraceFileResponse, error) {
	response := new(INetworkAdapter_getTraceFileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getTraceFile(request *INetworkAdapter_getTraceFile) (*INetworkAdapter_getTraceFileResponse, error) {
	return service.INetworkAdapter_getTraceFileContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setTraceFileContext(ctx context.Context, request *INetworkAdapter_setTraceFile) (*INetworkAdapter_setTraceFileResponse, error) {
	response := new(INetworkAdapter_setTraceFileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setTraceFile(request *INetworkAdapter_setTraceFile) (*INetworkAdapter_setTraceFileResponse, error) {
	return service.INetworkAdapter_setTraceFileContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getNATEngineContext(ctx context.Context, request *INetworkAdapter_getNATEngine) (*INetworkAdapter_getNATEngineResponse, error) {
	response := new(INetworkAdapter_getNATEngineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getNATEngine(request *INetworkAdapter_getNATEngine) (*INetworkAdapter_getNATEngineResponse, error) {
	return service.INetworkAdapter_getNATEngineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getBootPriorityContext(ctx context.Context, request *INetworkAdapter_getBootPriority) (*INetworkAdapter_getBootPriorityResponse, error) {
	response := new(INetworkAdapter_getBootPriorityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getBootPriority(request *INetworkAdapter_getBootPriority) (*INetworkAdapter_getBootPriorityResponse, error) {
	return service.INetworkAdapter_getBootPriorityContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setBootPriorityContext(ctx context.Context, request *INetworkAdapter_setBootPriority) (*INetworkAdapter_setBootPriorityResponse, error) {
	response := new(INetworkAdapter_setBootPriorityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setBootPriority(request *INetworkAdapter_setBootPriority) (*INetworkAdapter_setBootPriorityResponse, error) {
	return service.INetworkAdapter_setBootPriorityContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getBandwidthGroupContext(ctx context.Context, request *INetworkAdapter_getBandwidthGroup) (*INetworkAdapter_getBandwidthGroupResponse, error) {
	response := new(INetworkAdapter_getBandwidthGroupResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getBandwidthGroup(request *INetworkAdapter_getBandwidthGroup) (*INetworkAdapter_getBandwidthGroupResponse, error) {
	return service.INetworkAdapter_getBandwidthGroupContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setBandwidthGroupContext(ctx context.Context, request *INetworkAdapter_setBandwidthGroup) (*INetworkAdapter_setBandwidthGroupResponse, error) {
	response := new(INetworkAdapter_setBandwidthGroupResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setBandwidthGroup(request *INetworkAdapter_setBandwidthGroup) (*INetworkAdapter_setBandwidthGroupResponse, error) {
	return service.INetworkAdapter_setBandwidthGroupContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getPropertyContext(ctx context.Context, request *INetworkAdapter_getProperty) (*INetworkAdapter_getPropertyResponse, error) {
	response := new(INetworkAdapter_getPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getProperty(request *INetworkAdapter_getProperty) (*INetworkAdapter_getPropertyResponse, error) {
	return service.INetworkAdapter_getPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_setPropertyContext(ctx context.Context, request *INetworkAdapter_setProperty) (*INetworkAdapter_setPropertyResponse, error) {
	response := new(INetworkAdapter_setPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_setProperty(request *INetworkAdapter_setProperty) (*INetworkAdapter_setPropertyResponse, error) {
	return service.INetworkAdapter_setPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapter_getPropertiesContext(ctx context.Context, request *INetworkAdapter_getProperties) (*INetworkAdapter_getPropertiesResponse, error) {
	response := new(INetworkAdapter_getPropertiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapter_getProperties(request *INetworkAdapter_getProperties) (*INetworkAdapter_getPropertiesResponse, error) {
	return service.INetworkAdapter_getPropertiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_getSlotContext(ctx context.Context, request *ISerialPort_getSlot) (*ISerialPort_getSlotResponse, error) {
	response := new(ISerialPort_getSlotResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_getSlot(request *ISerialPort_getSlot) (*ISerialPort_getSlotResponse, error) {
	return service.ISerialPort_getSlotContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_getEnabledContext(ctx context.Context, request *ISerialPort_getEnabled) (*ISerialPort_getEnabledResponse, error) {
	response := new(ISerialPort_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_getEnabled(request *ISerialPort_getEnabled) (*ISerialPort_getEnabledResponse, error) {
	return service.ISerialPort_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_setEnabledContext(ctx context.Context, request *ISerialPort_setEnabled) (*ISerialPort_setEnabledResponse, error) {
	response := new(ISerialPort_setEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_setEnabled(request *ISerialPort_setEnabled) (*ISerialPort_setEnabledResponse, error) {
	return service.ISerialPort_setEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_getIOBaseContext(ctx context.Context, request *ISerialPort_getIOBase) (*ISerialPort_getIOBaseResponse, error) {
	response := new(ISerialPort_getIOBaseResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_getIOBase(request *ISerialPort_getIOBase) (*ISerialPort_getIOBaseResponse, error) {
	return service.ISerialPort_getIOBaseContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_setIOBaseContext(ctx context.Context, request *ISerialPort_setIOBase) (*ISerialPort_setIOBaseResponse, error) {
	response := new(ISerialPort_setIOBaseResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_setIOBase(request *ISerialPort_setIOBase) (*ISerialPort_setIOBaseResponse, error) {
	return service.ISerialPort_setIOBaseContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_getIRQContext(ctx context.Context, request *ISerialPort_getIRQ) (*ISerialPort_getIRQResponse, error) {
	response := new(ISerialPort_getIRQResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_getIRQ(request *ISerialPort_getIRQ) (*ISerialPort_getIRQResponse, error) {
	return service.ISerialPort_getIRQContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_setIRQContext(ctx context.Context, request *ISerialPort_setIRQ) (*ISerialPort_setIRQResponse, error) {
	response := new(ISerialPort_setIRQResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_setIRQ(request *ISerialPort_setIRQ) (*ISerialPort_setIRQResponse, error) {
	return service.ISerialPort_setIRQContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_getHostModeContext(ctx context.Context, request *ISerialPort_getHostMode) (*ISerialPort_getHostModeResponse, error) {
	response := new(ISerialPort_getHostModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_getHostMode(request *ISerialPort_getHostMode) (*ISerialPort_getHostModeResponse, error) {
	return service.ISerialPort_getHostModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_setHostModeContext(ctx context.Context, request *ISerialPort_setHostMode) (*ISerialPort_setHostModeResponse, error) {
	response := new(ISerialPort_setHostModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_setHostMode(request *ISerialPort_setHostMode) (*ISerialPort_setHostModeResponse, error) {
	return service.ISerialPort_setHostModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_getServerContext(ctx context.Context, request *ISerialPort_getServer) (*ISerialPort_getServerResponse, error) {
	response := new(ISerialPort_getServerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_getServer(request *ISerialPort_getServer) (*ISerialPort_getServerResponse, error) {
	return service.ISerialPort_getServerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_setServerContext(ctx context.Context, request *ISerialPort_setServer) (*ISerialPort_setServerResponse, error) {
	response := new(ISerialPort_setServerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_setServer(request *ISerialPort_setServer) (*ISerialPort_setServerResponse, error) {
	return service.ISerialPort_setServerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_getPathContext(ctx context.Context, request *ISerialPort_getPath) (*ISerialPort_getPathResponse, error) {
	response := new(ISerialPort_getPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_getPath(request *ISerialPort_getPath) (*ISerialPort_getPathResponse, error) {
	return service.ISerialPort_getPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_setPathContext(ctx context.Context, request *ISerialPort_setPath) (*ISerialPort_setPathResponse, error) {
	response := new(ISerialPort_setPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_setPath(request *ISerialPort_setPath) (*ISerialPort_setPathResponse, error) {
	return service.ISerialPort_setPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_getUartTypeContext(ctx context.Context, request *ISerialPort_getUartType) (*ISerialPort_getUartTypeResponse, error) {
	response := new(ISerialPort_getUartTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_getUartType(request *ISerialPort_getUartType) (*ISerialPort_getUartTypeResponse, error) {
	return service.ISerialPort_getUartTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPort_setUartTypeContext(ctx context.Context, request *ISerialPort_setUartType) (*ISerialPort_setUartTypeResponse, error) {
	response := new(ISerialPort_setUartTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPort_setUartType(request *ISerialPort_setUartType) (*ISerialPort_setUartTypeResponse, error) {
	return service.ISerialPort_setUartTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IParallelPort_getSlotContext(ctx context.Context, request *IParallelPort_getSlot) (*IParallelPort_getSlotResponse, error) {
	response := new(IParallelPort_getSlotResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IParallelPort_getSlot(request *IParallelPort_getSlot) (*IParallelPort_getSlotResponse, error) {
	return service.IParallelPort_getSlotContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IParallelPort_getEnabledContext(ctx context.Context, request *IParallelPort_getEnabled) (*IParallelPort_getEnabledResponse, error) {
	response := new(IParallelPort_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IParallelPort_getEnabled(request *IParallelPort_getEnabled) (*IParallelPort_getEnabledResponse, error) {
	return service.IParallelPort_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IParallelPort_setEnabledContext(ctx context.Context, request *IParallelPort_setEnabled) (*IParallelPort_setEnabledResponse, error) {
	response := new(IParallelPort_setEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IParallelPort_setEnabled(request *IParallelPort_setEnabled) (*IParallelPort_setEnabledResponse, error) {
	return service.IParallelPort_setEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IParallelPort_getIOBaseContext(ctx context.Context, request *IParallelPort_getIOBase) (*IParallelPort_getIOBaseResponse, error) {
	response := new(IParallelPort_getIOBaseResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IParallelPort_getIOBase(request *IParallelPort_getIOBase) (*IParallelPort_getIOBaseResponse, error) {
	return service.IParallelPort_getIOBaseContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IParallelPort_setIOBaseContext(ctx context.Context, request *IParallelPort_setIOBase) (*IParallelPort_setIOBaseResponse, error) {
	response := new(IParallelPort_setIOBaseResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IParallelPort_setIOBase(request *IParallelPort_setIOBase) (*IParallelPort_setIOBaseResponse, error) {
	return service.IParallelPort_setIOBaseContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IParallelPort_getIRQContext(ctx context.Context, request *IParallelPort_getIRQ) (*IParallelPort_getIRQResponse, error) {
	response := new(IParallelPort_getIRQResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IParallelPort_getIRQ(request *IParallelPort_getIRQ) (*IParallelPort_getIRQResponse, error) {
	return service.IParallelPort_getIRQContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IParallelPort_setIRQContext(ctx context.Context, request *IParallelPort_setIRQ) (*IParallelPort_setIRQResponse, error) {
	response := new(IParallelPort_setIRQResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IParallelPort_setIRQ(request *IParallelPort_setIRQ) (*IParallelPort_setIRQResponse, error) {
	return service.IParallelPort_setIRQContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IParallelPort_getPathContext(ctx context.Context, request *IParallelPort_getPath) (*IParallelPort_getPathResponse, error) {
	response := new(IParallelPort_getPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IParallelPort_getPath(request *IParallelPort_getPath) (*IParallelPort_getPathResponse, error) {
	return service.IParallelPort_getPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IParallelPort_setPathContext(ctx context.Context, request *IParallelPort_setPath) (*IParallelPort_setPathResponse, error) {
	response := new(IParallelPort_setPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IParallelPort_setPath(request *IParallelPort_setPath) (*IParallelPort_setPathResponse, error) {
	return service.IParallelPort_setPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getSingleStepContext(ctx context.Context, request *IMachineDebugger_getSingleStep) (*IMachineDebugger_getSingleStepResponse, error) {
	response := new(IMachineDebugger_getSingleStepResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getSingleStep(request *IMachineDebugger_getSingleStep) (*IMachineDebugger_getSingleStepResponse, error) {
	return service.IMachineDebugger_getSingleStepContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_setSingleStepContext(ctx context.Context, request *IMachineDebugger_setSingleStep) (*IMachineDebugger_setSingleStepResponse, error) {
	response := new(IMachineDebugger_setSingleStepResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_setSingleStep(request *IMachineDebugger_setSingleStep) (*IMachineDebugger_setSingleStepResponse, error) {
	return service.IMachineDebugger_setSingleStepContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getExecuteAllInIEMContext(ctx context.Context, request *IMachineDebugger_getExecuteAllInIEM) (*IMachineDebugger_getExecuteAllInIEMResponse, error) {
	response := new(IMachineDebugger_getExecuteAllInIEMResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getExecuteAllInIEM(request *IMachineDebugger_getExecuteAllInIEM) (*IMachineDebugger_getExecuteAllInIEMResponse, error) {
	return service.IMachineDebugger_getExecuteAllInIEMContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_setExecuteAllInIEMContext(ctx context.Context, request *IMachineDebugger_setExecuteAllInIEM) (*IMachineDebugger_setExecuteAllInIEMResponse, error) {
	response := new(IMachineDebugger_setExecuteAllInIEMResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_setExecuteAllInIEM(request *IMachineDebugger_setExecuteAllInIEM) (*IMachineDebugger_setExecuteAllInIEMResponse, error) {
	return service.IMachineDebugger_setExecuteAllInIEMContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getLogEnabledContext(ctx context.Context, request *IMachineDebugger_getLogEnabled) (*IMachineDebugger_getLogEnabledResponse, error) {
	response := new(IMachineDebugger_getLogEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getLogEnabled(request *IMachineDebugger_getLogEnabled) (*IMachineDebugger_getLogEnabledResponse, error) {
	return service.IMachineDebugger_getLogEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_setLogEnabledContext(ctx context.Context, request *IMachineDebugger_setLogEnabled) (*IMachineDebugger_setLogEnabledResponse, error) {
	response := new(IMachineDebugger_setLogEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_setLogEnabled(request *IMachineDebugger_setLogEnabled) (*IMachineDebugger_setLogEnabledResponse, error) {
	return service.IMachineDebugger_setLogEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getLogDbgFlagsContext(ctx context.Context, request *IMachineDebugger_getLogDbgFlags) (*IMachineDebugger_getLogDbgFlagsResponse, error) {
	response := new(IMachineDebugger_getLogDbgFlagsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getLogDbgFlags(request *IMachineDebugger_getLogDbgFlags) (*IMachineDebugger_getLogDbgFlagsResponse, error) {
	return service.IMachineDebugger_getLogDbgFlagsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getLogDbgGroupsContext(ctx context.Context, request *IMachineDebugger_getLogDbgGroups) (*IMachineDebugger_getLogDbgGroupsResponse, error) {
	response := new(IMachineDebugger_getLogDbgGroupsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getLogDbgGroups(request *IMachineDebugger_getLogDbgGroups) (*IMachineDebugger_getLogDbgGroupsResponse, error) {
	return service.IMachineDebugger_getLogDbgGroupsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getLogDbgDestinationsContext(ctx context.Context, request *IMachineDebugger_getLogDbgDestinations) (*IMachineDebugger_getLogDbgDestinationsResponse, error) {
	response := new(IMachineDebugger_getLogDbgDestinationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getLogDbgDestinations(request *IMachineDebugger_getLogDbgDestinations) (*IMachineDebugger_getLogDbgDestinationsResponse, error) {
	return service.IMachineDebugger_getLogDbgDestinationsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getLogRelFlagsContext(ctx context.Context, request *IMachineDebugger_getLogRelFlags) (*IMachineDebugger_getLogRelFlagsResponse, error) {
	response := new(IMachineDebugger_getLogRelFlagsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getLogRelFlags(request *IMachineDebugger_getLogRelFlags) (*IMachineDebugger_getLogRelFlagsResponse, error) {
	return service.IMachineDebugger_getLogRelFlagsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getLogRelGroupsContext(ctx context.Context, request *IMachineDebugger_getLogRelGroups) (*IMachineDebugger_getLogRelGroupsResponse, error) {
	response := new(IMachineDebugger_getLogRelGroupsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getLogRelGroups(request *IMachineDebugger_getLogRelGroups) (*IMachineDebugger_getLogRelGroupsResponse, error) {
	return service.IMachineDebugger_getLogRelGroupsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getLogRelDestinationsContext(ctx context.Context, request *IMachineDebugger_getLogRelDestinations) (*IMachineDebugger_getLogRelDestinationsResponse, error) {
	response := new(IMachineDebugger_getLogRelDestinationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getLogRelDestinations(request *IMachineDebugger_getLogRelDestinations) (*IMachineDebugger_getLogRelDestinationsResponse, error) {
	return service.IMachineDebugger_getLogRelDestinationsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getExecutionEngineContext(ctx context.Context, request *IMachineDebugger_getExecutionEngine) (*IMachineDebugger_getExecutionEngineResponse, error) {
	response := new(IMachineDebugger_getExecutionEngineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getExecutionEngine(request *IMachineDebugger_getExecutionEngine) (*IMachineDebugger_getExecutionEngineResponse, error) {
	return service.IMachineDebugger_getExecutionEngineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getHWVirtExNestedPagingEnabledContext(ctx context.Context, request *IMachineDebugger_getHWVirtExNestedPagingEnabled) (*IMachineDebugger_getHWVirtExNestedPagingEnabledResponse, error) {
	response := new(IMachineDebugger_getHWVirtExNestedPagingEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getHWVirtExNestedPagingEnabled(request *IMachineDebugger_getHWVirtExNestedPagingEnabled) (*IMachineDebugger_getHWVirtExNestedPagingEnabledResponse, error) {
	return service.IMachineDebugger_getHWVirtExNestedPagingEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getHWVirtExVPIDEnabledContext(ctx context.Context, request *IMachineDebugger_getHWVirtExVPIDEnabled) (*IMachineDebugger_getHWVirtExVPIDEnabledResponse, error) {
	response := new(IMachineDebugger_getHWVirtExVPIDEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getHWVirtExVPIDEnabled(request *IMachineDebugger_getHWVirtExVPIDEnabled) (*IMachineDebugger_getHWVirtExVPIDEnabledResponse, error) {
	return service.IMachineDebugger_getHWVirtExVPIDEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getHWVirtExUXEnabledContext(ctx context.Context, request *IMachineDebugger_getHWVirtExUXEnabled) (*IMachineDebugger_getHWVirtExUXEnabledResponse, error) {
	response := new(IMachineDebugger_getHWVirtExUXEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getHWVirtExUXEnabled(request *IMachineDebugger_getHWVirtExUXEnabled) (*IMachineDebugger_getHWVirtExUXEnabledResponse, error) {
	return service.IMachineDebugger_getHWVirtExUXEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getOSNameContext(ctx context.Context, request *IMachineDebugger_getOSName) (*IMachineDebugger_getOSNameResponse, error) {
	response := new(IMachineDebugger_getOSNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getOSName(request *IMachineDebugger_getOSName) (*IMachineDebugger_getOSNameResponse, error) {
	return service.IMachineDebugger_getOSNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getOSVersionContext(ctx context.Context, request *IMachineDebugger_getOSVersion) (*IMachineDebugger_getOSVersionResponse, error) {
	response := new(IMachineDebugger_getOSVersionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getOSVersion(request *IMachineDebugger_getOSVersion) (*IMachineDebugger_getOSVersionResponse, error) {
	return service.IMachineDebugger_getOSVersionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getPAEEnabledContext(ctx context.Context, request *IMachineDebugger_getPAEEnabled) (*IMachineDebugger_getPAEEnabledResponse, error) {
	response := new(IMachineDebugger_getPAEEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getPAEEnabled(request *IMachineDebugger_getPAEEnabled) (*IMachineDebugger_getPAEEnabledResponse, error) {
	return service.IMachineDebugger_getPAEEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getVirtualTimeRateContext(ctx context.Context, request *IMachineDebugger_getVirtualTimeRate) (*IMachineDebugger_getVirtualTimeRateResponse, error) {
	response := new(IMachineDebugger_getVirtualTimeRateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getVirtualTimeRate(request *IMachineDebugger_getVirtualTimeRate) (*IMachineDebugger_getVirtualTimeRateResponse, error) {
	return service.IMachineDebugger_getVirtualTimeRateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_setVirtualTimeRateContext(ctx context.Context, request *IMachineDebugger_setVirtualTimeRate) (*IMachineDebugger_setVirtualTimeRateResponse, error) {
	response := new(IMachineDebugger_setVirtualTimeRateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_setVirtualTimeRate(request *IMachineDebugger_setVirtualTimeRate) (*IMachineDebugger_setVirtualTimeRateResponse, error) {
	return service.IMachineDebugger_setVirtualTimeRateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getUptimeContext(ctx context.Context, request *IMachineDebugger_getUptime) (*IMachineDebugger_getUptimeResponse, error) {
	response := new(IMachineDebugger_getUptimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getUptime(request *IMachineDebugger_getUptime) (*IMachineDebugger_getUptimeResponse, error) {
	return service.IMachineDebugger_getUptimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_dumpGuestCoreContext(ctx context.Context, request *IMachineDebugger_dumpGuestCore) (*IMachineDebugger_dumpGuestCoreResponse, error) {
	response := new(IMachineDebugger_dumpGuestCoreResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_dumpGuestCore(request *IMachineDebugger_dumpGuestCore) (*IMachineDebugger_dumpGuestCoreResponse, error) {
	return service.IMachineDebugger_dumpGuestCoreContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_dumpHostProcessCoreContext(ctx context.Context, request *IMachineDebugger_dumpHostProcessCore) (*IMachineDebugger_dumpHostProcessCoreResponse, error) {
	response := new(IMachineDebugger_dumpHostProcessCoreResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_dumpHostProcessCore(request *IMachineDebugger_dumpHostProcessCore) (*IMachineDebugger_dumpHostProcessCoreResponse, error) {
	return service.IMachineDebugger_dumpHostProcessCoreContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_infoContext(ctx context.Context, request *IMachineDebugger_info) (*IMachineDebugger_infoResponse, error) {
	response := new(IMachineDebugger_infoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_info(request *IMachineDebugger_info) (*IMachineDebugger_infoResponse, error) {
	return service.IMachineDebugger_infoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_injectNMIContext(ctx context.Context, request *IMachineDebugger_injectNMI) (*IMachineDebugger_injectNMIResponse, error) {
	response := new(IMachineDebugger_injectNMIResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_injectNMI(request *IMachineDebugger_injectNMI) (*IMachineDebugger_injectNMIResponse, error) {
	return service.IMachineDebugger_injectNMIContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_modifyLogGroupsContext(ctx context.Context, request *IMachineDebugger_modifyLogGroups) (*IMachineDebugger_modifyLogGroupsResponse, error) {
	response := new(IMachineDebugger_modifyLogGroupsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_modifyLogGroups(request *IMachineDebugger_modifyLogGroups) (*IMachineDebugger_modifyLogGroupsResponse, error) {
	return service.IMachineDebugger_modifyLogGroupsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_modifyLogFlagsContext(ctx context.Context, request *IMachineDebugger_modifyLogFlags) (*IMachineDebugger_modifyLogFlagsResponse, error) {
	response := new(IMachineDebugger_modifyLogFlagsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_modifyLogFlags(request *IMachineDebugger_modifyLogFlags) (*IMachineDebugger_modifyLogFlagsResponse, error) {
	return service.IMachineDebugger_modifyLogFlagsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_modifyLogDestinationsContext(ctx context.Context, request *IMachineDebugger_modifyLogDestinations) (*IMachineDebugger_modifyLogDestinationsResponse, error) {
	response := new(IMachineDebugger_modifyLogDestinationsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_modifyLogDestinations(request *IMachineDebugger_modifyLogDestinations) (*IMachineDebugger_modifyLogDestinationsResponse, error) {
	return service.IMachineDebugger_modifyLogDestinationsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_readPhysicalMemoryContext(ctx context.Context, request *IMachineDebugger_readPhysicalMemory) (*IMachineDebugger_readPhysicalMemoryResponse, error) {
	response := new(IMachineDebugger_readPhysicalMemoryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_readPhysicalMemory(request *IMachineDebugger_readPhysicalMemory) (*IMachineDebugger_readPhysicalMemoryResponse, error) {
	return service.IMachineDebugger_readPhysicalMemoryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_writePhysicalMemoryContext(ctx context.Context, request *IMachineDebugger_writePhysicalMemory) (*IMachineDebugger_writePhysicalMemoryResponse, error) {
	response := new(IMachineDebugger_writePhysicalMemoryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_writePhysicalMemory(request *IMachineDebugger_writePhysicalMemory) (*IMachineDebugger_writePhysicalMemoryResponse, error) {
	return service.IMachineDebugger_writePhysicalMemoryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_readVirtualMemoryContext(ctx context.Context, request *IMachineDebugger_readVirtualMemory) (*IMachineDebugger_readVirtualMemoryResponse, error) {
	response := new(IMachineDebugger_readVirtualMemoryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_readVirtualMemory(request *IMachineDebugger_readVirtualMemory) (*IMachineDebugger_readVirtualMemoryResponse, error) {
	return service.IMachineDebugger_readVirtualMemoryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_writeVirtualMemoryContext(ctx context.Context, request *IMachineDebugger_writeVirtualMemory) (*IMachineDebugger_writeVirtualMemoryResponse, error) {
	response := new(IMachineDebugger_writeVirtualMemoryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_writeVirtualMemory(request *IMachineDebugger_writeVirtualMemory) (*IMachineDebugger_writeVirtualMemoryResponse, error) {
	return service.IMachineDebugger_writeVirtualMemoryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_loadPlugInContext(ctx context.Context, request *IMachineDebugger_loadPlugIn) (*IMachineDebugger_loadPlugInResponse, error) {
	response := new(IMachineDebugger_loadPlugInResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_loadPlugIn(request *IMachineDebugger_loadPlugIn) (*IMachineDebugger_loadPlugInResponse, error) {
	return service.IMachineDebugger_loadPlugInContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_unloadPlugInContext(ctx context.Context, request *IMachineDebugger_unloadPlugIn) (*IMachineDebugger_unloadPlugInResponse, error) {
	response := new(IMachineDebugger_unloadPlugInResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_unloadPlugIn(request *IMachineDebugger_unloadPlugIn) (*IMachineDebugger_unloadPlugInResponse, error) {
	return service.IMachineDebugger_unloadPlugInContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_detectOSContext(ctx context.Context, request *IMachineDebugger_detectOS) (*IMachineDebugger_detectOSResponse, error) {
	response := new(IMachineDebugger_detectOSResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_detectOS(request *IMachineDebugger_detectOS) (*IMachineDebugger_detectOSResponse, error) {
	return service.IMachineDebugger_detectOSContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_queryOSKernelLogContext(ctx context.Context, request *IMachineDebugger_queryOSKernelLog) (*IMachineDebugger_queryOSKernelLogResponse, error) {
	response := new(IMachineDebugger_queryOSKernelLogResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_queryOSKernelLog(request *IMachineDebugger_queryOSKernelLog) (*IMachineDebugger_queryOSKernelLogResponse, error) {
	return service.IMachineDebugger_queryOSKernelLogContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getRegisterContext(ctx context.Context, request *IMachineDebugger_getRegister) (*IMachineDebugger_getRegisterResponse, error) {
	response := new(IMachineDebugger_getRegisterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getRegister(request *IMachineDebugger_getRegister) (*IMachineDebugger_getRegisterResponse, error) {
	return service.IMachineDebugger_getRegisterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getRegistersContext(ctx context.Context, request *IMachineDebugger_getRegisters) (*IMachineDebugger_getRegistersResponse, error) {
	response := new(IMachineDebugger_getRegistersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getRegisters(request *IMachineDebugger_getRegisters) (*IMachineDebugger_getRegistersResponse, error) {
	return service.IMachineDebugger_getRegistersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_setRegisterContext(ctx context.Context, request *IMachineDebugger_setRegister) (*IMachineDebugger_setRegisterResponse, error) {
	response := new(IMachineDebugger_setRegisterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_setRegister(request *IMachineDebugger_setRegister) (*IMachineDebugger_setRegisterResponse, error) {
	return service.IMachineDebugger_setRegisterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_setRegistersContext(ctx context.Context, request *IMachineDebugger_setRegisters) (*IMachineDebugger_setRegistersResponse, error) {
	response := new(IMachineDebugger_setRegistersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_setRegisters(request *IMachineDebugger_setRegisters) (*IMachineDebugger_setRegistersResponse, error) {
	return service.IMachineDebugger_setRegistersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_dumpGuestStackContext(ctx context.Context, request *IMachineDebugger_dumpGuestStack) (*IMachineDebugger_dumpGuestStackResponse, error) {
	response := new(IMachineDebugger_dumpGuestStackResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_dumpGuestStack(request *IMachineDebugger_dumpGuestStack) (*IMachineDebugger_dumpGuestStackResponse, error) {
	return service.IMachineDebugger_dumpGuestStackContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_resetStatsContext(ctx context.Context, request *IMachineDebugger_resetStats) (*IMachineDebugger_resetStatsResponse, error) {
	response := new(IMachineDebugger_resetStatsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_resetStats(request *IMachineDebugger_resetStats) (*IMachineDebugger_resetStatsResponse, error) {
	return service.IMachineDebugger_resetStatsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_dumpStatsContext(ctx context.Context, request *IMachineDebugger_dumpStats) (*IMachineDebugger_dumpStatsResponse, error) {
	response := new(IMachineDebugger_dumpStatsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_dumpStats(request *IMachineDebugger_dumpStats) (*IMachineDebugger_dumpStatsResponse, error) {
	return service.IMachineDebugger_dumpStatsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getStatsContext(ctx context.Context, request *IMachineDebugger_getStats) (*IMachineDebugger_getStatsResponse, error) {
	response := new(IMachineDebugger_getStatsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getStats(request *IMachineDebugger_getStats) (*IMachineDebugger_getStatsResponse, error) {
	return service.IMachineDebugger_getStatsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_getCPULoadContext(ctx context.Context, request *IMachineDebugger_getCPULoad) (*IMachineDebugger_getCPULoadResponse, error) {
	response := new(IMachineDebugger_getCPULoadResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_getCPULoad(request *IMachineDebugger_getCPULoad) (*IMachineDebugger_getCPULoadResponse, error) {
	return service.IMachineDebugger_getCPULoadContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDebugger_takeGuestSampleContext(ctx context.Context, request *IMachineDebugger_takeGuestSample) (*IMachineDebugger_takeGuestSampleResponse, error) {
	response := new(IMachineDebugger_takeGuestSampleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDebugger_takeGuestSample(request *IMachineDebugger_takeGuestSample) (*IMachineDebugger_takeGuestSampleResponse, error) {
	return service.IMachineDebugger_takeGuestSampleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilters_getDeviceFiltersContext(ctx context.Context, request *IUSBDeviceFilters_getDeviceFilters) (*IUSBDeviceFilters_getDeviceFiltersResponse, error) {
	response := new(IUSBDeviceFilters_getDeviceFiltersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilters_getDeviceFilters(request *IUSBDeviceFilters_getDeviceFilters) (*IUSBDeviceFilters_getDeviceFiltersResponse, error) {
	return service.IUSBDeviceFilters_getDeviceFiltersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilters_createDeviceFilterContext(ctx context.Context, request *IUSBDeviceFilters_createDeviceFilter) (*IUSBDeviceFilters_createDeviceFilterResponse, error) {
	response := new(IUSBDeviceFilters_createDeviceFilterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilters_createDeviceFilter(request *IUSBDeviceFilters_createDeviceFilter) (*IUSBDeviceFilters_createDeviceFilterResponse, error) {
	return service.IUSBDeviceFilters_createDeviceFilterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilters_insertDeviceFilterContext(ctx context.Context, request *IUSBDeviceFilters_insertDeviceFilter) (*IUSBDeviceFilters_insertDeviceFilterResponse, error) {
	response := new(IUSBDeviceFilters_insertDeviceFilterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilters_insertDeviceFilter(request *IUSBDeviceFilters_insertDeviceFilter) (*IUSBDeviceFilters_insertDeviceFilterResponse, error) {
	return service.IUSBDeviceFilters_insertDeviceFilterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilters_removeDeviceFilterContext(ctx context.Context, request *IUSBDeviceFilters_removeDeviceFilter) (*IUSBDeviceFilters_removeDeviceFilterResponse, error) {
	response := new(IUSBDeviceFilters_removeDeviceFilterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilters_removeDeviceFilter(request *IUSBDeviceFilters_removeDeviceFilter) (*IUSBDeviceFilters_removeDeviceFilterResponse, error) {
	return service.IUSBDeviceFilters_removeDeviceFilterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBController_getNameContext(ctx context.Context, request *IUSBController_getName) (*IUSBController_getNameResponse, error) {
	response := new(IUSBController_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBController_getName(request *IUSBController_getName) (*IUSBController_getNameResponse, error) {
	return service.IUSBController_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBController_setNameContext(ctx context.Context, request *IUSBController_setName) (*IUSBController_setNameResponse, error) {
	response := new(IUSBController_setNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBController_setName(request *IUSBController_setName) (*IUSBController_setNameResponse, error) {
	return service.IUSBController_setNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBController_getTypeContext(ctx context.Context, request *IUSBController_getType) (*IUSBController_getTypeResponse, error) {
	response := new(IUSBController_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBController_getType(request *IUSBController_getType) (*IUSBController_getTypeResponse, error) {
	return service.IUSBController_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBController_setTypeContext(ctx context.Context, request *IUSBController_setType) (*IUSBController_setTypeResponse, error) {
	response := new(IUSBController_setTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBController_setType(request *IUSBController_setType) (*IUSBController_setTypeResponse, error) {
	return service.IUSBController_setTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBController_getUSBStandardContext(ctx context.Context, request *IUSBController_getUSBStandard) (*IUSBController_getUSBStandardResponse, error) {
	response := new(IUSBController_getUSBStandardResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBController_getUSBStandard(request *IUSBController_getUSBStandard) (*IUSBController_getUSBStandardResponse, error) {
	return service.IUSBController_getUSBStandardContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getIdContext(ctx context.Context, request *IUSBDevice_getId) (*IUSBDevice_getIdResponse, error) {
	response := new(IUSBDevice_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getId(request *IUSBDevice_getId) (*IUSBDevice_getIdResponse, error) {
	return service.IUSBDevice_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getVendorIdContext(ctx context.Context, request *IUSBDevice_getVendorId) (*IUSBDevice_getVendorIdResponse, error) {
	response := new(IUSBDevice_getVendorIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getVendorId(request *IUSBDevice_getVendorId) (*IUSBDevice_getVendorIdResponse, error) {
	return service.IUSBDevice_getVendorIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getProductIdContext(ctx context.Context, request *IUSBDevice_getProductId) (*IUSBDevice_getProductIdResponse, error) {
	response := new(IUSBDevice_getProductIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getProductId(request *IUSBDevice_getProductId) (*IUSBDevice_getProductIdResponse, error) {
	return service.IUSBDevice_getProductIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getRevisionContext(ctx context.Context, request *IUSBDevice_getRevision) (*IUSBDevice_getRevisionResponse, error) {
	response := new(IUSBDevice_getRevisionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getRevision(request *IUSBDevice_getRevision) (*IUSBDevice_getRevisionResponse, error) {
	return service.IUSBDevice_getRevisionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getManufacturerContext(ctx context.Context, request *IUSBDevice_getManufacturer) (*IUSBDevice_getManufacturerResponse, error) {
	response := new(IUSBDevice_getManufacturerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getManufacturer(request *IUSBDevice_getManufacturer) (*IUSBDevice_getManufacturerResponse, error) {
	return service.IUSBDevice_getManufacturerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getProductContext(ctx context.Context, request *IUSBDevice_getProduct) (*IUSBDevice_getProductResponse, error) {
	response := new(IUSBDevice_getProductResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getProduct(request *IUSBDevice_getProduct) (*IUSBDevice_getProductResponse, error) {
	return service.IUSBDevice_getProductContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getSerialNumberContext(ctx context.Context, request *IUSBDevice_getSerialNumber) (*IUSBDevice_getSerialNumberResponse, error) {
	response := new(IUSBDevice_getSerialNumberResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getSerialNumber(request *IUSBDevice_getSerialNumber) (*IUSBDevice_getSerialNumberResponse, error) {
	return service.IUSBDevice_getSerialNumberContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getAddressContext(ctx context.Context, request *IUSBDevice_getAddress) (*IUSBDevice_getAddressResponse, error) {
	response := new(IUSBDevice_getAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getAddress(request *IUSBDevice_getAddress) (*IUSBDevice_getAddressResponse, error) {
	return service.IUSBDevice_getAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getPortContext(ctx context.Context, request *IUSBDevice_getPort) (*IUSBDevice_getPortResponse, error) {
	response := new(IUSBDevice_getPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getPort(request *IUSBDevice_getPort) (*IUSBDevice_getPortResponse, error) {
	return service.IUSBDevice_getPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getPortPathContext(ctx context.Context, request *IUSBDevice_getPortPath) (*IUSBDevice_getPortPathResponse, error) {
	response := new(IUSBDevice_getPortPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getPortPath(request *IUSBDevice_getPortPath) (*IUSBDevice_getPortPathResponse, error) {
	return service.IUSBDevice_getPortPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getVersionContext(ctx context.Context, request *IUSBDevice_getVersion) (*IUSBDevice_getVersionResponse, error) {
	response := new(IUSBDevice_getVersionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getVersion(request *IUSBDevice_getVersion) (*IUSBDevice_getVersionResponse, error) {
	return service.IUSBDevice_getVersionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getSpeedContext(ctx context.Context, request *IUSBDevice_getSpeed) (*IUSBDevice_getSpeedResponse, error) {
	response := new(IUSBDevice_getSpeedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getSpeed(request *IUSBDevice_getSpeed) (*IUSBDevice_getSpeedResponse, error) {
	return service.IUSBDevice_getSpeedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getRemoteContext(ctx context.Context, request *IUSBDevice_getRemote) (*IUSBDevice_getRemoteResponse, error) {
	response := new(IUSBDevice_getRemoteResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getRemote(request *IUSBDevice_getRemote) (*IUSBDevice_getRemoteResponse, error) {
	return service.IUSBDevice_getRemoteContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getDeviceInfoContext(ctx context.Context, request *IUSBDevice_getDeviceInfo) (*IUSBDevice_getDeviceInfoResponse, error) {
	response := new(IUSBDevice_getDeviceInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getDeviceInfo(request *IUSBDevice_getDeviceInfo) (*IUSBDevice_getDeviceInfoResponse, error) {
	return service.IUSBDevice_getDeviceInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDevice_getBackendContext(ctx context.Context, request *IUSBDevice_getBackend) (*IUSBDevice_getBackendResponse, error) {
	response := new(IUSBDevice_getBackendResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDevice_getBackend(request *IUSBDevice_getBackend) (*IUSBDevice_getBackendResponse, error) {
	return service.IUSBDevice_getBackendContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_getNameContext(ctx context.Context, request *IUSBDeviceFilter_getName) (*IUSBDeviceFilter_getNameResponse, error) {
	response := new(IUSBDeviceFilter_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_getName(request *IUSBDeviceFilter_getName) (*IUSBDeviceFilter_getNameResponse, error) {
	return service.IUSBDeviceFilter_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_setNameContext(ctx context.Context, request *IUSBDeviceFilter_setName) (*IUSBDeviceFilter_setNameResponse, error) {
	response := new(IUSBDeviceFilter_setNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_setName(request *IUSBDeviceFilter_setName) (*IUSBDeviceFilter_setNameResponse, error) {
	return service.IUSBDeviceFilter_setNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_getActiveContext(ctx context.Context, request *IUSBDeviceFilter_getActive) (*IUSBDeviceFilter_getActiveResponse, error) {
	response := new(IUSBDeviceFilter_getActiveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_getActive(request *IUSBDeviceFilter_getActive) (*IUSBDeviceFilter_getActiveResponse, error) {
	return service.IUSBDeviceFilter_getActiveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_setActiveContext(ctx context.Context, request *IUSBDeviceFilter_setActive) (*IUSBDeviceFilter_setActiveResponse, error) {
	response := new(IUSBDeviceFilter_setActiveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_setActive(request *IUSBDeviceFilter_setActive) (*IUSBDeviceFilter_setActiveResponse, error) {
	return service.IUSBDeviceFilter_setActiveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_getVendorIdContext(ctx context.Context, request *IUSBDeviceFilter_getVendorId) (*IUSBDeviceFilter_getVendorIdResponse, error) {
	response := new(IUSBDeviceFilter_getVendorIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_getVendorId(request *IUSBDeviceFilter_getVendorId) (*IUSBDeviceFilter_getVendorIdResponse, error) {
	return service.IUSBDeviceFilter_getVendorIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_setVendorIdContext(ctx context.Context, request *IUSBDeviceFilter_setVendorId) (*IUSBDeviceFilter_setVendorIdResponse, error) {
	response := new(IUSBDeviceFilter_setVendorIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_setVendorId(request *IUSBDeviceFilter_setVendorId) (*IUSBDeviceFilter_setVendorIdResponse, error) {
	return service.IUSBDeviceFilter_setVendorIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_getProductIdContext(ctx context.Context, request *IUSBDeviceFilter_getProductId) (*IUSBDeviceFilter_getProductIdResponse, error) {
	response := new(IUSBDeviceFilter_getProductIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_getProductId(request *IUSBDeviceFilter_getProductId) (*IUSBDeviceFilter_getProductIdResponse, error) {
	return service.IUSBDeviceFilter_getProductIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_setProductIdContext(ctx context.Context, request *IUSBDeviceFilter_setProductId) (*IUSBDeviceFilter_setProductIdResponse, error) {
	response := new(IUSBDeviceFilter_setProductIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_setProductId(request *IUSBDeviceFilter_setProductId) (*IUSBDeviceFilter_setProductIdResponse, error) {
	return service.IUSBDeviceFilter_setProductIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_getRevisionContext(ctx context.Context, request *IUSBDeviceFilter_getRevision) (*IUSBDeviceFilter_getRevisionResponse, error) {
	response := new(IUSBDeviceFilter_getRevisionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_getRevision(request *IUSBDeviceFilter_getRevision) (*IUSBDeviceFilter_getRevisionResponse, error) {
	return service.IUSBDeviceFilter_getRevisionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_setRevisionContext(ctx context.Context, request *IUSBDeviceFilter_setRevision) (*IUSBDeviceFilter_setRevisionResponse, error) {
	response := new(IUSBDeviceFilter_setRevisionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_setRevision(request *IUSBDeviceFilter_setRevision) (*IUSBDeviceFilter_setRevisionResponse, error) {
	return service.IUSBDeviceFilter_setRevisionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_getManufacturerContext(ctx context.Context, request *IUSBDeviceFilter_getManufacturer) (*IUSBDeviceFilter_getManufacturerResponse, error) {
	response := new(IUSBDeviceFilter_getManufacturerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_getManufacturer(request *IUSBDeviceFilter_getManufacturer) (*IUSBDeviceFilter_getManufacturerResponse, error) {
	return service.IUSBDeviceFilter_getManufacturerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_setManufacturerContext(ctx context.Context, request *IUSBDeviceFilter_setManufacturer) (*IUSBDeviceFilter_setManufacturerResponse, error) {
	response := new(IUSBDeviceFilter_setManufacturerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_setManufacturer(request *IUSBDeviceFilter_setManufacturer) (*IUSBDeviceFilter_setManufacturerResponse, error) {
	return service.IUSBDeviceFilter_setManufacturerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_getProductContext(ctx context.Context, request *IUSBDeviceFilter_getProduct) (*IUSBDeviceFilter_getProductResponse, error) {
	response := new(IUSBDeviceFilter_getProductResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_getProduct(request *IUSBDeviceFilter_getProduct) (*IUSBDeviceFilter_getProductResponse, error) {
	return service.IUSBDeviceFilter_getProductContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_setProductContext(ctx context.Context, request *IUSBDeviceFilter_setProduct) (*IUSBDeviceFilter_setProductResponse, error) {
	response := new(IUSBDeviceFilter_setProductResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_setProduct(request *IUSBDeviceFilter_setProduct) (*IUSBDeviceFilter_setProductResponse, error) {
	return service.IUSBDeviceFilter_setProductContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_getSerialNumberContext(ctx context.Context, request *IUSBDeviceFilter_getSerialNumber) (*IUSBDeviceFilter_getSerialNumberResponse, error) {
	response := new(IUSBDeviceFilter_getSerialNumberResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_getSerialNumber(request *IUSBDeviceFilter_getSerialNumber) (*IUSBDeviceFilter_getSerialNumberResponse, error) {
	return service.IUSBDeviceFilter_getSerialNumberContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_setSerialNumberContext(ctx context.Context, request *IUSBDeviceFilter_setSerialNumber) (*IUSBDeviceFilter_setSerialNumberResponse, error) {
	response := new(IUSBDeviceFilter_setSerialNumberResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_setSerialNumber(request *IUSBDeviceFilter_setSerialNumber) (*IUSBDeviceFilter_setSerialNumberResponse, error) {
	return service.IUSBDeviceFilter_setSerialNumberContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_getPortContext(ctx context.Context, request *IUSBDeviceFilter_getPort) (*IUSBDeviceFilter_getPortResponse, error) {
	response := new(IUSBDeviceFilter_getPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_getPort(request *IUSBDeviceFilter_getPort) (*IUSBDeviceFilter_getPortResponse, error) {
	return service.IUSBDeviceFilter_getPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_setPortContext(ctx context.Context, request *IUSBDeviceFilter_setPort) (*IUSBDeviceFilter_setPortResponse, error) {
	response := new(IUSBDeviceFilter_setPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_setPort(request *IUSBDeviceFilter_setPort) (*IUSBDeviceFilter_setPortResponse, error) {
	return service.IUSBDeviceFilter_setPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_getRemoteContext(ctx context.Context, request *IUSBDeviceFilter_getRemote) (*IUSBDeviceFilter_getRemoteResponse, error) {
	response := new(IUSBDeviceFilter_getRemoteResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_getRemote(request *IUSBDeviceFilter_getRemote) (*IUSBDeviceFilter_getRemoteResponse, error) {
	return service.IUSBDeviceFilter_getRemoteContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_setRemoteContext(ctx context.Context, request *IUSBDeviceFilter_setRemote) (*IUSBDeviceFilter_setRemoteResponse, error) {
	response := new(IUSBDeviceFilter_setRemoteResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_setRemote(request *IUSBDeviceFilter_setRemote) (*IUSBDeviceFilter_setRemoteResponse, error) {
	return service.IUSBDeviceFilter_setRemoteContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_getMaskedInterfacesContext(ctx context.Context, request *IUSBDeviceFilter_getMaskedInterfaces) (*IUSBDeviceFilter_getMaskedInterfacesResponse, error) {
	response := new(IUSBDeviceFilter_getMaskedInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_getMaskedInterfaces(request *IUSBDeviceFilter_getMaskedInterfaces) (*IUSBDeviceFilter_getMaskedInterfacesResponse, error) {
	return service.IUSBDeviceFilter_getMaskedInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceFilter_setMaskedInterfacesContext(ctx context.Context, request *IUSBDeviceFilter_setMaskedInterfaces) (*IUSBDeviceFilter_setMaskedInterfacesResponse, error) {
	response := new(IUSBDeviceFilter_setMaskedInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceFilter_setMaskedInterfaces(request *IUSBDeviceFilter_setMaskedInterfaces) (*IUSBDeviceFilter_setMaskedInterfacesResponse, error) {
	return service.IUSBDeviceFilter_setMaskedInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostUSBDevice_getStateContext(ctx context.Context, request *IHostUSBDevice_getState) (*IHostUSBDevice_getStateResponse, error) {
	response := new(IHostUSBDevice_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostUSBDevice_getState(request *IHostUSBDevice_getState) (*IHostUSBDevice_getStateResponse, error) {
	return service.IHostUSBDevice_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostUSBDeviceFilter_getActionContext(ctx context.Context, request *IHostUSBDeviceFilter_getAction) (*IHostUSBDeviceFilter_getActionResponse, error) {
	response := new(IHostUSBDeviceFilter_getActionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostUSBDeviceFilter_getAction(request *IHostUSBDeviceFilter_getAction) (*IHostUSBDeviceFilter_getActionResponse, error) {
	return service.IHostUSBDeviceFilter_getActionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostUSBDeviceFilter_setActionContext(ctx context.Context, request *IHostUSBDeviceFilter_setAction) (*IHostUSBDeviceFilter_setActionResponse, error) {
	response := new(IHostUSBDeviceFilter_setActionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostUSBDeviceFilter_setAction(request *IHostUSBDeviceFilter_setAction) (*IHostUSBDeviceFilter_setActionResponse, error) {
	return service.IHostUSBDeviceFilter_setActionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBProxyBackend_getNameContext(ctx context.Context, request *IUSBProxyBackend_getName) (*IUSBProxyBackend_getNameResponse, error) {
	response := new(IUSBProxyBackend_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBProxyBackend_getName(request *IUSBProxyBackend_getName) (*IUSBProxyBackend_getNameResponse, error) {
	return service.IUSBProxyBackend_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBProxyBackend_getTypeContext(ctx context.Context, request *IUSBProxyBackend_getType) (*IUSBProxyBackend_getTypeResponse, error) {
	response := new(IUSBProxyBackend_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBProxyBackend_getType(request *IUSBProxyBackend_getType) (*IUSBProxyBackend_getTypeResponse, error) {
	return service.IUSBProxyBackend_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_getEnabledContext(ctx context.Context, request *IAudioAdapter_getEnabled) (*IAudioAdapter_getEnabledResponse, error) {
	response := new(IAudioAdapter_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_getEnabled(request *IAudioAdapter_getEnabled) (*IAudioAdapter_getEnabledResponse, error) {
	return service.IAudioAdapter_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_setEnabledContext(ctx context.Context, request *IAudioAdapter_setEnabled) (*IAudioAdapter_setEnabledResponse, error) {
	response := new(IAudioAdapter_setEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_setEnabled(request *IAudioAdapter_setEnabled) (*IAudioAdapter_setEnabledResponse, error) {
	return service.IAudioAdapter_setEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_getEnabledInContext(ctx context.Context, request *IAudioAdapter_getEnabledIn) (*IAudioAdapter_getEnabledInResponse, error) {
	response := new(IAudioAdapter_getEnabledInResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_getEnabledIn(request *IAudioAdapter_getEnabledIn) (*IAudioAdapter_getEnabledInResponse, error) {
	return service.IAudioAdapter_getEnabledInContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_setEnabledInContext(ctx context.Context, request *IAudioAdapter_setEnabledIn) (*IAudioAdapter_setEnabledInResponse, error) {
	response := new(IAudioAdapter_setEnabledInResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_setEnabledIn(request *IAudioAdapter_setEnabledIn) (*IAudioAdapter_setEnabledInResponse, error) {
	return service.IAudioAdapter_setEnabledInContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_getEnabledOutContext(ctx context.Context, request *IAudioAdapter_getEnabledOut) (*IAudioAdapter_getEnabledOutResponse, error) {
	response := new(IAudioAdapter_getEnabledOutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_getEnabledOut(request *IAudioAdapter_getEnabledOut) (*IAudioAdapter_getEnabledOutResponse, error) {
	return service.IAudioAdapter_getEnabledOutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_setEnabledOutContext(ctx context.Context, request *IAudioAdapter_setEnabledOut) (*IAudioAdapter_setEnabledOutResponse, error) {
	response := new(IAudioAdapter_setEnabledOutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_setEnabledOut(request *IAudioAdapter_setEnabledOut) (*IAudioAdapter_setEnabledOutResponse, error) {
	return service.IAudioAdapter_setEnabledOutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_getAudioControllerContext(ctx context.Context, request *IAudioAdapter_getAudioController) (*IAudioAdapter_getAudioControllerResponse, error) {
	response := new(IAudioAdapter_getAudioControllerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_getAudioController(request *IAudioAdapter_getAudioController) (*IAudioAdapter_getAudioControllerResponse, error) {
	return service.IAudioAdapter_getAudioControllerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_setAudioControllerContext(ctx context.Context, request *IAudioAdapter_setAudioController) (*IAudioAdapter_setAudioControllerResponse, error) {
	response := new(IAudioAdapter_setAudioControllerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_setAudioController(request *IAudioAdapter_setAudioController) (*IAudioAdapter_setAudioControllerResponse, error) {
	return service.IAudioAdapter_setAudioControllerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_getAudioCodecContext(ctx context.Context, request *IAudioAdapter_getAudioCodec) (*IAudioAdapter_getAudioCodecResponse, error) {
	response := new(IAudioAdapter_getAudioCodecResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_getAudioCodec(request *IAudioAdapter_getAudioCodec) (*IAudioAdapter_getAudioCodecResponse, error) {
	return service.IAudioAdapter_getAudioCodecContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_setAudioCodecContext(ctx context.Context, request *IAudioAdapter_setAudioCodec) (*IAudioAdapter_setAudioCodecResponse, error) {
	response := new(IAudioAdapter_setAudioCodecResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_setAudioCodec(request *IAudioAdapter_setAudioCodec) (*IAudioAdapter_setAudioCodecResponse, error) {
	return service.IAudioAdapter_setAudioCodecContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_getAudioDriverContext(ctx context.Context, request *IAudioAdapter_getAudioDriver) (*IAudioAdapter_getAudioDriverResponse, error) {
	response := new(IAudioAdapter_getAudioDriverResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_getAudioDriver(request *IAudioAdapter_getAudioDriver) (*IAudioAdapter_getAudioDriverResponse, error) {
	return service.IAudioAdapter_getAudioDriverContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_setAudioDriverContext(ctx context.Context, request *IAudioAdapter_setAudioDriver) (*IAudioAdapter_setAudioDriverResponse, error) {
	response := new(IAudioAdapter_setAudioDriverResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_setAudioDriver(request *IAudioAdapter_setAudioDriver) (*IAudioAdapter_setAudioDriverResponse, error) {
	return service.IAudioAdapter_setAudioDriverContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_getPropertiesListContext(ctx context.Context, request *IAudioAdapter_getPropertiesList) (*IAudioAdapter_getPropertiesListResponse, error) {
	response := new(IAudioAdapter_getPropertiesListResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_getPropertiesList(request *IAudioAdapter_getPropertiesList) (*IAudioAdapter_getPropertiesListResponse, error) {
	return service.IAudioAdapter_getPropertiesListContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_setPropertyContext(ctx context.Context, request *IAudioAdapter_setProperty) (*IAudioAdapter_setPropertyResponse, error) {
	response := new(IAudioAdapter_setPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_setProperty(request *IAudioAdapter_setProperty) (*IAudioAdapter_setPropertyResponse, error) {
	return service.IAudioAdapter_setPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapter_getPropertyContext(ctx context.Context, request *IAudioAdapter_getProperty) (*IAudioAdapter_getPropertyResponse, error) {
	response := new(IAudioAdapter_getPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapter_getProperty(request *IAudioAdapter_getProperty) (*IAudioAdapter_getPropertyResponse, error) {
	return service.IAudioAdapter_getPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_getIdContext(ctx context.Context, request *IHostAudioDevice_getId) (*IHostAudioDevice_getIdResponse, error) {
	response := new(IHostAudioDevice_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_getId(request *IHostAudioDevice_getId) (*IHostAudioDevice_getIdResponse, error) {
	return service.IHostAudioDevice_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_getNameContext(ctx context.Context, request *IHostAudioDevice_getName) (*IHostAudioDevice_getNameResponse, error) {
	response := new(IHostAudioDevice_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_getName(request *IHostAudioDevice_getName) (*IHostAudioDevice_getNameResponse, error) {
	return service.IHostAudioDevice_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_setNameContext(ctx context.Context, request *IHostAudioDevice_setName) (*IHostAudioDevice_setNameResponse, error) {
	response := new(IHostAudioDevice_setNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_setName(request *IHostAudioDevice_setName) (*IHostAudioDevice_setNameResponse, error) {
	return service.IHostAudioDevice_setNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_getTypeContext(ctx context.Context, request *IHostAudioDevice_getType) (*IHostAudioDevice_getTypeResponse, error) {
	response := new(IHostAudioDevice_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_getType(request *IHostAudioDevice_getType) (*IHostAudioDevice_getTypeResponse, error) {
	return service.IHostAudioDevice_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_setTypeContext(ctx context.Context, request *IHostAudioDevice_setType) (*IHostAudioDevice_setTypeResponse, error) {
	response := new(IHostAudioDevice_setTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_setType(request *IHostAudioDevice_setType) (*IHostAudioDevice_setTypeResponse, error) {
	return service.IHostAudioDevice_setTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_getUsageContext(ctx context.Context, request *IHostAudioDevice_getUsage) (*IHostAudioDevice_getUsageResponse, error) {
	response := new(IHostAudioDevice_getUsageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_getUsage(request *IHostAudioDevice_getUsage) (*IHostAudioDevice_getUsageResponse, error) {
	return service.IHostAudioDevice_getUsageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_setUsageContext(ctx context.Context, request *IHostAudioDevice_setUsage) (*IHostAudioDevice_setUsageResponse, error) {
	response := new(IHostAudioDevice_setUsageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_setUsage(request *IHostAudioDevice_setUsage) (*IHostAudioDevice_setUsageResponse, error) {
	return service.IHostAudioDevice_setUsageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_getDefaultInContext(ctx context.Context, request *IHostAudioDevice_getDefaultIn) (*IHostAudioDevice_getDefaultInResponse, error) {
	response := new(IHostAudioDevice_getDefaultInResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_getDefaultIn(request *IHostAudioDevice_getDefaultIn) (*IHostAudioDevice_getDefaultInResponse, error) {
	return service.IHostAudioDevice_getDefaultInContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_setDefaultInContext(ctx context.Context, request *IHostAudioDevice_setDefaultIn) (*IHostAudioDevice_setDefaultInResponse, error) {
	response := new(IHostAudioDevice_setDefaultInResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_setDefaultIn(request *IHostAudioDevice_setDefaultIn) (*IHostAudioDevice_setDefaultInResponse, error) {
	return service.IHostAudioDevice_setDefaultInContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_getDefaultOutContext(ctx context.Context, request *IHostAudioDevice_getDefaultOut) (*IHostAudioDevice_getDefaultOutResponse, error) {
	response := new(IHostAudioDevice_getDefaultOutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_getDefaultOut(request *IHostAudioDevice_getDefaultOut) (*IHostAudioDevice_getDefaultOutResponse, error) {
	return service.IHostAudioDevice_getDefaultOutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_setDefaultOutContext(ctx context.Context, request *IHostAudioDevice_setDefaultOut) (*IHostAudioDevice_setDefaultOutResponse, error) {
	response := new(IHostAudioDevice_setDefaultOutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_setDefaultOut(request *IHostAudioDevice_setDefaultOut) (*IHostAudioDevice_setDefaultOutResponse, error) {
	return service.IHostAudioDevice_setDefaultOutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_getIsHotPlugContext(ctx context.Context, request *IHostAudioDevice_getIsHotPlug) (*IHostAudioDevice_getIsHotPlugResponse, error) {
	response := new(IHostAudioDevice_getIsHotPlugResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_getIsHotPlug(request *IHostAudioDevice_getIsHotPlug) (*IHostAudioDevice_getIsHotPlugResponse, error) {
	return service.IHostAudioDevice_getIsHotPlugContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_setIsHotPlugContext(ctx context.Context, request *IHostAudioDevice_setIsHotPlug) (*IHostAudioDevice_setIsHotPlugResponse, error) {
	response := new(IHostAudioDevice_setIsHotPlugResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_setIsHotPlug(request *IHostAudioDevice_setIsHotPlug) (*IHostAudioDevice_setIsHotPlugResponse, error) {
	return service.IHostAudioDevice_setIsHotPlugContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_getStateContext(ctx context.Context, request *IHostAudioDevice_getState) (*IHostAudioDevice_getStateResponse, error) {
	response := new(IHostAudioDevice_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_getState(request *IHostAudioDevice_getState) (*IHostAudioDevice_getStateResponse, error) {
	return service.IHostAudioDevice_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_setStateContext(ctx context.Context, request *IHostAudioDevice_setState) (*IHostAudioDevice_setStateResponse, error) {
	response := new(IHostAudioDevice_setStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_setState(request *IHostAudioDevice_setState) (*IHostAudioDevice_setStateResponse, error) {
	return service.IHostAudioDevice_setStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDevice_getPropertyContext(ctx context.Context, request *IHostAudioDevice_getProperty) (*IHostAudioDevice_getPropertyResponse, error) {
	response := new(IHostAudioDevice_getPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDevice_getProperty(request *IHostAudioDevice_getProperty) (*IHostAudioDevice_getPropertyResponse, error) {
	return service.IHostAudioDevice_getPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioSettings_getAdapterContext(ctx context.Context, request *IAudioSettings_getAdapter) (*IAudioSettings_getAdapterResponse, error) {
	response := new(IAudioSettings_getAdapterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioSettings_getAdapter(request *IAudioSettings_getAdapter) (*IAudioSettings_getAdapterResponse, error) {
	return service.IAudioSettings_getAdapterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioSettings_getHostAudioDeviceContext(ctx context.Context, request *IAudioSettings_getHostAudioDevice) (*IAudioSettings_getHostAudioDeviceResponse, error) {
	response := new(IAudioSettings_getHostAudioDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioSettings_getHostAudioDevice(request *IAudioSettings_getHostAudioDevice) (*IAudioSettings_getHostAudioDeviceResponse, error) {
	return service.IAudioSettings_getHostAudioDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioSettings_setHostAudioDeviceContext(ctx context.Context, request *IAudioSettings_setHostAudioDevice) (*IAudioSettings_setHostAudioDeviceResponse, error) {
	response := new(IAudioSettings_setHostAudioDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioSettings_setHostAudioDevice(request *IAudioSettings_setHostAudioDevice) (*IAudioSettings_setHostAudioDeviceResponse, error) {
	return service.IAudioSettings_setHostAudioDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_getEnabledContext(ctx context.Context, request *IVRDEServer_getEnabled) (*IVRDEServer_getEnabledResponse, error) {
	response := new(IVRDEServer_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_getEnabled(request *IVRDEServer_getEnabled) (*IVRDEServer_getEnabledResponse, error) {
	return service.IVRDEServer_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_setEnabledContext(ctx context.Context, request *IVRDEServer_setEnabled) (*IVRDEServer_setEnabledResponse, error) {
	response := new(IVRDEServer_setEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_setEnabled(request *IVRDEServer_setEnabled) (*IVRDEServer_setEnabledResponse, error) {
	return service.IVRDEServer_setEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_getAuthTypeContext(ctx context.Context, request *IVRDEServer_getAuthType) (*IVRDEServer_getAuthTypeResponse, error) {
	response := new(IVRDEServer_getAuthTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_getAuthType(request *IVRDEServer_getAuthType) (*IVRDEServer_getAuthTypeResponse, error) {
	return service.IVRDEServer_getAuthTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_setAuthTypeContext(ctx context.Context, request *IVRDEServer_setAuthType) (*IVRDEServer_setAuthTypeResponse, error) {
	response := new(IVRDEServer_setAuthTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_setAuthType(request *IVRDEServer_setAuthType) (*IVRDEServer_setAuthTypeResponse, error) {
	return service.IVRDEServer_setAuthTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_getAuthTimeoutContext(ctx context.Context, request *IVRDEServer_getAuthTimeout) (*IVRDEServer_getAuthTimeoutResponse, error) {
	response := new(IVRDEServer_getAuthTimeoutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_getAuthTimeout(request *IVRDEServer_getAuthTimeout) (*IVRDEServer_getAuthTimeoutResponse, error) {
	return service.IVRDEServer_getAuthTimeoutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_setAuthTimeoutContext(ctx context.Context, request *IVRDEServer_setAuthTimeout) (*IVRDEServer_setAuthTimeoutResponse, error) {
	response := new(IVRDEServer_setAuthTimeoutResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_setAuthTimeout(request *IVRDEServer_setAuthTimeout) (*IVRDEServer_setAuthTimeoutResponse, error) {
	return service.IVRDEServer_setAuthTimeoutContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_getAllowMultiConnectionContext(ctx context.Context, request *IVRDEServer_getAllowMultiConnection) (*IVRDEServer_getAllowMultiConnectionResponse, error) {
	response := new(IVRDEServer_getAllowMultiConnectionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_getAllowMultiConnection(request *IVRDEServer_getAllowMultiConnection) (*IVRDEServer_getAllowMultiConnectionResponse, error) {
	return service.IVRDEServer_getAllowMultiConnectionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_setAllowMultiConnectionContext(ctx context.Context, request *IVRDEServer_setAllowMultiConnection) (*IVRDEServer_setAllowMultiConnectionResponse, error) {
	response := new(IVRDEServer_setAllowMultiConnectionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_setAllowMultiConnection(request *IVRDEServer_setAllowMultiConnection) (*IVRDEServer_setAllowMultiConnectionResponse, error) {
	return service.IVRDEServer_setAllowMultiConnectionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_getReuseSingleConnectionContext(ctx context.Context, request *IVRDEServer_getReuseSingleConnection) (*IVRDEServer_getReuseSingleConnectionResponse, error) {
	response := new(IVRDEServer_getReuseSingleConnectionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_getReuseSingleConnection(request *IVRDEServer_getReuseSingleConnection) (*IVRDEServer_getReuseSingleConnectionResponse, error) {
	return service.IVRDEServer_getReuseSingleConnectionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_setReuseSingleConnectionContext(ctx context.Context, request *IVRDEServer_setReuseSingleConnection) (*IVRDEServer_setReuseSingleConnectionResponse, error) {
	response := new(IVRDEServer_setReuseSingleConnectionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_setReuseSingleConnection(request *IVRDEServer_setReuseSingleConnection) (*IVRDEServer_setReuseSingleConnectionResponse, error) {
	return service.IVRDEServer_setReuseSingleConnectionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_getVRDEExtPackContext(ctx context.Context, request *IVRDEServer_getVRDEExtPack) (*IVRDEServer_getVRDEExtPackResponse, error) {
	response := new(IVRDEServer_getVRDEExtPackResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_getVRDEExtPack(request *IVRDEServer_getVRDEExtPack) (*IVRDEServer_getVRDEExtPackResponse, error) {
	return service.IVRDEServer_getVRDEExtPackContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_setVRDEExtPackContext(ctx context.Context, request *IVRDEServer_setVRDEExtPack) (*IVRDEServer_setVRDEExtPackResponse, error) {
	response := new(IVRDEServer_setVRDEExtPackResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_setVRDEExtPack(request *IVRDEServer_setVRDEExtPack) (*IVRDEServer_setVRDEExtPackResponse, error) {
	return service.IVRDEServer_setVRDEExtPackContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_getAuthLibraryContext(ctx context.Context, request *IVRDEServer_getAuthLibrary) (*IVRDEServer_getAuthLibraryResponse, error) {
	response := new(IVRDEServer_getAuthLibraryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_getAuthLibrary(request *IVRDEServer_getAuthLibrary) (*IVRDEServer_getAuthLibraryResponse, error) {
	return service.IVRDEServer_getAuthLibraryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_setAuthLibraryContext(ctx context.Context, request *IVRDEServer_setAuthLibrary) (*IVRDEServer_setAuthLibraryResponse, error) {
	response := new(IVRDEServer_setAuthLibraryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_setAuthLibrary(request *IVRDEServer_setAuthLibrary) (*IVRDEServer_setAuthLibraryResponse, error) {
	return service.IVRDEServer_setAuthLibraryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_getVRDEPropertiesContext(ctx context.Context, request *IVRDEServer_getVRDEProperties) (*IVRDEServer_getVRDEPropertiesResponse, error) {
	response := new(IVRDEServer_getVRDEPropertiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_getVRDEProperties(request *IVRDEServer_getVRDEProperties) (*IVRDEServer_getVRDEPropertiesResponse, error) {
	return service.IVRDEServer_getVRDEPropertiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_setVRDEPropertyContext(ctx context.Context, request *IVRDEServer_setVRDEProperty) (*IVRDEServer_setVRDEPropertyResponse, error) {
	response := new(IVRDEServer_setVRDEPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_setVRDEProperty(request *IVRDEServer_setVRDEProperty) (*IVRDEServer_setVRDEPropertyResponse, error) {
	return service.IVRDEServer_setVRDEPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServer_getVRDEPropertyContext(ctx context.Context, request *IVRDEServer_getVRDEProperty) (*IVRDEServer_getVRDEPropertyResponse, error) {
	response := new(IVRDEServer_getVRDEPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServer_getVRDEProperty(request *IVRDEServer_getVRDEProperty) (*IVRDEServer_getVRDEPropertyResponse, error) {
	return service.IVRDEServer_getVRDEPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISharedFolder_getNameContext(ctx context.Context, request *ISharedFolder_getName) (*ISharedFolder_getNameResponse, error) {
	response := new(ISharedFolder_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISharedFolder_getName(request *ISharedFolder_getName) (*ISharedFolder_getNameResponse, error) {
	return service.ISharedFolder_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISharedFolder_getHostPathContext(ctx context.Context, request *ISharedFolder_getHostPath) (*ISharedFolder_getHostPathResponse, error) {
	response := new(ISharedFolder_getHostPathResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISharedFolder_getHostPath(request *ISharedFolder_getHostPath) (*ISharedFolder_getHostPathResponse, error) {
	return service.ISharedFolder_getHostPathContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISharedFolder_getAccessibleContext(ctx context.Context, request *ISharedFolder_getAccessible) (*ISharedFolder_getAccessibleResponse, error) {
	response := new(ISharedFolder_getAccessibleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISharedFolder_getAccessible(request *ISharedFolder_getAccessible) (*ISharedFolder_getAccessibleResponse, error) {
	return service.ISharedFolder_getAccessibleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISharedFolder_getWritableContext(ctx context.Context, request *ISharedFolder_getWritable) (*ISharedFolder_getWritableResponse, error) {
	response := new(ISharedFolder_getWritableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISharedFolder_getWritable(request *ISharedFolder_getWritable) (*ISharedFolder_getWritableResponse, error) {
	return service.ISharedFolder_getWritableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISharedFolder_setWritableContext(ctx context.Context, request *ISharedFolder_setWritable) (*ISharedFolder_setWritableResponse, error) {
	response := new(ISharedFolder_setWritableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISharedFolder_setWritable(request *ISharedFolder_setWritable) (*ISharedFolder_setWritableResponse, error) {
	return service.ISharedFolder_setWritableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISharedFolder_getAutoMountContext(ctx context.Context, request *ISharedFolder_getAutoMount) (*ISharedFolder_getAutoMountResponse, error) {
	response := new(ISharedFolder_getAutoMountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISharedFolder_getAutoMount(request *ISharedFolder_getAutoMount) (*ISharedFolder_getAutoMountResponse, error) {
	return service.ISharedFolder_getAutoMountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISharedFolder_setAutoMountContext(ctx context.Context, request *ISharedFolder_setAutoMount) (*ISharedFolder_setAutoMountResponse, error) {
	response := new(ISharedFolder_setAutoMountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISharedFolder_setAutoMount(request *ISharedFolder_setAutoMount) (*ISharedFolder_setAutoMountResponse, error) {
	return service.ISharedFolder_setAutoMountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISharedFolder_getAutoMountPointContext(ctx context.Context, request *ISharedFolder_getAutoMountPoint) (*ISharedFolder_getAutoMountPointResponse, error) {
	response := new(ISharedFolder_getAutoMountPointResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISharedFolder_getAutoMountPoint(request *ISharedFolder_getAutoMountPoint) (*ISharedFolder_getAutoMountPointResponse, error) {
	return service.ISharedFolder_getAutoMountPointContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISharedFolder_setAutoMountPointContext(ctx context.Context, request *ISharedFolder_setAutoMountPoint) (*ISharedFolder_setAutoMountPointResponse, error) {
	response := new(ISharedFolder_setAutoMountPointResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISharedFolder_setAutoMountPoint(request *ISharedFolder_setAutoMountPoint) (*ISharedFolder_setAutoMountPointResponse, error) {
	return service.ISharedFolder_setAutoMountPointContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISharedFolder_getLastAccessErrorContext(ctx context.Context, request *ISharedFolder_getLastAccessError) (*ISharedFolder_getLastAccessErrorResponse, error) {
	response := new(ISharedFolder_getLastAccessErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISharedFolder_getLastAccessError(request *ISharedFolder_getLastAccessError) (*ISharedFolder_getLastAccessErrorResponse, error) {
	return service.ISharedFolder_getLastAccessErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISession_getStateContext(ctx context.Context, request *ISession_getState) (*ISession_getStateResponse, error) {
	response := new(ISession_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISession_getState(request *ISession_getState) (*ISession_getStateResponse, error) {
	return service.ISession_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISession_getTypeContext(ctx context.Context, request *ISession_getType) (*ISession_getTypeResponse, error) {
	response := new(ISession_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISession_getType(request *ISession_getType) (*ISession_getTypeResponse, error) {
	return service.ISession_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISession_getNameContext(ctx context.Context, request *ISession_getName) (*ISession_getNameResponse, error) {
	response := new(ISession_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISession_getName(request *ISession_getName) (*ISession_getNameResponse, error) {
	return service.ISession_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISession_setNameContext(ctx context.Context, request *ISession_setName) (*ISession_setNameResponse, error) {
	response := new(ISession_setNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISession_setName(request *ISession_setName) (*ISession_setNameResponse, error) {
	return service.ISession_setNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISession_getMachineContext(ctx context.Context, request *ISession_getMachine) (*ISession_getMachineResponse, error) {
	response := new(ISession_getMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISession_getMachine(request *ISession_getMachine) (*ISession_getMachineResponse, error) {
	return service.ISession_getMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISession_getConsoleContext(ctx context.Context, request *ISession_getConsole) (*ISession_getConsoleResponse, error) {
	response := new(ISession_getConsoleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISession_getConsole(request *ISession_getConsole) (*ISession_getConsoleResponse, error) {
	return service.ISession_getConsoleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISession_unlockMachineContext(ctx context.Context, request *ISession_unlockMachine) (*ISession_unlockMachineResponse, error) {
	response := new(ISession_unlockMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISession_unlockMachine(request *ISession_unlockMachine) (*ISession_unlockMachineResponse, error) {
	return service.ISession_unlockMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_getNameContext(ctx context.Context, request *IStorageController_getName) (*IStorageController_getNameResponse, error) {
	response := new(IStorageController_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_getName(request *IStorageController_getName) (*IStorageController_getNameResponse, error) {
	return service.IStorageController_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_setNameContext(ctx context.Context, request *IStorageController_setName) (*IStorageController_setNameResponse, error) {
	response := new(IStorageController_setNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_setName(request *IStorageController_setName) (*IStorageController_setNameResponse, error) {
	return service.IStorageController_setNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_getMaxDevicesPerPortCountContext(ctx context.Context, request *IStorageController_getMaxDevicesPerPortCount) (*IStorageController_getMaxDevicesPerPortCountResponse, error) {
	response := new(IStorageController_getMaxDevicesPerPortCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_getMaxDevicesPerPortCount(request *IStorageController_getMaxDevicesPerPortCount) (*IStorageController_getMaxDevicesPerPortCountResponse, error) {
	return service.IStorageController_getMaxDevicesPerPortCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_getMinPortCountContext(ctx context.Context, request *IStorageController_getMinPortCount) (*IStorageController_getMinPortCountResponse, error) {
	response := new(IStorageController_getMinPortCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_getMinPortCount(request *IStorageController_getMinPortCount) (*IStorageController_getMinPortCountResponse, error) {
	return service.IStorageController_getMinPortCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_getMaxPortCountContext(ctx context.Context, request *IStorageController_getMaxPortCount) (*IStorageController_getMaxPortCountResponse, error) {
	response := new(IStorageController_getMaxPortCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_getMaxPortCount(request *IStorageController_getMaxPortCount) (*IStorageController_getMaxPortCountResponse, error) {
	return service.IStorageController_getMaxPortCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_getInstanceContext(ctx context.Context, request *IStorageController_getInstance) (*IStorageController_getInstanceResponse, error) {
	response := new(IStorageController_getInstanceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_getInstance(request *IStorageController_getInstance) (*IStorageController_getInstanceResponse, error) {
	return service.IStorageController_getInstanceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_setInstanceContext(ctx context.Context, request *IStorageController_setInstance) (*IStorageController_setInstanceResponse, error) {
	response := new(IStorageController_setInstanceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_setInstance(request *IStorageController_setInstance) (*IStorageController_setInstanceResponse, error) {
	return service.IStorageController_setInstanceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_getPortCountContext(ctx context.Context, request *IStorageController_getPortCount) (*IStorageController_getPortCountResponse, error) {
	response := new(IStorageController_getPortCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_getPortCount(request *IStorageController_getPortCount) (*IStorageController_getPortCountResponse, error) {
	return service.IStorageController_getPortCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_setPortCountContext(ctx context.Context, request *IStorageController_setPortCount) (*IStorageController_setPortCountResponse, error) {
	response := new(IStorageController_setPortCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_setPortCount(request *IStorageController_setPortCount) (*IStorageController_setPortCountResponse, error) {
	return service.IStorageController_setPortCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_getBusContext(ctx context.Context, request *IStorageController_getBus) (*IStorageController_getBusResponse, error) {
	response := new(IStorageController_getBusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_getBus(request *IStorageController_getBus) (*IStorageController_getBusResponse, error) {
	return service.IStorageController_getBusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_getControllerTypeContext(ctx context.Context, request *IStorageController_getControllerType) (*IStorageController_getControllerTypeResponse, error) {
	response := new(IStorageController_getControllerTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_getControllerType(request *IStorageController_getControllerType) (*IStorageController_getControllerTypeResponse, error) {
	return service.IStorageController_getControllerTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_setControllerTypeContext(ctx context.Context, request *IStorageController_setControllerType) (*IStorageController_setControllerTypeResponse, error) {
	response := new(IStorageController_setControllerTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_setControllerType(request *IStorageController_setControllerType) (*IStorageController_setControllerTypeResponse, error) {
	return service.IStorageController_setControllerTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_getUseHostIOCacheContext(ctx context.Context, request *IStorageController_getUseHostIOCache) (*IStorageController_getUseHostIOCacheResponse, error) {
	response := new(IStorageController_getUseHostIOCacheResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_getUseHostIOCache(request *IStorageController_getUseHostIOCache) (*IStorageController_getUseHostIOCacheResponse, error) {
	return service.IStorageController_getUseHostIOCacheContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_setUseHostIOCacheContext(ctx context.Context, request *IStorageController_setUseHostIOCache) (*IStorageController_setUseHostIOCacheResponse, error) {
	response := new(IStorageController_setUseHostIOCacheResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_setUseHostIOCache(request *IStorageController_setUseHostIOCache) (*IStorageController_setUseHostIOCacheResponse, error) {
	return service.IStorageController_setUseHostIOCacheContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageController_getBootableContext(ctx context.Context, request *IStorageController_getBootable) (*IStorageController_getBootableResponse, error) {
	response := new(IStorageController_getBootableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageController_getBootable(request *IStorageController_getBootable) (*IStorageController_getBootableResponse, error) {
	return service.IStorageController_getBootableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IManagedObjectRef_getInterfaceNameContext(ctx context.Context, request *IManagedObjectRef_getInterfaceName) (*IManagedObjectRef_getInterfaceNameResponse, error) {
	response := new(IManagedObjectRef_getInterfaceNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IManagedObjectRef_getInterfaceName(request *IManagedObjectRef_getInterfaceName) (*IManagedObjectRef_getInterfaceNameResponse, error) {
	return service.IManagedObjectRef_getInterfaceNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IManagedObjectRef_releaseContext(ctx context.Context, request *IManagedObjectRef_release) (*IManagedObjectRef_releaseResponse, error) {
	response := new(IManagedObjectRef_releaseResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IManagedObjectRef_release(request *IManagedObjectRef_release) (*IManagedObjectRef_releaseResponse, error) {
	return service.IManagedObjectRef_releaseContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IWebsessionManager_logonContext(ctx context.Context, request *IWebsessionManager_logon) (*IWebsessionManager_logonResponse, error) {
	response := new(IWebsessionManager_logonResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IWebsessionManager_logon(request *IWebsessionManager_logon) (*IWebsessionManager_logonResponse, error) {
	return service.IWebsessionManager_logonContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IWebsessionManager_getSessionObjectContext(ctx context.Context, request *IWebsessionManager_getSessionObject) (*IWebsessionManager_getSessionObjectResponse, error) {
	response := new(IWebsessionManager_getSessionObjectResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IWebsessionManager_getSessionObject(request *IWebsessionManager_getSessionObject) (*IWebsessionManager_getSessionObjectResponse, error) {
	return service.IWebsessionManager_getSessionObjectContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IWebsessionManager_logoffContext(ctx context.Context, request *IWebsessionManager_logoff) (*IWebsessionManager_logoffResponse, error) {
	response := new(IWebsessionManager_logoffResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IWebsessionManager_logoff(request *IWebsessionManager_logoff) (*IWebsessionManager_logoffResponse, error) {
	return service.IWebsessionManager_logoffContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceMetric_getMetricNameContext(ctx context.Context, request *IPerformanceMetric_getMetricName) (*IPerformanceMetric_getMetricNameResponse, error) {
	response := new(IPerformanceMetric_getMetricNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceMetric_getMetricName(request *IPerformanceMetric_getMetricName) (*IPerformanceMetric_getMetricNameResponse, error) {
	return service.IPerformanceMetric_getMetricNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceMetric_getObjectContext(ctx context.Context, request *IPerformanceMetric_getObject) (*IPerformanceMetric_getObjectResponse, error) {
	response := new(IPerformanceMetric_getObjectResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceMetric_getObject(request *IPerformanceMetric_getObject) (*IPerformanceMetric_getObjectResponse, error) {
	return service.IPerformanceMetric_getObjectContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceMetric_getDescriptionContext(ctx context.Context, request *IPerformanceMetric_getDescription) (*IPerformanceMetric_getDescriptionResponse, error) {
	response := new(IPerformanceMetric_getDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceMetric_getDescription(request *IPerformanceMetric_getDescription) (*IPerformanceMetric_getDescriptionResponse, error) {
	return service.IPerformanceMetric_getDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceMetric_getPeriodContext(ctx context.Context, request *IPerformanceMetric_getPeriod) (*IPerformanceMetric_getPeriodResponse, error) {
	response := new(IPerformanceMetric_getPeriodResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceMetric_getPeriod(request *IPerformanceMetric_getPeriod) (*IPerformanceMetric_getPeriodResponse, error) {
	return service.IPerformanceMetric_getPeriodContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceMetric_getCountContext(ctx context.Context, request *IPerformanceMetric_getCount) (*IPerformanceMetric_getCountResponse, error) {
	response := new(IPerformanceMetric_getCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceMetric_getCount(request *IPerformanceMetric_getCount) (*IPerformanceMetric_getCountResponse, error) {
	return service.IPerformanceMetric_getCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceMetric_getUnitContext(ctx context.Context, request *IPerformanceMetric_getUnit) (*IPerformanceMetric_getUnitResponse, error) {
	response := new(IPerformanceMetric_getUnitResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceMetric_getUnit(request *IPerformanceMetric_getUnit) (*IPerformanceMetric_getUnitResponse, error) {
	return service.IPerformanceMetric_getUnitContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceMetric_getMinimumValueContext(ctx context.Context, request *IPerformanceMetric_getMinimumValue) (*IPerformanceMetric_getMinimumValueResponse, error) {
	response := new(IPerformanceMetric_getMinimumValueResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceMetric_getMinimumValue(request *IPerformanceMetric_getMinimumValue) (*IPerformanceMetric_getMinimumValueResponse, error) {
	return service.IPerformanceMetric_getMinimumValueContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceMetric_getMaximumValueContext(ctx context.Context, request *IPerformanceMetric_getMaximumValue) (*IPerformanceMetric_getMaximumValueResponse, error) {
	response := new(IPerformanceMetric_getMaximumValueResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceMetric_getMaximumValue(request *IPerformanceMetric_getMaximumValue) (*IPerformanceMetric_getMaximumValueResponse, error) {
	return service.IPerformanceMetric_getMaximumValueContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceCollector_getMetricNamesContext(ctx context.Context, request *IPerformanceCollector_getMetricNames) (*IPerformanceCollector_getMetricNamesResponse, error) {
	response := new(IPerformanceCollector_getMetricNamesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceCollector_getMetricNames(request *IPerformanceCollector_getMetricNames) (*IPerformanceCollector_getMetricNamesResponse, error) {
	return service.IPerformanceCollector_getMetricNamesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceCollector_getMetricsContext(ctx context.Context, request *IPerformanceCollector_getMetrics) (*IPerformanceCollector_getMetricsResponse, error) {
	response := new(IPerformanceCollector_getMetricsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceCollector_getMetrics(request *IPerformanceCollector_getMetrics) (*IPerformanceCollector_getMetricsResponse, error) {
	return service.IPerformanceCollector_getMetricsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceCollector_setupMetricsContext(ctx context.Context, request *IPerformanceCollector_setupMetrics) (*IPerformanceCollector_setupMetricsResponse, error) {
	response := new(IPerformanceCollector_setupMetricsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceCollector_setupMetrics(request *IPerformanceCollector_setupMetrics) (*IPerformanceCollector_setupMetricsResponse, error) {
	return service.IPerformanceCollector_setupMetricsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceCollector_enableMetricsContext(ctx context.Context, request *IPerformanceCollector_enableMetrics) (*IPerformanceCollector_enableMetricsResponse, error) {
	response := new(IPerformanceCollector_enableMetricsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceCollector_enableMetrics(request *IPerformanceCollector_enableMetrics) (*IPerformanceCollector_enableMetricsResponse, error) {
	return service.IPerformanceCollector_enableMetricsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceCollector_disableMetricsContext(ctx context.Context, request *IPerformanceCollector_disableMetrics) (*IPerformanceCollector_disableMetricsResponse, error) {
	response := new(IPerformanceCollector_disableMetricsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceCollector_disableMetrics(request *IPerformanceCollector_disableMetrics) (*IPerformanceCollector_disableMetricsResponse, error) {
	return service.IPerformanceCollector_disableMetricsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IPerformanceCollector_queryMetricsDataContext(ctx context.Context, request *IPerformanceCollector_queryMetricsData) (*IPerformanceCollector_queryMetricsDataResponse, error) {
	response := new(IPerformanceCollector_queryMetricsDataResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IPerformanceCollector_queryMetricsData(request *IPerformanceCollector_queryMetricsData) (*IPerformanceCollector_queryMetricsDataResponse, error) {
	return service.IPerformanceCollector_queryMetricsDataContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_getNetworkContext(ctx context.Context, request *INATEngine_getNetwork) (*INATEngine_getNetworkResponse, error) {
	response := new(INATEngine_getNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_getNetwork(request *INATEngine_getNetwork) (*INATEngine_getNetworkResponse, error) {
	return service.INATEngine_getNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_setNetworkContext(ctx context.Context, request *INATEngine_setNetwork) (*INATEngine_setNetworkResponse, error) {
	response := new(INATEngine_setNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_setNetwork(request *INATEngine_setNetwork) (*INATEngine_setNetworkResponse, error) {
	return service.INATEngine_setNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_getHostIPContext(ctx context.Context, request *INATEngine_getHostIP) (*INATEngine_getHostIPResponse, error) {
	response := new(INATEngine_getHostIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_getHostIP(request *INATEngine_getHostIP) (*INATEngine_getHostIPResponse, error) {
	return service.INATEngine_getHostIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_setHostIPContext(ctx context.Context, request *INATEngine_setHostIP) (*INATEngine_setHostIPResponse, error) {
	response := new(INATEngine_setHostIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_setHostIP(request *INATEngine_setHostIP) (*INATEngine_setHostIPResponse, error) {
	return service.INATEngine_setHostIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_getTFTPPrefixContext(ctx context.Context, request *INATEngine_getTFTPPrefix) (*INATEngine_getTFTPPrefixResponse, error) {
	response := new(INATEngine_getTFTPPrefixResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_getTFTPPrefix(request *INATEngine_getTFTPPrefix) (*INATEngine_getTFTPPrefixResponse, error) {
	return service.INATEngine_getTFTPPrefixContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_setTFTPPrefixContext(ctx context.Context, request *INATEngine_setTFTPPrefix) (*INATEngine_setTFTPPrefixResponse, error) {
	response := new(INATEngine_setTFTPPrefixResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_setTFTPPrefix(request *INATEngine_setTFTPPrefix) (*INATEngine_setTFTPPrefixResponse, error) {
	return service.INATEngine_setTFTPPrefixContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_getTFTPBootFileContext(ctx context.Context, request *INATEngine_getTFTPBootFile) (*INATEngine_getTFTPBootFileResponse, error) {
	response := new(INATEngine_getTFTPBootFileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_getTFTPBootFile(request *INATEngine_getTFTPBootFile) (*INATEngine_getTFTPBootFileResponse, error) {
	return service.INATEngine_getTFTPBootFileContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_setTFTPBootFileContext(ctx context.Context, request *INATEngine_setTFTPBootFile) (*INATEngine_setTFTPBootFileResponse, error) {
	response := new(INATEngine_setTFTPBootFileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_setTFTPBootFile(request *INATEngine_setTFTPBootFile) (*INATEngine_setTFTPBootFileResponse, error) {
	return service.INATEngine_setTFTPBootFileContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_getTFTPNextServerContext(ctx context.Context, request *INATEngine_getTFTPNextServer) (*INATEngine_getTFTPNextServerResponse, error) {
	response := new(INATEngine_getTFTPNextServerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_getTFTPNextServer(request *INATEngine_getTFTPNextServer) (*INATEngine_getTFTPNextServerResponse, error) {
	return service.INATEngine_getTFTPNextServerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_setTFTPNextServerContext(ctx context.Context, request *INATEngine_setTFTPNextServer) (*INATEngine_setTFTPNextServerResponse, error) {
	response := new(INATEngine_setTFTPNextServerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_setTFTPNextServer(request *INATEngine_setTFTPNextServer) (*INATEngine_setTFTPNextServerResponse, error) {
	return service.INATEngine_setTFTPNextServerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_getAliasModeContext(ctx context.Context, request *INATEngine_getAliasMode) (*INATEngine_getAliasModeResponse, error) {
	response := new(INATEngine_getAliasModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_getAliasMode(request *INATEngine_getAliasMode) (*INATEngine_getAliasModeResponse, error) {
	return service.INATEngine_getAliasModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_setAliasModeContext(ctx context.Context, request *INATEngine_setAliasMode) (*INATEngine_setAliasModeResponse, error) {
	response := new(INATEngine_setAliasModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_setAliasMode(request *INATEngine_setAliasMode) (*INATEngine_setAliasModeResponse, error) {
	return service.INATEngine_setAliasModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_getDNSPassDomainContext(ctx context.Context, request *INATEngine_getDNSPassDomain) (*INATEngine_getDNSPassDomainResponse, error) {
	response := new(INATEngine_getDNSPassDomainResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_getDNSPassDomain(request *INATEngine_getDNSPassDomain) (*INATEngine_getDNSPassDomainResponse, error) {
	return service.INATEngine_getDNSPassDomainContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_setDNSPassDomainContext(ctx context.Context, request *INATEngine_setDNSPassDomain) (*INATEngine_setDNSPassDomainResponse, error) {
	response := new(INATEngine_setDNSPassDomainResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_setDNSPassDomain(request *INATEngine_setDNSPassDomain) (*INATEngine_setDNSPassDomainResponse, error) {
	return service.INATEngine_setDNSPassDomainContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_getDNSProxyContext(ctx context.Context, request *INATEngine_getDNSProxy) (*INATEngine_getDNSProxyResponse, error) {
	response := new(INATEngine_getDNSProxyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_getDNSProxy(request *INATEngine_getDNSProxy) (*INATEngine_getDNSProxyResponse, error) {
	return service.INATEngine_getDNSProxyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_setDNSProxyContext(ctx context.Context, request *INATEngine_setDNSProxy) (*INATEngine_setDNSProxyResponse, error) {
	response := new(INATEngine_setDNSProxyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_setDNSProxy(request *INATEngine_setDNSProxy) (*INATEngine_setDNSProxyResponse, error) {
	return service.INATEngine_setDNSProxyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_getDNSUseHostResolverContext(ctx context.Context, request *INATEngine_getDNSUseHostResolver) (*INATEngine_getDNSUseHostResolverResponse, error) {
	response := new(INATEngine_getDNSUseHostResolverResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_getDNSUseHostResolver(request *INATEngine_getDNSUseHostResolver) (*INATEngine_getDNSUseHostResolverResponse, error) {
	return service.INATEngine_getDNSUseHostResolverContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_setDNSUseHostResolverContext(ctx context.Context, request *INATEngine_setDNSUseHostResolver) (*INATEngine_setDNSUseHostResolverResponse, error) {
	response := new(INATEngine_setDNSUseHostResolverResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_setDNSUseHostResolver(request *INATEngine_setDNSUseHostResolver) (*INATEngine_setDNSUseHostResolverResponse, error) {
	return service.INATEngine_setDNSUseHostResolverContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_getRedirectsContext(ctx context.Context, request *INATEngine_getRedirects) (*INATEngine_getRedirectsResponse, error) {
	response := new(INATEngine_getRedirectsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_getRedirects(request *INATEngine_getRedirects) (*INATEngine_getRedirectsResponse, error) {
	return service.INATEngine_getRedirectsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_getLocalhostReachableContext(ctx context.Context, request *INATEngine_getLocalhostReachable) (*INATEngine_getLocalhostReachableResponse, error) {
	response := new(INATEngine_getLocalhostReachableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_getLocalhostReachable(request *INATEngine_getLocalhostReachable) (*INATEngine_getLocalhostReachableResponse, error) {
	return service.INATEngine_getLocalhostReachableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_setLocalhostReachableContext(ctx context.Context, request *INATEngine_setLocalhostReachable) (*INATEngine_setLocalhostReachableResponse, error) {
	response := new(INATEngine_setLocalhostReachableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_setLocalhostReachable(request *INATEngine_setLocalhostReachable) (*INATEngine_setLocalhostReachableResponse, error) {
	return service.INATEngine_setLocalhostReachableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_setNetworkSettingsContext(ctx context.Context, request *INATEngine_setNetworkSettings) (*INATEngine_setNetworkSettingsResponse, error) {
	response := new(INATEngine_setNetworkSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_setNetworkSettings(request *INATEngine_setNetworkSettings) (*INATEngine_setNetworkSettingsResponse, error) {
	return service.INATEngine_setNetworkSettingsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_getNetworkSettingsContext(ctx context.Context, request *INATEngine_getNetworkSettings) (*INATEngine_getNetworkSettingsResponse, error) {
	response := new(INATEngine_getNetworkSettingsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_getNetworkSettings(request *INATEngine_getNetworkSettings) (*INATEngine_getNetworkSettingsResponse, error) {
	return service.INATEngine_getNetworkSettingsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_addRedirectContext(ctx context.Context, request *INATEngine_addRedirect) (*INATEngine_addRedirectResponse, error) {
	response := new(INATEngine_addRedirectResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_addRedirect(request *INATEngine_addRedirect) (*INATEngine_addRedirectResponse, error) {
	return service.INATEngine_addRedirectContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATEngine_removeRedirectContext(ctx context.Context, request *INATEngine_removeRedirect) (*INATEngine_removeRedirectResponse, error) {
	response := new(INATEngine_removeRedirectResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATEngine_removeRedirect(request *INATEngine_removeRedirect) (*INATEngine_removeRedirectResponse, error) {
	return service.INATEngine_removeRedirectContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBandwidthGroup_getNameContext(ctx context.Context, request *IBandwidthGroup_getName) (*IBandwidthGroup_getNameResponse, error) {
	response := new(IBandwidthGroup_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBandwidthGroup_getName(request *IBandwidthGroup_getName) (*IBandwidthGroup_getNameResponse, error) {
	return service.IBandwidthGroup_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBandwidthGroup_getTypeContext(ctx context.Context, request *IBandwidthGroup_getType) (*IBandwidthGroup_getTypeResponse, error) {
	response := new(IBandwidthGroup_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBandwidthGroup_getType(request *IBandwidthGroup_getType) (*IBandwidthGroup_getTypeResponse, error) {
	return service.IBandwidthGroup_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBandwidthGroup_getReferenceContext(ctx context.Context, request *IBandwidthGroup_getReference) (*IBandwidthGroup_getReferenceResponse, error) {
	response := new(IBandwidthGroup_getReferenceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBandwidthGroup_getReference(request *IBandwidthGroup_getReference) (*IBandwidthGroup_getReferenceResponse, error) {
	return service.IBandwidthGroup_getReferenceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBandwidthGroup_getMaxBytesPerSecContext(ctx context.Context, request *IBandwidthGroup_getMaxBytesPerSec) (*IBandwidthGroup_getMaxBytesPerSecResponse, error) {
	response := new(IBandwidthGroup_getMaxBytesPerSecResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBandwidthGroup_getMaxBytesPerSec(request *IBandwidthGroup_getMaxBytesPerSec) (*IBandwidthGroup_getMaxBytesPerSecResponse, error) {
	return service.IBandwidthGroup_getMaxBytesPerSecContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBandwidthGroup_setMaxBytesPerSecContext(ctx context.Context, request *IBandwidthGroup_setMaxBytesPerSec) (*IBandwidthGroup_setMaxBytesPerSecResponse, error) {
	response := new(IBandwidthGroup_setMaxBytesPerSecResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBandwidthGroup_setMaxBytesPerSec(request *IBandwidthGroup_setMaxBytesPerSec) (*IBandwidthGroup_setMaxBytesPerSecResponse, error) {
	return service.IBandwidthGroup_setMaxBytesPerSecContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBandwidthControl_getNumGroupsContext(ctx context.Context, request *IBandwidthControl_getNumGroups) (*IBandwidthControl_getNumGroupsResponse, error) {
	response := new(IBandwidthControl_getNumGroupsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBandwidthControl_getNumGroups(request *IBandwidthControl_getNumGroups) (*IBandwidthControl_getNumGroupsResponse, error) {
	return service.IBandwidthControl_getNumGroupsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBandwidthControl_createBandwidthGroupContext(ctx context.Context, request *IBandwidthControl_createBandwidthGroup) (*IBandwidthControl_createBandwidthGroupResponse, error) {
	response := new(IBandwidthControl_createBandwidthGroupResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBandwidthControl_createBandwidthGroup(request *IBandwidthControl_createBandwidthGroup) (*IBandwidthControl_createBandwidthGroupResponse, error) {
	return service.IBandwidthControl_createBandwidthGroupContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBandwidthControl_deleteBandwidthGroupContext(ctx context.Context, request *IBandwidthControl_deleteBandwidthGroup) (*IBandwidthControl_deleteBandwidthGroupResponse, error) {
	response := new(IBandwidthControl_deleteBandwidthGroupResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBandwidthControl_deleteBandwidthGroup(request *IBandwidthControl_deleteBandwidthGroup) (*IBandwidthControl_deleteBandwidthGroupResponse, error) {
	return service.IBandwidthControl_deleteBandwidthGroupContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBandwidthControl_getBandwidthGroupContext(ctx context.Context, request *IBandwidthControl_getBandwidthGroup) (*IBandwidthControl_getBandwidthGroupResponse, error) {
	response := new(IBandwidthControl_getBandwidthGroupResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBandwidthControl_getBandwidthGroup(request *IBandwidthControl_getBandwidthGroup) (*IBandwidthControl_getBandwidthGroupResponse, error) {
	return service.IBandwidthControl_getBandwidthGroupContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBandwidthControl_getAllBandwidthGroupsContext(ctx context.Context, request *IBandwidthControl_getAllBandwidthGroups) (*IBandwidthControl_getAllBandwidthGroupsResponse, error) {
	response := new(IBandwidthControl_getAllBandwidthGroupsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBandwidthControl_getAllBandwidthGroups(request *IBandwidthControl_getAllBandwidthGroups) (*IBandwidthControl_getAllBandwidthGroupsResponse, error) {
	return service.IBandwidthControl_getAllBandwidthGroupsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestDebugControl_getDebugProviderContext(ctx context.Context, request *IGuestDebugControl_getDebugProvider) (*IGuestDebugControl_getDebugProviderResponse, error) {
	response := new(IGuestDebugControl_getDebugProviderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestDebugControl_getDebugProvider(request *IGuestDebugControl_getDebugProvider) (*IGuestDebugControl_getDebugProviderResponse, error) {
	return service.IGuestDebugControl_getDebugProviderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestDebugControl_setDebugProviderContext(ctx context.Context, request *IGuestDebugControl_setDebugProvider) (*IGuestDebugControl_setDebugProviderResponse, error) {
	response := new(IGuestDebugControl_setDebugProviderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestDebugControl_setDebugProvider(request *IGuestDebugControl_setDebugProvider) (*IGuestDebugControl_setDebugProviderResponse, error) {
	return service.IGuestDebugControl_setDebugProviderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestDebugControl_getDebugIoProviderContext(ctx context.Context, request *IGuestDebugControl_getDebugIoProvider) (*IGuestDebugControl_getDebugIoProviderResponse, error) {
	response := new(IGuestDebugControl_getDebugIoProviderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestDebugControl_getDebugIoProvider(request *IGuestDebugControl_getDebugIoProvider) (*IGuestDebugControl_getDebugIoProviderResponse, error) {
	return service.IGuestDebugControl_getDebugIoProviderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestDebugControl_setDebugIoProviderContext(ctx context.Context, request *IGuestDebugControl_setDebugIoProvider) (*IGuestDebugControl_setDebugIoProviderResponse, error) {
	response := new(IGuestDebugControl_setDebugIoProviderResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestDebugControl_setDebugIoProvider(request *IGuestDebugControl_setDebugIoProvider) (*IGuestDebugControl_setDebugIoProviderResponse, error) {
	return service.IGuestDebugControl_setDebugIoProviderContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestDebugControl_getDebugAddressContext(ctx context.Context, request *IGuestDebugControl_getDebugAddress) (*IGuestDebugControl_getDebugAddressResponse, error) {
	response := new(IGuestDebugControl_getDebugAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestDebugControl_getDebugAddress(request *IGuestDebugControl_getDebugAddress) (*IGuestDebugControl_getDebugAddressResponse, error) {
	return service.IGuestDebugControl_getDebugAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestDebugControl_setDebugAddressContext(ctx context.Context, request *IGuestDebugControl_setDebugAddress) (*IGuestDebugControl_setDebugAddressResponse, error) {
	response := new(IGuestDebugControl_setDebugAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestDebugControl_setDebugAddress(request *IGuestDebugControl_setDebugAddress) (*IGuestDebugControl_setDebugAddressResponse, error) {
	return service.IGuestDebugControl_setDebugAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestDebugControl_getDebugPortContext(ctx context.Context, request *IGuestDebugControl_getDebugPort) (*IGuestDebugControl_getDebugPortResponse, error) {
	response := new(IGuestDebugControl_getDebugPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestDebugControl_getDebugPort(request *IGuestDebugControl_getDebugPort) (*IGuestDebugControl_getDebugPortResponse, error) {
	return service.IGuestDebugControl_getDebugPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestDebugControl_setDebugPortContext(ctx context.Context, request *IGuestDebugControl_setDebugPort) (*IGuestDebugControl_setDebugPortResponse, error) {
	response := new(IGuestDebugControl_setDebugPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestDebugControl_setDebugPort(request *IGuestDebugControl_setDebugPort) (*IGuestDebugControl_setDebugPortResponse, error) {
	return service.IGuestDebugControl_setDebugPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEventSource_createListenerContext(ctx context.Context, request *IEventSource_createListener) (*IEventSource_createListenerResponse, error) {
	response := new(IEventSource_createListenerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEventSource_createListener(request *IEventSource_createListener) (*IEventSource_createListenerResponse, error) {
	return service.IEventSource_createListenerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEventSource_createAggregatorContext(ctx context.Context, request *IEventSource_createAggregator) (*IEventSource_createAggregatorResponse, error) {
	response := new(IEventSource_createAggregatorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEventSource_createAggregator(request *IEventSource_createAggregator) (*IEventSource_createAggregatorResponse, error) {
	return service.IEventSource_createAggregatorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEventSource_registerListenerContext(ctx context.Context, request *IEventSource_registerListener) (*IEventSource_registerListenerResponse, error) {
	response := new(IEventSource_registerListenerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEventSource_registerListener(request *IEventSource_registerListener) (*IEventSource_registerListenerResponse, error) {
	return service.IEventSource_registerListenerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEventSource_unregisterListenerContext(ctx context.Context, request *IEventSource_unregisterListener) (*IEventSource_unregisterListenerResponse, error) {
	response := new(IEventSource_unregisterListenerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEventSource_unregisterListener(request *IEventSource_unregisterListener) (*IEventSource_unregisterListenerResponse, error) {
	return service.IEventSource_unregisterListenerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEventSource_fireEventContext(ctx context.Context, request *IEventSource_fireEvent) (*IEventSource_fireEventResponse, error) {
	response := new(IEventSource_fireEventResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEventSource_fireEvent(request *IEventSource_fireEvent) (*IEventSource_fireEventResponse, error) {
	return service.IEventSource_fireEventContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEventSource_getEventContext(ctx context.Context, request *IEventSource_getEvent) (*IEventSource_getEventResponse, error) {
	response := new(IEventSource_getEventResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEventSource_getEvent(request *IEventSource_getEvent) (*IEventSource_getEventResponse, error) {
	return service.IEventSource_getEventContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEventSource_eventProcessedContext(ctx context.Context, request *IEventSource_eventProcessed) (*IEventSource_eventProcessedResponse, error) {
	response := new(IEventSource_eventProcessedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEventSource_eventProcessed(request *IEventSource_eventProcessed) (*IEventSource_eventProcessedResponse, error) {
	return service.IEventSource_eventProcessedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEventListener_handleEventContext(ctx context.Context, request *IEventListener_handleEvent) (*IEventListener_handleEventResponse, error) {
	response := new(IEventListener_handleEventResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEventListener_handleEvent(request *IEventListener_handleEvent) (*IEventListener_handleEventResponse, error) {
	return service.IEventListener_handleEventContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEvent_getTypeContext(ctx context.Context, request *IEvent_getType) (*IEvent_getTypeResponse, error) {
	response := new(IEvent_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEvent_getType(request *IEvent_getType) (*IEvent_getTypeResponse, error) {
	return service.IEvent_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEvent_getSourceContext(ctx context.Context, request *IEvent_getSource) (*IEvent_getSourceResponse, error) {
	response := new(IEvent_getSourceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEvent_getSource(request *IEvent_getSource) (*IEvent_getSourceResponse, error) {
	return service.IEvent_getSourceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEvent_getWaitableContext(ctx context.Context, request *IEvent_getWaitable) (*IEvent_getWaitableResponse, error) {
	response := new(IEvent_getWaitableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEvent_getWaitable(request *IEvent_getWaitable) (*IEvent_getWaitableResponse, error) {
	return service.IEvent_getWaitableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEvent_setProcessedContext(ctx context.Context, request *IEvent_setProcessed) (*IEvent_setProcessedResponse, error) {
	response := new(IEvent_setProcessedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEvent_setProcessed(request *IEvent_setProcessed) (*IEvent_setProcessedResponse, error) {
	return service.IEvent_setProcessedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEvent_waitProcessedContext(ctx context.Context, request *IEvent_waitProcessed) (*IEvent_waitProcessedResponse, error) {
	response := new(IEvent_waitProcessedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEvent_waitProcessed(request *IEvent_waitProcessed) (*IEvent_waitProcessedResponse, error) {
	return service.IEvent_waitProcessedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IReusableEvent_getGenerationContext(ctx context.Context, request *IReusableEvent_getGeneration) (*IReusableEvent_getGenerationResponse, error) {
	response := new(IReusableEvent_getGenerationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IReusableEvent_getGeneration(request *IReusableEvent_getGeneration) (*IReusableEvent_getGenerationResponse, error) {
	return service.IReusableEvent_getGenerationContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IReusableEvent_reuseContext(ctx context.Context, request *IReusableEvent_reuse) (*IReusableEvent_reuseResponse, error) {
	response := new(IReusableEvent_reuseResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IReusableEvent_reuse(request *IReusableEvent_reuse) (*IReusableEvent_reuseResponse, error) {
	return service.IReusableEvent_reuseContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineEvent_getMachineIdContext(ctx context.Context, request *IMachineEvent_getMachineId) (*IMachineEvent_getMachineIdResponse, error) {
	response := new(IMachineEvent_getMachineIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineEvent_getMachineId(request *IMachineEvent_getMachineId) (*IMachineEvent_getMachineIdResponse, error) {
	return service.IMachineEvent_getMachineIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineStateChangedEvent_getStateContext(ctx context.Context, request *IMachineStateChangedEvent_getState) (*IMachineStateChangedEvent_getStateResponse, error) {
	response := new(IMachineStateChangedEvent_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineStateChangedEvent_getState(request *IMachineStateChangedEvent_getState) (*IMachineStateChangedEvent_getStateResponse, error) {
	return service.IMachineStateChangedEvent_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineDataChangedEvent_getTemporaryContext(ctx context.Context, request *IMachineDataChangedEvent_getTemporary) (*IMachineDataChangedEvent_getTemporaryResponse, error) {
	response := new(IMachineDataChangedEvent_getTemporaryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineDataChangedEvent_getTemporary(request *IMachineDataChangedEvent_getTemporary) (*IMachineDataChangedEvent_getTemporaryResponse, error) {
	return service.IMachineDataChangedEvent_getTemporaryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumRegisteredEvent_getMediumIdContext(ctx context.Context, request *IMediumRegisteredEvent_getMediumId) (*IMediumRegisteredEvent_getMediumIdResponse, error) {
	response := new(IMediumRegisteredEvent_getMediumIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumRegisteredEvent_getMediumId(request *IMediumRegisteredEvent_getMediumId) (*IMediumRegisteredEvent_getMediumIdResponse, error) {
	return service.IMediumRegisteredEvent_getMediumIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumRegisteredEvent_getMediumTypeContext(ctx context.Context, request *IMediumRegisteredEvent_getMediumType) (*IMediumRegisteredEvent_getMediumTypeResponse, error) {
	response := new(IMediumRegisteredEvent_getMediumTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumRegisteredEvent_getMediumType(request *IMediumRegisteredEvent_getMediumType) (*IMediumRegisteredEvent_getMediumTypeResponse, error) {
	return service.IMediumRegisteredEvent_getMediumTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumRegisteredEvent_getRegisteredContext(ctx context.Context, request *IMediumRegisteredEvent_getRegistered) (*IMediumRegisteredEvent_getRegisteredResponse, error) {
	response := new(IMediumRegisteredEvent_getRegisteredResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumRegisteredEvent_getRegistered(request *IMediumRegisteredEvent_getRegistered) (*IMediumRegisteredEvent_getRegisteredResponse, error) {
	return service.IMediumRegisteredEvent_getRegisteredContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumConfigChangedEvent_getMediumContext(ctx context.Context, request *IMediumConfigChangedEvent_getMedium) (*IMediumConfigChangedEvent_getMediumResponse, error) {
	response := new(IMediumConfigChangedEvent_getMediumResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumConfigChangedEvent_getMedium(request *IMediumConfigChangedEvent_getMedium) (*IMediumConfigChangedEvent_getMediumResponse, error) {
	return service.IMediumConfigChangedEvent_getMediumContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineRegisteredEvent_getRegisteredContext(ctx context.Context, request *IMachineRegisteredEvent_getRegistered) (*IMachineRegisteredEvent_getRegisteredResponse, error) {
	response := new(IMachineRegisteredEvent_getRegisteredResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineRegisteredEvent_getRegistered(request *IMachineRegisteredEvent_getRegistered) (*IMachineRegisteredEvent_getRegisteredResponse, error) {
	return service.IMachineRegisteredEvent_getRegisteredContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISessionStateChangedEvent_getStateContext(ctx context.Context, request *ISessionStateChangedEvent_getState) (*ISessionStateChangedEvent_getStateResponse, error) {
	response := new(ISessionStateChangedEvent_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISessionStateChangedEvent_getState(request *ISessionStateChangedEvent_getState) (*ISessionStateChangedEvent_getStateResponse, error) {
	return service.ISessionStateChangedEvent_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestPropertyChangedEvent_getNameContext(ctx context.Context, request *IGuestPropertyChangedEvent_getName) (*IGuestPropertyChangedEvent_getNameResponse, error) {
	response := new(IGuestPropertyChangedEvent_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestPropertyChangedEvent_getName(request *IGuestPropertyChangedEvent_getName) (*IGuestPropertyChangedEvent_getNameResponse, error) {
	return service.IGuestPropertyChangedEvent_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestPropertyChangedEvent_getValueContext(ctx context.Context, request *IGuestPropertyChangedEvent_getValue) (*IGuestPropertyChangedEvent_getValueResponse, error) {
	response := new(IGuestPropertyChangedEvent_getValueResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestPropertyChangedEvent_getValue(request *IGuestPropertyChangedEvent_getValue) (*IGuestPropertyChangedEvent_getValueResponse, error) {
	return service.IGuestPropertyChangedEvent_getValueContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestPropertyChangedEvent_getFlagsContext(ctx context.Context, request *IGuestPropertyChangedEvent_getFlags) (*IGuestPropertyChangedEvent_getFlagsResponse, error) {
	response := new(IGuestPropertyChangedEvent_getFlagsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestPropertyChangedEvent_getFlags(request *IGuestPropertyChangedEvent_getFlags) (*IGuestPropertyChangedEvent_getFlagsResponse, error) {
	return service.IGuestPropertyChangedEvent_getFlagsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestPropertyChangedEvent_getFWasDeletedContext(ctx context.Context, request *IGuestPropertyChangedEvent_getFWasDeleted) (*IGuestPropertyChangedEvent_getFWasDeletedResponse, error) {
	response := new(IGuestPropertyChangedEvent_getFWasDeletedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestPropertyChangedEvent_getFWasDeleted(request *IGuestPropertyChangedEvent_getFWasDeleted) (*IGuestPropertyChangedEvent_getFWasDeletedResponse, error) {
	return service.IGuestPropertyChangedEvent_getFWasDeletedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshotEvent_getSnapshotIdContext(ctx context.Context, request *ISnapshotEvent_getSnapshotId) (*ISnapshotEvent_getSnapshotIdResponse, error) {
	response := new(ISnapshotEvent_getSnapshotIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshotEvent_getSnapshotId(request *ISnapshotEvent_getSnapshotId) (*ISnapshotEvent_getSnapshotIdResponse, error) {
	return service.ISnapshotEvent_getSnapshotIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces(request *ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.ISnapshotTakenEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces(request *ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.ISnapshotDeletedEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces(request *ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.ISnapshotRestoredEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.ISnapshotChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getVisibleContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getVisible) (*IMousePointerShapeChangedEvent_getVisibleResponse, error) {
	response := new(IMousePointerShapeChangedEvent_getVisibleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getVisible(request *IMousePointerShapeChangedEvent_getVisible) (*IMousePointerShapeChangedEvent_getVisibleResponse, error) {
	return service.IMousePointerShapeChangedEvent_getVisibleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getAlphaContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getAlpha) (*IMousePointerShapeChangedEvent_getAlphaResponse, error) {
	response := new(IMousePointerShapeChangedEvent_getAlphaResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getAlpha(request *IMousePointerShapeChangedEvent_getAlpha) (*IMousePointerShapeChangedEvent_getAlphaResponse, error) {
	return service.IMousePointerShapeChangedEvent_getAlphaContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getXhotContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getXhot) (*IMousePointerShapeChangedEvent_getXhotResponse, error) {
	response := new(IMousePointerShapeChangedEvent_getXhotResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getXhot(request *IMousePointerShapeChangedEvent_getXhot) (*IMousePointerShapeChangedEvent_getXhotResponse, error) {
	return service.IMousePointerShapeChangedEvent_getXhotContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getYhotContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getYhot) (*IMousePointerShapeChangedEvent_getYhotResponse, error) {
	response := new(IMousePointerShapeChangedEvent_getYhotResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getYhot(request *IMousePointerShapeChangedEvent_getYhot) (*IMousePointerShapeChangedEvent_getYhotResponse, error) {
	return service.IMousePointerShapeChangedEvent_getYhotContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getWidthContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getWidth) (*IMousePointerShapeChangedEvent_getWidthResponse, error) {
	response := new(IMousePointerShapeChangedEvent_getWidthResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getWidth(request *IMousePointerShapeChangedEvent_getWidth) (*IMousePointerShapeChangedEvent_getWidthResponse, error) {
	return service.IMousePointerShapeChangedEvent_getWidthContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getHeightContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getHeight) (*IMousePointerShapeChangedEvent_getHeightResponse, error) {
	response := new(IMousePointerShapeChangedEvent_getHeightResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getHeight(request *IMousePointerShapeChangedEvent_getHeight) (*IMousePointerShapeChangedEvent_getHeightResponse, error) {
	return service.IMousePointerShapeChangedEvent_getHeightContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getShapeContext(ctx context.Context, request *IMousePointerShapeChangedEvent_getShape) (*IMousePointerShapeChangedEvent_getShapeResponse, error) {
	response := new(IMousePointerShapeChangedEvent_getShapeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMousePointerShapeChangedEvent_getShape(request *IMousePointerShapeChangedEvent_getShape) (*IMousePointerShapeChangedEvent_getShapeResponse, error) {
	return service.IMousePointerShapeChangedEvent_getShapeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouseCapabilityChangedEvent_getSupportsAbsoluteContext(ctx context.Context, request *IMouseCapabilityChangedEvent_getSupportsAbsolute) (*IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse, error) {
	response := new(IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouseCapabilityChangedEvent_getSupportsAbsolute(request *IMouseCapabilityChangedEvent_getSupportsAbsolute) (*IMouseCapabilityChangedEvent_getSupportsAbsoluteResponse, error) {
	return service.IMouseCapabilityChangedEvent_getSupportsAbsoluteContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouseCapabilityChangedEvent_getSupportsRelativeContext(ctx context.Context, request *IMouseCapabilityChangedEvent_getSupportsRelative) (*IMouseCapabilityChangedEvent_getSupportsRelativeResponse, error) {
	response := new(IMouseCapabilityChangedEvent_getSupportsRelativeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouseCapabilityChangedEvent_getSupportsRelative(request *IMouseCapabilityChangedEvent_getSupportsRelative) (*IMouseCapabilityChangedEvent_getSupportsRelativeResponse, error) {
	return service.IMouseCapabilityChangedEvent_getSupportsRelativeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouseCapabilityChangedEvent_getSupportsTouchScreenContext(ctx context.Context, request *IMouseCapabilityChangedEvent_getSupportsTouchScreen) (*IMouseCapabilityChangedEvent_getSupportsTouchScreenResponse, error) {
	response := new(IMouseCapabilityChangedEvent_getSupportsTouchScreenResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouseCapabilityChangedEvent_getSupportsTouchScreen(request *IMouseCapabilityChangedEvent_getSupportsTouchScreen) (*IMouseCapabilityChangedEvent_getSupportsTouchScreenResponse, error) {
	return service.IMouseCapabilityChangedEvent_getSupportsTouchScreenContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouseCapabilityChangedEvent_getSupportsTouchPadContext(ctx context.Context, request *IMouseCapabilityChangedEvent_getSupportsTouchPad) (*IMouseCapabilityChangedEvent_getSupportsTouchPadResponse, error) {
	response := new(IMouseCapabilityChangedEvent_getSupportsTouchPadResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouseCapabilityChangedEvent_getSupportsTouchPad(request *IMouseCapabilityChangedEvent_getSupportsTouchPad) (*IMouseCapabilityChangedEvent_getSupportsTouchPadResponse, error) {
	return service.IMouseCapabilityChangedEvent_getSupportsTouchPadContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMouseCapabilityChangedEvent_getNeedsHostCursorContext(ctx context.Context, request *IMouseCapabilityChangedEvent_getNeedsHostCursor) (*IMouseCapabilityChangedEvent_getNeedsHostCursorResponse, error) {
	response := new(IMouseCapabilityChangedEvent_getNeedsHostCursorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMouseCapabilityChangedEvent_getNeedsHostCursor(request *IMouseCapabilityChangedEvent_getNeedsHostCursor) (*IMouseCapabilityChangedEvent_getNeedsHostCursorResponse, error) {
	return service.IMouseCapabilityChangedEvent_getNeedsHostCursorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IKeyboardLedsChangedEvent_getNumLockContext(ctx context.Context, request *IKeyboardLedsChangedEvent_getNumLock) (*IKeyboardLedsChangedEvent_getNumLockResponse, error) {
	response := new(IKeyboardLedsChangedEvent_getNumLockResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IKeyboardLedsChangedEvent_getNumLock(request *IKeyboardLedsChangedEvent_getNumLock) (*IKeyboardLedsChangedEvent_getNumLockResponse, error) {
	return service.IKeyboardLedsChangedEvent_getNumLockContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IKeyboardLedsChangedEvent_getCapsLockContext(ctx context.Context, request *IKeyboardLedsChangedEvent_getCapsLock) (*IKeyboardLedsChangedEvent_getCapsLockResponse, error) {
	response := new(IKeyboardLedsChangedEvent_getCapsLockResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IKeyboardLedsChangedEvent_getCapsLock(request *IKeyboardLedsChangedEvent_getCapsLock) (*IKeyboardLedsChangedEvent_getCapsLockResponse, error) {
	return service.IKeyboardLedsChangedEvent_getCapsLockContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IKeyboardLedsChangedEvent_getScrollLockContext(ctx context.Context, request *IKeyboardLedsChangedEvent_getScrollLock) (*IKeyboardLedsChangedEvent_getScrollLockResponse, error) {
	response := new(IKeyboardLedsChangedEvent_getScrollLockResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IKeyboardLedsChangedEvent_getScrollLock(request *IKeyboardLedsChangedEvent_getScrollLock) (*IKeyboardLedsChangedEvent_getScrollLockResponse, error) {
	return service.IKeyboardLedsChangedEvent_getScrollLockContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStateChangedEvent_getStateContext(ctx context.Context, request *IStateChangedEvent_getState) (*IStateChangedEvent_getStateResponse, error) {
	response := new(IStateChangedEvent_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStateChangedEvent_getState(request *IStateChangedEvent_getState) (*IStateChangedEvent_getStateResponse, error) {
	return service.IStateChangedEvent_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IAdditionsStateChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INetworkAdapterChangedEvent_getNetworkAdapterContext(ctx context.Context, request *INetworkAdapterChangedEvent_getNetworkAdapter) (*INetworkAdapterChangedEvent_getNetworkAdapterResponse, error) {
	response := new(INetworkAdapterChangedEvent_getNetworkAdapterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INetworkAdapterChangedEvent_getNetworkAdapter(request *INetworkAdapterChangedEvent_getNetworkAdapter) (*INetworkAdapterChangedEvent_getNetworkAdapterResponse, error) {
	return service.INetworkAdapterChangedEvent_getNetworkAdapterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IAudioAdapterChangedEvent_getAudioAdapterContext(ctx context.Context, request *IAudioAdapterChangedEvent_getAudioAdapter) (*IAudioAdapterChangedEvent_getAudioAdapterResponse, error) {
	response := new(IAudioAdapterChangedEvent_getAudioAdapterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IAudioAdapterChangedEvent_getAudioAdapter(request *IAudioAdapterChangedEvent_getAudioAdapter) (*IAudioAdapterChangedEvent_getAudioAdapterResponse, error) {
	return service.IAudioAdapterChangedEvent_getAudioAdapterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISerialPortChangedEvent_getSerialPortContext(ctx context.Context, request *ISerialPortChangedEvent_getSerialPort) (*ISerialPortChangedEvent_getSerialPortResponse, error) {
	response := new(ISerialPortChangedEvent_getSerialPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISerialPortChangedEvent_getSerialPort(request *ISerialPortChangedEvent_getSerialPort) (*ISerialPortChangedEvent_getSerialPortResponse, error) {
	return service.ISerialPortChangedEvent_getSerialPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IParallelPortChangedEvent_getParallelPortContext(ctx context.Context, request *IParallelPortChangedEvent_getParallelPort) (*IParallelPortChangedEvent_getParallelPortResponse, error) {
	response := new(IParallelPortChangedEvent_getParallelPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IParallelPortChangedEvent_getParallelPort(request *IParallelPortChangedEvent_getParallelPort) (*IParallelPortChangedEvent_getParallelPortResponse, error) {
	return service.IParallelPortChangedEvent_getParallelPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageControllerChangedEvent_getMachinIdContext(ctx context.Context, request *IStorageControllerChangedEvent_getMachinId) (*IStorageControllerChangedEvent_getMachinIdResponse, error) {
	response := new(IStorageControllerChangedEvent_getMachinIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageControllerChangedEvent_getMachinId(request *IStorageControllerChangedEvent_getMachinId) (*IStorageControllerChangedEvent_getMachinIdResponse, error) {
	return service.IStorageControllerChangedEvent_getMachinIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageControllerChangedEvent_getControllerNameContext(ctx context.Context, request *IStorageControllerChangedEvent_getControllerName) (*IStorageControllerChangedEvent_getControllerNameResponse, error) {
	response := new(IStorageControllerChangedEvent_getControllerNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageControllerChangedEvent_getControllerName(request *IStorageControllerChangedEvent_getControllerName) (*IStorageControllerChangedEvent_getControllerNameResponse, error) {
	return service.IStorageControllerChangedEvent_getControllerNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMediumChangedEvent_getMediumAttachmentContext(ctx context.Context, request *IMediumChangedEvent_getMediumAttachment) (*IMediumChangedEvent_getMediumAttachmentResponse, error) {
	response := new(IMediumChangedEvent_getMediumAttachmentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMediumChangedEvent_getMediumAttachment(request *IMediumChangedEvent_getMediumAttachment) (*IMediumChangedEvent_getMediumAttachmentResponse, error) {
	return service.IMediumChangedEvent_getMediumAttachmentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IClipboardModeChangedEvent_getClipboardModeContext(ctx context.Context, request *IClipboardModeChangedEvent_getClipboardMode) (*IClipboardModeChangedEvent_getClipboardModeResponse, error) {
	response := new(IClipboardModeChangedEvent_getClipboardModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IClipboardModeChangedEvent_getClipboardMode(request *IClipboardModeChangedEvent_getClipboardMode) (*IClipboardModeChangedEvent_getClipboardModeResponse, error) {
	return service.IClipboardModeChangedEvent_getClipboardModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IClipboardFileTransferModeChangedEvent_getEnabledContext(ctx context.Context, request *IClipboardFileTransferModeChangedEvent_getEnabled) (*IClipboardFileTransferModeChangedEvent_getEnabledResponse, error) {
	response := new(IClipboardFileTransferModeChangedEvent_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IClipboardFileTransferModeChangedEvent_getEnabled(request *IClipboardFileTransferModeChangedEvent_getEnabled) (*IClipboardFileTransferModeChangedEvent_getEnabledResponse, error) {
	return service.IClipboardFileTransferModeChangedEvent_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IDnDModeChangedEvent_getDndModeContext(ctx context.Context, request *IDnDModeChangedEvent_getDndMode) (*IDnDModeChangedEvent_getDndModeResponse, error) {
	response := new(IDnDModeChangedEvent_getDndModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IDnDModeChangedEvent_getDndMode(request *IDnDModeChangedEvent_getDndMode) (*IDnDModeChangedEvent_getDndModeResponse, error) {
	return service.IDnDModeChangedEvent_getDndModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICPUChangedEvent_getCPUContext(ctx context.Context, request *ICPUChangedEvent_getCPU) (*ICPUChangedEvent_getCPUResponse, error) {
	response := new(ICPUChangedEvent_getCPUResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICPUChangedEvent_getCPU(request *ICPUChangedEvent_getCPU) (*ICPUChangedEvent_getCPUResponse, error) {
	return service.ICPUChangedEvent_getCPUContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICPUChangedEvent_getAddContext(ctx context.Context, request *ICPUChangedEvent_getAdd) (*ICPUChangedEvent_getAddResponse, error) {
	response := new(ICPUChangedEvent_getAddResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICPUChangedEvent_getAdd(request *ICPUChangedEvent_getAdd) (*ICPUChangedEvent_getAddResponse, error) {
	return service.ICPUChangedEvent_getAddContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICPUExecutionCapChangedEvent_getExecutionCapContext(ctx context.Context, request *ICPUExecutionCapChangedEvent_getExecutionCap) (*ICPUExecutionCapChangedEvent_getExecutionCapResponse, error) {
	response := new(ICPUExecutionCapChangedEvent_getExecutionCapResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICPUExecutionCapChangedEvent_getExecutionCap(request *ICPUExecutionCapChangedEvent_getExecutionCap) (*ICPUExecutionCapChangedEvent_getExecutionCapResponse, error) {
	return service.ICPUExecutionCapChangedEvent_getExecutionCapContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestKeyboardEvent_getScancodesContext(ctx context.Context, request *IGuestKeyboardEvent_getScancodes) (*IGuestKeyboardEvent_getScancodesResponse, error) {
	response := new(IGuestKeyboardEvent_getScancodesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestKeyboardEvent_getScancodes(request *IGuestKeyboardEvent_getScancodes) (*IGuestKeyboardEvent_getScancodesResponse, error) {
	return service.IGuestKeyboardEvent_getScancodesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMouseEvent_getModeContext(ctx context.Context, request *IGuestMouseEvent_getMode) (*IGuestMouseEvent_getModeResponse, error) {
	response := new(IGuestMouseEvent_getModeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMouseEvent_getMode(request *IGuestMouseEvent_getMode) (*IGuestMouseEvent_getModeResponse, error) {
	return service.IGuestMouseEvent_getModeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMouseEvent_getXContext(ctx context.Context, request *IGuestMouseEvent_getX) (*IGuestMouseEvent_getXResponse, error) {
	response := new(IGuestMouseEvent_getXResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMouseEvent_getX(request *IGuestMouseEvent_getX) (*IGuestMouseEvent_getXResponse, error) {
	return service.IGuestMouseEvent_getXContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMouseEvent_getYContext(ctx context.Context, request *IGuestMouseEvent_getY) (*IGuestMouseEvent_getYResponse, error) {
	response := new(IGuestMouseEvent_getYResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMouseEvent_getY(request *IGuestMouseEvent_getY) (*IGuestMouseEvent_getYResponse, error) {
	return service.IGuestMouseEvent_getYContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMouseEvent_getZContext(ctx context.Context, request *IGuestMouseEvent_getZ) (*IGuestMouseEvent_getZResponse, error) {
	response := new(IGuestMouseEvent_getZResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMouseEvent_getZ(request *IGuestMouseEvent_getZ) (*IGuestMouseEvent_getZResponse, error) {
	return service.IGuestMouseEvent_getZContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMouseEvent_getWContext(ctx context.Context, request *IGuestMouseEvent_getW) (*IGuestMouseEvent_getWResponse, error) {
	response := new(IGuestMouseEvent_getWResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMouseEvent_getW(request *IGuestMouseEvent_getW) (*IGuestMouseEvent_getWResponse, error) {
	return service.IGuestMouseEvent_getWContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMouseEvent_getButtonsContext(ctx context.Context, request *IGuestMouseEvent_getButtons) (*IGuestMouseEvent_getButtonsResponse, error) {
	response := new(IGuestMouseEvent_getButtonsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMouseEvent_getButtons(request *IGuestMouseEvent_getButtons) (*IGuestMouseEvent_getButtonsResponse, error) {
	return service.IGuestMouseEvent_getButtonsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMultiTouchEvent_getContactCountContext(ctx context.Context, request *IGuestMultiTouchEvent_getContactCount) (*IGuestMultiTouchEvent_getContactCountResponse, error) {
	response := new(IGuestMultiTouchEvent_getContactCountResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMultiTouchEvent_getContactCount(request *IGuestMultiTouchEvent_getContactCount) (*IGuestMultiTouchEvent_getContactCountResponse, error) {
	return service.IGuestMultiTouchEvent_getContactCountContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMultiTouchEvent_getXPositionsContext(ctx context.Context, request *IGuestMultiTouchEvent_getXPositions) (*IGuestMultiTouchEvent_getXPositionsResponse, error) {
	response := new(IGuestMultiTouchEvent_getXPositionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMultiTouchEvent_getXPositions(request *IGuestMultiTouchEvent_getXPositions) (*IGuestMultiTouchEvent_getXPositionsResponse, error) {
	return service.IGuestMultiTouchEvent_getXPositionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMultiTouchEvent_getYPositionsContext(ctx context.Context, request *IGuestMultiTouchEvent_getYPositions) (*IGuestMultiTouchEvent_getYPositionsResponse, error) {
	response := new(IGuestMultiTouchEvent_getYPositionsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMultiTouchEvent_getYPositions(request *IGuestMultiTouchEvent_getYPositions) (*IGuestMultiTouchEvent_getYPositionsResponse, error) {
	return service.IGuestMultiTouchEvent_getYPositionsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMultiTouchEvent_getContactIdsContext(ctx context.Context, request *IGuestMultiTouchEvent_getContactIds) (*IGuestMultiTouchEvent_getContactIdsResponse, error) {
	response := new(IGuestMultiTouchEvent_getContactIdsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMultiTouchEvent_getContactIds(request *IGuestMultiTouchEvent_getContactIds) (*IGuestMultiTouchEvent_getContactIdsResponse, error) {
	return service.IGuestMultiTouchEvent_getContactIdsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMultiTouchEvent_getContactFlagsContext(ctx context.Context, request *IGuestMultiTouchEvent_getContactFlags) (*IGuestMultiTouchEvent_getContactFlagsResponse, error) {
	response := new(IGuestMultiTouchEvent_getContactFlagsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMultiTouchEvent_getContactFlags(request *IGuestMultiTouchEvent_getContactFlags) (*IGuestMultiTouchEvent_getContactFlagsResponse, error) {
	return service.IGuestMultiTouchEvent_getContactFlagsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMultiTouchEvent_getIsTouchScreenContext(ctx context.Context, request *IGuestMultiTouchEvent_getIsTouchScreen) (*IGuestMultiTouchEvent_getIsTouchScreenResponse, error) {
	response := new(IGuestMultiTouchEvent_getIsTouchScreenResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMultiTouchEvent_getIsTouchScreen(request *IGuestMultiTouchEvent_getIsTouchScreen) (*IGuestMultiTouchEvent_getIsTouchScreenResponse, error) {
	return service.IGuestMultiTouchEvent_getIsTouchScreenContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMultiTouchEvent_getScanTimeContext(ctx context.Context, request *IGuestMultiTouchEvent_getScanTime) (*IGuestMultiTouchEvent_getScanTimeResponse, error) {
	response := new(IGuestMultiTouchEvent_getScanTimeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMultiTouchEvent_getScanTime(request *IGuestMultiTouchEvent_getScanTime) (*IGuestMultiTouchEvent_getScanTimeResponse, error) {
	return service.IGuestMultiTouchEvent_getScanTimeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSessionEvent_getSessionContext(ctx context.Context, request *IGuestSessionEvent_getSession) (*IGuestSessionEvent_getSessionResponse, error) {
	response := new(IGuestSessionEvent_getSessionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSessionEvent_getSession(request *IGuestSessionEvent_getSession) (*IGuestSessionEvent_getSessionResponse, error) {
	return service.IGuestSessionEvent_getSessionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSessionStateChangedEvent_getIdContext(ctx context.Context, request *IGuestSessionStateChangedEvent_getId) (*IGuestSessionStateChangedEvent_getIdResponse, error) {
	response := new(IGuestSessionStateChangedEvent_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSessionStateChangedEvent_getId(request *IGuestSessionStateChangedEvent_getId) (*IGuestSessionStateChangedEvent_getIdResponse, error) {
	return service.IGuestSessionStateChangedEvent_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSessionStateChangedEvent_getStatusContext(ctx context.Context, request *IGuestSessionStateChangedEvent_getStatus) (*IGuestSessionStateChangedEvent_getStatusResponse, error) {
	response := new(IGuestSessionStateChangedEvent_getStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSessionStateChangedEvent_getStatus(request *IGuestSessionStateChangedEvent_getStatus) (*IGuestSessionStateChangedEvent_getStatusResponse, error) {
	return service.IGuestSessionStateChangedEvent_getStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSessionStateChangedEvent_getErrorContext(ctx context.Context, request *IGuestSessionStateChangedEvent_getError) (*IGuestSessionStateChangedEvent_getErrorResponse, error) {
	response := new(IGuestSessionStateChangedEvent_getErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSessionStateChangedEvent_getError(request *IGuestSessionStateChangedEvent_getError) (*IGuestSessionStateChangedEvent_getErrorResponse, error) {
	return service.IGuestSessionStateChangedEvent_getErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestSessionRegisteredEvent_getRegisteredContext(ctx context.Context, request *IGuestSessionRegisteredEvent_getRegistered) (*IGuestSessionRegisteredEvent_getRegisteredResponse, error) {
	response := new(IGuestSessionRegisteredEvent_getRegisteredResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestSessionRegisteredEvent_getRegistered(request *IGuestSessionRegisteredEvent_getRegistered) (*IGuestSessionRegisteredEvent_getRegisteredResponse, error) {
	return service.IGuestSessionRegisteredEvent_getRegisteredContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestProcessEvent_getProcessContext(ctx context.Context, request *IGuestProcessEvent_getProcess) (*IGuestProcessEvent_getProcessResponse, error) {
	response := new(IGuestProcessEvent_getProcessResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestProcessEvent_getProcess(request *IGuestProcessEvent_getProcess) (*IGuestProcessEvent_getProcessResponse, error) {
	return service.IGuestProcessEvent_getProcessContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestProcessEvent_getPidContext(ctx context.Context, request *IGuestProcessEvent_getPid) (*IGuestProcessEvent_getPidResponse, error) {
	response := new(IGuestProcessEvent_getPidResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestProcessEvent_getPid(request *IGuestProcessEvent_getPid) (*IGuestProcessEvent_getPidResponse, error) {
	return service.IGuestProcessEvent_getPidContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestProcessRegisteredEvent_getRegisteredContext(ctx context.Context, request *IGuestProcessRegisteredEvent_getRegistered) (*IGuestProcessRegisteredEvent_getRegisteredResponse, error) {
	response := new(IGuestProcessRegisteredEvent_getRegisteredResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestProcessRegisteredEvent_getRegistered(request *IGuestProcessRegisteredEvent_getRegistered) (*IGuestProcessRegisteredEvent_getRegisteredResponse, error) {
	return service.IGuestProcessRegisteredEvent_getRegisteredContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestProcessStateChangedEvent_getStatusContext(ctx context.Context, request *IGuestProcessStateChangedEvent_getStatus) (*IGuestProcessStateChangedEvent_getStatusResponse, error) {
	response := new(IGuestProcessStateChangedEvent_getStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestProcessStateChangedEvent_getStatus(request *IGuestProcessStateChangedEvent_getStatus) (*IGuestProcessStateChangedEvent_getStatusResponse, error) {
	return service.IGuestProcessStateChangedEvent_getStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestProcessStateChangedEvent_getErrorContext(ctx context.Context, request *IGuestProcessStateChangedEvent_getError) (*IGuestProcessStateChangedEvent_getErrorResponse, error) {
	response := new(IGuestProcessStateChangedEvent_getErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestProcessStateChangedEvent_getError(request *IGuestProcessStateChangedEvent_getError) (*IGuestProcessStateChangedEvent_getErrorResponse, error) {
	return service.IGuestProcessStateChangedEvent_getErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestProcessIOEvent_getHandleContext(ctx context.Context, request *IGuestProcessIOEvent_getHandle) (*IGuestProcessIOEvent_getHandleResponse, error) {
	response := new(IGuestProcessIOEvent_getHandleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestProcessIOEvent_getHandle(request *IGuestProcessIOEvent_getHandle) (*IGuestProcessIOEvent_getHandleResponse, error) {
	return service.IGuestProcessIOEvent_getHandleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestProcessIOEvent_getProcessedContext(ctx context.Context, request *IGuestProcessIOEvent_getProcessed) (*IGuestProcessIOEvent_getProcessedResponse, error) {
	response := new(IGuestProcessIOEvent_getProcessedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestProcessIOEvent_getProcessed(request *IGuestProcessIOEvent_getProcessed) (*IGuestProcessIOEvent_getProcessedResponse, error) {
	return service.IGuestProcessIOEvent_getProcessedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestProcessInputNotifyEvent_getStatusContext(ctx context.Context, request *IGuestProcessInputNotifyEvent_getStatus) (*IGuestProcessInputNotifyEvent_getStatusResponse, error) {
	response := new(IGuestProcessInputNotifyEvent_getStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestProcessInputNotifyEvent_getStatus(request *IGuestProcessInputNotifyEvent_getStatus) (*IGuestProcessInputNotifyEvent_getStatusResponse, error) {
	return service.IGuestProcessInputNotifyEvent_getStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestProcessOutputEvent_getDataContext(ctx context.Context, request *IGuestProcessOutputEvent_getData) (*IGuestProcessOutputEvent_getDataResponse, error) {
	response := new(IGuestProcessOutputEvent_getDataResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestProcessOutputEvent_getData(request *IGuestProcessOutputEvent_getData) (*IGuestProcessOutputEvent_getDataResponse, error) {
	return service.IGuestProcessOutputEvent_getDataContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFileEvent_getFileContext(ctx context.Context, request *IGuestFileEvent_getFile) (*IGuestFileEvent_getFileResponse, error) {
	response := new(IGuestFileEvent_getFileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFileEvent_getFile(request *IGuestFileEvent_getFile) (*IGuestFileEvent_getFileResponse, error) {
	return service.IGuestFileEvent_getFileContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFileRegisteredEvent_getRegisteredContext(ctx context.Context, request *IGuestFileRegisteredEvent_getRegistered) (*IGuestFileRegisteredEvent_getRegisteredResponse, error) {
	response := new(IGuestFileRegisteredEvent_getRegisteredResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFileRegisteredEvent_getRegistered(request *IGuestFileRegisteredEvent_getRegistered) (*IGuestFileRegisteredEvent_getRegisteredResponse, error) {
	return service.IGuestFileRegisteredEvent_getRegisteredContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFileStateChangedEvent_getStatusContext(ctx context.Context, request *IGuestFileStateChangedEvent_getStatus) (*IGuestFileStateChangedEvent_getStatusResponse, error) {
	response := new(IGuestFileStateChangedEvent_getStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFileStateChangedEvent_getStatus(request *IGuestFileStateChangedEvent_getStatus) (*IGuestFileStateChangedEvent_getStatusResponse, error) {
	return service.IGuestFileStateChangedEvent_getStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFileStateChangedEvent_getErrorContext(ctx context.Context, request *IGuestFileStateChangedEvent_getError) (*IGuestFileStateChangedEvent_getErrorResponse, error) {
	response := new(IGuestFileStateChangedEvent_getErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFileStateChangedEvent_getError(request *IGuestFileStateChangedEvent_getError) (*IGuestFileStateChangedEvent_getErrorResponse, error) {
	return service.IGuestFileStateChangedEvent_getErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFileIOEvent_getOffsetContext(ctx context.Context, request *IGuestFileIOEvent_getOffset) (*IGuestFileIOEvent_getOffsetResponse, error) {
	response := new(IGuestFileIOEvent_getOffsetResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFileIOEvent_getOffset(request *IGuestFileIOEvent_getOffset) (*IGuestFileIOEvent_getOffsetResponse, error) {
	return service.IGuestFileIOEvent_getOffsetContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFileIOEvent_getProcessedContext(ctx context.Context, request *IGuestFileIOEvent_getProcessed) (*IGuestFileIOEvent_getProcessedResponse, error) {
	response := new(IGuestFileIOEvent_getProcessedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFileIOEvent_getProcessed(request *IGuestFileIOEvent_getProcessed) (*IGuestFileIOEvent_getProcessedResponse, error) {
	return service.IGuestFileIOEvent_getProcessedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IGuestFileOffsetChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFileSizeChangedEvent_getNewSizeContext(ctx context.Context, request *IGuestFileSizeChangedEvent_getNewSize) (*IGuestFileSizeChangedEvent_getNewSizeResponse, error) {
	response := new(IGuestFileSizeChangedEvent_getNewSizeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFileSizeChangedEvent_getNewSize(request *IGuestFileSizeChangedEvent_getNewSize) (*IGuestFileSizeChangedEvent_getNewSizeResponse, error) {
	return service.IGuestFileSizeChangedEvent_getNewSizeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFileReadEvent_getDataContext(ctx context.Context, request *IGuestFileReadEvent_getData) (*IGuestFileReadEvent_getDataResponse, error) {
	response := new(IGuestFileReadEvent_getDataResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFileReadEvent_getData(request *IGuestFileReadEvent_getData) (*IGuestFileReadEvent_getDataResponse, error) {
	return service.IGuestFileReadEvent_getDataContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces(request *IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfaces) (*IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IGuestFileWriteEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IVRDEServerChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IVRDEServerInfoChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IRecordingChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IUSBControllerChangedEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceStateChangedEvent_getDeviceContext(ctx context.Context, request *IUSBDeviceStateChangedEvent_getDevice) (*IUSBDeviceStateChangedEvent_getDeviceResponse, error) {
	response := new(IUSBDeviceStateChangedEvent_getDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceStateChangedEvent_getDevice(request *IUSBDeviceStateChangedEvent_getDevice) (*IUSBDeviceStateChangedEvent_getDeviceResponse, error) {
	return service.IUSBDeviceStateChangedEvent_getDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceStateChangedEvent_getAttachedContext(ctx context.Context, request *IUSBDeviceStateChangedEvent_getAttached) (*IUSBDeviceStateChangedEvent_getAttachedResponse, error) {
	response := new(IUSBDeviceStateChangedEvent_getAttachedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceStateChangedEvent_getAttached(request *IUSBDeviceStateChangedEvent_getAttached) (*IUSBDeviceStateChangedEvent_getAttachedResponse, error) {
	return service.IUSBDeviceStateChangedEvent_getAttachedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUSBDeviceStateChangedEvent_getErrorContext(ctx context.Context, request *IUSBDeviceStateChangedEvent_getError) (*IUSBDeviceStateChangedEvent_getErrorResponse, error) {
	response := new(IUSBDeviceStateChangedEvent_getErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUSBDeviceStateChangedEvent_getError(request *IUSBDeviceStateChangedEvent_getError) (*IUSBDeviceStateChangedEvent_getErrorResponse, error) {
	return service.IUSBDeviceStateChangedEvent_getErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ISharedFolderChangedEvent_getScopeContext(ctx context.Context, request *ISharedFolderChangedEvent_getScope) (*ISharedFolderChangedEvent_getScopeResponse, error) {
	response := new(ISharedFolderChangedEvent_getScopeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ISharedFolderChangedEvent_getScope(request *ISharedFolderChangedEvent_getScope) (*ISharedFolderChangedEvent_getScopeResponse, error) {
	return service.ISharedFolderChangedEvent_getScopeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRuntimeErrorEvent_getFatalContext(ctx context.Context, request *IRuntimeErrorEvent_getFatal) (*IRuntimeErrorEvent_getFatalResponse, error) {
	response := new(IRuntimeErrorEvent_getFatalResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRuntimeErrorEvent_getFatal(request *IRuntimeErrorEvent_getFatal) (*IRuntimeErrorEvent_getFatalResponse, error) {
	return service.IRuntimeErrorEvent_getFatalContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRuntimeErrorEvent_getIdContext(ctx context.Context, request *IRuntimeErrorEvent_getId) (*IRuntimeErrorEvent_getIdResponse, error) {
	response := new(IRuntimeErrorEvent_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRuntimeErrorEvent_getId(request *IRuntimeErrorEvent_getId) (*IRuntimeErrorEvent_getIdResponse, error) {
	return service.IRuntimeErrorEvent_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRuntimeErrorEvent_getMessageContext(ctx context.Context, request *IRuntimeErrorEvent_getMessage) (*IRuntimeErrorEvent_getMessageResponse, error) {
	response := new(IRuntimeErrorEvent_getMessageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRuntimeErrorEvent_getMessage(request *IRuntimeErrorEvent_getMessage) (*IRuntimeErrorEvent_getMessageResponse, error) {
	return service.IRuntimeErrorEvent_getMessageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEventSourceChangedEvent_getListenerContext(ctx context.Context, request *IEventSourceChangedEvent_getListener) (*IEventSourceChangedEvent_getListenerResponse, error) {
	response := new(IEventSourceChangedEvent_getListenerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEventSourceChangedEvent_getListener(request *IEventSourceChangedEvent_getListener) (*IEventSourceChangedEvent_getListenerResponse, error) {
	return service.IEventSourceChangedEvent_getListenerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IEventSourceChangedEvent_getAddContext(ctx context.Context, request *IEventSourceChangedEvent_getAdd) (*IEventSourceChangedEvent_getAddResponse, error) {
	response := new(IEventSourceChangedEvent_getAddResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IEventSourceChangedEvent_getAdd(request *IEventSourceChangedEvent_getAdd) (*IEventSourceChangedEvent_getAddResponse, error) {
	return service.IEventSourceChangedEvent_getAddContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IExtraDataChangedEvent_getMachineIdContext(ctx context.Context, request *IExtraDataChangedEvent_getMachineId) (*IExtraDataChangedEvent_getMachineIdResponse, error) {
	response := new(IExtraDataChangedEvent_getMachineIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IExtraDataChangedEvent_getMachineId(request *IExtraDataChangedEvent_getMachineId) (*IExtraDataChangedEvent_getMachineIdResponse, error) {
	return service.IExtraDataChangedEvent_getMachineIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IExtraDataChangedEvent_getKeyContext(ctx context.Context, request *IExtraDataChangedEvent_getKey) (*IExtraDataChangedEvent_getKeyResponse, error) {
	response := new(IExtraDataChangedEvent_getKeyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IExtraDataChangedEvent_getKey(request *IExtraDataChangedEvent_getKey) (*IExtraDataChangedEvent_getKeyResponse, error) {
	return service.IExtraDataChangedEvent_getKeyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IExtraDataChangedEvent_getValueContext(ctx context.Context, request *IExtraDataChangedEvent_getValue) (*IExtraDataChangedEvent_getValueResponse, error) {
	response := new(IExtraDataChangedEvent_getValueResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IExtraDataChangedEvent_getValue(request *IExtraDataChangedEvent_getValue) (*IExtraDataChangedEvent_getValueResponse, error) {
	return service.IExtraDataChangedEvent_getValueContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVetoEvent_addVetoContext(ctx context.Context, request *IVetoEvent_addVeto) (*IVetoEvent_addVetoResponse, error) {
	response := new(IVetoEvent_addVetoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVetoEvent_addVeto(request *IVetoEvent_addVeto) (*IVetoEvent_addVetoResponse, error) {
	return service.IVetoEvent_addVetoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVetoEvent_isVetoedContext(ctx context.Context, request *IVetoEvent_isVetoed) (*IVetoEvent_isVetoedResponse, error) {
	response := new(IVetoEvent_isVetoedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVetoEvent_isVetoed(request *IVetoEvent_isVetoed) (*IVetoEvent_isVetoedResponse, error) {
	return service.IVetoEvent_isVetoedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVetoEvent_getVetosContext(ctx context.Context, request *IVetoEvent_getVetos) (*IVetoEvent_getVetosResponse, error) {
	response := new(IVetoEvent_getVetosResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVetoEvent_getVetos(request *IVetoEvent_getVetos) (*IVetoEvent_getVetosResponse, error) {
	return service.IVetoEvent_getVetosContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVetoEvent_addApprovalContext(ctx context.Context, request *IVetoEvent_addApproval) (*IVetoEvent_addApprovalResponse, error) {
	response := new(IVetoEvent_addApprovalResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVetoEvent_addApproval(request *IVetoEvent_addApproval) (*IVetoEvent_addApprovalResponse, error) {
	return service.IVetoEvent_addApprovalContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVetoEvent_isApprovedContext(ctx context.Context, request *IVetoEvent_isApproved) (*IVetoEvent_isApprovedResponse, error) {
	response := new(IVetoEvent_isApprovedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVetoEvent_isApproved(request *IVetoEvent_isApproved) (*IVetoEvent_isApprovedResponse, error) {
	return service.IVetoEvent_isApprovedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVetoEvent_getApprovalsContext(ctx context.Context, request *IVetoEvent_getApprovals) (*IVetoEvent_getApprovalsResponse, error) {
	response := new(IVetoEvent_getApprovalsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVetoEvent_getApprovals(request *IVetoEvent_getApprovals) (*IVetoEvent_getApprovalsResponse, error) {
	return service.IVetoEvent_getApprovalsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IExtraDataCanChangeEvent_getMachineIdContext(ctx context.Context, request *IExtraDataCanChangeEvent_getMachineId) (*IExtraDataCanChangeEvent_getMachineIdResponse, error) {
	response := new(IExtraDataCanChangeEvent_getMachineIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IExtraDataCanChangeEvent_getMachineId(request *IExtraDataCanChangeEvent_getMachineId) (*IExtraDataCanChangeEvent_getMachineIdResponse, error) {
	return service.IExtraDataCanChangeEvent_getMachineIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IExtraDataCanChangeEvent_getKeyContext(ctx context.Context, request *IExtraDataCanChangeEvent_getKey) (*IExtraDataCanChangeEvent_getKeyResponse, error) {
	response := new(IExtraDataCanChangeEvent_getKeyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IExtraDataCanChangeEvent_getKey(request *IExtraDataCanChangeEvent_getKey) (*IExtraDataCanChangeEvent_getKeyResponse, error) {
	return service.IExtraDataCanChangeEvent_getKeyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IExtraDataCanChangeEvent_getValueContext(ctx context.Context, request *IExtraDataCanChangeEvent_getValue) (*IExtraDataCanChangeEvent_getValueResponse, error) {
	response := new(IExtraDataCanChangeEvent_getValueResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IExtraDataCanChangeEvent_getValue(request *IExtraDataCanChangeEvent_getValue) (*IExtraDataCanChangeEvent_getValueResponse, error) {
	return service.IExtraDataCanChangeEvent_getValueContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces) (*ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces(request *ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfaces) (*ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.ICanShowWindowEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IShowWindowEvent_getWinIdContext(ctx context.Context, request *IShowWindowEvent_getWinId) (*IShowWindowEvent_getWinIdResponse, error) {
	response := new(IShowWindowEvent_getWinIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IShowWindowEvent_getWinId(request *IShowWindowEvent_getWinId) (*IShowWindowEvent_getWinIdResponse, error) {
	return service.IShowWindowEvent_getWinIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IShowWindowEvent_setWinIdContext(ctx context.Context, request *IShowWindowEvent_setWinId) (*IShowWindowEvent_setWinIdResponse, error) {
	response := new(IShowWindowEvent_setWinIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IShowWindowEvent_setWinId(request *IShowWindowEvent_setWinId) (*IShowWindowEvent_setWinIdResponse, error) {
	return service.IShowWindowEvent_setWinIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATRedirectEvent_getSlotContext(ctx context.Context, request *INATRedirectEvent_getSlot) (*INATRedirectEvent_getSlotResponse, error) {
	response := new(INATRedirectEvent_getSlotResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATRedirectEvent_getSlot(request *INATRedirectEvent_getSlot) (*INATRedirectEvent_getSlotResponse, error) {
	return service.INATRedirectEvent_getSlotContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATRedirectEvent_getRemoveContext(ctx context.Context, request *INATRedirectEvent_getRemove) (*INATRedirectEvent_getRemoveResponse, error) {
	response := new(INATRedirectEvent_getRemoveResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATRedirectEvent_getRemove(request *INATRedirectEvent_getRemove) (*INATRedirectEvent_getRemoveResponse, error) {
	return service.INATRedirectEvent_getRemoveContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATRedirectEvent_getNameContext(ctx context.Context, request *INATRedirectEvent_getName) (*INATRedirectEvent_getNameResponse, error) {
	response := new(INATRedirectEvent_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATRedirectEvent_getName(request *INATRedirectEvent_getName) (*INATRedirectEvent_getNameResponse, error) {
	return service.INATRedirectEvent_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATRedirectEvent_getProtoContext(ctx context.Context, request *INATRedirectEvent_getProto) (*INATRedirectEvent_getProtoResponse, error) {
	response := new(INATRedirectEvent_getProtoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATRedirectEvent_getProto(request *INATRedirectEvent_getProto) (*INATRedirectEvent_getProtoResponse, error) {
	return service.INATRedirectEvent_getProtoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATRedirectEvent_getHostIPContext(ctx context.Context, request *INATRedirectEvent_getHostIP) (*INATRedirectEvent_getHostIPResponse, error) {
	response := new(INATRedirectEvent_getHostIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATRedirectEvent_getHostIP(request *INATRedirectEvent_getHostIP) (*INATRedirectEvent_getHostIPResponse, error) {
	return service.INATRedirectEvent_getHostIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATRedirectEvent_getHostPortContext(ctx context.Context, request *INATRedirectEvent_getHostPort) (*INATRedirectEvent_getHostPortResponse, error) {
	response := new(INATRedirectEvent_getHostPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATRedirectEvent_getHostPort(request *INATRedirectEvent_getHostPort) (*INATRedirectEvent_getHostPortResponse, error) {
	return service.INATRedirectEvent_getHostPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATRedirectEvent_getGuestIPContext(ctx context.Context, request *INATRedirectEvent_getGuestIP) (*INATRedirectEvent_getGuestIPResponse, error) {
	response := new(INATRedirectEvent_getGuestIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATRedirectEvent_getGuestIP(request *INATRedirectEvent_getGuestIP) (*INATRedirectEvent_getGuestIPResponse, error) {
	return service.INATRedirectEvent_getGuestIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATRedirectEvent_getGuestPortContext(ctx context.Context, request *INATRedirectEvent_getGuestPort) (*INATRedirectEvent_getGuestPortResponse, error) {
	response := new(INATRedirectEvent_getGuestPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATRedirectEvent_getGuestPort(request *INATRedirectEvent_getGuestPort) (*INATRedirectEvent_getGuestPortResponse, error) {
	return service.INATRedirectEvent_getGuestPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDeviceChangedEvent_getDeviceContext(ctx context.Context, request *IHostAudioDeviceChangedEvent_getDevice) (*IHostAudioDeviceChangedEvent_getDeviceResponse, error) {
	response := new(IHostAudioDeviceChangedEvent_getDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDeviceChangedEvent_getDevice(request *IHostAudioDeviceChangedEvent_getDevice) (*IHostAudioDeviceChangedEvent_getDeviceResponse, error) {
	return service.IHostAudioDeviceChangedEvent_getDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDeviceChangedEvent_getNewContext(ctx context.Context, request *IHostAudioDeviceChangedEvent_getNew) (*IHostAudioDeviceChangedEvent_getNewResponse, error) {
	response := new(IHostAudioDeviceChangedEvent_getNewResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDeviceChangedEvent_getNew(request *IHostAudioDeviceChangedEvent_getNew) (*IHostAudioDeviceChangedEvent_getNewResponse, error) {
	return service.IHostAudioDeviceChangedEvent_getNewContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDeviceChangedEvent_getStateContext(ctx context.Context, request *IHostAudioDeviceChangedEvent_getState) (*IHostAudioDeviceChangedEvent_getStateResponse, error) {
	response := new(IHostAudioDeviceChangedEvent_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDeviceChangedEvent_getState(request *IHostAudioDeviceChangedEvent_getState) (*IHostAudioDeviceChangedEvent_getStateResponse, error) {
	return service.IHostAudioDeviceChangedEvent_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostAudioDeviceChangedEvent_getErrorContext(ctx context.Context, request *IHostAudioDeviceChangedEvent_getError) (*IHostAudioDeviceChangedEvent_getErrorResponse, error) {
	response := new(IHostAudioDeviceChangedEvent_getErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostAudioDeviceChangedEvent_getError(request *IHostAudioDeviceChangedEvent_getError) (*IHostAudioDeviceChangedEvent_getErrorResponse, error) {
	return service.IHostAudioDeviceChangedEvent_getErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostPCIDevicePlugEvent_getPluggedContext(ctx context.Context, request *IHostPCIDevicePlugEvent_getPlugged) (*IHostPCIDevicePlugEvent_getPluggedResponse, error) {
	response := new(IHostPCIDevicePlugEvent_getPluggedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostPCIDevicePlugEvent_getPlugged(request *IHostPCIDevicePlugEvent_getPlugged) (*IHostPCIDevicePlugEvent_getPluggedResponse, error) {
	return service.IHostPCIDevicePlugEvent_getPluggedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostPCIDevicePlugEvent_getSuccessContext(ctx context.Context, request *IHostPCIDevicePlugEvent_getSuccess) (*IHostPCIDevicePlugEvent_getSuccessResponse, error) {
	response := new(IHostPCIDevicePlugEvent_getSuccessResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostPCIDevicePlugEvent_getSuccess(request *IHostPCIDevicePlugEvent_getSuccess) (*IHostPCIDevicePlugEvent_getSuccessResponse, error) {
	return service.IHostPCIDevicePlugEvent_getSuccessContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostPCIDevicePlugEvent_getAttachmentContext(ctx context.Context, request *IHostPCIDevicePlugEvent_getAttachment) (*IHostPCIDevicePlugEvent_getAttachmentResponse, error) {
	response := new(IHostPCIDevicePlugEvent_getAttachmentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostPCIDevicePlugEvent_getAttachment(request *IHostPCIDevicePlugEvent_getAttachment) (*IHostPCIDevicePlugEvent_getAttachmentResponse, error) {
	return service.IHostPCIDevicePlugEvent_getAttachmentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostPCIDevicePlugEvent_getMessageContext(ctx context.Context, request *IHostPCIDevicePlugEvent_getMessage) (*IHostPCIDevicePlugEvent_getMessageResponse, error) {
	response := new(IHostPCIDevicePlugEvent_getMessageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostPCIDevicePlugEvent_getMessage(request *IHostPCIDevicePlugEvent_getMessage) (*IHostPCIDevicePlugEvent_getMessageResponse, error) {
	return service.IHostPCIDevicePlugEvent_getMessageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVBoxSVCAvailabilityChangedEvent_getAvailableContext(ctx context.Context, request *IVBoxSVCAvailabilityChangedEvent_getAvailable) (*IVBoxSVCAvailabilityChangedEvent_getAvailableResponse, error) {
	response := new(IVBoxSVCAvailabilityChangedEvent_getAvailableResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVBoxSVCAvailabilityChangedEvent_getAvailable(request *IVBoxSVCAvailabilityChangedEvent_getAvailable) (*IVBoxSVCAvailabilityChangedEvent_getAvailableResponse, error) {
	return service.IVBoxSVCAvailabilityChangedEvent_getAvailableContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBandwidthGroupChangedEvent_getBandwidthGroupContext(ctx context.Context, request *IBandwidthGroupChangedEvent_getBandwidthGroup) (*IBandwidthGroupChangedEvent_getBandwidthGroupResponse, error) {
	response := new(IBandwidthGroupChangedEvent_getBandwidthGroupResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBandwidthGroupChangedEvent_getBandwidthGroup(request *IBandwidthGroupChangedEvent_getBandwidthGroup) (*IBandwidthGroupChangedEvent_getBandwidthGroupResponse, error) {
	return service.IBandwidthGroupChangedEvent_getBandwidthGroupContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMonitorChangedEvent_getChangeTypeContext(ctx context.Context, request *IGuestMonitorChangedEvent_getChangeType) (*IGuestMonitorChangedEvent_getChangeTypeResponse, error) {
	response := new(IGuestMonitorChangedEvent_getChangeTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMonitorChangedEvent_getChangeType(request *IGuestMonitorChangedEvent_getChangeType) (*IGuestMonitorChangedEvent_getChangeTypeResponse, error) {
	return service.IGuestMonitorChangedEvent_getChangeTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMonitorChangedEvent_getScreenIdContext(ctx context.Context, request *IGuestMonitorChangedEvent_getScreenId) (*IGuestMonitorChangedEvent_getScreenIdResponse, error) {
	response := new(IGuestMonitorChangedEvent_getScreenIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMonitorChangedEvent_getScreenId(request *IGuestMonitorChangedEvent_getScreenId) (*IGuestMonitorChangedEvent_getScreenIdResponse, error) {
	return service.IGuestMonitorChangedEvent_getScreenIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMonitorChangedEvent_getOriginXContext(ctx context.Context, request *IGuestMonitorChangedEvent_getOriginX) (*IGuestMonitorChangedEvent_getOriginXResponse, error) {
	response := new(IGuestMonitorChangedEvent_getOriginXResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMonitorChangedEvent_getOriginX(request *IGuestMonitorChangedEvent_getOriginX) (*IGuestMonitorChangedEvent_getOriginXResponse, error) {
	return service.IGuestMonitorChangedEvent_getOriginXContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMonitorChangedEvent_getOriginYContext(ctx context.Context, request *IGuestMonitorChangedEvent_getOriginY) (*IGuestMonitorChangedEvent_getOriginYResponse, error) {
	response := new(IGuestMonitorChangedEvent_getOriginYResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMonitorChangedEvent_getOriginY(request *IGuestMonitorChangedEvent_getOriginY) (*IGuestMonitorChangedEvent_getOriginYResponse, error) {
	return service.IGuestMonitorChangedEvent_getOriginYContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMonitorChangedEvent_getWidthContext(ctx context.Context, request *IGuestMonitorChangedEvent_getWidth) (*IGuestMonitorChangedEvent_getWidthResponse, error) {
	response := new(IGuestMonitorChangedEvent_getWidthResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMonitorChangedEvent_getWidth(request *IGuestMonitorChangedEvent_getWidth) (*IGuestMonitorChangedEvent_getWidthResponse, error) {
	return service.IGuestMonitorChangedEvent_getWidthContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMonitorChangedEvent_getHeightContext(ctx context.Context, request *IGuestMonitorChangedEvent_getHeight) (*IGuestMonitorChangedEvent_getHeightResponse, error) {
	response := new(IGuestMonitorChangedEvent_getHeightResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMonitorChangedEvent_getHeight(request *IGuestMonitorChangedEvent_getHeight) (*IGuestMonitorChangedEvent_getHeightResponse, error) {
	return service.IGuestMonitorChangedEvent_getHeightContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestUserStateChangedEvent_getNameContext(ctx context.Context, request *IGuestUserStateChangedEvent_getName) (*IGuestUserStateChangedEvent_getNameResponse, error) {
	response := new(IGuestUserStateChangedEvent_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestUserStateChangedEvent_getName(request *IGuestUserStateChangedEvent_getName) (*IGuestUserStateChangedEvent_getNameResponse, error) {
	return service.IGuestUserStateChangedEvent_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestUserStateChangedEvent_getDomainContext(ctx context.Context, request *IGuestUserStateChangedEvent_getDomain) (*IGuestUserStateChangedEvent_getDomainResponse, error) {
	response := new(IGuestUserStateChangedEvent_getDomainResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestUserStateChangedEvent_getDomain(request *IGuestUserStateChangedEvent_getDomain) (*IGuestUserStateChangedEvent_getDomainResponse, error) {
	return service.IGuestUserStateChangedEvent_getDomainContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestUserStateChangedEvent_getStateContext(ctx context.Context, request *IGuestUserStateChangedEvent_getState) (*IGuestUserStateChangedEvent_getStateResponse, error) {
	response := new(IGuestUserStateChangedEvent_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestUserStateChangedEvent_getState(request *IGuestUserStateChangedEvent_getState) (*IGuestUserStateChangedEvent_getStateResponse, error) {
	return service.IGuestUserStateChangedEvent_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestUserStateChangedEvent_getStateDetailsContext(ctx context.Context, request *IGuestUserStateChangedEvent_getStateDetails) (*IGuestUserStateChangedEvent_getStateDetailsResponse, error) {
	response := new(IGuestUserStateChangedEvent_getStateDetailsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestUserStateChangedEvent_getStateDetails(request *IGuestUserStateChangedEvent_getStateDetails) (*IGuestUserStateChangedEvent_getStateDetailsResponse, error) {
	return service.IGuestUserStateChangedEvent_getStateDetailsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageDeviceChangedEvent_getStorageDeviceContext(ctx context.Context, request *IStorageDeviceChangedEvent_getStorageDevice) (*IStorageDeviceChangedEvent_getStorageDeviceResponse, error) {
	response := new(IStorageDeviceChangedEvent_getStorageDeviceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageDeviceChangedEvent_getStorageDevice(request *IStorageDeviceChangedEvent_getStorageDevice) (*IStorageDeviceChangedEvent_getStorageDeviceResponse, error) {
	return service.IStorageDeviceChangedEvent_getStorageDeviceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageDeviceChangedEvent_getRemovedContext(ctx context.Context, request *IStorageDeviceChangedEvent_getRemoved) (*IStorageDeviceChangedEvent_getRemovedResponse, error) {
	response := new(IStorageDeviceChangedEvent_getRemovedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageDeviceChangedEvent_getRemoved(request *IStorageDeviceChangedEvent_getRemoved) (*IStorageDeviceChangedEvent_getRemovedResponse, error) {
	return service.IStorageDeviceChangedEvent_getRemovedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStorageDeviceChangedEvent_getSilentContext(ctx context.Context, request *IStorageDeviceChangedEvent_getSilent) (*IStorageDeviceChangedEvent_getSilentResponse, error) {
	response := new(IStorageDeviceChangedEvent_getSilentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStorageDeviceChangedEvent_getSilent(request *IStorageDeviceChangedEvent_getSilent) (*IStorageDeviceChangedEvent_getSilentResponse, error) {
	return service.IStorageDeviceChangedEvent_getSilentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkChangedEvent_getNetworkNameContext(ctx context.Context, request *INATNetworkChangedEvent_getNetworkName) (*INATNetworkChangedEvent_getNetworkNameResponse, error) {
	response := new(INATNetworkChangedEvent_getNetworkNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkChangedEvent_getNetworkName(request *INATNetworkChangedEvent_getNetworkName) (*INATNetworkChangedEvent_getNetworkNameResponse, error) {
	return service.INATNetworkChangedEvent_getNetworkNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkStartStopEvent_getStartEventContext(ctx context.Context, request *INATNetworkStartStopEvent_getStartEvent) (*INATNetworkStartStopEvent_getStartEventResponse, error) {
	response := new(INATNetworkStartStopEvent_getStartEventResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkStartStopEvent_getStartEvent(request *INATNetworkStartStopEvent_getStartEvent) (*INATNetworkStartStopEvent_getStartEventResponse, error) {
	return service.INATNetworkStartStopEvent_getStartEventContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces) (*INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces(request *INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfaces) (*INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.INATNetworkAlterEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkCreationDeletionEvent_getCreationEventContext(ctx context.Context, request *INATNetworkCreationDeletionEvent_getCreationEvent) (*INATNetworkCreationDeletionEvent_getCreationEventResponse, error) {
	response := new(INATNetworkCreationDeletionEvent_getCreationEventResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkCreationDeletionEvent_getCreationEvent(request *INATNetworkCreationDeletionEvent_getCreationEvent) (*INATNetworkCreationDeletionEvent_getCreationEventResponse, error) {
	return service.INATNetworkCreationDeletionEvent_getCreationEventContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkSettingEvent_getEnabledContext(ctx context.Context, request *INATNetworkSettingEvent_getEnabled) (*INATNetworkSettingEvent_getEnabledResponse, error) {
	response := new(INATNetworkSettingEvent_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkSettingEvent_getEnabled(request *INATNetworkSettingEvent_getEnabled) (*INATNetworkSettingEvent_getEnabledResponse, error) {
	return service.INATNetworkSettingEvent_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkSettingEvent_getNetworkContext(ctx context.Context, request *INATNetworkSettingEvent_getNetwork) (*INATNetworkSettingEvent_getNetworkResponse, error) {
	response := new(INATNetworkSettingEvent_getNetworkResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkSettingEvent_getNetwork(request *INATNetworkSettingEvent_getNetwork) (*INATNetworkSettingEvent_getNetworkResponse, error) {
	return service.INATNetworkSettingEvent_getNetworkContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkSettingEvent_getGatewayContext(ctx context.Context, request *INATNetworkSettingEvent_getGateway) (*INATNetworkSettingEvent_getGatewayResponse, error) {
	response := new(INATNetworkSettingEvent_getGatewayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkSettingEvent_getGateway(request *INATNetworkSettingEvent_getGateway) (*INATNetworkSettingEvent_getGatewayResponse, error) {
	return service.INATNetworkSettingEvent_getGatewayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledContext(ctx context.Context, request *INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled) (*INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse, error) {
	response := new(INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled(request *INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabled) (*INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledResponse, error) {
	return service.INATNetworkSettingEvent_getAdvertiseDefaultIPv6RouteEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkSettingEvent_getNeedDhcpServerContext(ctx context.Context, request *INATNetworkSettingEvent_getNeedDhcpServer) (*INATNetworkSettingEvent_getNeedDhcpServerResponse, error) {
	response := new(INATNetworkSettingEvent_getNeedDhcpServerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkSettingEvent_getNeedDhcpServer(request *INATNetworkSettingEvent_getNeedDhcpServer) (*INATNetworkSettingEvent_getNeedDhcpServerResponse, error) {
	return service.INATNetworkSettingEvent_getNeedDhcpServerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getCreateContext(ctx context.Context, request *INATNetworkPortForwardEvent_getCreate) (*INATNetworkPortForwardEvent_getCreateResponse, error) {
	response := new(INATNetworkPortForwardEvent_getCreateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getCreate(request *INATNetworkPortForwardEvent_getCreate) (*INATNetworkPortForwardEvent_getCreateResponse, error) {
	return service.INATNetworkPortForwardEvent_getCreateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getIpv6Context(ctx context.Context, request *INATNetworkPortForwardEvent_getIpv6) (*INATNetworkPortForwardEvent_getIpv6Response, error) {
	response := new(INATNetworkPortForwardEvent_getIpv6Response)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getIpv6(request *INATNetworkPortForwardEvent_getIpv6) (*INATNetworkPortForwardEvent_getIpv6Response, error) {
	return service.INATNetworkPortForwardEvent_getIpv6Context(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getNameContext(ctx context.Context, request *INATNetworkPortForwardEvent_getName) (*INATNetworkPortForwardEvent_getNameResponse, error) {
	response := new(INATNetworkPortForwardEvent_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getName(request *INATNetworkPortForwardEvent_getName) (*INATNetworkPortForwardEvent_getNameResponse, error) {
	return service.INATNetworkPortForwardEvent_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getProtoContext(ctx context.Context, request *INATNetworkPortForwardEvent_getProto) (*INATNetworkPortForwardEvent_getProtoResponse, error) {
	response := new(INATNetworkPortForwardEvent_getProtoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getProto(request *INATNetworkPortForwardEvent_getProto) (*INATNetworkPortForwardEvent_getProtoResponse, error) {
	return service.INATNetworkPortForwardEvent_getProtoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getHostIpContext(ctx context.Context, request *INATNetworkPortForwardEvent_getHostIp) (*INATNetworkPortForwardEvent_getHostIpResponse, error) {
	response := new(INATNetworkPortForwardEvent_getHostIpResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getHostIp(request *INATNetworkPortForwardEvent_getHostIp) (*INATNetworkPortForwardEvent_getHostIpResponse, error) {
	return service.INATNetworkPortForwardEvent_getHostIpContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getHostPortContext(ctx context.Context, request *INATNetworkPortForwardEvent_getHostPort) (*INATNetworkPortForwardEvent_getHostPortResponse, error) {
	response := new(INATNetworkPortForwardEvent_getHostPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getHostPort(request *INATNetworkPortForwardEvent_getHostPort) (*INATNetworkPortForwardEvent_getHostPortResponse, error) {
	return service.INATNetworkPortForwardEvent_getHostPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getGuestIpContext(ctx context.Context, request *INATNetworkPortForwardEvent_getGuestIp) (*INATNetworkPortForwardEvent_getGuestIpResponse, error) {
	response := new(INATNetworkPortForwardEvent_getGuestIpResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getGuestIp(request *INATNetworkPortForwardEvent_getGuestIp) (*INATNetworkPortForwardEvent_getGuestIpResponse, error) {
	return service.INATNetworkPortForwardEvent_getGuestIpContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getGuestPortContext(ctx context.Context, request *INATNetworkPortForwardEvent_getGuestPort) (*INATNetworkPortForwardEvent_getGuestPortResponse, error) {
	response := new(INATNetworkPortForwardEvent_getGuestPortResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) INATNetworkPortForwardEvent_getGuestPort(request *INATNetworkPortForwardEvent_getGuestPort) (*INATNetworkPortForwardEvent_getGuestPortResponse, error) {
	return service.INATNetworkPortForwardEvent_getGuestPortContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces) (*IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces(request *IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfaces) (*IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IHostNameResolutionConfigurationChangeEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgressEvent_getProgressIdContext(ctx context.Context, request *IProgressEvent_getProgressId) (*IProgressEvent_getProgressIdResponse, error) {
	response := new(IProgressEvent_getProgressIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgressEvent_getProgressId(request *IProgressEvent_getProgressId) (*IProgressEvent_getProgressIdResponse, error) {
	return service.IProgressEvent_getProgressIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgressCreatedEvent_getCreateContext(ctx context.Context, request *IProgressCreatedEvent_getCreate) (*IProgressCreatedEvent_getCreateResponse, error) {
	response := new(IProgressCreatedEvent_getCreateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgressCreatedEvent_getCreate(request *IProgressCreatedEvent_getCreate) (*IProgressCreatedEvent_getCreateResponse, error) {
	return service.IProgressCreatedEvent_getCreateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgressPercentageChangedEvent_getPercentContext(ctx context.Context, request *IProgressPercentageChangedEvent_getPercent) (*IProgressPercentageChangedEvent_getPercentResponse, error) {
	response := new(IProgressPercentageChangedEvent_getPercentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgressPercentageChangedEvent_getPercent(request *IProgressPercentageChangedEvent_getPercent) (*IProgressPercentageChangedEvent_getPercentResponse, error) {
	return service.IProgressPercentageChangedEvent_getPercentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesContext(ctx context.Context, request *IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	response := new(IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces(request *IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfaces) (*IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesResponse, error) {
	return service.IProgressTaskCompletedEvent_getMidlDoesNotLikeEmptyInterfacesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICursorPositionChangedEvent_getHasDataContext(ctx context.Context, request *ICursorPositionChangedEvent_getHasData) (*ICursorPositionChangedEvent_getHasDataResponse, error) {
	response := new(ICursorPositionChangedEvent_getHasDataResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICursorPositionChangedEvent_getHasData(request *ICursorPositionChangedEvent_getHasData) (*ICursorPositionChangedEvent_getHasDataResponse, error) {
	return service.ICursorPositionChangedEvent_getHasDataContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICursorPositionChangedEvent_getXContext(ctx context.Context, request *ICursorPositionChangedEvent_getX) (*ICursorPositionChangedEvent_getXResponse, error) {
	response := new(ICursorPositionChangedEvent_getXResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICursorPositionChangedEvent_getX(request *ICursorPositionChangedEvent_getX) (*ICursorPositionChangedEvent_getXResponse, error) {
	return service.ICursorPositionChangedEvent_getXContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICursorPositionChangedEvent_getYContext(ctx context.Context, request *ICursorPositionChangedEvent_getY) (*ICursorPositionChangedEvent_getYResponse, error) {
	response := new(ICursorPositionChangedEvent_getYResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICursorPositionChangedEvent_getY(request *ICursorPositionChangedEvent_getY) (*ICursorPositionChangedEvent_getYResponse, error) {
	return service.ICursorPositionChangedEvent_getYContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestAdditionsStatusChangedEvent_getFacilityContext(ctx context.Context, request *IGuestAdditionsStatusChangedEvent_getFacility) (*IGuestAdditionsStatusChangedEvent_getFacilityResponse, error) {
	response := new(IGuestAdditionsStatusChangedEvent_getFacilityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestAdditionsStatusChangedEvent_getFacility(request *IGuestAdditionsStatusChangedEvent_getFacility) (*IGuestAdditionsStatusChangedEvent_getFacilityResponse, error) {
	return service.IGuestAdditionsStatusChangedEvent_getFacilityContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestAdditionsStatusChangedEvent_getStatusContext(ctx context.Context, request *IGuestAdditionsStatusChangedEvent_getStatus) (*IGuestAdditionsStatusChangedEvent_getStatusResponse, error) {
	response := new(IGuestAdditionsStatusChangedEvent_getStatusResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestAdditionsStatusChangedEvent_getStatus(request *IGuestAdditionsStatusChangedEvent_getStatus) (*IGuestAdditionsStatusChangedEvent_getStatusResponse, error) {
	return service.IGuestAdditionsStatusChangedEvent_getStatusContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestAdditionsStatusChangedEvent_getRunLevelContext(ctx context.Context, request *IGuestAdditionsStatusChangedEvent_getRunLevel) (*IGuestAdditionsStatusChangedEvent_getRunLevelResponse, error) {
	response := new(IGuestAdditionsStatusChangedEvent_getRunLevelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestAdditionsStatusChangedEvent_getRunLevel(request *IGuestAdditionsStatusChangedEvent_getRunLevel) (*IGuestAdditionsStatusChangedEvent_getRunLevelResponse, error) {
	return service.IGuestAdditionsStatusChangedEvent_getRunLevelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestAdditionsStatusChangedEvent_getTimestampContext(ctx context.Context, request *IGuestAdditionsStatusChangedEvent_getTimestamp) (*IGuestAdditionsStatusChangedEvent_getTimestampResponse, error) {
	response := new(IGuestAdditionsStatusChangedEvent_getTimestampResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestAdditionsStatusChangedEvent_getTimestamp(request *IGuestAdditionsStatusChangedEvent_getTimestamp) (*IGuestAdditionsStatusChangedEvent_getTimestampResponse, error) {
	return service.IGuestAdditionsStatusChangedEvent_getTimestampContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestMonitorInfoChangedEvent_getOutputContext(ctx context.Context, request *IGuestMonitorInfoChangedEvent_getOutput) (*IGuestMonitorInfoChangedEvent_getOutputResponse, error) {
	response := new(IGuestMonitorInfoChangedEvent_getOutputResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestMonitorInfoChangedEvent_getOutput(request *IGuestMonitorInfoChangedEvent_getOutput) (*IGuestMonitorInfoChangedEvent_getOutputResponse, error) {
	return service.IGuestMonitorInfoChangedEvent_getOutputContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgentEvent_getAgentContext(ctx context.Context, request *IUpdateAgentEvent_getAgent) (*IUpdateAgentEvent_getAgentResponse, error) {
	response := new(IUpdateAgentEvent_getAgentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgentEvent_getAgent(request *IUpdateAgentEvent_getAgent) (*IUpdateAgentEvent_getAgentResponse, error) {
	return service.IUpdateAgentEvent_getAgentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgentSettingsChangedEvent_getAttributeHintContext(ctx context.Context, request *IUpdateAgentSettingsChangedEvent_getAttributeHint) (*IUpdateAgentSettingsChangedEvent_getAttributeHintResponse, error) {
	response := new(IUpdateAgentSettingsChangedEvent_getAttributeHintResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgentSettingsChangedEvent_getAttributeHint(request *IUpdateAgentSettingsChangedEvent_getAttributeHint) (*IUpdateAgentSettingsChangedEvent_getAttributeHintResponse, error) {
	return service.IUpdateAgentSettingsChangedEvent_getAttributeHintContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgentErrorEvent_getMsgContext(ctx context.Context, request *IUpdateAgentErrorEvent_getMsg) (*IUpdateAgentErrorEvent_getMsgResponse, error) {
	response := new(IUpdateAgentErrorEvent_getMsgResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgentErrorEvent_getMsg(request *IUpdateAgentErrorEvent_getMsg) (*IUpdateAgentErrorEvent_getMsgResponse, error) {
	return service.IUpdateAgentErrorEvent_getMsgContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgentErrorEvent_getRcErrorContext(ctx context.Context, request *IUpdateAgentErrorEvent_getRcError) (*IUpdateAgentErrorEvent_getRcErrorResponse, error) {
	response := new(IUpdateAgentErrorEvent_getRcErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgentErrorEvent_getRcError(request *IUpdateAgentErrorEvent_getRcError) (*IUpdateAgentErrorEvent_getRcErrorResponse, error) {
	return service.IUpdateAgentErrorEvent_getRcErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgentAvailableEvent_getVersionContext(ctx context.Context, request *IUpdateAgentAvailableEvent_getVersion) (*IUpdateAgentAvailableEvent_getVersionResponse, error) {
	response := new(IUpdateAgentAvailableEvent_getVersionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgentAvailableEvent_getVersion(request *IUpdateAgentAvailableEvent_getVersion) (*IUpdateAgentAvailableEvent_getVersionResponse, error) {
	return service.IUpdateAgentAvailableEvent_getVersionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgentAvailableEvent_getChannelContext(ctx context.Context, request *IUpdateAgentAvailableEvent_getChannel) (*IUpdateAgentAvailableEvent_getChannelResponse, error) {
	response := new(IUpdateAgentAvailableEvent_getChannelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgentAvailableEvent_getChannel(request *IUpdateAgentAvailableEvent_getChannel) (*IUpdateAgentAvailableEvent_getChannelResponse, error) {
	return service.IUpdateAgentAvailableEvent_getChannelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgentAvailableEvent_getSeverityContext(ctx context.Context, request *IUpdateAgentAvailableEvent_getSeverity) (*IUpdateAgentAvailableEvent_getSeverityResponse, error) {
	response := new(IUpdateAgentAvailableEvent_getSeverityResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgentAvailableEvent_getSeverity(request *IUpdateAgentAvailableEvent_getSeverity) (*IUpdateAgentAvailableEvent_getSeverityResponse, error) {
	return service.IUpdateAgentAvailableEvent_getSeverityContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgentAvailableEvent_getDownloadURLContext(ctx context.Context, request *IUpdateAgentAvailableEvent_getDownloadURL) (*IUpdateAgentAvailableEvent_getDownloadURLResponse, error) {
	response := new(IUpdateAgentAvailableEvent_getDownloadURLResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgentAvailableEvent_getDownloadURL(request *IUpdateAgentAvailableEvent_getDownloadURL) (*IUpdateAgentAvailableEvent_getDownloadURLResponse, error) {
	return service.IUpdateAgentAvailableEvent_getDownloadURLContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgentAvailableEvent_getWebURLContext(ctx context.Context, request *IUpdateAgentAvailableEvent_getWebURL) (*IUpdateAgentAvailableEvent_getWebURLResponse, error) {
	response := new(IUpdateAgentAvailableEvent_getWebURLResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgentAvailableEvent_getWebURL(request *IUpdateAgentAvailableEvent_getWebURL) (*IUpdateAgentAvailableEvent_getWebURLResponse, error) {
	return service.IUpdateAgentAvailableEvent_getWebURLContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgentAvailableEvent_getReleaseNotesContext(ctx context.Context, request *IUpdateAgentAvailableEvent_getReleaseNotes) (*IUpdateAgentAvailableEvent_getReleaseNotesResponse, error) {
	response := new(IUpdateAgentAvailableEvent_getReleaseNotesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgentAvailableEvent_getReleaseNotes(request *IUpdateAgentAvailableEvent_getReleaseNotes) (*IUpdateAgentAvailableEvent_getReleaseNotesResponse, error) {
	return service.IUpdateAgentAvailableEvent_getReleaseNotesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IUpdateAgentStateChangedEvent_getStateContext(ctx context.Context, request *IUpdateAgentStateChangedEvent_getState) (*IUpdateAgentStateChangedEvent_getStateResponse, error) {
	response := new(IUpdateAgentStateChangedEvent_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IUpdateAgentStateChangedEvent_getState(request *IUpdateAgentStateChangedEvent_getState) (*IUpdateAgentStateChangedEvent_getStateResponse, error) {
	return service.IUpdateAgentStateChangedEvent_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IGuestDebugControlChangedEvent_getGuestDebugControlContext(ctx context.Context, request *IGuestDebugControlChangedEvent_getGuestDebugControl) (*IGuestDebugControlChangedEvent_getGuestDebugControlResponse, error) {
	response := new(IGuestDebugControlChangedEvent_getGuestDebugControlResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IGuestDebugControlChangedEvent_getGuestDebugControl(request *IGuestDebugControlChangedEvent_getGuestDebugControl) (*IGuestDebugControlChangedEvent_getGuestDebugControlResponse, error) {
	return service.IGuestDebugControlChangedEvent_getGuestDebugControlContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IMachineGroupsChangedEvent_getDummyContext(ctx context.Context, request *IMachineGroupsChangedEvent_getDummy) (*IMachineGroupsChangedEvent_getDummyResponse, error) {
	response := new(IMachineGroupsChangedEvent_getDummyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IMachineGroupsChangedEvent_getDummy(request *IMachineGroupsChangedEvent_getDummy) (*IMachineGroupsChangedEvent_getDummyResponse, error) {
	return service.IMachineGroupsChangedEvent_getDummyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStringArray_getValuesContext(ctx context.Context, request *IStringArray_getValues) (*IStringArray_getValuesResponse, error) {
	response := new(IStringArray_getValuesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStringArray_getValues(request *IStringArray_getValues) (*IStringArray_getValuesResponse, error) {
	return service.IStringArray_getValuesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFormValue_getTypeContext(ctx context.Context, request *IFormValue_getType) (*IFormValue_getTypeResponse, error) {
	response := new(IFormValue_getTypeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFormValue_getType(request *IFormValue_getType) (*IFormValue_getTypeResponse, error) {
	return service.IFormValue_getTypeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFormValue_getGenerationContext(ctx context.Context, request *IFormValue_getGeneration) (*IFormValue_getGenerationResponse, error) {
	response := new(IFormValue_getGenerationResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFormValue_getGeneration(request *IFormValue_getGeneration) (*IFormValue_getGenerationResponse, error) {
	return service.IFormValue_getGenerationContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFormValue_getEnabledContext(ctx context.Context, request *IFormValue_getEnabled) (*IFormValue_getEnabledResponse, error) {
	response := new(IFormValue_getEnabledResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFormValue_getEnabled(request *IFormValue_getEnabled) (*IFormValue_getEnabledResponse, error) {
	return service.IFormValue_getEnabledContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFormValue_getVisibleContext(ctx context.Context, request *IFormValue_getVisible) (*IFormValue_getVisibleResponse, error) {
	response := new(IFormValue_getVisibleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFormValue_getVisible(request *IFormValue_getVisible) (*IFormValue_getVisibleResponse, error) {
	return service.IFormValue_getVisibleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFormValue_getLabelContext(ctx context.Context, request *IFormValue_getLabel) (*IFormValue_getLabelResponse, error) {
	response := new(IFormValue_getLabelResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFormValue_getLabel(request *IFormValue_getLabel) (*IFormValue_getLabelResponse, error) {
	return service.IFormValue_getLabelContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFormValue_getDescriptionContext(ctx context.Context, request *IFormValue_getDescription) (*IFormValue_getDescriptionResponse, error) {
	response := new(IFormValue_getDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFormValue_getDescription(request *IFormValue_getDescription) (*IFormValue_getDescriptionResponse, error) {
	return service.IFormValue_getDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IFormValue_getHelpContext(ctx context.Context, request *IFormValue_getHelp) (*IFormValue_getHelpResponse, error) {
	response := new(IFormValue_getHelpResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IFormValue_getHelp(request *IFormValue_getHelp) (*IFormValue_getHelpResponse, error) {
	return service.IFormValue_getHelpContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBooleanFormValue_getSelectedContext(ctx context.Context, request *IBooleanFormValue_getSelected) (*IBooleanFormValue_getSelectedResponse, error) {
	response := new(IBooleanFormValue_getSelectedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBooleanFormValue_getSelected(request *IBooleanFormValue_getSelected) (*IBooleanFormValue_getSelectedResponse, error) {
	return service.IBooleanFormValue_getSelectedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IBooleanFormValue_setSelectedContext(ctx context.Context, request *IBooleanFormValue_setSelected) (*IBooleanFormValue_setSelectedResponse, error) {
	response := new(IBooleanFormValue_setSelectedResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IBooleanFormValue_setSelected(request *IBooleanFormValue_setSelected) (*IBooleanFormValue_setSelectedResponse, error) {
	return service.IBooleanFormValue_setSelectedContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRangedIntegerFormValue_getSuffixContext(ctx context.Context, request *IRangedIntegerFormValue_getSuffix) (*IRangedIntegerFormValue_getSuffixResponse, error) {
	response := new(IRangedIntegerFormValue_getSuffixResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRangedIntegerFormValue_getSuffix(request *IRangedIntegerFormValue_getSuffix) (*IRangedIntegerFormValue_getSuffixResponse, error) {
	return service.IRangedIntegerFormValue_getSuffixContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRangedIntegerFormValue_getMinimumContext(ctx context.Context, request *IRangedIntegerFormValue_getMinimum) (*IRangedIntegerFormValue_getMinimumResponse, error) {
	response := new(IRangedIntegerFormValue_getMinimumResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRangedIntegerFormValue_getMinimum(request *IRangedIntegerFormValue_getMinimum) (*IRangedIntegerFormValue_getMinimumResponse, error) {
	return service.IRangedIntegerFormValue_getMinimumContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRangedIntegerFormValue_getMaximumContext(ctx context.Context, request *IRangedIntegerFormValue_getMaximum) (*IRangedIntegerFormValue_getMaximumResponse, error) {
	response := new(IRangedIntegerFormValue_getMaximumResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRangedIntegerFormValue_getMaximum(request *IRangedIntegerFormValue_getMaximum) (*IRangedIntegerFormValue_getMaximumResponse, error) {
	return service.IRangedIntegerFormValue_getMaximumContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRangedIntegerFormValue_getIntegerContext(ctx context.Context, request *IRangedIntegerFormValue_getInteger) (*IRangedIntegerFormValue_getIntegerResponse, error) {
	response := new(IRangedIntegerFormValue_getIntegerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRangedIntegerFormValue_getInteger(request *IRangedIntegerFormValue_getInteger) (*IRangedIntegerFormValue_getIntegerResponse, error) {
	return service.IRangedIntegerFormValue_getIntegerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IRangedIntegerFormValue_setIntegerContext(ctx context.Context, request *IRangedIntegerFormValue_setInteger) (*IRangedIntegerFormValue_setIntegerResponse, error) {
	response := new(IRangedIntegerFormValue_setIntegerResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IRangedIntegerFormValue_setInteger(request *IRangedIntegerFormValue_setInteger) (*IRangedIntegerFormValue_setIntegerResponse, error) {
	return service.IRangedIntegerFormValue_setIntegerContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStringFormValue_getMultilineContext(ctx context.Context, request *IStringFormValue_getMultiline) (*IStringFormValue_getMultilineResponse, error) {
	response := new(IStringFormValue_getMultilineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStringFormValue_getMultiline(request *IStringFormValue_getMultiline) (*IStringFormValue_getMultilineResponse, error) {
	return service.IStringFormValue_getMultilineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStringFormValue_getClipboardStringContext(ctx context.Context, request *IStringFormValue_getClipboardString) (*IStringFormValue_getClipboardStringResponse, error) {
	response := new(IStringFormValue_getClipboardStringResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStringFormValue_getClipboardString(request *IStringFormValue_getClipboardString) (*IStringFormValue_getClipboardStringResponse, error) {
	return service.IStringFormValue_getClipboardStringContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStringFormValue_getStringContext(ctx context.Context, request *IStringFormValue_getString) (*IStringFormValue_getStringResponse, error) {
	response := new(IStringFormValue_getStringResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStringFormValue_getString(request *IStringFormValue_getString) (*IStringFormValue_getStringResponse, error) {
	return service.IStringFormValue_getStringContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IStringFormValue_setStringContext(ctx context.Context, request *IStringFormValue_setString) (*IStringFormValue_setStringResponse, error) {
	response := new(IStringFormValue_setStringResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IStringFormValue_setString(request *IStringFormValue_setString) (*IStringFormValue_setStringResponse, error) {
	return service.IStringFormValue_setStringContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IChoiceFormValue_getValuesContext(ctx context.Context, request *IChoiceFormValue_getValues) (*IChoiceFormValue_getValuesResponse, error) {
	response := new(IChoiceFormValue_getValuesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IChoiceFormValue_getValues(request *IChoiceFormValue_getValues) (*IChoiceFormValue_getValuesResponse, error) {
	return service.IChoiceFormValue_getValuesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IChoiceFormValue_getSelectedIndexContext(ctx context.Context, request *IChoiceFormValue_getSelectedIndex) (*IChoiceFormValue_getSelectedIndexResponse, error) {
	response := new(IChoiceFormValue_getSelectedIndexResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IChoiceFormValue_getSelectedIndex(request *IChoiceFormValue_getSelectedIndex) (*IChoiceFormValue_getSelectedIndexResponse, error) {
	return service.IChoiceFormValue_getSelectedIndexContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IChoiceFormValue_setSelectedIndexContext(ctx context.Context, request *IChoiceFormValue_setSelectedIndex) (*IChoiceFormValue_setSelectedIndexResponse, error) {
	response := new(IChoiceFormValue_setSelectedIndexResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IChoiceFormValue_setSelectedIndex(request *IChoiceFormValue_setSelectedIndex) (*IChoiceFormValue_setSelectedIndexResponse, error) {
	return service.IChoiceFormValue_setSelectedIndexContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IForm_getValuesContext(ctx context.Context, request *IForm_getValues) (*IForm_getValuesResponse, error) {
	response := new(IForm_getValuesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IForm_getValues(request *IForm_getValues) (*IForm_getValuesResponse, error) {
	return service.IForm_getValuesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IForm_getFieldGroupContext(ctx context.Context, request *IForm_getFieldGroup) (*IForm_getFieldGroupResponse, error) {
	response := new(IForm_getFieldGroupResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IForm_getFieldGroup(request *IForm_getFieldGroup) (*IForm_getFieldGroupResponse, error) {
	return service.IForm_getFieldGroupContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IForm_applyContext(ctx context.Context, request *IForm_apply) (*IForm_applyResponse, error) {
	response := new(IForm_applyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IForm_apply(request *IForm_apply) (*IForm_applyResponse, error) {
	return service.IForm_applyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) IVirtualSystemDescriptionForm_getVirtualSystemDescriptionContext(ctx context.Context, request *IVirtualSystemDescriptionForm_getVirtualSystemDescription) (*IVirtualSystemDescriptionForm_getVirtualSystemDescriptionResponse, error) {
	response := new(IVirtualSystemDescriptionForm_getVirtualSystemDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) IVirtualSystemDescriptionForm_getVirtualSystemDescription(request *IVirtualSystemDescriptionForm_getVirtualSystemDescription) (*IVirtualSystemDescriptionForm_getVirtualSystemDescriptionResponse, error) {
	return service.IVirtualSystemDescriptionForm_getVirtualSystemDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetworkGatewayInfo_getPublicIPContext(ctx context.Context, request *ICloudNetworkGatewayInfo_getPublicIP) (*ICloudNetworkGatewayInfo_getPublicIPResponse, error) {
	response := new(ICloudNetworkGatewayInfo_getPublicIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetworkGatewayInfo_getPublicIP(request *ICloudNetworkGatewayInfo_getPublicIP) (*ICloudNetworkGatewayInfo_getPublicIPResponse, error) {
	return service.ICloudNetworkGatewayInfo_getPublicIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetworkGatewayInfo_getSecondaryPublicIPContext(ctx context.Context, request *ICloudNetworkGatewayInfo_getSecondaryPublicIP) (*ICloudNetworkGatewayInfo_getSecondaryPublicIPResponse, error) {
	response := new(ICloudNetworkGatewayInfo_getSecondaryPublicIPResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetworkGatewayInfo_getSecondaryPublicIP(request *ICloudNetworkGatewayInfo_getSecondaryPublicIP) (*ICloudNetworkGatewayInfo_getSecondaryPublicIPResponse, error) {
	return service.ICloudNetworkGatewayInfo_getSecondaryPublicIPContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetworkGatewayInfo_getMacAddressContext(ctx context.Context, request *ICloudNetworkGatewayInfo_getMacAddress) (*ICloudNetworkGatewayInfo_getMacAddressResponse, error) {
	response := new(ICloudNetworkGatewayInfo_getMacAddressResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetworkGatewayInfo_getMacAddress(request *ICloudNetworkGatewayInfo_getMacAddress) (*ICloudNetworkGatewayInfo_getMacAddressResponse, error) {
	return service.ICloudNetworkGatewayInfo_getMacAddressContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetworkGatewayInfo_getInstanceIdContext(ctx context.Context, request *ICloudNetworkGatewayInfo_getInstanceId) (*ICloudNetworkGatewayInfo_getInstanceIdResponse, error) {
	response := new(ICloudNetworkGatewayInfo_getInstanceIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetworkGatewayInfo_getInstanceId(request *ICloudNetworkGatewayInfo_getInstanceId) (*ICloudNetworkGatewayInfo_getInstanceIdResponse, error) {
	return service.ICloudNetworkGatewayInfo_getInstanceIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudNetworkEnvironmentInfo_getTunnelNetworkIdContext(ctx context.Context, request *ICloudNetworkEnvironmentInfo_getTunnelNetworkId) (*ICloudNetworkEnvironmentInfo_getTunnelNetworkIdResponse, error) {
	response := new(ICloudNetworkEnvironmentInfo_getTunnelNetworkIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudNetworkEnvironmentInfo_getTunnelNetworkId(request *ICloudNetworkEnvironmentInfo_getTunnelNetworkId) (*ICloudNetworkEnvironmentInfo_getTunnelNetworkIdResponse, error) {
	return service.ICloudNetworkEnvironmentInfo_getTunnelNetworkIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getIdContext(ctx context.Context, request *ICloudMachine_getId) (*ICloudMachine_getIdResponse, error) {
	response := new(ICloudMachine_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getId(request *ICloudMachine_getId) (*ICloudMachine_getIdResponse, error) {
	return service.ICloudMachine_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getAccessibleContext(ctx context.Context, request *ICloudMachine_getAccessible) (*ICloudMachine_getAccessibleResponse, error) {
	response := new(ICloudMachine_getAccessibleResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getAccessible(request *ICloudMachine_getAccessible) (*ICloudMachine_getAccessibleResponse, error) {
	return service.ICloudMachine_getAccessibleContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getAccessErrorContext(ctx context.Context, request *ICloudMachine_getAccessError) (*ICloudMachine_getAccessErrorResponse, error) {
	response := new(ICloudMachine_getAccessErrorResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getAccessError(request *ICloudMachine_getAccessError) (*ICloudMachine_getAccessErrorResponse, error) {
	return service.ICloudMachine_getAccessErrorContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getNameContext(ctx context.Context, request *ICloudMachine_getName) (*ICloudMachine_getNameResponse, error) {
	response := new(ICloudMachine_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getName(request *ICloudMachine_getName) (*ICloudMachine_getNameResponse, error) {
	return service.ICloudMachine_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getOSTypeIdContext(ctx context.Context, request *ICloudMachine_getOSTypeId) (*ICloudMachine_getOSTypeIdResponse, error) {
	response := new(ICloudMachine_getOSTypeIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getOSTypeId(request *ICloudMachine_getOSTypeId) (*ICloudMachine_getOSTypeIdResponse, error) {
	return service.ICloudMachine_getOSTypeIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getStateContext(ctx context.Context, request *ICloudMachine_getState) (*ICloudMachine_getStateResponse, error) {
	response := new(ICloudMachine_getStateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getState(request *ICloudMachine_getState) (*ICloudMachine_getStateResponse, error) {
	return service.ICloudMachine_getStateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getConsoleConnectionFingerprintContext(ctx context.Context, request *ICloudMachine_getConsoleConnectionFingerprint) (*ICloudMachine_getConsoleConnectionFingerprintResponse, error) {
	response := new(ICloudMachine_getConsoleConnectionFingerprintResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getConsoleConnectionFingerprint(request *ICloudMachine_getConsoleConnectionFingerprint) (*ICloudMachine_getConsoleConnectionFingerprintResponse, error) {
	return service.ICloudMachine_getConsoleConnectionFingerprintContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getSerialConsoleCommandContext(ctx context.Context, request *ICloudMachine_getSerialConsoleCommand) (*ICloudMachine_getSerialConsoleCommandResponse, error) {
	response := new(ICloudMachine_getSerialConsoleCommandResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getSerialConsoleCommand(request *ICloudMachine_getSerialConsoleCommand) (*ICloudMachine_getSerialConsoleCommandResponse, error) {
	return service.ICloudMachine_getSerialConsoleCommandContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getSerialConsoleCommandWindowsContext(ctx context.Context, request *ICloudMachine_getSerialConsoleCommandWindows) (*ICloudMachine_getSerialConsoleCommandWindowsResponse, error) {
	response := new(ICloudMachine_getSerialConsoleCommandWindowsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getSerialConsoleCommandWindows(request *ICloudMachine_getSerialConsoleCommandWindows) (*ICloudMachine_getSerialConsoleCommandWindowsResponse, error) {
	return service.ICloudMachine_getSerialConsoleCommandWindowsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getVNCConsoleCommandContext(ctx context.Context, request *ICloudMachine_getVNCConsoleCommand) (*ICloudMachine_getVNCConsoleCommandResponse, error) {
	response := new(ICloudMachine_getVNCConsoleCommandResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getVNCConsoleCommand(request *ICloudMachine_getVNCConsoleCommand) (*ICloudMachine_getVNCConsoleCommandResponse, error) {
	return service.ICloudMachine_getVNCConsoleCommandContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getVNCConsoleCommandWindowsContext(ctx context.Context, request *ICloudMachine_getVNCConsoleCommandWindows) (*ICloudMachine_getVNCConsoleCommandWindowsResponse, error) {
	response := new(ICloudMachine_getVNCConsoleCommandWindowsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getVNCConsoleCommandWindows(request *ICloudMachine_getVNCConsoleCommandWindows) (*ICloudMachine_getVNCConsoleCommandWindowsResponse, error) {
	return service.ICloudMachine_getVNCConsoleCommandWindowsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_refreshContext(ctx context.Context, request *ICloudMachine_refresh) (*ICloudMachine_refreshResponse, error) {
	response := new(ICloudMachine_refreshResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_refresh(request *ICloudMachine_refresh) (*ICloudMachine_refreshResponse, error) {
	return service.ICloudMachine_refreshContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getDetailsFormContext(ctx context.Context, request *ICloudMachine_getDetailsForm) (*ICloudMachine_getDetailsFormResponse, error) {
	response := new(ICloudMachine_getDetailsFormResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getDetailsForm(request *ICloudMachine_getDetailsForm) (*ICloudMachine_getDetailsFormResponse, error) {
	return service.ICloudMachine_getDetailsFormContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getSettingsFormContext(ctx context.Context, request *ICloudMachine_getSettingsForm) (*ICloudMachine_getSettingsFormResponse, error) {
	response := new(ICloudMachine_getSettingsFormResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getSettingsForm(request *ICloudMachine_getSettingsForm) (*ICloudMachine_getSettingsFormResponse, error) {
	return service.ICloudMachine_getSettingsFormContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_powerUpContext(ctx context.Context, request *ICloudMachine_powerUp) (*ICloudMachine_powerUpResponse, error) {
	response := new(ICloudMachine_powerUpResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_powerUp(request *ICloudMachine_powerUp) (*ICloudMachine_powerUpResponse, error) {
	return service.ICloudMachine_powerUpContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_rebootContext(ctx context.Context, request *ICloudMachine_reboot) (*ICloudMachine_rebootResponse, error) {
	response := new(ICloudMachine_rebootResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_reboot(request *ICloudMachine_reboot) (*ICloudMachine_rebootResponse, error) {
	return service.ICloudMachine_rebootContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_shutdownContext(ctx context.Context, request *ICloudMachine_shutdown) (*ICloudMachine_shutdownResponse, error) {
	response := new(ICloudMachine_shutdownResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_shutdown(request *ICloudMachine_shutdown) (*ICloudMachine_shutdownResponse, error) {
	return service.ICloudMachine_shutdownContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_powerDownContext(ctx context.Context, request *ICloudMachine_powerDown) (*ICloudMachine_powerDownResponse, error) {
	response := new(ICloudMachine_powerDownResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_powerDown(request *ICloudMachine_powerDown) (*ICloudMachine_powerDownResponse, error) {
	return service.ICloudMachine_powerDownContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_terminateContext(ctx context.Context, request *ICloudMachine_terminate) (*ICloudMachine_terminateResponse, error) {
	response := new(ICloudMachine_terminateResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_terminate(request *ICloudMachine_terminate) (*ICloudMachine_terminateResponse, error) {
	return service.ICloudMachine_terminateContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_unregisterContext(ctx context.Context, request *ICloudMachine_unregister) (*ICloudMachine_unregisterResponse, error) {
	response := new(ICloudMachine_unregisterResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_unregister(request *ICloudMachine_unregister) (*ICloudMachine_unregisterResponse, error) {
	return service.ICloudMachine_unregisterContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_removeContext(ctx context.Context, request *ICloudMachine_remove) (*ICloudMachine_removeResponse, error) {
	response := new(ICloudMachine_removeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_remove(request *ICloudMachine_remove) (*ICloudMachine_removeResponse, error) {
	return service.ICloudMachine_removeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_getConsoleHistoryContext(ctx context.Context, request *ICloudMachine_getConsoleHistory) (*ICloudMachine_getConsoleHistoryResponse, error) {
	response := new(ICloudMachine_getConsoleHistoryResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_getConsoleHistory(request *ICloudMachine_getConsoleHistory) (*ICloudMachine_getConsoleHistoryResponse, error) {
	return service.ICloudMachine_getConsoleHistoryContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_createConsoleConnectionContext(ctx context.Context, request *ICloudMachine_createConsoleConnection) (*ICloudMachine_createConsoleConnectionResponse, error) {
	response := new(ICloudMachine_createConsoleConnectionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_createConsoleConnection(request *ICloudMachine_createConsoleConnection) (*ICloudMachine_createConsoleConnectionResponse, error) {
	return service.ICloudMachine_createConsoleConnectionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudMachine_deleteConsoleConnectionContext(ctx context.Context, request *ICloudMachine_deleteConsoleConnection) (*ICloudMachine_deleteConsoleConnectionResponse, error) {
	response := new(ICloudMachine_deleteConsoleConnectionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudMachine_deleteConsoleConnection(request *ICloudMachine_deleteConsoleConnection) (*ICloudMachine_deleteConsoleConnectionResponse, error) {
	return service.ICloudMachine_deleteConsoleConnectionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_getCloudMachineListContext(ctx context.Context, request *ICloudClient_getCloudMachineList) (*ICloudClient_getCloudMachineListResponse, error) {
	response := new(ICloudClient_getCloudMachineListResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_getCloudMachineList(request *ICloudClient_getCloudMachineList) (*ICloudClient_getCloudMachineListResponse, error) {
	return service.ICloudClient_getCloudMachineListContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_getCloudMachineStubListContext(ctx context.Context, request *ICloudClient_getCloudMachineStubList) (*ICloudClient_getCloudMachineStubListResponse, error) {
	response := new(ICloudClient_getCloudMachineStubListResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_getCloudMachineStubList(request *ICloudClient_getCloudMachineStubList) (*ICloudClient_getCloudMachineStubListResponse, error) {
	return service.ICloudClient_getCloudMachineStubListContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_getExportDescriptionFormContext(ctx context.Context, request *ICloudClient_getExportDescriptionForm) (*ICloudClient_getExportDescriptionFormResponse, error) {
	response := new(ICloudClient_getExportDescriptionFormResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_getExportDescriptionForm(request *ICloudClient_getExportDescriptionForm) (*ICloudClient_getExportDescriptionFormResponse, error) {
	return service.ICloudClient_getExportDescriptionFormContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_exportVMContext(ctx context.Context, request *ICloudClient_exportVM) (*ICloudClient_exportVMResponse, error) {
	response := new(ICloudClient_exportVMResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_exportVM(request *ICloudClient_exportVM) (*ICloudClient_exportVMResponse, error) {
	return service.ICloudClient_exportVMContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_getLaunchDescriptionFormContext(ctx context.Context, request *ICloudClient_getLaunchDescriptionForm) (*ICloudClient_getLaunchDescriptionFormResponse, error) {
	response := new(ICloudClient_getLaunchDescriptionFormResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_getLaunchDescriptionForm(request *ICloudClient_getLaunchDescriptionForm) (*ICloudClient_getLaunchDescriptionFormResponse, error) {
	return service.ICloudClient_getLaunchDescriptionFormContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_launchVMContext(ctx context.Context, request *ICloudClient_launchVM) (*ICloudClient_launchVMResponse, error) {
	response := new(ICloudClient_launchVMResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_launchVM(request *ICloudClient_launchVM) (*ICloudClient_launchVMResponse, error) {
	return service.ICloudClient_launchVMContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_getImportDescriptionFormContext(ctx context.Context, request *ICloudClient_getImportDescriptionForm) (*ICloudClient_getImportDescriptionFormResponse, error) {
	response := new(ICloudClient_getImportDescriptionFormResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_getImportDescriptionForm(request *ICloudClient_getImportDescriptionForm) (*ICloudClient_getImportDescriptionFormResponse, error) {
	return service.ICloudClient_getImportDescriptionFormContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_importInstanceContext(ctx context.Context, request *ICloudClient_importInstance) (*ICloudClient_importInstanceResponse, error) {
	response := new(ICloudClient_importInstanceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_importInstance(request *ICloudClient_importInstance) (*ICloudClient_importInstanceResponse, error) {
	return service.ICloudClient_importInstanceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_getCloudMachineContext(ctx context.Context, request *ICloudClient_getCloudMachine) (*ICloudClient_getCloudMachineResponse, error) {
	response := new(ICloudClient_getCloudMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_getCloudMachine(request *ICloudClient_getCloudMachine) (*ICloudClient_getCloudMachineResponse, error) {
	return service.ICloudClient_getCloudMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_readCloudMachineListContext(ctx context.Context, request *ICloudClient_readCloudMachineList) (*ICloudClient_readCloudMachineListResponse, error) {
	response := new(ICloudClient_readCloudMachineListResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_readCloudMachineList(request *ICloudClient_readCloudMachineList) (*ICloudClient_readCloudMachineListResponse, error) {
	return service.ICloudClient_readCloudMachineListContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_readCloudMachineStubListContext(ctx context.Context, request *ICloudClient_readCloudMachineStubList) (*ICloudClient_readCloudMachineStubListResponse, error) {
	response := new(ICloudClient_readCloudMachineStubListResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_readCloudMachineStubList(request *ICloudClient_readCloudMachineStubList) (*ICloudClient_readCloudMachineStubListResponse, error) {
	return service.ICloudClient_readCloudMachineStubListContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_addCloudMachineContext(ctx context.Context, request *ICloudClient_addCloudMachine) (*ICloudClient_addCloudMachineResponse, error) {
	response := new(ICloudClient_addCloudMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_addCloudMachine(request *ICloudClient_addCloudMachine) (*ICloudClient_addCloudMachineResponse, error) {
	return service.ICloudClient_addCloudMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_createCloudMachineContext(ctx context.Context, request *ICloudClient_createCloudMachine) (*ICloudClient_createCloudMachineResponse, error) {
	response := new(ICloudClient_createCloudMachineResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_createCloudMachine(request *ICloudClient_createCloudMachine) (*ICloudClient_createCloudMachineResponse, error) {
	return service.ICloudClient_createCloudMachineContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_listInstancesContext(ctx context.Context, request *ICloudClient_listInstances) (*ICloudClient_listInstancesResponse, error) {
	response := new(ICloudClient_listInstancesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_listInstances(request *ICloudClient_listInstances) (*ICloudClient_listInstancesResponse, error) {
	return service.ICloudClient_listInstancesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_listSourceInstancesContext(ctx context.Context, request *ICloudClient_listSourceInstances) (*ICloudClient_listSourceInstancesResponse, error) {
	response := new(ICloudClient_listSourceInstancesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_listSourceInstances(request *ICloudClient_listSourceInstances) (*ICloudClient_listSourceInstancesResponse, error) {
	return service.ICloudClient_listSourceInstancesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_listImagesContext(ctx context.Context, request *ICloudClient_listImages) (*ICloudClient_listImagesResponse, error) {
	response := new(ICloudClient_listImagesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_listImages(request *ICloudClient_listImages) (*ICloudClient_listImagesResponse, error) {
	return service.ICloudClient_listImagesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_listBootVolumesContext(ctx context.Context, request *ICloudClient_listBootVolumes) (*ICloudClient_listBootVolumesResponse, error) {
	response := new(ICloudClient_listBootVolumesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_listBootVolumes(request *ICloudClient_listBootVolumes) (*ICloudClient_listBootVolumesResponse, error) {
	return service.ICloudClient_listBootVolumesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_listSourceBootVolumesContext(ctx context.Context, request *ICloudClient_listSourceBootVolumes) (*ICloudClient_listSourceBootVolumesResponse, error) {
	response := new(ICloudClient_listSourceBootVolumesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_listSourceBootVolumes(request *ICloudClient_listSourceBootVolumes) (*ICloudClient_listSourceBootVolumesResponse, error) {
	return service.ICloudClient_listSourceBootVolumesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_listVnicAttachmentsContext(ctx context.Context, request *ICloudClient_listVnicAttachments) (*ICloudClient_listVnicAttachmentsResponse, error) {
	response := new(ICloudClient_listVnicAttachmentsResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_listVnicAttachments(request *ICloudClient_listVnicAttachments) (*ICloudClient_listVnicAttachmentsResponse, error) {
	return service.ICloudClient_listVnicAttachmentsContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_getInstanceInfoContext(ctx context.Context, request *ICloudClient_getInstanceInfo) (*ICloudClient_getInstanceInfoResponse, error) {
	response := new(ICloudClient_getInstanceInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_getInstanceInfo(request *ICloudClient_getInstanceInfo) (*ICloudClient_getInstanceInfoResponse, error) {
	return service.ICloudClient_getInstanceInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_startInstanceContext(ctx context.Context, request *ICloudClient_startInstance) (*ICloudClient_startInstanceResponse, error) {
	response := new(ICloudClient_startInstanceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_startInstance(request *ICloudClient_startInstance) (*ICloudClient_startInstanceResponse, error) {
	return service.ICloudClient_startInstanceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_pauseInstanceContext(ctx context.Context, request *ICloudClient_pauseInstance) (*ICloudClient_pauseInstanceResponse, error) {
	response := new(ICloudClient_pauseInstanceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_pauseInstance(request *ICloudClient_pauseInstance) (*ICloudClient_pauseInstanceResponse, error) {
	return service.ICloudClient_pauseInstanceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_terminateInstanceContext(ctx context.Context, request *ICloudClient_terminateInstance) (*ICloudClient_terminateInstanceResponse, error) {
	response := new(ICloudClient_terminateInstanceResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_terminateInstance(request *ICloudClient_terminateInstance) (*ICloudClient_terminateInstanceResponse, error) {
	return service.ICloudClient_terminateInstanceContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_createImageContext(ctx context.Context, request *ICloudClient_createImage) (*ICloudClient_createImageResponse, error) {
	response := new(ICloudClient_createImageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_createImage(request *ICloudClient_createImage) (*ICloudClient_createImageResponse, error) {
	return service.ICloudClient_createImageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_exportImageContext(ctx context.Context, request *ICloudClient_exportImage) (*ICloudClient_exportImageResponse, error) {
	response := new(ICloudClient_exportImageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_exportImage(request *ICloudClient_exportImage) (*ICloudClient_exportImageResponse, error) {
	return service.ICloudClient_exportImageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_importImageContext(ctx context.Context, request *ICloudClient_importImage) (*ICloudClient_importImageResponse, error) {
	response := new(ICloudClient_importImageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_importImage(request *ICloudClient_importImage) (*ICloudClient_importImageResponse, error) {
	return service.ICloudClient_importImageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_deleteImageContext(ctx context.Context, request *ICloudClient_deleteImage) (*ICloudClient_deleteImageResponse, error) {
	response := new(ICloudClient_deleteImageResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_deleteImage(request *ICloudClient_deleteImage) (*ICloudClient_deleteImageResponse, error) {
	return service.ICloudClient_deleteImageContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_getImageInfoContext(ctx context.Context, request *ICloudClient_getImageInfo) (*ICloudClient_getImageInfoResponse, error) {
	response := new(ICloudClient_getImageInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_getImageInfo(request *ICloudClient_getImageInfo) (*ICloudClient_getImageInfoResponse, error) {
	return service.ICloudClient_getImageInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_startCloudNetworkGatewayContext(ctx context.Context, request *ICloudClient_startCloudNetworkGateway) (*ICloudClient_startCloudNetworkGatewayResponse, error) {
	response := new(ICloudClient_startCloudNetworkGatewayResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_startCloudNetworkGateway(request *ICloudClient_startCloudNetworkGateway) (*ICloudClient_startCloudNetworkGatewayResponse, error) {
	return service.ICloudClient_startCloudNetworkGatewayContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_setupCloudNetworkEnvironmentContext(ctx context.Context, request *ICloudClient_setupCloudNetworkEnvironment) (*ICloudClient_setupCloudNetworkEnvironmentResponse, error) {
	response := new(ICloudClient_setupCloudNetworkEnvironmentResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_setupCloudNetworkEnvironment(request *ICloudClient_setupCloudNetworkEnvironment) (*ICloudClient_setupCloudNetworkEnvironmentResponse, error) {
	return service.ICloudClient_setupCloudNetworkEnvironmentContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_getVnicInfoContext(ctx context.Context, request *ICloudClient_getVnicInfo) (*ICloudClient_getVnicInfoResponse, error) {
	response := new(ICloudClient_getVnicInfoResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_getVnicInfo(request *ICloudClient_getVnicInfo) (*ICloudClient_getVnicInfoResponse, error) {
	return service.ICloudClient_getVnicInfoContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudClient_getSubnetSelectionFormContext(ctx context.Context, request *ICloudClient_getSubnetSelectionForm) (*ICloudClient_getSubnetSelectionFormResponse, error) {
	response := new(ICloudClient_getSubnetSelectionFormResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudClient_getSubnetSelectionForm(request *ICloudClient_getSubnetSelectionForm) (*ICloudClient_getSubnetSelectionFormResponse, error) {
	return service.ICloudClient_getSubnetSelectionFormContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfile_getNameContext(ctx context.Context, request *ICloudProfile_getName) (*ICloudProfile_getNameResponse, error) {
	response := new(ICloudProfile_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfile_getName(request *ICloudProfile_getName) (*ICloudProfile_getNameResponse, error) {
	return service.ICloudProfile_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfile_setNameContext(ctx context.Context, request *ICloudProfile_setName) (*ICloudProfile_setNameResponse, error) {
	response := new(ICloudProfile_setNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfile_setName(request *ICloudProfile_setName) (*ICloudProfile_setNameResponse, error) {
	return service.ICloudProfile_setNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfile_getProviderIdContext(ctx context.Context, request *ICloudProfile_getProviderId) (*ICloudProfile_getProviderIdResponse, error) {
	response := new(ICloudProfile_getProviderIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfile_getProviderId(request *ICloudProfile_getProviderId) (*ICloudProfile_getProviderIdResponse, error) {
	return service.ICloudProfile_getProviderIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfile_getPropertyContext(ctx context.Context, request *ICloudProfile_getProperty) (*ICloudProfile_getPropertyResponse, error) {
	response := new(ICloudProfile_getPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfile_getProperty(request *ICloudProfile_getProperty) (*ICloudProfile_getPropertyResponse, error) {
	return service.ICloudProfile_getPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfile_setPropertyContext(ctx context.Context, request *ICloudProfile_setProperty) (*ICloudProfile_setPropertyResponse, error) {
	response := new(ICloudProfile_setPropertyResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfile_setProperty(request *ICloudProfile_setProperty) (*ICloudProfile_setPropertyResponse, error) {
	return service.ICloudProfile_setPropertyContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfile_getPropertiesContext(ctx context.Context, request *ICloudProfile_getProperties) (*ICloudProfile_getPropertiesResponse, error) {
	response := new(ICloudProfile_getPropertiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfile_getProperties(request *ICloudProfile_getProperties) (*ICloudProfile_getPropertiesResponse, error) {
	return service.ICloudProfile_getPropertiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfile_setPropertiesContext(ctx context.Context, request *ICloudProfile_setProperties) (*ICloudProfile_setPropertiesResponse, error) {
	response := new(ICloudProfile_setPropertiesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfile_setProperties(request *ICloudProfile_setProperties) (*ICloudProfile_setPropertiesResponse, error) {
	return service.ICloudProfile_setPropertiesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfile_removeContext(ctx context.Context, request *ICloudProfile_remove) (*ICloudProfile_removeResponse, error) {
	response := new(ICloudProfile_removeResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfile_remove(request *ICloudProfile_remove) (*ICloudProfile_removeResponse, error) {
	return service.ICloudProfile_removeContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfile_createCloudClientContext(ctx context.Context, request *ICloudProfile_createCloudClient) (*ICloudProfile_createCloudClientResponse, error) {
	response := new(ICloudProfile_createCloudClientResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfile_createCloudClient(request *ICloudProfile_createCloudClient) (*ICloudProfile_createCloudClientResponse, error) {
	return service.ICloudProfile_createCloudClientContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_getNameContext(ctx context.Context, request *ICloudProvider_getName) (*ICloudProvider_getNameResponse, error) {
	response := new(ICloudProvider_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_getName(request *ICloudProvider_getName) (*ICloudProvider_getNameResponse, error) {
	return service.ICloudProvider_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_getShortNameContext(ctx context.Context, request *ICloudProvider_getShortName) (*ICloudProvider_getShortNameResponse, error) {
	response := new(ICloudProvider_getShortNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_getShortName(request *ICloudProvider_getShortName) (*ICloudProvider_getShortNameResponse, error) {
	return service.ICloudProvider_getShortNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_getIdContext(ctx context.Context, request *ICloudProvider_getId) (*ICloudProvider_getIdResponse, error) {
	response := new(ICloudProvider_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_getId(request *ICloudProvider_getId) (*ICloudProvider_getIdResponse, error) {
	return service.ICloudProvider_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_getProfilesContext(ctx context.Context, request *ICloudProvider_getProfiles) (*ICloudProvider_getProfilesResponse, error) {
	response := new(ICloudProvider_getProfilesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_getProfiles(request *ICloudProvider_getProfiles) (*ICloudProvider_getProfilesResponse, error) {
	return service.ICloudProvider_getProfilesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_getProfileNamesContext(ctx context.Context, request *ICloudProvider_getProfileNames) (*ICloudProvider_getProfileNamesResponse, error) {
	response := new(ICloudProvider_getProfileNamesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_getProfileNames(request *ICloudProvider_getProfileNames) (*ICloudProvider_getProfileNamesResponse, error) {
	return service.ICloudProvider_getProfileNamesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_getSupportedPropertyNamesContext(ctx context.Context, request *ICloudProvider_getSupportedPropertyNames) (*ICloudProvider_getSupportedPropertyNamesResponse, error) {
	response := new(ICloudProvider_getSupportedPropertyNamesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_getSupportedPropertyNames(request *ICloudProvider_getSupportedPropertyNames) (*ICloudProvider_getSupportedPropertyNamesResponse, error) {
	return service.ICloudProvider_getSupportedPropertyNamesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_getPropertyDescriptionContext(ctx context.Context, request *ICloudProvider_getPropertyDescription) (*ICloudProvider_getPropertyDescriptionResponse, error) {
	response := new(ICloudProvider_getPropertyDescriptionResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_getPropertyDescription(request *ICloudProvider_getPropertyDescription) (*ICloudProvider_getPropertyDescriptionResponse, error) {
	return service.ICloudProvider_getPropertyDescriptionContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_createProfileContext(ctx context.Context, request *ICloudProvider_createProfile) (*ICloudProvider_createProfileResponse, error) {
	response := new(ICloudProvider_createProfileResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_createProfile(request *ICloudProvider_createProfile) (*ICloudProvider_createProfileResponse, error) {
	return service.ICloudProvider_createProfileContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_importProfilesContext(ctx context.Context, request *ICloudProvider_importProfiles) (*ICloudProvider_importProfilesResponse, error) {
	response := new(ICloudProvider_importProfilesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_importProfiles(request *ICloudProvider_importProfiles) (*ICloudProvider_importProfilesResponse, error) {
	return service.ICloudProvider_importProfilesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_restoreProfilesContext(ctx context.Context, request *ICloudProvider_restoreProfiles) (*ICloudProvider_restoreProfilesResponse, error) {
	response := new(ICloudProvider_restoreProfilesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_restoreProfiles(request *ICloudProvider_restoreProfiles) (*ICloudProvider_restoreProfilesResponse, error) {
	return service.ICloudProvider_restoreProfilesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_saveProfilesContext(ctx context.Context, request *ICloudProvider_saveProfiles) (*ICloudProvider_saveProfilesResponse, error) {
	response := new(ICloudProvider_saveProfilesResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_saveProfiles(request *ICloudProvider_saveProfiles) (*ICloudProvider_saveProfilesResponse, error) {
	return service.ICloudProvider_saveProfilesContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_getProfileByNameContext(ctx context.Context, request *ICloudProvider_getProfileByName) (*ICloudProvider_getProfileByNameResponse, error) {
	response := new(ICloudProvider_getProfileByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_getProfileByName(request *ICloudProvider_getProfileByName) (*ICloudProvider_getProfileByNameResponse, error) {
	return service.ICloudProvider_getProfileByNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProvider_prepareUninstallContext(ctx context.Context, request *ICloudProvider_prepareUninstall) (*ICloudProvider_prepareUninstallResponse, error) {
	response := new(ICloudProvider_prepareUninstallResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProvider_prepareUninstall(request *ICloudProvider_prepareUninstall) (*ICloudProvider_prepareUninstallResponse, error) {
	return service.ICloudProvider_prepareUninstallContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProviderManager_getProvidersContext(ctx context.Context, request *ICloudProviderManager_getProviders) (*ICloudProviderManager_getProvidersResponse, error) {
	response := new(ICloudProviderManager_getProvidersResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProviderManager_getProviders(request *ICloudProviderManager_getProviders) (*ICloudProviderManager_getProvidersResponse, error) {
	return service.ICloudProviderManager_getProvidersContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProviderManager_getProviderByIdContext(ctx context.Context, request *ICloudProviderManager_getProviderById) (*ICloudProviderManager_getProviderByIdResponse, error) {
	response := new(ICloudProviderManager_getProviderByIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProviderManager_getProviderById(request *ICloudProviderManager_getProviderById) (*ICloudProviderManager_getProviderByIdResponse, error) {
	return service.ICloudProviderManager_getProviderByIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProviderManager_getProviderByShortNameContext(ctx context.Context, request *ICloudProviderManager_getProviderByShortName) (*ICloudProviderManager_getProviderByShortNameResponse, error) {
	response := new(ICloudProviderManager_getProviderByShortNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProviderManager_getProviderByShortName(request *ICloudProviderManager_getProviderByShortName) (*ICloudProviderManager_getProviderByShortNameResponse, error) {
	return service.ICloudProviderManager_getProviderByShortNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProviderManager_getProviderByNameContext(ctx context.Context, request *ICloudProviderManager_getProviderByName) (*ICloudProviderManager_getProviderByNameResponse, error) {
	response := new(ICloudProviderManager_getProviderByNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProviderManager_getProviderByName(request *ICloudProviderManager_getProviderByName) (*ICloudProviderManager_getProviderByNameResponse, error) {
	return service.ICloudProviderManager_getProviderByNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProviderListChangedEvent_getRegisteredContext(ctx context.Context, request *ICloudProviderListChangedEvent_getRegistered) (*ICloudProviderListChangedEvent_getRegisteredResponse, error) {
	response := new(ICloudProviderListChangedEvent_getRegisteredResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProviderListChangedEvent_getRegistered(request *ICloudProviderListChangedEvent_getRegistered) (*ICloudProviderListChangedEvent_getRegisteredResponse, error) {
	return service.ICloudProviderListChangedEvent_getRegisteredContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProviderRegisteredEvent_getIdContext(ctx context.Context, request *ICloudProviderRegisteredEvent_getId) (*ICloudProviderRegisteredEvent_getIdResponse, error) {
	response := new(ICloudProviderRegisteredEvent_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProviderRegisteredEvent_getId(request *ICloudProviderRegisteredEvent_getId) (*ICloudProviderRegisteredEvent_getIdResponse, error) {
	return service.ICloudProviderRegisteredEvent_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProviderRegisteredEvent_getRegisteredContext(ctx context.Context, request *ICloudProviderRegisteredEvent_getRegistered) (*ICloudProviderRegisteredEvent_getRegisteredResponse, error) {
	response := new(ICloudProviderRegisteredEvent_getRegisteredResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProviderRegisteredEvent_getRegistered(request *ICloudProviderRegisteredEvent_getRegistered) (*ICloudProviderRegisteredEvent_getRegisteredResponse, error) {
	return service.ICloudProviderRegisteredEvent_getRegisteredContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProviderUninstallEvent_getIdContext(ctx context.Context, request *ICloudProviderUninstallEvent_getId) (*ICloudProviderUninstallEvent_getIdResponse, error) {
	response := new(ICloudProviderUninstallEvent_getIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProviderUninstallEvent_getId(request *ICloudProviderUninstallEvent_getId) (*ICloudProviderUninstallEvent_getIdResponse, error) {
	return service.ICloudProviderUninstallEvent_getIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfileRegisteredEvent_getProviderIdContext(ctx context.Context, request *ICloudProfileRegisteredEvent_getProviderId) (*ICloudProfileRegisteredEvent_getProviderIdResponse, error) {
	response := new(ICloudProfileRegisteredEvent_getProviderIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfileRegisteredEvent_getProviderId(request *ICloudProfileRegisteredEvent_getProviderId) (*ICloudProfileRegisteredEvent_getProviderIdResponse, error) {
	return service.ICloudProfileRegisteredEvent_getProviderIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfileRegisteredEvent_getNameContext(ctx context.Context, request *ICloudProfileRegisteredEvent_getName) (*ICloudProfileRegisteredEvent_getNameResponse, error) {
	response := new(ICloudProfileRegisteredEvent_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfileRegisteredEvent_getName(request *ICloudProfileRegisteredEvent_getName) (*ICloudProfileRegisteredEvent_getNameResponse, error) {
	return service.ICloudProfileRegisteredEvent_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfileRegisteredEvent_getRegisteredContext(ctx context.Context, request *ICloudProfileRegisteredEvent_getRegistered) (*ICloudProfileRegisteredEvent_getRegisteredResponse, error) {
	response := new(ICloudProfileRegisteredEvent_getRegisteredResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfileRegisteredEvent_getRegistered(request *ICloudProfileRegisteredEvent_getRegistered) (*ICloudProfileRegisteredEvent_getRegisteredResponse, error) {
	return service.ICloudProfileRegisteredEvent_getRegisteredContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfileChangedEvent_getProviderIdContext(ctx context.Context, request *ICloudProfileChangedEvent_getProviderId) (*ICloudProfileChangedEvent_getProviderIdResponse, error) {
	response := new(ICloudProfileChangedEvent_getProviderIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfileChangedEvent_getProviderId(request *ICloudProfileChangedEvent_getProviderId) (*ICloudProfileChangedEvent_getProviderIdResponse, error) {
	return service.ICloudProfileChangedEvent_getProviderIdContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ICloudProfileChangedEvent_getNameContext(ctx context.Context, request *ICloudProfileChangedEvent_getName) (*ICloudProfileChangedEvent_getNameResponse, error) {
	response := new(ICloudProfileChangedEvent_getNameResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ICloudProfileChangedEvent_getName(request *ICloudProfileChangedEvent_getName) (*ICloudProfileChangedEvent_getNameResponse, error) {
	return service.ICloudProfileChangedEvent_getNameContext(
		context.Background(),
		request,
	)
}

func (service *vboxPortType) ILanguageChangedEvent_getLanguageIdContext(ctx context.Context, request *ILanguageChangedEvent_getLanguageId) (*ILanguageChangedEvent_getLanguageIdResponse, error) {
	response := new(ILanguageChangedEvent_getLanguageIdResponse)
	err := service.client.CallContext(ctx, "''", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *vboxPortType) ILanguageChangedEvent_getLanguageId(request *ILanguageChangedEvent_getLanguageId) (*ILanguageChangedEvent_getLanguageIdResponse, error) {
	return service.ILanguageChangedEvent_getLanguageIdContext(
		context.Background(),
		request,
	)
}
